
weightlogger_master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000158  00800100  0000453e  000045d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000453e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001c8  00800258  00800258  0000472a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000472a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004788  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000c40  00000000  00000000  000047c8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001e916  00000000  00000000  00005408  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004efc  00000000  00000000  00023d1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00007470  00000000  00000000  00028c1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002a40  00000000  00000000  0003008c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00006273  00000000  00000000  00032acc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000eecb  00000000  00000000  00038d3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000c00  00000000  00000000  00047c0a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__ctors_end>
       4:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
       8:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
       c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      10:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      14:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      18:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      1c:	0c 94 21 0f 	jmp	0x1e42	; 0x1e42 <__vector_7>
      20:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      24:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      28:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      2c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      30:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      34:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      38:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      3c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      40:	0c 94 7d 0f 	jmp	0x1efa	; 0x1efa <__vector_16>
      44:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      48:	0c 94 17 0b 	jmp	0x162e	; 0x162e <__vector_18>
      4c:	0c 94 49 0b 	jmp	0x1692	; 0x1692 <__vector_19>
      50:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      54:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      58:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      5c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      60:	0c 94 74 1d 	jmp	0x3ae8	; 0x3ae8 <__vector_24>
      64:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      68:	e2 18       	sub	r14, r2
      6a:	f9 18       	sub	r15, r9
      6c:	f9 18       	sub	r15, r9
      6e:	f6 18       	sub	r15, r6
      70:	f9 18       	sub	r15, r9
      72:	e0 18       	sub	r14, r0
      74:	f9 18       	sub	r15, r9
      76:	f9 18       	sub	r15, r9
      78:	f9 18       	sub	r15, r9
      7a:	d4 18       	sub	r13, r4
      7c:	f9 18       	sub	r15, r9
      7e:	f9 18       	sub	r15, r9
      80:	e9 18       	sub	r14, r9
      82:	f4 18       	sub	r15, r4
      84:	f2 18       	sub	r15, r2
      86:	f9 18       	sub	r15, r9
      88:	f9 18       	sub	r15, r9
      8a:	f9 18       	sub	r15, r9
      8c:	f0 18       	sub	r15, r0

0000008e <__trampolines_end>:
      8e:	02 00       	Address 0x0000008e is out of bounds.
.word	0xffff	; ????

0000008f <digital_pin_to_timer_PGM>:
      8f:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
      9f:	00 00 00 00                                         ....

000000a3 <digital_pin_to_bit_mask_PGM>:
      a3:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      b3:	04 08 10 20                                         ... 

000000b7 <digital_pin_to_port_PGM>:
      b7:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      c7:	03 03 03 03                                         ....

000000cb <port_to_input_PGM>:
      cb:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000d5 <port_to_output_PGM>:
      d5:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000df <port_to_mode_PGM>:
      df:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000e9 <_ZL11daysInMonth>:
      e9:	1f 1c 1f 1e 1f 1e 1f 1f 1e 1f 1e 1f 00              .............

000000f6 <__ctors_start>:
      f6:	99 09       	sbc	r25, r9
      f8:	79 0b       	sbc	r23, r25
      fa:	71 1c       	adc	r7, r1

000000fc <__ctors_end>:
      fc:	11 24       	eor	r1, r1
      fe:	1f be       	out	0x3f, r1	; 63
     100:	cf ef       	ldi	r28, 0xFF	; 255
     102:	d8 e0       	ldi	r29, 0x08	; 8
     104:	de bf       	out	0x3e, r29	; 62
     106:	cd bf       	out	0x3d, r28	; 61

00000108 <__do_copy_data>:
     108:	12 e0       	ldi	r17, 0x02	; 2
     10a:	a0 e0       	ldi	r26, 0x00	; 0
     10c:	b1 e0       	ldi	r27, 0x01	; 1
     10e:	ee e3       	ldi	r30, 0x3E	; 62
     110:	f5 e4       	ldi	r31, 0x45	; 69
     112:	02 c0       	rjmp	.+4      	; 0x118 <__do_copy_data+0x10>
     114:	05 90       	lpm	r0, Z+
     116:	0d 92       	st	X+, r0
     118:	a8 35       	cpi	r26, 0x58	; 88
     11a:	b1 07       	cpc	r27, r17
     11c:	d9 f7       	brne	.-10     	; 0x114 <__do_copy_data+0xc>

0000011e <__do_clear_bss>:
     11e:	24 e0       	ldi	r18, 0x04	; 4
     120:	a8 e5       	ldi	r26, 0x58	; 88
     122:	b2 e0       	ldi	r27, 0x02	; 2
     124:	01 c0       	rjmp	.+2      	; 0x128 <.do_clear_bss_start>

00000126 <.do_clear_bss_loop>:
     126:	1d 92       	st	X+, r1

00000128 <.do_clear_bss_start>:
     128:	a0 32       	cpi	r26, 0x20	; 32
     12a:	b2 07       	cpc	r27, r18
     12c:	e1 f7       	brne	.-8      	; 0x126 <.do_clear_bss_loop>

0000012e <__do_global_ctors>:
     12e:	10 e0       	ldi	r17, 0x00	; 0
     130:	ce e7       	ldi	r28, 0x7E	; 126
     132:	d0 e0       	ldi	r29, 0x00	; 0
     134:	04 c0       	rjmp	.+8      	; 0x13e <__do_global_ctors+0x10>
     136:	21 97       	sbiw	r28, 0x01	; 1
     138:	fe 01       	movw	r30, r28
     13a:	0e 94 ee 1e 	call	0x3ddc	; 0x3ddc <__tablejump2__>
     13e:	cb 37       	cpi	r28, 0x7B	; 123
     140:	d1 07       	cpc	r29, r17
     142:	c9 f7       	brne	.-14     	; 0x136 <__do_global_ctors+0x8>
     144:	0e 94 a7 0b 	call	0x174e	; 0x174e <main>
     148:	0c 94 9d 22 	jmp	0x453a	; 0x453a <_exit>

0000014c <__bad_interrupt>:
     14c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000150 <_Z12compare_cardPcS_>:

/**
 * this function compares a card with the readed bytes,
 * if they match it returns true
 */
bool compare_card(char *card_one, char *card_two) {
     150:	fb 01       	movw	r30, r22
     152:	9c 01       	movw	r18, r24
     154:	2c 5f       	subi	r18, 0xFC	; 252
     156:	3f 4f       	sbci	r19, 0xFF	; 255
    Serial.print("#");
    Serial.print(card_one[i], HEX);
    Serial.print("-");
    Serial.println(card_two[i], HEX);
#endif
    if (card_one[i] != card_two[i]) {
     158:	dc 01       	movw	r26, r24
     15a:	5d 91       	ld	r21, X+
     15c:	cd 01       	movw	r24, r26
     15e:	41 91       	ld	r20, Z+
     160:	54 13       	cpse	r21, r20
     162:	05 c0       	rjmp	.+10     	; 0x16e <_Z12compare_cardPcS_+0x1e>
 * this function compares a card with the readed bytes,
 * if they match it returns true
 */
bool compare_card(char *card_one, char *card_two) {
  char i;
  for (i = 0; i < CARD_UID_SIZE; i++) {
     164:	a2 17       	cp	r26, r18
     166:	b3 07       	cpc	r27, r19
     168:	b9 f7       	brne	.-18     	; 0x158 <_Z12compare_cardPcS_+0x8>
#endif
    if (card_one[i] != card_two[i]) {
      return false;
    }
  }
  return true;
     16a:	81 e0       	ldi	r24, 0x01	; 1
     16c:	08 95       	ret
    Serial.print(card_one[i], HEX);
    Serial.print("-");
    Serial.println(card_two[i], HEX);
#endif
    if (card_one[i] != card_two[i]) {
      return false;
     16e:	80 e0       	ldi	r24, 0x00	; 0
    }
  }
  return true;
}
     170:	08 95       	ret

00000172 <_Z13is_known_cardPc>:

/**
 * this function checks if a card id sent is known by the device, if so, 
 * it returns the card_number value, it returns 0 for unknown cards
 */
char is_known_card(char *card_id) {
     172:	5f 92       	push	r5
     174:	6f 92       	push	r6
     176:	7f 92       	push	r7
     178:	8f 92       	push	r8
     17a:	9f 92       	push	r9
     17c:	af 92       	push	r10
     17e:	bf 92       	push	r11
     180:	cf 92       	push	r12
     182:	df 92       	push	r13
     184:	ef 92       	push	r14
     186:	ff 92       	push	r15
     188:	0f 93       	push	r16
     18a:	1f 93       	push	r17
     18c:	cf 93       	push	r28
     18e:	df 93       	push	r29
     190:	00 d0       	rcall	.+0      	; 0x192 <_Z13is_known_cardPc+0x20>
     192:	00 d0       	rcall	.+0      	; 0x194 <_Z13is_known_cardPc+0x22>
     194:	1f 92       	push	r1
     196:	cd b7       	in	r28, 0x3d	; 61
     198:	de b7       	in	r29, 0x3e	; 62
     19a:	5c 01       	movw	r10, r24
  struct card_block card;
  bool finish = false;
  int pos = 0;
  char ret_val = 0;
     19c:	51 2c       	mov	r5, r1
 * it returns the card_number value, it returns 0 for unknown cards
 */
char is_known_card(char *card_id) {
  struct card_block card;
  bool finish = false;
  int pos = 0;
     19e:	00 e0       	ldi	r16, 0x00	; 0
     1a0:	10 e0       	ldi	r17, 0x00	; 0
     1a2:	ce 01       	movw	r24, r28
     1a4:	01 96       	adiw	r24, 0x01	; 1
     1a6:	6c 01       	movw	r12, r24
     1a8:	3e 01       	movw	r6, r28
     1aa:	96 e0       	ldi	r25, 0x06	; 6
     1ac:	69 0e       	add	r6, r25
     1ae:	71 1c       	adc	r7, r1
     1b0:	76 01       	movw	r14, r12

    EERef( const int index )
        : index( index )                 {}
    
    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
     1b2:	48 01       	movw	r8, r16
     1b4:	8c 18       	sub	r8, r12
     1b6:	9d 08       	sbc	r9, r13
     1b8:	c4 01       	movw	r24, r8
     1ba:	8e 0d       	add	r24, r14
     1bc:	9f 1d       	adc	r25, r15
     1be:	0e 94 50 22 	call	0x44a0	; 0x44a0 <eeprom_read_byte>
template <class T> int EEPROM_readBlock(int ee, T& value)
{
    char* p = (char*)(void*)&value;
    unsigned int i;
    for (i = 0; i < sizeof(value); i++)
          *p++ = EEPROM.read(ee++);
     1c2:	f7 01       	movw	r30, r14
     1c4:	81 93       	st	Z+, r24
     1c6:	7f 01       	movw	r14, r30

template <class T> int EEPROM_readBlock(int ee, T& value)
{
    char* p = (char*)(void*)&value;
    unsigned int i;
    for (i = 0; i < sizeof(value); i++)
     1c8:	e6 15       	cp	r30, r6
     1ca:	f7 05       	cpc	r31, r7
     1cc:	a9 f7       	brne	.-22     	; 0x1b8 <_Z13is_known_cardPc+0x46>
  char ret_val = 0;
  while(!finish) {
    EEPROM_readBlock(pos, card);
    if (compare_card(card_id, card.card_uid)) {
     1ce:	b6 01       	movw	r22, r12
     1d0:	c5 01       	movw	r24, r10
     1d2:	0e 94 a8 00 	call	0x150	; 0x150 <_Z12compare_cardPcS_>
     1d6:	88 23       	and	r24, r24
     1d8:	19 f0       	breq	.+6      	; 0x1e0 <_Z13is_known_cardPc+0x6e>
      finish = true;
      ret_val = card.card_number;
     1da:	5d 80       	ldd	r5, Y+5	; 0x05
  int pos = 0;
  char ret_val = 0;
  while(!finish) {
    EEPROM_readBlock(pos, card);
    if (compare_card(card_id, card.card_uid)) {
      finish = true;
     1dc:	81 e0       	ldi	r24, 0x01	; 1
     1de:	01 c0       	rjmp	.+2      	; 0x1e2 <_Z13is_known_cardPc+0x70>
     1e0:	80 e0       	ldi	r24, 0x00	; 0
      ret_val = card.card_number;
    }
    if (pos > MAX_EEPROM_POSITION && finish == false) {
     1e2:	09 3e       	cpi	r16, 0xE9	; 233
     1e4:	f3 e0       	ldi	r31, 0x03	; 3
     1e6:	1f 07       	cpc	r17, r31
     1e8:	20 f0       	brcs	.+8      	; 0x1f2 <_Z13is_known_cardPc+0x80>
     1ea:	81 11       	cpse	r24, r1
     1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <_Z13is_known_cardPc+0x80>
      finish = true;
      ret_val = 0;
     1ee:	51 2c       	mov	r5, r1
    if (compare_card(card_id, card.card_uid)) {
      finish = true;
      ret_val = card.card_number;
    }
    if (pos > MAX_EEPROM_POSITION && finish == false) {
      finish = true;
     1f0:	81 e0       	ldi	r24, 0x01	; 1
     1f2:	0b 5f       	subi	r16, 0xFB	; 251
     1f4:	1f 4f       	sbci	r17, 0xFF	; 255
char is_known_card(char *card_id) {
  struct card_block card;
  bool finish = false;
  int pos = 0;
  char ret_val = 0;
  while(!finish) {
     1f6:	88 23       	and	r24, r24
     1f8:	d9 f2       	breq	.-74     	; 0x1b0 <_Z13is_known_cardPc+0x3e>
      ret_val = 0;
    }
    pos += sizeof(card);
  }
  return ret_val;
}
     1fa:	85 2d       	mov	r24, r5
     1fc:	0f 90       	pop	r0
     1fe:	0f 90       	pop	r0
     200:	0f 90       	pop	r0
     202:	0f 90       	pop	r0
     204:	0f 90       	pop	r0
     206:	df 91       	pop	r29
     208:	cf 91       	pop	r28
     20a:	1f 91       	pop	r17
     20c:	0f 91       	pop	r16
     20e:	ff 90       	pop	r15
     210:	ef 90       	pop	r14
     212:	df 90       	pop	r13
     214:	cf 90       	pop	r12
     216:	bf 90       	pop	r11
     218:	af 90       	pop	r10
     21a:	9f 90       	pop	r9
     21c:	8f 90       	pop	r8
     21e:	7f 90       	pop	r7
     220:	6f 90       	pop	r6
     222:	5f 90       	pop	r5
     224:	08 95       	ret

00000226 <_Z10store_card10card_blockc>:

/**
 * Stores the card uid and card_number at the position indicated
 * positions are from 0 to 199
 */
bool store_card(struct card_block card, char position) {
     226:	cf 92       	push	r12
     228:	df 92       	push	r13
     22a:	ef 92       	push	r14
     22c:	ff 92       	push	r15
     22e:	0f 93       	push	r16
     230:	1f 93       	push	r17
     232:	cf 93       	push	r28
     234:	df 93       	push	r29
     236:	00 d0       	rcall	.+0      	; 0x238 <_Z10store_card10card_blockc+0x12>
     238:	00 d0       	rcall	.+0      	; 0x23a <_Z10store_card10card_blockc+0x14>
     23a:	1f 92       	push	r1
     23c:	cd b7       	in	r28, 0x3d	; 61
     23e:	de b7       	in	r29, 0x3e	; 62
     240:	49 83       	std	Y+1, r20	; 0x01
     242:	5a 83       	std	Y+2, r21	; 0x02
     244:	6b 83       	std	Y+3, r22	; 0x03
     246:	7c 83       	std	Y+4, r23	; 0x04
     248:	8d 83       	std	Y+5, r24	; 0x05
  int pos = (5 * position);
  if ( position < 200) {  //if we are not full capacity
     24a:	28 3c       	cpi	r18, 0xC8	; 200
     24c:	d0 f4       	brcc	.+52     	; 0x282 <_Z10store_card10card_blockc+0x5c>
/**
 * Stores the card uid and card_number at the position indicated
 * positions are from 0 to 199
 */
bool store_card(struct card_block card, char position) {
  int pos = (5 * position);
     24e:	85 e0       	ldi	r24, 0x05	; 5
     250:	28 9f       	mul	r18, r24
     252:	80 01       	movw	r16, r0
     254:	11 24       	eor	r1, r1
     256:	fe 01       	movw	r30, r28
     258:	31 96       	adiw	r30, 0x01	; 1
     25a:	6f 01       	movw	r12, r30
     25c:	e1 2c       	mov	r14, r1
     25e:	f1 2c       	mov	r15, r1
template <class T> int EEPROM_writeBlock(int ee, const T& value)
{
    const char* p = (const char*)(const void*)&value;
    unsigned int i;
    for (i = 0; i < sizeof(value); i++)
          EEPROM.write(ee++, *p++);
     260:	f6 01       	movw	r30, r12
     262:	61 91       	ld	r22, Z+
     264:	6f 01       	movw	r12, r30
    operator uint8_t() const             { return **this; }
    
    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
     266:	c8 01       	movw	r24, r16
     268:	8e 0d       	add	r24, r14
     26a:	9f 1d       	adc	r25, r15
     26c:	0e 94 58 22 	call	0x44b0	; 0x44b0 <eeprom_write_byte>
#ifndef __EEWB_
template <class T> int EEPROM_writeBlock(int ee, const T& value)
{
    const char* p = (const char*)(const void*)&value;
    unsigned int i;
    for (i = 0; i < sizeof(value); i++)
     270:	ff ef       	ldi	r31, 0xFF	; 255
     272:	ef 1a       	sub	r14, r31
     274:	ff 0a       	sbc	r15, r31
     276:	85 e0       	ldi	r24, 0x05	; 5
     278:	e8 16       	cp	r14, r24
     27a:	f1 04       	cpc	r15, r1
     27c:	89 f7       	brne	.-30     	; 0x260 <_Z10store_card10card_blockc+0x3a>
  if ( position < 200) {  //if we are not full capacity
    EEPROM_writeBlock(pos, card); //store the card
  } else {
    return false;
  }
  return true;
     27e:	81 e0       	ldi	r24, 0x01	; 1
     280:	01 c0       	rjmp	.+2      	; 0x284 <_Z10store_card10card_blockc+0x5e>
bool store_card(struct card_block card, char position) {
  int pos = (5 * position);
  if ( position < 200) {  //if we are not full capacity
    EEPROM_writeBlock(pos, card); //store the card
  } else {
    return false;
     282:	80 e0       	ldi	r24, 0x00	; 0
  }
  return true;
}
     284:	0f 90       	pop	r0
     286:	0f 90       	pop	r0
     288:	0f 90       	pop	r0
     28a:	0f 90       	pop	r0
     28c:	0f 90       	pop	r0
     28e:	df 91       	pop	r29
     290:	cf 91       	pop	r28
     292:	1f 91       	pop	r17
     294:	0f 91       	pop	r16
     296:	ff 90       	pop	r15
     298:	ef 90       	pop	r14
     29a:	df 90       	pop	r13
     29c:	cf 90       	pop	r12
     29e:	08 95       	ret

000002a0 <_Z10erase_cardc>:

/**
 * Erases the data for a card_block in EEPROM
 * @params pos with the position to erase
 */
void erase_card(char pos) {
     2a0:	0f 93       	push	r16
     2a2:	1f 93       	push	r17
     2a4:	cf 93       	push	r28
     2a6:	df 93       	push	r29
  if (pos > 200) //always inside the position limit.
     2a8:	89 3c       	cpi	r24, 0xC9	; 201
     2aa:	a8 f4       	brcc	.+42     	; 0x2d6 <_Z10erase_cardc+0x36>
    return;
  int ppos = (pos * sizeof(struct card_block));
     2ac:	95 e0       	ldi	r25, 0x05	; 5
     2ae:	89 9f       	mul	r24, r25
     2b0:	e0 01       	movw	r28, r0
     2b2:	11 24       	eor	r1, r1
     2b4:	8e 01       	movw	r16, r28
     2b6:	0b 5f       	subi	r16, 0xFB	; 251
     2b8:	1f 4f       	sbci	r17, 0xFF	; 255
     2ba:	6f ef       	ldi	r22, 0xFF	; 255
     2bc:	ce 01       	movw	r24, r28
     2be:	0e 94 58 22 	call	0x44b0	; 0x44b0 <eeprom_write_byte>
  for (char i=0; i<sizeof(struct card_block); i++) {
    EEPROM.write(ppos+i, 0xff);
    delay(5); // 5mS between byte writes, to allow the data to be written
     2c2:	65 e0       	ldi	r22, 0x05	; 5
     2c4:	70 e0       	ldi	r23, 0x00	; 0
     2c6:	80 e0       	ldi	r24, 0x00	; 0
     2c8:	90 e0       	ldi	r25, 0x00	; 0
     2ca:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <delay>
     2ce:	21 96       	adiw	r28, 0x01	; 1
 */
void erase_card(char pos) {
  if (pos > 200) //always inside the position limit.
    return;
  int ppos = (pos * sizeof(struct card_block));
  for (char i=0; i<sizeof(struct card_block); i++) {
     2d0:	c0 17       	cp	r28, r16
     2d2:	d1 07       	cpc	r29, r17
     2d4:	91 f7       	brne	.-28     	; 0x2ba <_Z10erase_cardc+0x1a>
    EEPROM.write(ppos+i, 0xff);
    delay(5); // 5mS between byte writes, to allow the data to be written
  }
     2d6:	df 91       	pop	r29
     2d8:	cf 91       	pop	r28
     2da:	1f 91       	pop	r17
     2dc:	0f 91       	pop	r16
     2de:	08 95       	ret

000002e0 <_Z24hex_string_to_byte_arrayPcS_cc>:
void hex_string_to_byte_array(char *src, char *out_array, char start, char end) {
     2e0:	cf 93       	push	r28
     2e2:	df 93       	push	r29
     2e4:	ec 01       	movw	r28, r24
  char pos = 0;
     2e6:	30 e0       	ldi	r19, 0x00	; 0
  char tmp;
  for (char c = start; c < end; c += 2) {
     2e8:	42 17       	cp	r20, r18
     2ea:	d0 f4       	brcc	.+52     	; 0x320 <_Z24hex_string_to_byte_arrayPcS_cc+0x40>
    tmp = src[c] > 0x39 ? ((src[c] - 'A') + 10) * 16 : (src[c] - '0') * 16;
     2ec:	de 01       	movw	r26, r28
     2ee:	a4 0f       	add	r26, r20
     2f0:	b1 1d       	adc	r27, r1
     2f2:	9c 91       	ld	r25, X
     2f4:	e9 2f       	mov	r30, r25
     2f6:	f0 e0       	ldi	r31, 0x00	; 0
     2f8:	9a 33       	cpi	r25, 0x3A	; 58
     2fa:	08 f0       	brcs	.+2      	; 0x2fe <_Z24hex_string_to_byte_arrayPcS_cc+0x1e>
     2fc:	f7 97       	sbiw	r30, 0x37	; 55
     2fe:	e2 95       	swap	r30
     300:	e0 7f       	andi	r30, 0xF0	; 240
    tmp += src[c+1] > 0x39 ? ((src[c+1] - 'A') + 10) : (src[c+1] - '0');
     302:	11 96       	adiw	r26, 0x01	; 1
     304:	9c 91       	ld	r25, X
     306:	9a 33       	cpi	r25, 0x3A	; 58
     308:	10 f0       	brcs	.+4      	; 0x30e <_Z24hex_string_to_byte_arrayPcS_cc+0x2e>
     30a:	97 53       	subi	r25, 0x37	; 55
     30c:	01 c0       	rjmp	.+2      	; 0x310 <_Z24hex_string_to_byte_arrayPcS_cc+0x30>
     30e:	90 53       	subi	r25, 0x30	; 48
    out_array[pos] = tmp;
     310:	db 01       	movw	r26, r22
     312:	a3 0f       	add	r26, r19
     314:	b1 1d       	adc	r27, r1
     316:	9e 0f       	add	r25, r30
     318:	9c 93       	st	X, r25
    pos ++;
     31a:	3f 5f       	subi	r19, 0xFF	; 255
void hex_string_to_byte_array(char *src, char *out_array, char start, char end) {
  char pos = 0;
  char tmp;
  for (char c = start; c < end; c += 2) {
     31c:	4e 5f       	subi	r20, 0xFE	; 254
     31e:	e4 cf       	rjmp	.-56     	; 0x2e8 <_Z24hex_string_to_byte_arrayPcS_cc+0x8>
    tmp = src[c] > 0x39 ? ((src[c] - 'A') + 10) * 16 : (src[c] - '0') * 16;
    tmp += src[c+1] > 0x39 ? ((src[c+1] - 'A') + 10) : (src[c+1] - '0');
    out_array[pos] = tmp;
    pos ++;
  }
}
     320:	df 91       	pop	r29
     322:	cf 91       	pop	r28
     324:	08 95       	ret

00000326 <_ZN15ElcanLCDManagerC1Eccc>:
﻿#include "elcan_lcd.h"
#include <Arduino.h>
ElcanLCDManager::ElcanLCDManager(char addr, char cols, char rows) {
     326:	df 92       	push	r13
     328:	ef 92       	push	r14
     32a:	ff 92       	push	r15
     32c:	0f 93       	push	r16
     32e:	1f 93       	push	r17
     330:	cf 93       	push	r28
     332:	df 93       	push	r29
     334:	cd b7       	in	r28, 0x3d	; 61
     336:	de b7       	in	r29, 0x3e	; 62
     338:	2c 97       	sbiw	r28, 0x0c	; 12
     33a:	0f b6       	in	r0, 0x3f	; 63
     33c:	f8 94       	cli
     33e:	de bf       	out	0x3e, r29	; 62
     340:	0f be       	out	0x3f, r0	; 63
     342:	cd bf       	out	0x3d, r28	; 61
     344:	8c 01       	movw	r16, r24
     346:	f6 2e       	mov	r15, r22
     348:	e4 2e       	mov	r14, r20
     34a:	d2 2e       	mov	r13, r18
     34c:	0e 94 37 11 	call	0x226e	; 0x226e <_ZN17LiquidCrystal_I2CC1Ev>
  this->lcd = LiquidCrystal_I2C();  // set the LCD address to 0x27 for a 16 chars and 2 line display
     350:	ce 01       	movw	r24, r28
     352:	01 96       	adiw	r24, 0x01	; 1
     354:	0e 94 37 11 	call	0x226e	; 0x226e <_ZN17LiquidCrystal_I2CC1Ev>
#ifdef BIN // Prevent warnings if BIN is previously defined in "iotnx4.h" or similar
#undef BIN
#endif
#define BIN 2

class Print
     358:	8b 81       	ldd	r24, Y+3	; 0x03
     35a:	9c 81       	ldd	r25, Y+4	; 0x04
     35c:	f8 01       	movw	r30, r16
     35e:	93 83       	std	Z+3, r25	; 0x03
     360:	82 83       	std	Z+2, r24	; 0x02

#define En B00000100  // Enable bit
#define Rw B00000010  // Read/Write bit
#define Rs B00000001  // Register select bit

class LiquidCrystal_I2C : public Print {
     362:	8d 81       	ldd	r24, Y+5	; 0x05
     364:	84 83       	std	Z+4, r24	; 0x04
     366:	8e 81       	ldd	r24, Y+6	; 0x06
     368:	85 83       	std	Z+5, r24	; 0x05
     36a:	8f 81       	ldd	r24, Y+7	; 0x07
     36c:	86 83       	std	Z+6, r24	; 0x06
     36e:	88 85       	ldd	r24, Y+8	; 0x08
     370:	87 83       	std	Z+7, r24	; 0x07
     372:	89 85       	ldd	r24, Y+9	; 0x09
     374:	80 87       	std	Z+8, r24	; 0x08
     376:	8a 85       	ldd	r24, Y+10	; 0x0a
     378:	81 87       	std	Z+9, r24	; 0x09
     37a:	8b 85       	ldd	r24, Y+11	; 0x0b
     37c:	82 87       	std	Z+10, r24	; 0x0a
     37e:	8c 85       	ldd	r24, Y+12	; 0x0c
     380:	83 87       	std	Z+11, r24	; 0x0b
  this->lcd.init(addr, cols, rows);
     382:	2d 2d       	mov	r18, r13
     384:	4e 2d       	mov	r20, r14
     386:	6f 2d       	mov	r22, r15
     388:	c8 01       	movw	r24, r16
     38a:	0e 94 50 12 	call	0x24a0	; 0x24a0 <_ZN17LiquidCrystal_I2C4initEhhh>
}
     38e:	2c 96       	adiw	r28, 0x0c	; 12
     390:	0f b6       	in	r0, 0x3f	; 63
     392:	f8 94       	cli
     394:	de bf       	out	0x3e, r29	; 62
     396:	0f be       	out	0x3f, r0	; 63
     398:	cd bf       	out	0x3d, r28	; 61
     39a:	df 91       	pop	r29
     39c:	cf 91       	pop	r28
     39e:	1f 91       	pop	r17
     3a0:	0f 91       	pop	r16
     3a2:	ff 90       	pop	r15
     3a4:	ef 90       	pop	r14
     3a6:	df 90       	pop	r13
     3a8:	08 95       	ret

000003aa <_ZN15ElcanLCDManager5beginEcc>:

void ElcanLCDManager::begin(char cols, char rows) {
  this->lcd.begin(cols, rows);
     3aa:	20 e0       	ldi	r18, 0x00	; 0
     3ac:	0c 94 ec 11 	jmp	0x23d8	; 0x23d8 <_ZN17LiquidCrystal_I2C5beginEhhh>

000003b0 <_ZN15ElcanLCDManager10show_errorEc>:
}

void ElcanLCDManager::show_error(char error_code) {
     3b0:	1f 93       	push	r17
     3b2:	cf 93       	push	r28
     3b4:	df 93       	push	r29
     3b6:	ec 01       	movw	r28, r24
     3b8:	16 2f       	mov	r17, r22
	char blinks;
	this->lcd.clear();
     3ba:	0e 94 a2 11 	call	0x2344	; 0x2344 <_ZN17LiquidCrystal_I2C5clearEv>
	switch(error_code) {
     3be:	14 30       	cpi	r17, 0x04	; 4
     3c0:	29 f0       	breq	.+10     	; 0x3cc <_ZN15ElcanLCDManager10show_errorEc+0x1c>
     3c2:	15 30       	cpi	r17, 0x05	; 5
     3c4:	51 f0       	breq	.+20     	; 0x3da <_ZN15ElcanLCDManager10show_errorEc+0x2a>
     3c6:	12 30       	cpi	r17, 0x02	; 2
     3c8:	a1 f4       	brne	.+40     	; 0x3f2 <_ZN15ElcanLCDManager10show_errorEc+0x42>
     3ca:	0c c0       	rjmp	.+24     	; 0x3e4 <_ZN15ElcanLCDManager10show_errorEc+0x34>
		case ERROR_RFID:
		blinks = 2;
		this->lcd.print(FS("Error 502"));
     3cc:	69 e0       	ldi	r22, 0x09	; 9
     3ce:	71 e0       	ldi	r23, 0x01	; 1
     3d0:	ce 01       	movw	r24, r28
     3d2:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <_ZN5Print5printEPK19__FlashStringHelper>
void ElcanLCDManager::show_error(char error_code) {
	char blinks;
	this->lcd.clear();
	switch(error_code) {
		case ERROR_RFID:
		blinks = 2;
     3d6:	d2 e0       	ldi	r29, 0x02	; 2
		this->lcd.print(FS("Error 502"));
		break;
     3d8:	21 c0       	rjmp	.+66     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
		case ERROR_RTC:
		blinks = 3;
		this->lcd.print(FS("Error 501"));
     3da:	63 e1       	ldi	r22, 0x13	; 19
     3dc:	71 e0       	ldi	r23, 0x01	; 1
     3de:	ce 01       	movw	r24, r28
     3e0:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <_ZN5Print5printEPK19__FlashStringHelper>
		case ERROR_WIFI:
		blinks = 4;
		this->lcd.print(FS("Error 503"));
     3e4:	6d e1       	ldi	r22, 0x1D	; 29
     3e6:	71 e0       	ldi	r23, 0x01	; 1
     3e8:	ce 01       	movw	r24, r28
     3ea:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <_ZN5Print5printEPK19__FlashStringHelper>
		break;
		case ERROR_RTC:
		blinks = 3;
		this->lcd.print(FS("Error 501"));
		case ERROR_WIFI:
		blinks = 4;
     3ee:	d4 e0       	ldi	r29, 0x04	; 4
		this->lcd.print(FS("Error 503"));
		break;
     3f0:	15 c0       	rjmp	.+42     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
		default:
		this->lcd.print(FS("Error 500"));
     3f2:	67 e2       	ldi	r22, 0x27	; 39
     3f4:	71 e0       	ldi	r23, 0x01	; 1
     3f6:	ce 01       	movw	r24, r28
     3f8:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <_ZN5Print5printEPK19__FlashStringHelper>
		blinks = 1;
		break;
	}
	for (char i=0; i < blinks; i++) {
		tone(BUZZER, 1400, 300);
     3fc:	2c e2       	ldi	r18, 0x2C	; 44
     3fe:	31 e0       	ldi	r19, 0x01	; 1
     400:	40 e0       	ldi	r20, 0x00	; 0
     402:	50 e0       	ldi	r21, 0x00	; 0
     404:	68 e7       	ldi	r22, 0x78	; 120
     406:	75 e0       	ldi	r23, 0x05	; 5
     408:	83 e0       	ldi	r24, 0x03	; 3
     40a:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <_Z4tonehjm>
		delay(200);
     40e:	68 ec       	ldi	r22, 0xC8	; 200
     410:	70 e0       	ldi	r23, 0x00	; 0
     412:	80 e0       	ldi	r24, 0x00	; 0
     414:	90 e0       	ldi	r25, 0x00	; 0
     416:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <delay>
     41a:	13 c0       	rjmp	.+38     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
		default:
		this->lcd.print(FS("Error 500"));
		blinks = 1;
		break;
	}
	for (char i=0; i < blinks; i++) {
     41c:	c0 e0       	ldi	r28, 0x00	; 0
		tone(BUZZER, 1400, 300);
     41e:	2c e2       	ldi	r18, 0x2C	; 44
     420:	31 e0       	ldi	r19, 0x01	; 1
     422:	40 e0       	ldi	r20, 0x00	; 0
     424:	50 e0       	ldi	r21, 0x00	; 0
     426:	68 e7       	ldi	r22, 0x78	; 120
     428:	75 e0       	ldi	r23, 0x05	; 5
     42a:	83 e0       	ldi	r24, 0x03	; 3
     42c:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <_Z4tonehjm>
		delay(200);
     430:	68 ec       	ldi	r22, 0xC8	; 200
     432:	70 e0       	ldi	r23, 0x00	; 0
     434:	80 e0       	ldi	r24, 0x00	; 0
     436:	90 e0       	ldi	r25, 0x00	; 0
     438:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <delay>
		default:
		this->lcd.print(FS("Error 500"));
		blinks = 1;
		break;
	}
	for (char i=0; i < blinks; i++) {
     43c:	cf 5f       	subi	r28, 0xFF	; 255
     43e:	dc 13       	cpse	r29, r28
     440:	ee cf       	rjmp	.-36     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
		tone(BUZZER, 1400, 300);
		delay(200);
	}
	delay(500); //wait 1/2 second between displays at least;
     442:	64 ef       	ldi	r22, 0xF4	; 244
     444:	71 e0       	ldi	r23, 0x01	; 1
     446:	80 e0       	ldi	r24, 0x00	; 0
     448:	90 e0       	ldi	r25, 0x00	; 0
}
     44a:	df 91       	pop	r29
     44c:	cf 91       	pop	r28
     44e:	1f 91       	pop	r17
	}
	for (char i=0; i < blinks; i++) {
		tone(BUZZER, 1400, 300);
		delay(200);
	}
	delay(500); //wait 1/2 second between displays at least;
     450:	0c 94 f8 0f 	jmp	0x1ff0	; 0x1ff0 <delay>

00000454 <_ZN15ElcanLCDManager10show_readyEPc>:
	this->show_message(text);
	delay(2500); //2 1/2 seconds delay to read the ip
	this->lcd.clear();
}

void ElcanLCDManager::show_ready(char *dateString) {
     454:	0f 93       	push	r16
     456:	1f 93       	push	r17
     458:	cf 93       	push	r28
     45a:	df 93       	push	r29
     45c:	ec 01       	movw	r28, r24
     45e:	8b 01       	movw	r16, r22
	this->lcd.setCursor(0,0);
     460:	40 e0       	ldi	r20, 0x00	; 0
     462:	60 e0       	ldi	r22, 0x00	; 0
     464:	0e 94 b0 11 	call	0x2360	; 0x2360 <_ZN17LiquidCrystal_I2C9setCursorEhh>
	this->lcd.print(dateString);
     468:	b8 01       	movw	r22, r16
     46a:	ce 01       	movw	r24, r28
     46c:	0e 94 04 0c 	call	0x1808	; 0x1808 <_ZN5Print5printEPKc>
	this->lcd.setCursor(0,1);
     470:	41 e0       	ldi	r20, 0x01	; 1
     472:	60 e0       	ldi	r22, 0x00	; 0
     474:	ce 01       	movw	r24, r28
     476:	0e 94 b0 11 	call	0x2360	; 0x2360 <_ZN17LiquidCrystal_I2C9setCursorEhh>
	this->lcd.print(FS("Esperando..."));
     47a:	61 e3       	ldi	r22, 0x31	; 49
     47c:	71 e0       	ldi	r23, 0x01	; 1
     47e:	ce 01       	movw	r24, r28
}
     480:	df 91       	pop	r29
     482:	cf 91       	pop	r28
     484:	1f 91       	pop	r17
     486:	0f 91       	pop	r16

void ElcanLCDManager::show_ready(char *dateString) {
	this->lcd.setCursor(0,0);
	this->lcd.print(dateString);
	this->lcd.setCursor(0,1);
	this->lcd.print(FS("Esperando..."));
     488:	0c 94 e0 0b 	jmp	0x17c0	; 0x17c0 <_ZN5Print5printEPK19__FlashStringHelper>

0000048c <_ZN15ElcanLCDManager12show_messageEPc>:
}

void ElcanLCDManager::show_message(char *msg) {
     48c:	af 92       	push	r10
     48e:	bf 92       	push	r11
     490:	cf 92       	push	r12
     492:	df 92       	push	r13
     494:	ef 92       	push	r14
     496:	ff 92       	push	r15
     498:	0f 93       	push	r16
     49a:	1f 93       	push	r17
     49c:	cf 93       	push	r28
     49e:	df 93       	push	r29
     4a0:	cd b7       	in	r28, 0x3d	; 61
     4a2:	de b7       	in	r29, 0x3e	; 62
     4a4:	61 97       	sbiw	r28, 0x11	; 17
     4a6:	0f b6       	in	r0, 0x3f	; 63
     4a8:	f8 94       	cli
     4aa:	de bf       	out	0x3e, r29	; 62
     4ac:	0f be       	out	0x3f, r0	; 63
     4ae:	cd bf       	out	0x3d, r28	; 61
     4b0:	8c 01       	movw	r16, r24
     4b2:	6b 01       	movw	r12, r22
	char tmp[17];
	char len;
	lcd.clear();
     4b4:	0e 94 a2 11 	call	0x2344	; 0x2344 <_ZN17LiquidCrystal_I2C5clearEv>
	lcd.backlight();
     4b8:	c8 01       	movw	r24, r16
     4ba:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <_ZN17LiquidCrystal_I2C9backlightEv>
	this->backlightStart = millis();
     4be:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <millis>
     4c2:	f8 01       	movw	r30, r16
     4c4:	64 87       	std	Z+12, r22	; 0x0c
     4c6:	75 87       	std	Z+13, r23	; 0x0d
     4c8:	86 87       	std	Z+14, r24	; 0x0e
     4ca:	97 87       	std	Z+15, r25	; 0x0f
	len = strlen(msg);
     4cc:	f6 01       	movw	r30, r12
     4ce:	01 90       	ld	r0, Z+
     4d0:	00 20       	and	r0, r0
     4d2:	e9 f7       	brne	.-6      	; 0x4ce <_ZN15ElcanLCDManager12show_messageEPc+0x42>
     4d4:	31 97       	sbiw	r30, 0x01	; 1
     4d6:	7f 01       	movw	r14, r30
     4d8:	ec 18       	sub	r14, r12
     4da:	fd 08       	sbc	r15, r13
	if (len > 16) {
     4dc:	f0 e1       	ldi	r31, 0x10	; 16
     4de:	fe 15       	cp	r31, r14
     4e0:	40 f5       	brcc	.+80     	; 0x532 <_ZN15ElcanLCDManager12show_messageEPc+0xa6>
		this->lcd.setCursor(0,0);
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	60 e0       	ldi	r22, 0x00	; 0
     4e6:	c8 01       	movw	r24, r16
     4e8:	0e 94 b0 11 	call	0x2360	; 0x2360 <_ZN17LiquidCrystal_I2C9setCursorEhh>
		substring(msg, tmp, 0, 15);
     4ec:	2f e0       	ldi	r18, 0x0F	; 15
     4ee:	30 e0       	ldi	r19, 0x00	; 0
     4f0:	40 e0       	ldi	r20, 0x00	; 0
     4f2:	50 e0       	ldi	r21, 0x00	; 0
     4f4:	ce 01       	movw	r24, r28
     4f6:	01 96       	adiw	r24, 0x01	; 1
     4f8:	5c 01       	movw	r10, r24
     4fa:	bc 01       	movw	r22, r24
     4fc:	c6 01       	movw	r24, r12
     4fe:	0e 94 ba 09 	call	0x1374	; 0x1374 <_Z9substringPcS_ii>
		this->lcd.print(tmp);
     502:	b5 01       	movw	r22, r10
     504:	c8 01       	movw	r24, r16
     506:	0e 94 04 0c 	call	0x1808	; 0x1808 <_ZN5Print5printEPKc>
		memset(tmp, 0, sizeof(tmp));
     50a:	81 e1       	ldi	r24, 0x11	; 17
     50c:	f5 01       	movw	r30, r10
     50e:	11 92       	st	Z+, r1
     510:	8a 95       	dec	r24
     512:	e9 f7       	brne	.-6      	; 0x50e <_ZN15ElcanLCDManager12show_messageEPc+0x82>
		this->lcd.setCursor(0,1);
     514:	41 e0       	ldi	r20, 0x01	; 1
     516:	60 e0       	ldi	r22, 0x00	; 0
     518:	c8 01       	movw	r24, r16
     51a:	0e 94 b0 11 	call	0x2360	; 0x2360 <_ZN17LiquidCrystal_I2C9setCursorEhh>
		substring(msg, tmp, 16, len);
     51e:	97 01       	movw	r18, r14
     520:	33 27       	eor	r19, r19
     522:	40 e1       	ldi	r20, 0x10	; 16
     524:	50 e0       	ldi	r21, 0x00	; 0
     526:	b5 01       	movw	r22, r10
     528:	c6 01       	movw	r24, r12
     52a:	0e 94 ba 09 	call	0x1374	; 0x1374 <_Z9substringPcS_ii>
		this->lcd.print(tmp);
     52e:	b5 01       	movw	r22, r10
     530:	01 c0       	rjmp	.+2      	; 0x534 <_ZN15ElcanLCDManager12show_messageEPc+0xa8>
	} else {
		this->lcd.print(msg);
     532:	b6 01       	movw	r22, r12
     534:	c8 01       	movw	r24, r16
     536:	0e 94 04 0c 	call	0x1808	; 0x1808 <_ZN5Print5printEPKc>
	}
}
     53a:	61 96       	adiw	r28, 0x11	; 17
     53c:	0f b6       	in	r0, 0x3f	; 63
     53e:	f8 94       	cli
     540:	de bf       	out	0x3e, r29	; 62
     542:	0f be       	out	0x3f, r0	; 63
     544:	cd bf       	out	0x3d, r28	; 61
     546:	df 91       	pop	r29
     548:	cf 91       	pop	r28
     54a:	1f 91       	pop	r17
     54c:	0f 91       	pop	r16
     54e:	ff 90       	pop	r15
     550:	ef 90       	pop	r14
     552:	df 90       	pop	r13
     554:	cf 90       	pop	r12
     556:	bf 90       	pop	r11
     558:	af 90       	pop	r10
     55a:	08 95       	ret

0000055c <_ZN15ElcanLCDManager7show_ipEPc>:
		delay(200);
	}
	delay(500); //wait 1/2 second between displays at least;
}

void ElcanLCDManager::show_ip(char *ipaddr) {
     55c:	cf 92       	push	r12
     55e:	df 92       	push	r13
     560:	ef 92       	push	r14
     562:	ff 92       	push	r15
     564:	0f 93       	push	r16
     566:	1f 93       	push	r17
     568:	cf 93       	push	r28
     56a:	df 93       	push	r29
     56c:	cd b7       	in	r28, 0x3d	; 61
     56e:	de b7       	in	r29, 0x3e	; 62
     570:	a0 97       	sbiw	r28, 0x20	; 32
     572:	0f b6       	in	r0, 0x3f	; 63
     574:	f8 94       	cli
     576:	de bf       	out	0x3e, r29	; 62
     578:	0f be       	out	0x3f, r0	; 63
     57a:	cd bf       	out	0x3d, r28	; 61
     57c:	7c 01       	movw	r14, r24
     57e:	6b 01       	movw	r12, r22
	char text[32];
	memset(text, 0x00, sizeof(text));
     580:	8e 01       	movw	r16, r28
     582:	0f 5f       	subi	r16, 0xFF	; 255
     584:	1f 4f       	sbci	r17, 0xFF	; 255
     586:	80 e2       	ldi	r24, 0x20	; 32
     588:	f8 01       	movw	r30, r16
     58a:	11 92       	st	Z+, r1
     58c:	8a 95       	dec	r24
     58e:	e9 f7       	brne	.-6      	; 0x58a <_ZN15ElcanLCDManager7show_ipEPc+0x2e>
	strcat(text, "Station IP......");
     590:	6e e3       	ldi	r22, 0x3E	; 62
     592:	71 e0       	ldi	r23, 0x01	; 1
     594:	c8 01       	movw	r24, r16
     596:	0e 94 4a 1f 	call	0x3e94	; 0x3e94 <strcat>
	strcat(text, ipaddr);
     59a:	b6 01       	movw	r22, r12
     59c:	c8 01       	movw	r24, r16
     59e:	0e 94 4a 1f 	call	0x3e94	; 0x3e94 <strcat>
	this->show_message(text);
     5a2:	b8 01       	movw	r22, r16
     5a4:	c7 01       	movw	r24, r14
     5a6:	0e 94 46 02 	call	0x48c	; 0x48c <_ZN15ElcanLCDManager12show_messageEPc>
	delay(2500); //2 1/2 seconds delay to read the ip
     5aa:	64 ec       	ldi	r22, 0xC4	; 196
     5ac:	79 e0       	ldi	r23, 0x09	; 9
     5ae:	80 e0       	ldi	r24, 0x00	; 0
     5b0:	90 e0       	ldi	r25, 0x00	; 0
     5b2:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <delay>
	this->lcd.clear();
     5b6:	c7 01       	movw	r24, r14
     5b8:	0e 94 a2 11 	call	0x2344	; 0x2344 <_ZN17LiquidCrystal_I2C5clearEv>
}
     5bc:	a0 96       	adiw	r28, 0x20	; 32
     5be:	0f b6       	in	r0, 0x3f	; 63
     5c0:	f8 94       	cli
     5c2:	de bf       	out	0x3e, r29	; 62
     5c4:	0f be       	out	0x3f, r0	; 63
     5c6:	cd bf       	out	0x3d, r28	; 61
     5c8:	df 91       	pop	r29
     5ca:	cf 91       	pop	r28
     5cc:	1f 91       	pop	r17
     5ce:	0f 91       	pop	r16
     5d0:	ff 90       	pop	r15
     5d2:	ef 90       	pop	r14
     5d4:	df 90       	pop	r13
     5d6:	cf 90       	pop	r12
     5d8:	08 95       	ret

000005da <_ZN15ElcanLCDManager11check_lightEv>:
	} else {
		this->lcd.print(msg);
	}
}

void ElcanLCDManager::check_light() {
     5da:	0f 93       	push	r16
     5dc:	1f 93       	push	r17
     5de:	cf 93       	push	r28
     5e0:	df 93       	push	r29
	if (this->backlightStart > 0) {
     5e2:	fc 01       	movw	r30, r24
     5e4:	44 85       	ldd	r20, Z+12	; 0x0c
     5e6:	55 85       	ldd	r21, Z+13	; 0x0d
     5e8:	66 85       	ldd	r22, Z+14	; 0x0e
     5ea:	77 85       	ldd	r23, Z+15	; 0x0f
     5ec:	14 16       	cp	r1, r20
     5ee:	15 06       	cpc	r1, r21
     5f0:	16 06       	cpc	r1, r22
     5f2:	17 06       	cpc	r1, r23
     5f4:	cc f4       	brge	.+50     	; 0x628 <_ZN15ElcanLCDManager11check_lightEv+0x4e>
     5f6:	ec 01       	movw	r28, r24
		if (millis() - backlightStart > LIGHT_DURATION) {
     5f8:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <millis>
     5fc:	0c 85       	ldd	r16, Y+12	; 0x0c
     5fe:	1d 85       	ldd	r17, Y+13	; 0x0d
     600:	2e 85       	ldd	r18, Y+14	; 0x0e
     602:	3f 85       	ldd	r19, Y+15	; 0x0f
     604:	dc 01       	movw	r26, r24
     606:	cb 01       	movw	r24, r22
     608:	80 1b       	sub	r24, r16
     60a:	91 0b       	sbc	r25, r17
     60c:	a2 0b       	sbc	r26, r18
     60e:	b3 0b       	sbc	r27, r19
     610:	81 3a       	cpi	r24, 0xA1	; 161
     612:	9f 40       	sbci	r25, 0x0F	; 15
     614:	a1 05       	cpc	r26, r1
     616:	b1 05       	cpc	r27, r1
     618:	38 f0       	brcs	.+14     	; 0x628 <_ZN15ElcanLCDManager11check_lightEv+0x4e>
			this->lcd.noBacklight();
     61a:	ce 01       	movw	r24, r28
     61c:	0e 94 57 11 	call	0x22ae	; 0x22ae <_ZN17LiquidCrystal_I2C11noBacklightEv>
			this->backlightStart = 0;
     620:	1c 86       	std	Y+12, r1	; 0x0c
     622:	1d 86       	std	Y+13, r1	; 0x0d
     624:	1e 86       	std	Y+14, r1	; 0x0e
     626:	1f 86       	std	Y+15, r1	; 0x0f
		}
	}
}
     628:	df 91       	pop	r29
     62a:	cf 91       	pop	r28
     62c:	1f 91       	pop	r17
     62e:	0f 91       	pop	r16
     630:	08 95       	ret

00000632 <_ZN15ElcanLCDManager8light_onEv>:

void ElcanLCDManager::light_on() {
     632:	cf 93       	push	r28
     634:	df 93       	push	r29
     636:	ec 01       	movw	r28, r24
	this->lcd.backlight();
     638:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <_ZN17LiquidCrystal_I2C9backlightEv>
	this->backlightStart = millis();
     63c:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <millis>
     640:	6c 87       	std	Y+12, r22	; 0x0c
     642:	7d 87       	std	Y+13, r23	; 0x0d
     644:	8e 87       	std	Y+14, r24	; 0x0e
     646:	9f 87       	std	Y+15, r25	; 0x0f
}
     648:	df 91       	pop	r29
     64a:	cf 91       	pop	r28
     64c:	08 95       	ret

0000064e <_ZN5Print5writeEPKc>:
  Serial.flush();
  return pos;
}

int ElcanWifi::available() {
  return Serial.available();
     64e:	61 15       	cp	r22, r1
     650:	71 05       	cpc	r23, r1
     652:	79 f0       	breq	.+30     	; 0x672 <_ZN5Print5writeEPKc+0x24>
     654:	fb 01       	movw	r30, r22
     656:	01 90       	ld	r0, Z+
     658:	00 20       	and	r0, r0
     65a:	e9 f7       	brne	.-6      	; 0x656 <_ZN5Print5writeEPKc+0x8>
     65c:	31 97       	sbiw	r30, 0x01	; 1
     65e:	af 01       	movw	r20, r30
     660:	46 1b       	sub	r20, r22
     662:	57 0b       	sbc	r21, r23
     664:	dc 01       	movw	r26, r24
     666:	ed 91       	ld	r30, X+
     668:	fc 91       	ld	r31, X
     66a:	02 80       	ldd	r0, Z+2	; 0x02
     66c:	f3 81       	ldd	r31, Z+3	; 0x03
     66e:	e0 2d       	mov	r30, r0
     670:	09 94       	ijmp
     672:	80 e0       	ldi	r24, 0x00	; 0
     674:	90 e0       	ldi	r25, 0x00	; 0
     676:	08 95       	ret

00000678 <_ZN9ElcanWifiC1Ev>:
     678:	fc 01       	movw	r30, r24
     67a:	11 82       	std	Z+1, r1	; 0x01
     67c:	08 95       	ret

0000067e <_ZN9ElcanWifi19empty_serial_bufferEv>:
  result[pos] = 0x00;
}

void ElcanWifi::empty_serial_buffer() {
  char t;
  while(Serial.available()) {
     67e:	8d e9       	ldi	r24, 0x9D	; 157
     680:	92 e0       	ldi	r25, 0x02	; 2
     682:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <_ZN14HardwareSerial9availableEv>
     686:	89 2b       	or	r24, r25
     688:	29 f0       	breq	.+10     	; 0x694 <_ZN9ElcanWifi19empty_serial_bufferEv+0x16>
    t = Serial.read();
     68a:	8d e9       	ldi	r24, 0x9D	; 157
     68c:	92 e0       	ldi	r25, 0x02	; 2
     68e:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <_ZN14HardwareSerial4readEv>
  result[pos] = 0x00;
}

void ElcanWifi::empty_serial_buffer() {
  char t;
  while(Serial.available()) {
     692:	f5 cf       	rjmp	.-22     	; 0x67e <_ZN9ElcanWifi19empty_serial_bufferEv>
     694:	08 95       	ret

00000696 <_ZN9ElcanWifi5beginEv>:
ElcanWifi::ElcanWifi() {
  _error = 0;
  _error = false;
}

bool ElcanWifi::begin() {
     696:	0f 93       	push	r16
     698:	1f 93       	push	r17
     69a:	cf 93       	push	r28
     69c:	df 93       	push	r29
     69e:	cd b7       	in	r28, 0x3d	; 61
     6a0:	de b7       	in	r29, 0x3e	; 62
     6a2:	64 97       	sbiw	r28, 0x14	; 20
     6a4:	0f b6       	in	r0, 0x3f	; 63
     6a6:	f8 94       	cli
     6a8:	de bf       	out	0x3e, r29	; 62
     6aa:	0f be       	out	0x3f, r0	; 63
     6ac:	cd bf       	out	0x3d, r28	; 61
     6ae:	8c 01       	movw	r16, r24
  char received[20];
  char count;
  empty_serial_buffer();
     6b0:	0e 94 3f 03 	call	0x67e	; 0x67e <_ZN9ElcanWifi19empty_serial_bufferEv>
  Serial.write("Q");
     6b4:	6f e4       	ldi	r22, 0x4F	; 79
     6b6:	71 e0       	ldi	r23, 0x01	; 1
     6b8:	8d e9       	ldi	r24, 0x9D	; 157
     6ba:	92 e0       	ldi	r25, 0x02	; 2
     6bc:	0e 94 27 03 	call	0x64e	; 0x64e <_ZN5Print5writeEPKc>
  Serial.flush();
     6c0:	8d e9       	ldi	r24, 0x9D	; 157
     6c2:	92 e0       	ldi	r25, 0x02	; 2
     6c4:	0e 94 8c 0a 	call	0x1518	; 0x1518 <_ZN14HardwareSerial5flushEv>
  count = Serial.readBytesUntil('\r', received, INITIALIZATION_STR_LEN);
     6c8:	25 e0       	ldi	r18, 0x05	; 5
     6ca:	30 e0       	ldi	r19, 0x00	; 0
     6cc:	ae 01       	movw	r20, r28
     6ce:	4f 5f       	subi	r20, 0xFF	; 255
     6d0:	5f 4f       	sbci	r21, 0xFF	; 255
     6d2:	6d e0       	ldi	r22, 0x0D	; 13
     6d4:	8d e9       	ldi	r24, 0x9D	; 157
     6d6:	92 e0       	ldi	r25, 0x02	; 2
     6d8:	0e 94 36 0c 	call	0x186c	; 0x186c <_ZN6Stream14readBytesUntilEcPcj>
  empty_serial_buffer();
     6dc:	c8 01       	movw	r24, r16
     6de:	0e 94 3f 03 	call	0x67e	; 0x67e <_ZN9ElcanWifi19empty_serial_bufferEv>
  received[INITIALIZATION_STR_LEN] = 0x00;
     6e2:	1e 82       	std	Y+6, r1	; 0x06
  if (strcmp(received, "INIOK") != 0) {
     6e4:	61 e5       	ldi	r22, 0x51	; 81
     6e6:	71 e0       	ldi	r23, 0x01	; 1
     6e8:	ce 01       	movw	r24, r28
     6ea:	01 96       	adiw	r24, 0x01	; 1
     6ec:	0e 94 55 1f 	call	0x3eaa	; 0x3eaa <strcmp>
     6f0:	89 2b       	or	r24, r25
     6f2:	19 f0       	breq	.+6      	; 0x6fa <_ZN9ElcanWifi5beginEv+0x64>
    _error = 100;
     6f4:	84 e6       	ldi	r24, 0x64	; 100
     6f6:	f8 01       	movw	r30, r16
     6f8:	81 83       	std	Z+1, r24	; 0x01
  }
  delay(1);
     6fa:	61 e0       	ldi	r22, 0x01	; 1
     6fc:	70 e0       	ldi	r23, 0x00	; 0
     6fe:	80 e0       	ldi	r24, 0x00	; 0
     700:	90 e0       	ldi	r25, 0x00	; 0
     702:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <delay>
  empty_serial_buffer();
     706:	c8 01       	movw	r24, r16
     708:	0e 94 3f 03 	call	0x67e	; 0x67e <_ZN9ElcanWifi19empty_serial_bufferEv>
  return (_error == 0);
     70c:	81 e0       	ldi	r24, 0x01	; 1
     70e:	f8 01       	movw	r30, r16
     710:	91 81       	ldd	r25, Z+1	; 0x01
     712:	91 11       	cpse	r25, r1
     714:	80 e0       	ldi	r24, 0x00	; 0
}
     716:	64 96       	adiw	r28, 0x14	; 20
     718:	0f b6       	in	r0, 0x3f	; 63
     71a:	f8 94       	cli
     71c:	de bf       	out	0x3e, r29	; 62
     71e:	0f be       	out	0x3f, r0	; 63
     720:	cd bf       	out	0x3d, r28	; 61
     722:	df 91       	pop	r29
     724:	cf 91       	pop	r28
     726:	1f 91       	pop	r17
     728:	0f 91       	pop	r16
     72a:	08 95       	ret

0000072c <_ZN9ElcanWifi6get_ipEPc>:

void ElcanWifi::get_ip(char *result) {
     72c:	cf 93       	push	r28
     72e:	df 93       	push	r29
     730:	eb 01       	movw	r28, r22
  char pos = 0;
  char tmp;
  empty_serial_buffer();
     732:	0e 94 3f 03 	call	0x67e	; 0x67e <_ZN9ElcanWifi19empty_serial_bufferEv>
  Serial.write("I");
     736:	67 e5       	ldi	r22, 0x57	; 87
     738:	71 e0       	ldi	r23, 0x01	; 1
     73a:	8d e9       	ldi	r24, 0x9D	; 157
     73c:	92 e0       	ldi	r25, 0x02	; 2
     73e:	0e 94 27 03 	call	0x64e	; 0x64e <_ZN5Print5writeEPKc>
  Serial.flush();
     742:	8d e9       	ldi	r24, 0x9D	; 157
     744:	92 e0       	ldi	r25, 0x02	; 2
     746:	0e 94 8c 0a 	call	0x1518	; 0x1518 <_ZN14HardwareSerial5flushEv>
  pos = Serial.readBytesUntil('\r', result, IP_ADDRESS_LEN);
     74a:	2f e0       	ldi	r18, 0x0F	; 15
     74c:	30 e0       	ldi	r19, 0x00	; 0
     74e:	ae 01       	movw	r20, r28
     750:	6d e0       	ldi	r22, 0x0D	; 13
     752:	8d e9       	ldi	r24, 0x9D	; 157
     754:	92 e0       	ldi	r25, 0x02	; 2
     756:	0e 94 36 0c 	call	0x186c	; 0x186c <_ZN6Stream14readBytesUntilEcPcj>
  result[pos] = 0x00;
     75a:	c8 0f       	add	r28, r24
     75c:	d1 1d       	adc	r29, r1
     75e:	18 82       	st	Y, r1
}
     760:	df 91       	pop	r29
     762:	cf 91       	pop	r28
     764:	08 95       	ret

00000766 <_ZN9ElcanWifi12readCardDataEPcc>:
  while(!Serial.available() && count++ < 255);
  tmp = Serial.read();
  return tmp;
}

void ElcanWifi::readCardData(char *result, char maxLen) {
     766:	ef 92       	push	r14
     768:	ff 92       	push	r15
     76a:	0f 93       	push	r16
     76c:	1f 93       	push	r17
     76e:	cf 93       	push	r28
     770:	df 93       	push	r29
     772:	7c 01       	movw	r14, r24
     774:	eb 01       	movw	r28, r22
  char pos;
  memset(result, 0, maxLen);
     776:	04 2f       	mov	r16, r20
     778:	10 e0       	ldi	r17, 0x00	; 0
     77a:	a8 01       	movw	r20, r16
     77c:	60 e0       	ldi	r22, 0x00	; 0
     77e:	70 e0       	ldi	r23, 0x00	; 0
     780:	ce 01       	movw	r24, r28
     782:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <memset>
  Serial.write("T");
     786:	69 e5       	ldi	r22, 0x59	; 89
     788:	71 e0       	ldi	r23, 0x01	; 1
     78a:	8d e9       	ldi	r24, 0x9D	; 157
     78c:	92 e0       	ldi	r25, 0x02	; 2
     78e:	0e 94 27 03 	call	0x64e	; 0x64e <_ZN5Print5writeEPKc>
  Serial.flush();
     792:	8d e9       	ldi	r24, 0x9D	; 157
     794:	92 e0       	ldi	r25, 0x02	; 2
     796:	0e 94 8c 0a 	call	0x1518	; 0x1518 <_ZN14HardwareSerial5flushEv>
  delay(1);
     79a:	61 e0       	ldi	r22, 0x01	; 1
     79c:	70 e0       	ldi	r23, 0x00	; 0
     79e:	80 e0       	ldi	r24, 0x00	; 0
     7a0:	90 e0       	ldi	r25, 0x00	; 0
     7a2:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <delay>
  pos = Serial.readBytesUntil('\r', result, maxLen);
     7a6:	98 01       	movw	r18, r16
     7a8:	ae 01       	movw	r20, r28
     7aa:	6d e0       	ldi	r22, 0x0D	; 13
     7ac:	8d e9       	ldi	r24, 0x9D	; 157
     7ae:	92 e0       	ldi	r25, 0x02	; 2
     7b0:	0e 94 36 0c 	call	0x186c	; 0x186c <_ZN6Stream14readBytesUntilEcPcj>
     7b4:	18 2f       	mov	r17, r24
  empty_serial_buffer();
     7b6:	c7 01       	movw	r24, r14
     7b8:	0e 94 3f 03 	call	0x67e	; 0x67e <_ZN9ElcanWifi19empty_serial_bufferEv>
  result[pos] = 0x00;
     7bc:	c1 0f       	add	r28, r17
     7be:	d1 1d       	adc	r29, r1
     7c0:	18 82       	st	Y, r1
}
     7c2:	df 91       	pop	r29
     7c4:	cf 91       	pop	r28
     7c6:	1f 91       	pop	r17
     7c8:	0f 91       	pop	r16
     7ca:	ff 90       	pop	r15
     7cc:	ef 90       	pop	r14
     7ce:	08 95       	ret

000007d0 <_ZN9ElcanWifi4pollEv>:

int ElcanWifi::available() {
  return Serial.available();
}

char ElcanWifi::poll() {
     7d0:	cf 93       	push	r28
  char tmp;
  char count = 0;
  empty_serial_buffer();
     7d2:	0e 94 3f 03 	call	0x67e	; 0x67e <_ZN9ElcanWifi19empty_serial_bufferEv>
  Serial.write("P");
     7d6:	6b e5       	ldi	r22, 0x5B	; 91
     7d8:	71 e0       	ldi	r23, 0x01	; 1
     7da:	8d e9       	ldi	r24, 0x9D	; 157
     7dc:	92 e0       	ldi	r25, 0x02	; 2
     7de:	0e 94 27 03 	call	0x64e	; 0x64e <_ZN5Print5writeEPKc>
  Serial.flush();
     7e2:	8d e9       	ldi	r24, 0x9D	; 157
     7e4:	92 e0       	ldi	r25, 0x02	; 2
     7e6:	0e 94 8c 0a 	call	0x1518	; 0x1518 <_ZN14HardwareSerial5flushEv>
     7ea:	c0 e0       	ldi	r28, 0x00	; 0
  while(!Serial.available() && count++ < 255);
     7ec:	8d e9       	ldi	r24, 0x9D	; 157
     7ee:	92 e0       	ldi	r25, 0x02	; 2
     7f0:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <_ZN14HardwareSerial9availableEv>
     7f4:	89 2b       	or	r24, r25
     7f6:	11 f4       	brne	.+4      	; 0x7fc <_ZN9ElcanWifi4pollEv+0x2c>
     7f8:	c1 50       	subi	r28, 0x01	; 1
     7fa:	c1 f7       	brne	.-16     	; 0x7ec <_ZN9ElcanWifi4pollEv+0x1c>
  tmp = Serial.read();
     7fc:	8d e9       	ldi	r24, 0x9D	; 157
     7fe:	92 e0       	ldi	r25, 0x02	; 2
     800:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <_ZN14HardwareSerial4readEv>
  return tmp;
}
     804:	cf 91       	pop	r28
     806:	08 95       	ret

00000808 <_ZN9ElcanWifi20sendIntrussionAttempEPc>:
  while(Serial.available()) {
    t = Serial.read();
  }
}

void ElcanWifi::sendIntrussionAttemp(char *data) {
     808:	df 92       	push	r13
     80a:	ef 92       	push	r14
     80c:	ff 92       	push	r15
     80e:	0f 93       	push	r16
     810:	1f 93       	push	r17
     812:	cf 93       	push	r28
     814:	df 93       	push	r29
     816:	cd b7       	in	r28, 0x3d	; 61
     818:	de b7       	in	r29, 0x3e	; 62
     81a:	a0 97       	sbiw	r28, 0x20	; 32
     81c:	0f b6       	in	r0, 0x3f	; 63
     81e:	f8 94       	cli
     820:	de bf       	out	0x3e, r29	; 62
     822:	0f be       	out	0x3f, r0	; 63
     824:	cd bf       	out	0x3d, r28	; 61
  char text[32];
  char len = strlen(data);
     826:	fb 01       	movw	r30, r22
     828:	01 90       	ld	r0, Z+
     82a:	00 20       	and	r0, r0
     82c:	e9 f7       	brne	.-6      	; 0x828 <_ZN9ElcanWifi20sendIntrussionAttempEPc+0x20>
     82e:	31 97       	sbiw	r30, 0x01	; 1
     830:	e6 1b       	sub	r30, r22
     832:	f7 0b       	sbc	r31, r23
     834:	de 2e       	mov	r13, r30
  memset(text,0,sizeof(text));
     836:	ce 01       	movw	r24, r28
     838:	01 96       	adiw	r24, 0x01	; 1
     83a:	7c 01       	movw	r14, r24
     83c:	80 e2       	ldi	r24, 0x20	; 32
     83e:	d7 01       	movw	r26, r14
     840:	1d 92       	st	X+, r1
     842:	8a 95       	dec	r24
     844:	e9 f7       	brne	.-6      	; 0x840 <_ZN9ElcanWifi20sendIntrussionAttempEPc+0x38>
  text[0]='N';
     846:	8e e4       	ldi	r24, 0x4E	; 78
     848:	89 83       	std	Y+1, r24	; 0x01
  memcpy(text+1, data, len); // 8 bytes: 4 cardID, 4 timestamp
     84a:	af 01       	movw	r20, r30
     84c:	55 27       	eor	r21, r21
     84e:	ce 01       	movw	r24, r28
     850:	02 96       	adiw	r24, 0x02	; 2
     852:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <memcpy>
     856:	87 01       	movw	r16, r14
  for (char b=0; b < len; b++) {
     858:	80 2f       	mov	r24, r16
     85a:	8e 19       	sub	r24, r14
     85c:	8d 15       	cp	r24, r13
     85e:	40 f4       	brcc	.+16     	; 0x870 <_ZN9ElcanWifi20sendIntrussionAttempEPc+0x68>
    Serial.write(text[b]);
     860:	f8 01       	movw	r30, r16
     862:	61 91       	ld	r22, Z+
     864:	8f 01       	movw	r16, r30
    virtual void flush(void);
    virtual size_t write(uint8_t);
    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
     866:	8d e9       	ldi	r24, 0x9D	; 157
     868:	92 e0       	ldi	r25, 0x02	; 2
     86a:	0e 94 3f 0a 	call	0x147e	; 0x147e <_ZN14HardwareSerial5writeEh>
  char text[32];
  char len = strlen(data);
  memset(text,0,sizeof(text));
  text[0]='N';
  memcpy(text+1, data, len); // 8 bytes: 4 cardID, 4 timestamp
  for (char b=0; b < len; b++) {
     86e:	f4 cf       	rjmp	.-24     	; 0x858 <_ZN9ElcanWifi20sendIntrussionAttempEPc+0x50>
    Serial.write(text[b]);
  }
  Serial.write(EOL);
     870:	6d e5       	ldi	r22, 0x5D	; 93
     872:	71 e0       	ldi	r23, 0x01	; 1
     874:	8d e9       	ldi	r24, 0x9D	; 157
     876:	92 e0       	ldi	r25, 0x02	; 2
     878:	0e 94 27 03 	call	0x64e	; 0x64e <_ZN5Print5writeEPKc>
  Serial.flush();
     87c:	8d e9       	ldi	r24, 0x9D	; 157
     87e:	92 e0       	ldi	r25, 0x02	; 2
     880:	0e 94 8c 0a 	call	0x1518	; 0x1518 <_ZN14HardwareSerial5flushEv>
}
     884:	a0 96       	adiw	r28, 0x20	; 32
     886:	0f b6       	in	r0, 0x3f	; 63
     888:	f8 94       	cli
     88a:	de bf       	out	0x3e, r29	; 62
     88c:	0f be       	out	0x3f, r0	; 63
     88e:	cd bf       	out	0x3d, r28	; 61
     890:	df 91       	pop	r29
     892:	cf 91       	pop	r28
     894:	1f 91       	pop	r17
     896:	0f 91       	pop	r16
     898:	ff 90       	pop	r15
     89a:	ef 90       	pop	r14
     89c:	df 90       	pop	r13
     89e:	08 95       	ret

000008a0 <_ZN9ElcanWifi9sendEntryEPc>:

bool ElcanWifi::is_error() {
  return (_error > 0);
}

char ElcanWifi::sendEntry(char *data) {
     8a0:	ef 92       	push	r14
     8a2:	ff 92       	push	r15
     8a4:	0f 93       	push	r16
     8a6:	1f 93       	push	r17
     8a8:	cf 93       	push	r28
     8aa:	df 93       	push	r29
     8ac:	7b 01       	movw	r14, r22
  char pos = 0;
  char len = 0;
  Serial.write("S");
     8ae:	60 e6       	ldi	r22, 0x60	; 96
     8b0:	71 e0       	ldi	r23, 0x01	; 1
     8b2:	8d e9       	ldi	r24, 0x9D	; 157
     8b4:	92 e0       	ldi	r25, 0x02	; 2
     8b6:	0e 94 27 03 	call	0x64e	; 0x64e <_ZN5Print5writeEPKc>
  len = strlen(data);
     8ba:	f7 01       	movw	r30, r14
     8bc:	01 90       	ld	r0, Z+
     8be:	00 20       	and	r0, r0
     8c0:	e9 f7       	brne	.-6      	; 0x8bc <_ZN9ElcanWifi9sendEntryEPc+0x1c>
     8c2:	31 97       	sbiw	r30, 0x01	; 1
     8c4:	1e 2f       	mov	r17, r30
     8c6:	1e 19       	sub	r17, r14
     8c8:	0e 2d       	mov	r16, r14
     8ca:	ce 2d       	mov	r28, r14
     8cc:	df 2d       	mov	r29, r15
  for (char pos = 0; pos < len; pos++) {
     8ce:	8c 2f       	mov	r24, r28
     8d0:	80 1b       	sub	r24, r16
     8d2:	81 17       	cp	r24, r17
     8d4:	30 f4       	brcc	.+12     	; 0x8e2 <_ZN9ElcanWifi9sendEntryEPc+0x42>
    Serial.write(data[pos]);
     8d6:	69 91       	ld	r22, Y+
     8d8:	8d e9       	ldi	r24, 0x9D	; 157
     8da:	92 e0       	ldi	r25, 0x02	; 2
     8dc:	0e 94 3f 0a 	call	0x147e	; 0x147e <_ZN14HardwareSerial5writeEh>
char ElcanWifi::sendEntry(char *data) {
  char pos = 0;
  char len = 0;
  Serial.write("S");
  len = strlen(data);
  for (char pos = 0; pos < len; pos++) {
     8e0:	f6 cf       	rjmp	.-20     	; 0x8ce <_ZN9ElcanWifi9sendEntryEPc+0x2e>
    Serial.write(data[pos]);
  }
  Serial.write(EOL);
     8e2:	6d e5       	ldi	r22, 0x5D	; 93
     8e4:	71 e0       	ldi	r23, 0x01	; 1
     8e6:	8d e9       	ldi	r24, 0x9D	; 157
     8e8:	92 e0       	ldi	r25, 0x02	; 2
     8ea:	0e 94 27 03 	call	0x64e	; 0x64e <_ZN5Print5writeEPKc>
  Serial.flush();
     8ee:	8d e9       	ldi	r24, 0x9D	; 157
     8f0:	92 e0       	ldi	r25, 0x02	; 2
     8f2:	0e 94 8c 0a 	call	0x1518	; 0x1518 <_ZN14HardwareSerial5flushEv>
  return pos;
}
     8f6:	80 e0       	ldi	r24, 0x00	; 0
     8f8:	df 91       	pop	r29
     8fa:	cf 91       	pop	r28
     8fc:	1f 91       	pop	r17
     8fe:	0f 91       	pop	r16
     900:	ff 90       	pop	r15
     902:	ef 90       	pop	r14
     904:	08 95       	ret

00000906 <_ZN11RfidManagerC1Ev>:
// Initialization code for the parts.
#include "rfid.h"

RfidManager::RfidManager() {
     906:	0f 93       	push	r16
     908:	1f 93       	push	r17
     90a:	cf 93       	push	r28
     90c:	df 93       	push	r29
     90e:	cd b7       	in	r28, 0x3d	; 61
     910:	de b7       	in	r29, 0x3e	; 62
     912:	60 97       	sbiw	r28, 0x10	; 16
     914:	0f b6       	in	r0, 0x3f	; 63
     916:	f8 94       	cli
     918:	de bf       	out	0x3e, r29	; 62
     91a:	0f be       	out	0x3f, r0	; 63
     91c:	cd bf       	out	0x3d, r28	; 61
     91e:	8c 01       	movw	r16, r24
     920:	0e 94 ed 12 	call	0x25da	; 0x25da <_ZN7MFRC522C1Ev>
  memset(this->readCard, 0, sizeof(this->readCard));
     924:	f8 01       	movw	r30, r16
     926:	70 96       	adiw	r30, 0x10	; 16
     928:	84 e0       	ldi	r24, 0x04	; 4
     92a:	df 01       	movw	r26, r30
     92c:	1d 92       	st	X+, r1
     92e:	8a 95       	dec	r24
     930:	e9 f7       	brne	.-6      	; 0x92c <_ZN11RfidManagerC1Ev+0x26>
  this->mfrc522 = MFRC522(RFID_SS, RFID_RST);
     932:	49 e0       	ldi	r20, 0x09	; 9
     934:	6a e0       	ldi	r22, 0x0A	; 10
     936:	ce 01       	movw	r24, r28
     938:	01 96       	adiw	r24, 0x01	; 1
     93a:	0e 94 f7 12 	call	0x25ee	; 0x25ee <_ZN7MFRC522C1Ehh>
	0xC1, 0x5B, 0x00, 0x2A, 0xD0, 0x75, 0xDE, 0x9E,
	0x51, 0x64, 0xAB, 0x3E, 0xE9, 0x15, 0xB5, 0xAB,
	0x56, 0x9A, 0x98, 0x82, 0x26, 0xEA, 0x2A, 0x62
};

class MFRC522 {
     93e:	8c e0       	ldi	r24, 0x0C	; 12
     940:	fe 01       	movw	r30, r28
     942:	33 96       	adiw	r30, 0x03	; 3
     944:	d8 01       	movw	r26, r16
     946:	12 96       	adiw	r26, 0x02	; 2
     948:	01 90       	ld	r0, Z+
     94a:	0d 92       	st	X+, r0
     94c:	8a 95       	dec	r24
     94e:	e1 f7       	brne	.-8      	; 0x948 <_ZN11RfidManagerC1Ev+0x42>
     950:	8f 85       	ldd	r24, Y+15	; 0x0f
     952:	f8 01       	movw	r30, r16
     954:	86 87       	std	Z+14, r24	; 0x0e
     956:	88 89       	ldd	r24, Y+16	; 0x10
     958:	87 87       	std	Z+15, r24	; 0x0f
}
     95a:	60 96       	adiw	r28, 0x10	; 16
     95c:	0f b6       	in	r0, 0x3f	; 63
     95e:	f8 94       	cli
     960:	de bf       	out	0x3e, r29	; 62
     962:	0f be       	out	0x3f, r0	; 63
     964:	cd bf       	out	0x3d, r28	; 61
     966:	df 91       	pop	r29
     968:	cf 91       	pop	r28
     96a:	1f 91       	pop	r17
     96c:	0f 91       	pop	r16
     96e:	08 95       	ret

00000970 <_ZN11RfidManager5beginEv>:

void RfidManager::begin() {
     970:	cf 93       	push	r28
     972:	df 93       	push	r29
     974:	ec 01       	movw	r28, r24
  this->mfrc522.PCD_Init();    // Initialize MFRC522 Hardware
     976:	0e 94 1b 14 	call	0x2836	; 0x2836 <_ZN7MFRC5228PCD_InitEv>
  this->mfrc522.PCD_SetAntennaGain(this->mfrc522.RxGain_max); // Max reading distance
     97a:	60 e7       	ldi	r22, 0x70	; 112
     97c:	ce 01       	movw	r24, r28
}
     97e:	df 91       	pop	r29
     980:	cf 91       	pop	r28
  this->mfrc522 = MFRC522(RFID_SS, RFID_RST);
}

void RfidManager::begin() {
  this->mfrc522.PCD_Init();    // Initialize MFRC522 Hardware
  this->mfrc522.PCD_SetAntennaGain(this->mfrc522.RxGain_max); // Max reading distance
     982:	0c 94 84 14 	jmp	0x2908	; 0x2908 <_ZN7MFRC52218PCD_SetAntennaGainEh>

00000986 <_ZN11RfidManager5getIDEv>:
}

unsigned char RfidManager::getID() {
     986:	cf 93       	push	r28
     988:	df 93       	push	r29
     98a:	ec 01       	movw	r28, r24
  if ( ! this->mfrc522.PICC_IsNewCardPresent()) { //If a new PICC placed to RFID reader continue
     98c:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <_ZN7MFRC52221PICC_IsNewCardPresentEv>
     990:	81 11       	cpse	r24, r1
     992:	02 c0       	rjmp	.+4      	; 0x998 <_ZN11RfidManager5getIDEv+0x12>
    return 0;
     994:	80 e0       	ldi	r24, 0x00	; 0
     996:	11 c0       	rjmp	.+34     	; 0x9ba <_ZN11RfidManager5getIDEv+0x34>
  }
  if ( ! this->mfrc522.PICC_ReadCardSerial()) {   //Since a PICC placed get Serial and continue
     998:	ce 01       	movw	r24, r28
     99a:	0e 94 56 12 	call	0x24ac	; 0x24ac <_ZN7MFRC52219PICC_ReadCardSerialEv>
     99e:	88 23       	and	r24, r24
     9a0:	c9 f3       	breq	.-14     	; 0x994 <_ZN11RfidManager5getIDEv+0xe>
  // every PICC as they have 4 byte UID
#ifdef DEBUG
  Serial.print("#");
#endif
  for ( uint8_t i = 0; i < 4; i++) {  //
    this->readCard[i] = this->mfrc522.uid.uidByte[i];
     9a2:	8b 81       	ldd	r24, Y+3	; 0x03
     9a4:	88 8b       	std	Y+16, r24	; 0x10
     9a6:	8c 81       	ldd	r24, Y+4	; 0x04
     9a8:	89 8b       	std	Y+17, r24	; 0x11
     9aa:	8d 81       	ldd	r24, Y+5	; 0x05
     9ac:	8a 8b       	std	Y+18, r24	; 0x12
     9ae:	8e 81       	ldd	r24, Y+6	; 0x06
     9b0:	8b 8b       	std	Y+19, r24	; 0x13
#endif
  }
#ifdef DEBUG
    Serial.println(" ");
#endif
  this->mfrc522.PICC_HaltA(); // Stop reading
     9b2:	ce 01       	movw	r24, r28
     9b4:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <_ZN7MFRC52210PICC_HaltAEv>
  return 1;
     9b8:	81 e0       	ldi	r24, 0x01	; 1
}
     9ba:	df 91       	pop	r29
     9bc:	cf 91       	pop	r28
     9be:	08 95       	ret

000009c0 <_ZN8ElcanRtcC1Ev>:
#include <Arduino.h>
#include "rtc.h"
#include "definitions.h"

ElcanRtc::ElcanRtc() {
     9c0:	08 95       	ret

000009c2 <_ZN8ElcanRtc10initializeEv>:
}

void ElcanRtc::initialize() {
     9c2:	0f 93       	push	r16
     9c4:	1f 93       	push	r17
     9c6:	cf 93       	push	r28
     9c8:	df 93       	push	r29
     9ca:	00 d0       	rcall	.+0      	; 0x9cc <_ZN8ElcanRtc10initializeEv+0xa>
     9cc:	00 d0       	rcall	.+0      	; 0x9ce <_ZN8ElcanRtc10initializeEv+0xc>
     9ce:	00 d0       	rcall	.+0      	; 0x9d0 <_ZN8ElcanRtc10initializeEv+0xe>
     9d0:	cd b7       	in	r28, 0x3d	; 61
     9d2:	de b7       	in	r29, 0x3e	; 62
     9d4:	8c 01       	movw	r16, r24
  bool exit_init = false;
  unsigned char init_return;
  char attemps = 0;
  for (attemps = 0 ; attemps < 2; attemps++) {
    init_return = this->rtc.begin();
     9d6:	0e 94 87 19 	call	0x330e	; 0x330e <_ZN10RTC_DS32315beginEv>
    if (init_return) {
     9da:	88 23       	and	r24, r24
     9dc:	91 f0       	breq	.+36     	; 0xa02 <_ZN8ElcanRtc10initializeEv+0x40>
      if (this->rtc.lostPower()) {
     9de:	c8 01       	movw	r24, r16
     9e0:	0e 94 c8 1a 	call	0x3590	; 0x3590 <_ZN10RTC_DS32319lostPowerEv>
     9e4:	88 23       	and	r24, r24
     9e6:	91 f0       	breq	.+36     	; 0xa0c <_ZN8ElcanRtc10initializeEv+0x4a>
      // Fijar a fecha y hora de compilacion
        this->rtc.adjust(DateTime(FS(__DATE__), FS(__TIME__)));
     9e8:	42 e6       	ldi	r20, 0x62	; 98
     9ea:	51 e0       	ldi	r21, 0x01	; 1
     9ec:	6b e6       	ldi	r22, 0x6B	; 107
     9ee:	71 e0       	ldi	r23, 0x01	; 1
     9f0:	ce 01       	movw	r24, r28
     9f2:	01 96       	adiw	r24, 0x01	; 1
     9f4:	0e 94 ab 18 	call	0x3156	; 0x3156 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_>
     9f8:	ce 01       	movw	r24, r28
     9fa:	01 96       	adiw	r24, 0x01	; 1
     9fc:	0e 94 34 1a 	call	0x3468	; 0x3468 <_ZN10RTC_DS32316adjustERK8DateTime>
      }
      break;
    }
  }
}
     a00:	05 c0       	rjmp	.+10     	; 0xa0c <_ZN8ElcanRtc10initializeEv+0x4a>
void ElcanRtc::initialize() {
  bool exit_init = false;
  unsigned char init_return;
  char attemps = 0;
  for (attemps = 0 ; attemps < 2; attemps++) {
    init_return = this->rtc.begin();
     a02:	c8 01       	movw	r24, r16
     a04:	0e 94 87 19 	call	0x330e	; 0x330e <_ZN10RTC_DS32315beginEv>
    if (init_return) {
     a08:	81 11       	cpse	r24, r1
     a0a:	e9 cf       	rjmp	.-46     	; 0x9de <_ZN8ElcanRtc10initializeEv+0x1c>
        this->rtc.adjust(DateTime(FS(__DATE__), FS(__TIME__)));
      }
      break;
    }
  }
}
     a0c:	26 96       	adiw	r28, 0x06	; 6
     a0e:	0f b6       	in	r0, 0x3f	; 63
     a10:	f8 94       	cli
     a12:	de bf       	out	0x3e, r29	; 62
     a14:	0f be       	out	0x3f, r0	; 63
     a16:	cd bf       	out	0x3d, r28	; 61
     a18:	df 91       	pop	r29
     a1a:	cf 91       	pop	r28
     a1c:	1f 91       	pop	r17
     a1e:	0f 91       	pop	r16
     a20:	08 95       	ret

00000a22 <_ZN8ElcanRtc3nowEv>:

DateTime ElcanRtc::now() {
     a22:	cf 93       	push	r28
     a24:	df 93       	push	r29
     a26:	ec 01       	movw	r28, r24
  return this->rtc.now();
     a28:	0e 94 8d 19 	call	0x331a	; 0x331a <_ZN10RTC_DS32313nowEv>
}
     a2c:	ce 01       	movw	r24, r28
     a2e:	df 91       	pop	r29
     a30:	cf 91       	pop	r28
     a32:	08 95       	ret

00000a34 <_ZN8ElcanRtc15split_date_timeEPc>:
    this->rtc.adjust(stamp);
  }
  CLEAR_SERIAL
}

DateTime ElcanRtc::split_date_time(char *stamp) {
     a34:	8f 92       	push	r8
     a36:	9f 92       	push	r9
     a38:	af 92       	push	r10
     a3a:	bf 92       	push	r11
     a3c:	cf 92       	push	r12
     a3e:	ef 92       	push	r14
     a40:	ff 92       	push	r15
     a42:	0f 93       	push	r16
     a44:	1f 93       	push	r17
     a46:	cf 93       	push	r28
     a48:	df 93       	push	r29
     a4a:	00 d0       	rcall	.+0      	; 0xa4c <_ZN8ElcanRtc15split_date_timeEPc+0x18>
     a4c:	cd b7       	in	r28, 0x3d	; 61
     a4e:	de b7       	in	r29, 0x3e	; 62
     a50:	5c 01       	movw	r10, r24
     a52:	ca 01       	movw	r24, r20
  const char chp[2] = "-";
     a54:	2d e2       	ldi	r18, 0x2D	; 45
     a56:	30 e0       	ldi	r19, 0x00	; 0
     a58:	3a 83       	std	Y+2, r19	; 0x02
     a5a:	29 83       	std	Y+1, r18	; 0x01
  uint8_t day;
  uint8_t hour;
  uint8_t min;
  uint8_t sec;
  char *section;
  section = strtok(stamp, chp);
     a5c:	be 01       	movw	r22, r28
     a5e:	6f 5f       	subi	r22, 0xFF	; 255
     a60:	7f 4f       	sbci	r23, 0xFF	; 255
     a62:	0e 94 35 1f 	call	0x3e6a	; 0x3e6a <strtok>
  year = atoi(section);
     a66:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <atoi>
     a6a:	4c 01       	movw	r8, r24
  section = strtok(NULL, chp);
     a6c:	be 01       	movw	r22, r28
     a6e:	6f 5f       	subi	r22, 0xFF	; 255
     a70:	7f 4f       	sbci	r23, 0xFF	; 255
     a72:	80 e0       	ldi	r24, 0x00	; 0
     a74:	90 e0       	ldi	r25, 0x00	; 0
     a76:	0e 94 35 1f 	call	0x3e6a	; 0x3e6a <strtok>
  month = atoi(section);
     a7a:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <atoi>
     a7e:	18 2f       	mov	r17, r24
  section = strtok(NULL, chp);
     a80:	be 01       	movw	r22, r28
     a82:	6f 5f       	subi	r22, 0xFF	; 255
     a84:	7f 4f       	sbci	r23, 0xFF	; 255
     a86:	80 e0       	ldi	r24, 0x00	; 0
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	0e 94 35 1f 	call	0x3e6a	; 0x3e6a <strtok>
  day = atoi(section);
     a8e:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <atoi>
     a92:	f8 2e       	mov	r15, r24
  section = strtok(NULL, chp);
     a94:	be 01       	movw	r22, r28
     a96:	6f 5f       	subi	r22, 0xFF	; 255
     a98:	7f 4f       	sbci	r23, 0xFF	; 255
     a9a:	80 e0       	ldi	r24, 0x00	; 0
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	0e 94 35 1f 	call	0x3e6a	; 0x3e6a <strtok>
  hour = atoi(section);
     aa2:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <atoi>
     aa6:	08 2f       	mov	r16, r24
  section = strtok(NULL, chp);
     aa8:	be 01       	movw	r22, r28
     aaa:	6f 5f       	subi	r22, 0xFF	; 255
     aac:	7f 4f       	sbci	r23, 0xFF	; 255
     aae:	80 e0       	ldi	r24, 0x00	; 0
     ab0:	90 e0       	ldi	r25, 0x00	; 0
     ab2:	0e 94 35 1f 	call	0x3e6a	; 0x3e6a <strtok>
  min = atoi(section);
     ab6:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <atoi>
     aba:	e8 2e       	mov	r14, r24
  section = strtok(NULL, chp);
     abc:	be 01       	movw	r22, r28
     abe:	6f 5f       	subi	r22, 0xFF	; 255
     ac0:	7f 4f       	sbci	r23, 0xFF	; 255
     ac2:	80 e0       	ldi	r24, 0x00	; 0
     ac4:	90 e0       	ldi	r25, 0x00	; 0
     ac6:	0e 94 35 1f 	call	0x3e6a	; 0x3e6a <strtok>
  sec = atoi(section);
     aca:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <atoi>
  Serial.print(":");
  Serial.print(min);
  Serial.print(":");
  Serial.println(sec);
#endif
  return DateTime(year, month, day, hour, min, sec);
     ace:	c8 2e       	mov	r12, r24
     ad0:	2f 2d       	mov	r18, r15
     ad2:	41 2f       	mov	r20, r17
     ad4:	b4 01       	movw	r22, r8
     ad6:	c5 01       	movw	r24, r10
     ad8:	0e 94 97 18 	call	0x312e	; 0x312e <_ZN8DateTimeC1Ejhhhhh>
     adc:	c5 01       	movw	r24, r10
     ade:	0f 90       	pop	r0
     ae0:	0f 90       	pop	r0
     ae2:	df 91       	pop	r29
     ae4:	cf 91       	pop	r28
     ae6:	1f 91       	pop	r17
     ae8:	0f 91       	pop	r16
     aea:	ff 90       	pop	r15
     aec:	ef 90       	pop	r14
     aee:	cf 90       	pop	r12
     af0:	bf 90       	pop	r11
     af2:	af 90       	pop	r10
     af4:	9f 90       	pop	r9
     af6:	8f 90       	pop	r8
     af8:	08 95       	ret

00000afa <_ZN8ElcanRtc18adjust_from_serialEv>:

DateTime ElcanRtc::now() {
  return this->rtc.now();
}

void ElcanRtc::adjust_from_serial() {
     afa:	ef 92       	push	r14
     afc:	ff 92       	push	r15
     afe:	0f 93       	push	r16
     b00:	1f 93       	push	r17
     b02:	cf 93       	push	r28
     b04:	df 93       	push	r29
     b06:	cd b7       	in	r28, 0x3d	; 61
     b08:	de b7       	in	r29, 0x3e	; 62
     b0a:	c0 54       	subi	r28, 0x40	; 64
     b0c:	d1 09       	sbc	r29, r1
     b0e:	0f b6       	in	r0, 0x3f	; 63
     b10:	f8 94       	cli
     b12:	de bf       	out	0x3e, r29	; 62
     b14:	0f be       	out	0x3f, r0	; 63
     b16:	cd bf       	out	0x3d, r28	; 61
     b18:	7c 01       	movw	r14, r24
  char dateString[32];
  char date[11];
  char time[9];
  char pos = 0;
  DateTime stamp;
     b1a:	40 e0       	ldi	r20, 0x00	; 0
     b1c:	50 e0       	ldi	r21, 0x00	; 0
     b1e:	ba 01       	movw	r22, r20
     b20:	ce 01       	movw	r24, r28
     b22:	cb 96       	adiw	r24, 0x3b	; 59
     b24:	0e 94 1f 18 	call	0x303e	; 0x303e <_ZN8DateTimeC1Em>
  memset(dateString, 0, sizeof(dateString));
     b28:	8e 01       	movw	r16, r28
     b2a:	0f 5f       	subi	r16, 0xFF	; 255
     b2c:	1f 4f       	sbci	r17, 0xFF	; 255
     b2e:	80 e2       	ldi	r24, 0x20	; 32
     b30:	d8 01       	movw	r26, r16
     b32:	1d 92       	st	X+, r1
     b34:	8a 95       	dec	r24
     b36:	e9 f7       	brne	.-6      	; 0xb32 <_ZN8ElcanRtc18adjust_from_serialEv+0x38>
  memset(date, 0, sizeof(date));
     b38:	fe 01       	movw	r30, r28
     b3a:	b1 96       	adiw	r30, 0x21	; 33
     b3c:	8b e0       	ldi	r24, 0x0B	; 11
     b3e:	df 01       	movw	r26, r30
     b40:	1d 92       	st	X+, r1
     b42:	8a 95       	dec	r24
     b44:	e9 f7       	brne	.-6      	; 0xb40 <_ZN8ElcanRtc18adjust_from_serialEv+0x46>
  memset(time, 0, sizeof(time));
     b46:	3b 96       	adiw	r30, 0x0b	; 11
     b48:	89 e0       	ldi	r24, 0x09	; 9
     b4a:	df 01       	movw	r26, r30
     b4c:	1d 92       	st	X+, r1
     b4e:	8a 95       	dec	r24
     b50:	e9 f7       	brne	.-6      	; 0xb4c <_ZN8ElcanRtc18adjust_from_serialEv+0x52>
     b52:	6d e4       	ldi	r22, 0x4D	; 77
     b54:	8d e9       	ldi	r24, 0x9D	; 157
     b56:	92 e0       	ldi	r25, 0x02	; 2
     b58:	0e 94 3f 0a 	call	0x147e	; 0x147e <_ZN14HardwareSerial5writeEh>
  Serial.write('M');
  Serial.flush();
     b5c:	8d e9       	ldi	r24, 0x9D	; 157
     b5e:	92 e0       	ldi	r25, 0x02	; 2
     b60:	0e 94 8c 0a 	call	0x1518	; 0x1518 <_ZN14HardwareSerial5flushEv>
  delay(1);
     b64:	61 e0       	ldi	r22, 0x01	; 1
     b66:	70 e0       	ldi	r23, 0x00	; 0
     b68:	80 e0       	ldi	r24, 0x00	; 0
     b6a:	90 e0       	ldi	r25, 0x00	; 0
     b6c:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <delay>
  pos = Serial.readBytesUntil('\r', dateString, sizeof(dateString));
     b70:	20 e2       	ldi	r18, 0x20	; 32
     b72:	30 e0       	ldi	r19, 0x00	; 0
     b74:	a8 01       	movw	r20, r16
     b76:	6d e0       	ldi	r22, 0x0D	; 13
     b78:	8d e9       	ldi	r24, 0x9D	; 157
     b7a:	92 e0       	ldi	r25, 0x02	; 2
     b7c:	0e 94 36 0c 	call	0x186c	; 0x186c <_ZN6Stream14readBytesUntilEcPcj>
  if (pos > 10) {
     b80:	8b 30       	cpi	r24, 0x0B	; 11
     b82:	98 f0       	brcs	.+38     	; 0xbaa <_ZN8ElcanRtc18adjust_from_serialEv+0xb0>
    stamp = split_date_time(dateString);
     b84:	a8 01       	movw	r20, r16
     b86:	b7 01       	movw	r22, r14
     b88:	ce 01       	movw	r24, r28
     b8a:	c5 96       	adiw	r24, 0x35	; 53
     b8c:	0e 94 1a 05 	call	0xa34	; 0xa34 <_ZN8ElcanRtc15split_date_timeEPc>
     b90:	86 e0       	ldi	r24, 0x06	; 6
     b92:	fe 01       	movw	r30, r28
     b94:	f5 96       	adiw	r30, 0x35	; 53
     b96:	de 01       	movw	r26, r28
     b98:	db 96       	adiw	r26, 0x3b	; 59
     b9a:	01 90       	ld	r0, Z+
     b9c:	0d 92       	st	X+, r0
     b9e:	8a 95       	dec	r24
     ba0:	e1 f7       	brne	.-8      	; 0xb9a <_ZN8ElcanRtc18adjust_from_serialEv+0xa0>
#ifdef DEBUG
    Serial.write('#');
    Serial.println(stamp.unixtime());
#endif
    this->rtc.adjust(stamp);
     ba2:	ce 01       	movw	r24, r28
     ba4:	cb 96       	adiw	r24, 0x3b	; 59
     ba6:	0e 94 34 1a 	call	0x3468	; 0x3468 <_ZN10RTC_DS32316adjustERK8DateTime>
  }
  CLEAR_SERIAL
     baa:	8d e9       	ldi	r24, 0x9D	; 157
     bac:	92 e0       	ldi	r25, 0x02	; 2
     bae:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <_ZN14HardwareSerial9availableEv>
     bb2:	89 2b       	or	r24, r25
     bb4:	29 f0       	breq	.+10     	; 0xbc0 <_ZN8ElcanRtc18adjust_from_serialEv+0xc6>
     bb6:	8d e9       	ldi	r24, 0x9D	; 157
     bb8:	92 e0       	ldi	r25, 0x02	; 2
     bba:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <_ZN14HardwareSerial4readEv>
     bbe:	f5 cf       	rjmp	.-22     	; 0xbaa <_ZN8ElcanRtc18adjust_from_serialEv+0xb0>
}
     bc0:	c0 5c       	subi	r28, 0xC0	; 192
     bc2:	df 4f       	sbci	r29, 0xFF	; 255
     bc4:	0f b6       	in	r0, 0x3f	; 63
     bc6:	f8 94       	cli
     bc8:	de bf       	out	0x3e, r29	; 62
     bca:	0f be       	out	0x3f, r0	; 63
     bcc:	cd bf       	out	0x3d, r28	; 61
     bce:	df 91       	pop	r29
     bd0:	cf 91       	pop	r28
     bd2:	1f 91       	pop	r17
     bd4:	0f 91       	pop	r16
     bd6:	ff 90       	pop	r15
     bd8:	ef 90       	pop	r14
     bda:	08 95       	ret

00000bdc <setup>:
#include "main.h"

/**
 * System setup
 */
void setup() {
     bdc:	0f 93       	push	r16
     bde:	1f 93       	push	r17
     be0:	cf 93       	push	r28
     be2:	df 93       	push	r29
     be4:	cd b7       	in	r28, 0x3d	; 61
     be6:	de b7       	in	r29, 0x3e	; 62
     be8:	6e 97       	sbiw	r28, 0x1e	; 30
     bea:	0f b6       	in	r0, 0x3f	; 63
     bec:	f8 94       	cli
     bee:	de bf       	out	0x3e, r29	; 62
     bf0:	0f be       	out	0x3f, r0	; 63
     bf2:	cd bf       	out	0x3d, r28	; 61
  char ipaddr[30];
  memset(ipaddr, 0, sizeof(ipaddr));
     bf4:	8e 01       	movw	r16, r28
     bf6:	0f 5f       	subi	r16, 0xFF	; 255
     bf8:	1f 4f       	sbci	r17, 0xFF	; 255
     bfa:	8e e1       	ldi	r24, 0x1E	; 30
     bfc:	f8 01       	movw	r30, r16
     bfe:	11 92       	st	Z+, r1
     c00:	8a 95       	dec	r24
     c02:	e9 f7       	brne	.-6      	; 0xbfe <setup+0x22>
  pinMode(WIFI_RX, INPUT);
     c04:	60 e0       	ldi	r22, 0x00	; 0
     c06:	85 e0       	ldi	r24, 0x05	; 5
     c08:	0e 94 a3 10 	call	0x2146	; 0x2146 <pinMode>
  pinMode(WIFI_TX, OUTPUT);
     c0c:	61 e0       	ldi	r22, 0x01	; 1
     c0e:	86 e0       	ldi	r24, 0x06	; 6
     c10:	0e 94 a3 10 	call	0x2146	; 0x2146 <pinMode>
  pinMode(BARRERA, OUTPUT);
     c14:	61 e0       	ldi	r22, 0x01	; 1
     c16:	84 e0       	ldi	r24, 0x04	; 4
     c18:	0e 94 a3 10 	call	0x2146	; 0x2146 <pinMode>
  pinMode(BUZZER, OUTPUT);
     c1c:	61 e0       	ldi	r22, 0x01	; 1
     c1e:	83 e0       	ldi	r24, 0x03	; 3
     c20:	0e 94 a3 10 	call	0x2146	; 0x2146 <pinMode>
  pinMode(RFID_SS, OUTPUT);
     c24:	61 e0       	ldi	r22, 0x01	; 1
     c26:	8a e0       	ldi	r24, 0x0A	; 10
     c28:	0e 94 a3 10 	call	0x2146	; 0x2146 <pinMode>
  pinMode(RFID_RST, OUTPUT);
     c2c:	61 e0       	ldi	r22, 0x01	; 1
     c2e:	89 e0       	ldi	r24, 0x09	; 9
     c30:	0e 94 a3 10 	call	0x2146	; 0x2146 <pinMode>
  digitalWrite(BARRERA, LOW);
     c34:	60 e0       	ldi	r22, 0x00	; 0
     c36:	84 e0       	ldi	r24, 0x04	; 4
     c38:	0e 94 df 10 	call	0x21be	; 0x21be <digitalWrite>
  digitalWrite(BUZZER, LOW);
     c3c:	60 e0       	ldi	r22, 0x00	; 0
     c3e:	83 e0       	ldi	r24, 0x03	; 3
     c40:	0e 94 df 10 	call	0x21be	; 0x21be <digitalWrite>
#ifdef WITH_WEIGHT
  scale.begin(SCALE_I2C_ADDR); // according to wheight measurement device
#endif
  Wire.begin();
     c44:	8c e5       	ldi	r24, 0x5C	; 92
     c46:	93 e0       	ldi	r25, 0x03	; 3
     c48:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <_ZN7TwoWire5beginEv>
  SPI.begin();           // MFRC522 Hardware uses SPI protocol
     c4c:	0e 94 cf 1a 	call	0x359e	; 0x359e <_ZN8SPIClass5beginEv>
  ElcanLcd.begin(16, 2);
     c50:	42 e0       	ldi	r20, 0x02	; 2
     c52:	60 e1       	ldi	r22, 0x10	; 16
     c54:	81 e7       	ldi	r24, 0x71	; 113
     c56:	92 e0       	ldi	r25, 0x02	; 2
     c58:	0e 94 d5 01 	call	0x3aa	; 0x3aa <_ZN15ElcanLCDManager5beginEcc>
  rtc.initialize();
     c5c:	8e e6       	ldi	r24, 0x6E	; 110
     c5e:	92 e0       	ldi	r25, 0x02	; 2
     c60:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <_ZN8ElcanRtc10initializeEv>
  rfid.begin();
     c64:	8a e5       	ldi	r24, 0x5A	; 90
     c66:	92 e0       	ldi	r25, 0x02	; 2
     c68:	0e 94 b8 04 	call	0x970	; 0x970 <_ZN11RfidManager5beginEv>
  sys_state = READY;
     c6c:	81 e0       	ldi	r24, 0x01	; 1
     c6e:	80 93 9c 02 	sts	0x029C, r24	; 0x80029c <sys_state>
  backlightStart = 0;
     c72:	10 92 85 02 	sts	0x0285, r1	; 0x800285 <backlightStart>
     c76:	10 92 86 02 	sts	0x0286, r1	; 0x800286 <backlightStart+0x1>
     c7a:	10 92 87 02 	sts	0x0287, r1	; 0x800287 <backlightStart+0x2>
     c7e:	10 92 88 02 	sts	0x0288, r1	; 0x800288 <backlightStart+0x3>
  lastPoll = 0;
     c82:	10 92 81 02 	sts	0x0281, r1	; 0x800281 <lastPoll>
     c86:	10 92 82 02 	sts	0x0282, r1	; 0x800282 <lastPoll+0x1>
     c8a:	10 92 83 02 	sts	0x0283, r1	; 0x800283 <lastPoll+0x2>
     c8e:	10 92 84 02 	sts	0x0284, r1	; 0x800284 <lastPoll+0x3>
#ifdef WITH_WIFI
  delay(9000);
     c92:	68 e2       	ldi	r22, 0x28	; 40
     c94:	73 e2       	ldi	r23, 0x23	; 35
     c96:	80 e0       	ldi	r24, 0x00	; 0
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <delay>
  Serial.begin(115200, SERIAL_8N1);
     c9e:	26 e0       	ldi	r18, 0x06	; 6
     ca0:	40 e0       	ldi	r20, 0x00	; 0
     ca2:	52 ec       	ldi	r21, 0xC2	; 194
     ca4:	61 e0       	ldi	r22, 0x01	; 1
     ca6:	70 e0       	ldi	r23, 0x00	; 0
     ca8:	8d e9       	ldi	r24, 0x9D	; 157
     caa:	92 e0       	ldi	r25, 0x02	; 2
     cac:	0e 94 ae 0a 	call	0x155c	; 0x155c <_ZN14HardwareSerial5beginEmh>
  if (wifi.begin()) {
     cb0:	8f e6       	ldi	r24, 0x6F	; 111
     cb2:	92 e0       	ldi	r25, 0x02	; 2
     cb4:	0e 94 4b 03 	call	0x696	; 0x696 <_ZN9ElcanWifi5beginEv>
     cb8:	88 23       	and	r24, r24
     cba:	59 f0       	breq	.+22     	; 0xcd2 <setup+0xf6>
    wifi.get_ip(ipaddr);
     cbc:	b8 01       	movw	r22, r16
     cbe:	8f e6       	ldi	r24, 0x6F	; 111
     cc0:	92 e0       	ldi	r25, 0x02	; 2
     cc2:	0e 94 96 03 	call	0x72c	; 0x72c <_ZN9ElcanWifi6get_ipEPc>
    ElcanLcd.show_ip(ipaddr);
     cc6:	b8 01       	movw	r22, r16
     cc8:	81 e7       	ldi	r24, 0x71	; 113
     cca:	92 e0       	ldi	r25, 0x02	; 2
     ccc:	0e 94 ae 02 	call	0x55c	; 0x55c <_ZN15ElcanLCDManager7show_ipEPc>
     cd0:	03 c0       	rjmp	.+6      	; 0xcd8 <setup+0xfc>
  } else {
    sys_state = ERROR_WIFI;
     cd2:	82 e0       	ldi	r24, 0x02	; 2
     cd4:	80 93 9c 02 	sts	0x029C, r24	; 0x80029c <sys_state>
  }
#else
  ElcanLcd.show_message("Initialized...");
#endif
}
     cd8:	6e 96       	adiw	r28, 0x1e	; 30
     cda:	0f b6       	in	r0, 0x3f	; 63
     cdc:	f8 94       	cli
     cde:	de bf       	out	0x3e, r29	; 62
     ce0:	0f be       	out	0x3f, r0	; 63
     ce2:	cd bf       	out	0x3d, r28	; 61
     ce4:	df 91       	pop	r29
     ce6:	cf 91       	pop	r28
     ce8:	1f 91       	pop	r17
     cea:	0f 91       	pop	r16
     cec:	08 95       	ret

00000cee <_Z18check_card_and_actv>:
}

/**
 * Read card must be checked against the known ones
 */
bool check_card_and_act() {
     cee:	cf 93       	push	r28
  char ret;
  ret = is_known_card(rfid.readCard);
     cf0:	8a e6       	ldi	r24, 0x6A	; 106
     cf2:	92 e0       	ldi	r25, 0x02	; 2
     cf4:	0e 94 b9 00 	call	0x172	; 0x172 <_Z13is_known_cardPc>
     cf8:	c8 2f       	mov	r28, r24
  if (ret > 0) {
     cfa:	88 23       	and	r24, r24
     cfc:	11 f1       	breq	.+68     	; 0xd42 <_Z18check_card_and_actv+0x54>
    sys_state = READ_RTC;
     cfe:	80 e1       	ldi	r24, 0x10	; 16
     d00:	80 93 9c 02 	sts	0x029C, r24	; 0x80029c <sys_state>
    DO_KNOWN_BEEPS;
     d04:	24 e6       	ldi	r18, 0x64	; 100
     d06:	30 e0       	ldi	r19, 0x00	; 0
     d08:	40 e0       	ldi	r20, 0x00	; 0
     d0a:	50 e0       	ldi	r21, 0x00	; 0
     d0c:	60 e2       	ldi	r22, 0x20	; 32
     d0e:	73 e0       	ldi	r23, 0x03	; 3
     d10:	83 e0       	ldi	r24, 0x03	; 3
     d12:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <_Z4tonehjm>
     d16:	64 e6       	ldi	r22, 0x64	; 100
     d18:	70 e0       	ldi	r23, 0x00	; 0
     d1a:	80 e0       	ldi	r24, 0x00	; 0
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <delay>
     d22:	24 e6       	ldi	r18, 0x64	; 100
     d24:	30 e0       	ldi	r19, 0x00	; 0
     d26:	40 e0       	ldi	r20, 0x00	; 0
     d28:	50 e0       	ldi	r21, 0x00	; 0
     d2a:	60 e2       	ldi	r22, 0x20	; 32
     d2c:	73 e0       	ldi	r23, 0x03	; 3
     d2e:	83 e0       	ldi	r24, 0x03	; 3
     d30:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <_Z4tonehjm>
     d34:	64 e6       	ldi	r22, 0x64	; 100
     d36:	70 e0       	ldi	r23, 0x00	; 0
     d38:	80 e0       	ldi	r24, 0x00	; 0
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <delay>
     d40:	03 c0       	rjmp	.+6      	; 0xd48 <_Z18check_card_and_actv+0x5a>
  } else {
    sys_state = UNKNOWN_CARD;
     d42:	89 e8       	ldi	r24, 0x89	; 137
     d44:	80 93 9c 02 	sts	0x029C, r24	; 0x80029c <sys_state>
  }
  return ret;
     d48:	81 e0       	ldi	r24, 0x01	; 1
     d4a:	c1 11       	cpse	r28, r1
     d4c:	01 c0       	rjmp	.+2      	; 0xd50 <_Z18check_card_and_actv+0x62>
     d4e:	80 e0       	ldi	r24, 0x00	; 0
}
     d50:	cf 91       	pop	r28
     d52:	08 95       	ret

00000d54 <_Z12open_barrierv>:

void open_barrier() {
  digitalWrite(BARRERA, 1);
     d54:	61 e0       	ldi	r22, 0x01	; 1
     d56:	84 e0       	ldi	r24, 0x04	; 4
     d58:	0e 94 df 10 	call	0x21be	; 0x21be <digitalWrite>
  delay(8000); //wait until the barrier acknowledges the open command
     d5c:	60 e4       	ldi	r22, 0x40	; 64
     d5e:	7f e1       	ldi	r23, 0x1F	; 31
     d60:	80 e0       	ldi	r24, 0x00	; 0
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <delay>
  digitalWrite(BARRERA, 0); //release Barrier switch
     d68:	60 e0       	ldi	r22, 0x00	; 0
     d6a:	84 e0       	ldi	r24, 0x04	; 4
     d6c:	0c 94 df 10 	jmp	0x21be	; 0x21be <digitalWrite>

00000d70 <_Z18check_elapsed_timev>:
}

bool check_elapsed_time() {
     d70:	cf 93       	push	r28
     d72:	df 93       	push	r29
     d74:	cd b7       	in	r28, 0x3d	; 61
     d76:	de b7       	in	r29, 0x3e	; 62
     d78:	2a 97       	sbiw	r28, 0x0a	; 10
     d7a:	0f b6       	in	r0, 0x3f	; 63
     d7c:	f8 94       	cli
     d7e:	de bf       	out	0x3e, r29	; 62
     d80:	0f be       	out	0x3f, r0	; 63
     d82:	cd bf       	out	0x3d, r28	; 61
  DateTime current = rtc.now();
     d84:	6e e6       	ldi	r22, 0x6E	; 110
     d86:	72 e0       	ldi	r23, 0x02	; 2
     d88:	ce 01       	movw	r24, r28
     d8a:	01 96       	adiw	r24, 0x01	; 1
     d8c:	0e 94 11 05 	call	0xa22	; 0xa22 <_ZN8ElcanRtc3nowEv>
  TimeSpan diff_time = (current - timerStarted);
     d90:	49 e8       	ldi	r20, 0x89	; 137
     d92:	52 e0       	ldi	r21, 0x02	; 2
     d94:	be 01       	movw	r22, r28
     d96:	6f 5f       	subi	r22, 0xFF	; 255
     d98:	7f 4f       	sbci	r23, 0xFF	; 255
     d9a:	ce 01       	movw	r24, r28
     d9c:	07 96       	adiw	r24, 0x07	; 7
     d9e:	0e 94 63 19 	call	0x32c6	; 0x32c6 <_ZN8DateTimemiERKS_>
  if (diff_time.totalseconds() >= WAITING_TIME) {
     da2:	81 e0       	ldi	r24, 0x01	; 1
     da4:	4f 81       	ldd	r20, Y+7	; 0x07
     da6:	58 85       	ldd	r21, Y+8	; 0x08
     da8:	69 85       	ldd	r22, Y+9	; 0x09
     daa:	7a 85       	ldd	r23, Y+10	; 0x0a
     dac:	4a 30       	cpi	r20, 0x0A	; 10
     dae:	51 05       	cpc	r21, r1
     db0:	61 05       	cpc	r22, r1
     db2:	71 05       	cpc	r23, r1
     db4:	0c f4       	brge	.+2      	; 0xdb8 <_Z18check_elapsed_timev+0x48>
     db6:	80 e0       	ldi	r24, 0x00	; 0
    return true;
  }
  return false;
}
     db8:	2a 96       	adiw	r28, 0x0a	; 10
     dba:	0f b6       	in	r0, 0x3f	; 63
     dbc:	f8 94       	cli
     dbe:	de bf       	out	0x3e, r29	; 62
     dc0:	0f be       	out	0x3f, r0	; 63
     dc2:	cd bf       	out	0x3d, r28	; 61
     dc4:	df 91       	pop	r29
     dc6:	cf 91       	pop	r28
     dc8:	08 95       	ret

00000dca <_Z14send_to_serverv>:

void send_to_server() {
     dca:	ef 92       	push	r14
     dcc:	ff 92       	push	r15
     dce:	0f 93       	push	r16
     dd0:	1f 93       	push	r17
     dd2:	cf 93       	push	r28
     dd4:	df 93       	push	r29
     dd6:	cd b7       	in	r28, 0x3d	; 61
     dd8:	de b7       	in	r29, 0x3e	; 62
     dda:	c5 54       	subi	r28, 0x45	; 69
     ddc:	d1 09       	sbc	r29, r1
     dde:	0f b6       	in	r0, 0x3f	; 63
     de0:	f8 94       	cli
     de2:	de bf       	out	0x3e, r29	; 62
     de4:	0f be       	out	0x3f, r0	; 63
     de6:	cd bf       	out	0x3d, r28	; 61
  char tmp[48];
  char timestr[21];
  memset(tmp, 0, sizeof(tmp));
     de8:	8e 01       	movw	r16, r28
     dea:	0f 5f       	subi	r16, 0xFF	; 255
     dec:	1f 4f       	sbci	r17, 0xFF	; 255
     dee:	80 e3       	ldi	r24, 0x30	; 48
     df0:	f8 01       	movw	r30, r16
     df2:	11 92       	st	Z+, r1
     df4:	8a 95       	dec	r24
     df6:	e9 f7       	brne	.-6      	; 0xdf2 <_Z14send_to_serverv+0x28>
  memset(timestr, 0, sizeof(timestr));
     df8:	7e 01       	movw	r14, r28
     dfa:	f1 e3       	ldi	r31, 0x31	; 49
     dfc:	ef 0e       	add	r14, r31
     dfe:	f1 1c       	adc	r15, r1
     e00:	85 e1       	ldi	r24, 0x15	; 21
     e02:	f7 01       	movw	r30, r14
     e04:	11 92       	st	Z+, r1
     e06:	8a 95       	dec	r24
     e08:	e9 f7       	brne	.-6      	; 0xe04 <_Z14send_to_serverv+0x3a>
  sprintf(tmp, "%02x%02x%02x%02x*", rfid.readCard[0], rfid.readCard[1], rfid.readCard[2], rfid.readCard[3]);
     e0a:	ea e5       	ldi	r30, 0x5A	; 90
     e0c:	f2 e0       	ldi	r31, 0x02	; 2
     e0e:	83 89       	ldd	r24, Z+19	; 0x13
     e10:	1f 92       	push	r1
     e12:	8f 93       	push	r24
     e14:	82 89       	ldd	r24, Z+18	; 0x12
     e16:	1f 92       	push	r1
     e18:	8f 93       	push	r24
     e1a:	81 89       	ldd	r24, Z+17	; 0x11
     e1c:	1f 92       	push	r1
     e1e:	8f 93       	push	r24
     e20:	80 89       	ldd	r24, Z+16	; 0x10
     e22:	1f 92       	push	r1
     e24:	8f 93       	push	r24
     e26:	87 e7       	ldi	r24, 0x77	; 119
     e28:	91 e0       	ldi	r25, 0x01	; 1
     e2a:	9f 93       	push	r25
     e2c:	8f 93       	push	r24
     e2e:	1f 93       	push	r17
     e30:	0f 93       	push	r16
     e32:	0e 94 9d 1f 	call	0x3f3a	; 0x3f3a <sprintf>
     e36:	ef e8       	ldi	r30, 0x8F	; 143
     e38:	f2 e0       	ldi	r31, 0x02	; 2
  sprintf(timestr, "%04d-%02d-%02d %02d:%02d:%02d", enteringTime.year(), enteringTime.month(),
    enteringTime.day(), enteringTime.hour(), enteringTime.minute(), enteringTime.second());
     e3a:	85 81       	ldd	r24, Z+5	; 0x05
     e3c:	1f 92       	push	r1
     e3e:	8f 93       	push	r24
     e40:	84 81       	ldd	r24, Z+4	; 0x04
     e42:	1f 92       	push	r1
     e44:	8f 93       	push	r24
     e46:	83 81       	ldd	r24, Z+3	; 0x03
     e48:	1f 92       	push	r1
     e4a:	8f 93       	push	r24
     e4c:	82 81       	ldd	r24, Z+2	; 0x02
     e4e:	1f 92       	push	r1
     e50:	8f 93       	push	r24
     e52:	81 81       	ldd	r24, Z+1	; 0x01
     e54:	1f 92       	push	r1
     e56:	8f 93       	push	r24
     e58:	80 81       	ld	r24, Z
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	80 53       	subi	r24, 0x30	; 48
     e5e:	98 4f       	sbci	r25, 0xF8	; 248
     e60:	9f 93       	push	r25
     e62:	8f 93       	push	r24
     e64:	89 e8       	ldi	r24, 0x89	; 137
     e66:	91 e0       	ldi	r25, 0x01	; 1
     e68:	9f 93       	push	r25
     e6a:	8f 93       	push	r24
     e6c:	ff 92       	push	r15
     e6e:	ef 92       	push	r14
     e70:	0e 94 9d 1f 	call	0x3f3a	; 0x3f3a <sprintf>
  strcat(tmp, timestr);
     e74:	b7 01       	movw	r22, r14
     e76:	c8 01       	movw	r24, r16
     e78:	0e 94 4a 1f 	call	0x3e94	; 0x3e94 <strcat>
  strcat(tmp, "*");
     e7c:	67 e8       	ldi	r22, 0x87	; 135
     e7e:	71 e0       	ldi	r23, 0x01	; 1
     e80:	c8 01       	movw	r24, r16
     e82:	0e 94 4a 1f 	call	0x3e94	; 0x3e94 <strcat>
  strncat(tmp, (char *)measuredWeight, 6);
     e86:	46 e0       	ldi	r20, 0x06	; 6
     e88:	50 e0       	ldi	r21, 0x00	; 0
     e8a:	65 e9       	ldi	r22, 0x95	; 149
     e8c:	72 e0       	ldi	r23, 0x02	; 2
     e8e:	c8 01       	movw	r24, r16
     e90:	0e 94 5e 1f 	call	0x3ebc	; 0x3ebc <strncat>
#ifdef DEBUG
  Serial.write("#");
  Serial.println(tmp);
#endif
  wifi.sendEntry(tmp);
     e94:	b8 01       	movw	r22, r16
     e96:	8f e6       	ldi	r24, 0x6F	; 111
     e98:	92 e0       	ldi	r25, 0x02	; 2
     e9a:	0e 94 50 04 	call	0x8a0	; 0x8a0 <_ZN9ElcanWifi9sendEntryEPc>
}
     e9e:	0f b6       	in	r0, 0x3f	; 63
     ea0:	f8 94       	cli
     ea2:	de bf       	out	0x3e, r29	; 62
     ea4:	0f be       	out	0x3f, r0	; 63
     ea6:	cd bf       	out	0x3d, r28	; 61
     ea8:	cb 5b       	subi	r28, 0xBB	; 187
     eaa:	df 4f       	sbci	r29, 0xFF	; 255
     eac:	0f b6       	in	r0, 0x3f	; 63
     eae:	f8 94       	cli
     eb0:	de bf       	out	0x3e, r29	; 62
     eb2:	0f be       	out	0x3f, r0	; 63
     eb4:	cd bf       	out	0x3d, r28	; 61
     eb6:	df 91       	pop	r29
     eb8:	cf 91       	pop	r28
     eba:	1f 91       	pop	r17
     ebc:	0f 91       	pop	r16
     ebe:	ff 90       	pop	r15
     ec0:	ef 90       	pop	r14
     ec2:	08 95       	ret

00000ec4 <_Z32send_intrussion_attemp_to_serverv>:

void send_intrussion_attemp_to_server(){
     ec4:	ef 92       	push	r14
     ec6:	ff 92       	push	r15
     ec8:	0f 93       	push	r16
     eca:	1f 93       	push	r17
     ecc:	cf 93       	push	r28
     ece:	df 93       	push	r29
     ed0:	cd b7       	in	r28, 0x3d	; 61
     ed2:	de b7       	in	r29, 0x3e	; 62
     ed4:	cb 54       	subi	r28, 0x4B	; 75
     ed6:	d1 09       	sbc	r29, r1
     ed8:	0f b6       	in	r0, 0x3f	; 63
     eda:	f8 94       	cli
     edc:	de bf       	out	0x3e, r29	; 62
     ede:	0f be       	out	0x3f, r0	; 63
     ee0:	cd bf       	out	0x3d, r28	; 61
  char tmp[48];
  char timestr[21];
  DateTime stamp = rtc.now();
     ee2:	6e e6       	ldi	r22, 0x6E	; 110
     ee4:	72 e0       	ldi	r23, 0x02	; 2
     ee6:	ce 01       	movw	r24, r28
     ee8:	8a 5b       	subi	r24, 0xBA	; 186
     eea:	9f 4f       	sbci	r25, 0xFF	; 255
     eec:	0e 94 11 05 	call	0xa22	; 0xa22 <_ZN8ElcanRtc3nowEv>
  sprintf(tmp, "%02x%02x%02x%02x", rfid.readCard[0], rfid.readCard[1], rfid.readCard[2], rfid.readCard[3]);
     ef0:	ea e5       	ldi	r30, 0x5A	; 90
     ef2:	f2 e0       	ldi	r31, 0x02	; 2
     ef4:	83 89       	ldd	r24, Z+19	; 0x13
     ef6:	1f 92       	push	r1
     ef8:	8f 93       	push	r24
     efa:	82 89       	ldd	r24, Z+18	; 0x12
     efc:	1f 92       	push	r1
     efe:	8f 93       	push	r24
     f00:	81 89       	ldd	r24, Z+17	; 0x11
     f02:	1f 92       	push	r1
     f04:	8f 93       	push	r24
     f06:	80 89       	ldd	r24, Z+16	; 0x10
     f08:	1f 92       	push	r1
     f0a:	8f 93       	push	r24
     f0c:	87 ea       	ldi	r24, 0xA7	; 167
     f0e:	91 e0       	ldi	r25, 0x01	; 1
     f10:	9f 93       	push	r25
     f12:	8f 93       	push	r24
     f14:	8e 01       	movw	r16, r28
     f16:	0f 5f       	subi	r16, 0xFF	; 255
     f18:	1f 4f       	sbci	r17, 0xFF	; 255
     f1a:	1f 93       	push	r17
     f1c:	0f 93       	push	r16
     f1e:	0e 94 9d 1f 	call	0x3f3a	; 0x3f3a <sprintf>
  strcat(tmp, "*");
     f22:	67 e8       	ldi	r22, 0x87	; 135
     f24:	71 e0       	ldi	r23, 0x01	; 1
     f26:	c8 01       	movw	r24, r16
     f28:	0e 94 4a 1f 	call	0x3e94	; 0x3e94 <strcat>
  sprintf(timestr, "%04d-%02d-%02d %02d:%02d:%02d", stamp.year(), stamp.month(),
    stamp.day(), stamp.hour(), stamp.minute(), stamp.second());
     f2c:	2c 96       	adiw	r28, 0x0c	; 12
     f2e:	8f ad       	ldd	r24, Y+63	; 0x3f
     f30:	2c 97       	sbiw	r28, 0x0c	; 12
     f32:	1f 92       	push	r1
     f34:	8f 93       	push	r24
     f36:	2b 96       	adiw	r28, 0x0b	; 11
     f38:	8f ad       	ldd	r24, Y+63	; 0x3f
     f3a:	2b 97       	sbiw	r28, 0x0b	; 11
     f3c:	1f 92       	push	r1
     f3e:	8f 93       	push	r24
     f40:	2a 96       	adiw	r28, 0x0a	; 10
     f42:	8f ad       	ldd	r24, Y+63	; 0x3f
     f44:	2a 97       	sbiw	r28, 0x0a	; 10
     f46:	1f 92       	push	r1
     f48:	8f 93       	push	r24
     f4a:	29 96       	adiw	r28, 0x09	; 9
     f4c:	8f ad       	ldd	r24, Y+63	; 0x3f
     f4e:	29 97       	sbiw	r28, 0x09	; 9
     f50:	1f 92       	push	r1
     f52:	8f 93       	push	r24
     f54:	28 96       	adiw	r28, 0x08	; 8
     f56:	8f ad       	ldd	r24, Y+63	; 0x3f
     f58:	28 97       	sbiw	r28, 0x08	; 8
     f5a:	1f 92       	push	r1
     f5c:	8f 93       	push	r24
     f5e:	27 96       	adiw	r28, 0x07	; 7
     f60:	8f ad       	ldd	r24, Y+63	; 0x3f
     f62:	27 97       	sbiw	r28, 0x07	; 7
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	80 53       	subi	r24, 0x30	; 48
     f68:	98 4f       	sbci	r25, 0xF8	; 248
     f6a:	9f 93       	push	r25
     f6c:	8f 93       	push	r24
     f6e:	89 e8       	ldi	r24, 0x89	; 137
     f70:	91 e0       	ldi	r25, 0x01	; 1
     f72:	9f 93       	push	r25
     f74:	8f 93       	push	r24
     f76:	7e 01       	movw	r14, r28
     f78:	81 e3       	ldi	r24, 0x31	; 49
     f7a:	e8 0e       	add	r14, r24
     f7c:	f1 1c       	adc	r15, r1
     f7e:	ff 92       	push	r15
     f80:	ef 92       	push	r14
     f82:	0e 94 9d 1f 	call	0x3f3a	; 0x3f3a <sprintf>
  strcat(tmp, timestr);
     f86:	b7 01       	movw	r22, r14
     f88:	c8 01       	movw	r24, r16
     f8a:	0e 94 4a 1f 	call	0x3e94	; 0x3e94 <strcat>
#ifdef DEBUG
  Serial.write("#");
  Serial.println(tmp);
#endif
  wifi.sendIntrussionAttemp(tmp);
     f8e:	b8 01       	movw	r22, r16
     f90:	8f e6       	ldi	r24, 0x6F	; 111
     f92:	92 e0       	ldi	r25, 0x02	; 2
     f94:	0e 94 04 04 	call	0x808	; 0x808 <_ZN9ElcanWifi20sendIntrussionAttempEPc>
}
     f98:	0f b6       	in	r0, 0x3f	; 63
     f9a:	f8 94       	cli
     f9c:	de bf       	out	0x3e, r29	; 62
     f9e:	0f be       	out	0x3f, r0	; 63
     fa0:	cd bf       	out	0x3d, r28	; 61
     fa2:	c5 5b       	subi	r28, 0xB5	; 181
     fa4:	df 4f       	sbci	r29, 0xFF	; 255
     fa6:	0f b6       	in	r0, 0x3f	; 63
     fa8:	f8 94       	cli
     faa:	de bf       	out	0x3e, r29	; 62
     fac:	0f be       	out	0x3f, r0	; 63
     fae:	cd bf       	out	0x3d, r28	; 61
     fb0:	df 91       	pop	r29
     fb2:	cf 91       	pop	r28
     fb4:	1f 91       	pop	r17
     fb6:	0f 91       	pop	r16
     fb8:	ff 90       	pop	r15
     fba:	ef 90       	pop	r14
     fbc:	08 95       	ret

00000fbe <_Z12alertUnknownv>:

void alertUnknown() {
     fbe:	cf 93       	push	r28
  ElcanLcd.show_message("Acceso negado,  Informando...");
     fc0:	68 eb       	ldi	r22, 0xB8	; 184
     fc2:	71 e0       	ldi	r23, 0x01	; 1
     fc4:	81 e7       	ldi	r24, 0x71	; 113
     fc6:	92 e0       	ldi	r25, 0x02	; 2
     fc8:	0e 94 46 02 	call	0x48c	; 0x48c <_ZN15ElcanLCDManager12show_messageEPc>
  send_intrussion_attemp_to_server();
     fcc:	0e 94 62 07 	call	0xec4	; 0xec4 <_Z32send_intrussion_attemp_to_serverv>
     fd0:	c3 e0       	ldi	r28, 0x03	; 3
  DO_INTRUSSION_BEEPS;
     fd2:	28 ec       	ldi	r18, 0xC8	; 200
     fd4:	30 e0       	ldi	r19, 0x00	; 0
     fd6:	40 e0       	ldi	r20, 0x00	; 0
     fd8:	50 e0       	ldi	r21, 0x00	; 0
     fda:	6c ed       	ldi	r22, 0xDC	; 220
     fdc:	75 e0       	ldi	r23, 0x05	; 5
     fde:	83 e0       	ldi	r24, 0x03	; 3
     fe0:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <_Z4tonehjm>
     fe4:	66 e9       	ldi	r22, 0x96	; 150
     fe6:	70 e0       	ldi	r23, 0x00	; 0
     fe8:	80 e0       	ldi	r24, 0x00	; 0
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <delay>
     ff0:	c1 50       	subi	r28, 0x01	; 1
     ff2:	79 f7       	brne	.-34     	; 0xfd2 <_Z12alertUnknownv+0x14>
}
     ff4:	cf 91       	pop	r28
     ff6:	08 95       	ret

00000ff8 <_Z10check_wifiv>:
#endif
    erase_card(pos);
  }
}

void check_wifi() {
     ff8:	0f 93       	push	r16
     ffa:	1f 93       	push	r17
  byte polled;
  if (millis() - lastPoll > POLLING_INTERVAL) {
     ffc:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <millis>
    1000:	00 91 81 02 	lds	r16, 0x0281	; 0x800281 <lastPoll>
    1004:	10 91 82 02 	lds	r17, 0x0282	; 0x800282 <lastPoll+0x1>
    1008:	20 91 83 02 	lds	r18, 0x0283	; 0x800283 <lastPoll+0x2>
    100c:	30 91 84 02 	lds	r19, 0x0284	; 0x800284 <lastPoll+0x3>
    1010:	dc 01       	movw	r26, r24
    1012:	cb 01       	movw	r24, r22
    1014:	80 1b       	sub	r24, r16
    1016:	91 0b       	sbc	r25, r17
    1018:	a2 0b       	sbc	r26, r18
    101a:	b3 0b       	sbc	r27, r19
    101c:	89 3e       	cpi	r24, 0xE9	; 233
    101e:	93 40       	sbci	r25, 0x03	; 3
    1020:	a1 05       	cpc	r26, r1
    1022:	b1 05       	cpc	r27, r1
    1024:	b8 f0       	brcs	.+46     	; 0x1054 <_Z10check_wifiv+0x5c>
    polled = wifi.poll();
    1026:	8f e6       	ldi	r24, 0x6F	; 111
    1028:	92 e0       	ldi	r25, 0x02	; 2
    102a:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <_ZN9ElcanWifi4pollEv>
    switch(polled) {
    102e:	82 35       	cpi	r24, 0x52	; 82
    1030:	21 f0       	breq	.+8      	; 0x103a <_Z10check_wifiv+0x42>
    1032:	84 35       	cpi	r24, 0x54	; 84
    1034:	29 f4       	brne	.+10     	; 0x1040 <_Z10check_wifiv+0x48>
      case 'T':
        sys_state = GET_TAG_DATA;
    1036:	8b ea       	ldi	r24, 0xAB	; 171
    1038:	01 c0       	rjmp	.+2      	; 0x103c <_Z10check_wifiv+0x44>
        break;
      case 'R':
        sys_state = ADJUST_TIME;
    103a:	81 ec       	ldi	r24, 0xC1	; 193
    103c:	80 93 9c 02 	sts	0x029C, r24	; 0x80029c <sys_state>
        break;
    }
    lastPoll = millis();
    1040:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <millis>
    1044:	60 93 81 02 	sts	0x0281, r22	; 0x800281 <lastPoll>
    1048:	70 93 82 02 	sts	0x0282, r23	; 0x800282 <lastPoll+0x1>
    104c:	80 93 83 02 	sts	0x0283, r24	; 0x800283 <lastPoll+0x2>
    1050:	90 93 84 02 	sts	0x0284, r25	; 0x800284 <lastPoll+0x3>
  }
}
    1054:	1f 91       	pop	r17
    1056:	0f 91       	pop	r16
    1058:	08 95       	ret

0000105a <_Z19tag_string_to_bytesPcPhS0_>:

char tag_string_to_bytes(char *tagstring, byte *tag_uid, byte *remove) {
    105a:	af 92       	push	r10
    105c:	bf 92       	push	r11
    105e:	cf 92       	push	r12
    1060:	df 92       	push	r13
    1062:	ef 92       	push	r14
    1064:	ff 92       	push	r15
    1066:	0f 93       	push	r16
    1068:	1f 93       	push	r17
    106a:	cf 93       	push	r28
    106c:	df 93       	push	r29
    106e:	00 d0       	rcall	.+0      	; 0x1070 <_Z19tag_string_to_bytesPcPhS0_+0x16>
    1070:	00 d0       	rcall	.+0      	; 0x1072 <_Z19tag_string_to_bytesPcPhS0_+0x18>
    1072:	cd b7       	in	r28, 0x3d	; 61
    1074:	de b7       	in	r29, 0x3e	; 62
    1076:	8c 01       	movw	r16, r24
    1078:	5b 01       	movw	r10, r22
    107a:	6a 01       	movw	r12, r20
  char posBuf[4];
  char tmp;
  memset(posBuf,0,sizeof(posBuf));
    107c:	ce 01       	movw	r24, r28
    107e:	01 96       	adiw	r24, 0x01	; 1
    1080:	7c 01       	movw	r14, r24
    1082:	84 e0       	ldi	r24, 0x04	; 4
    1084:	f7 01       	movw	r30, r14
    1086:	11 92       	st	Z+, r1
    1088:	8a 95       	dec	r24
    108a:	e9 f7       	brne	.-6      	; 0x1086 <_Z19tag_string_to_bytesPcPhS0_+0x2c>
  hex_string_to_byte_array(tagstring, posBuf, TAG_UID_START, TAG_UID_END);
    108c:	28 e0       	ldi	r18, 0x08	; 8
    108e:	40 e0       	ldi	r20, 0x00	; 0
    1090:	b7 01       	movw	r22, r14
    1092:	c8 01       	movw	r24, r16
    1094:	0e 94 70 01 	call	0x2e0	; 0x2e0 <_Z24hex_string_to_byte_arrayPcS_cc>
  memcpy(tag_uid, posBuf, sizeof(posBuf));
    1098:	89 81       	ldd	r24, Y+1	; 0x01
    109a:	9a 81       	ldd	r25, Y+2	; 0x02
    109c:	ab 81       	ldd	r26, Y+3	; 0x03
    109e:	bc 81       	ldd	r27, Y+4	; 0x04
    10a0:	f5 01       	movw	r30, r10
    10a2:	80 83       	st	Z, r24
    10a4:	91 83       	std	Z+1, r25	; 0x01
    10a6:	a2 83       	std	Z+2, r26	; 0x02
    10a8:	b3 83       	std	Z+3, r27	; 0x03
  hex_string_to_byte_array(tagstring, posBuf, TAG_POS_START, TAG_POS_END);
    10aa:	2a e0       	ldi	r18, 0x0A	; 10
    10ac:	48 e0       	ldi	r20, 0x08	; 8
    10ae:	b7 01       	movw	r22, r14
    10b0:	c8 01       	movw	r24, r16
    10b2:	0e 94 70 01 	call	0x2e0	; 0x2e0 <_Z24hex_string_to_byte_arrayPcS_cc>
  tmp = posBuf[0]; //after converting the pos HEX to bin, it'll use 1 byte only.
    10b6:	89 81       	ldd	r24, Y+1	; 0x01
  remove[0] = tagstring[TAG_REM_START];
    10b8:	f8 01       	movw	r30, r16
    10ba:	92 85       	ldd	r25, Z+10	; 0x0a
    10bc:	f6 01       	movw	r30, r12
    10be:	90 83       	st	Z, r25
  return tmp;
}
    10c0:	0f 90       	pop	r0
    10c2:	0f 90       	pop	r0
    10c4:	0f 90       	pop	r0
    10c6:	0f 90       	pop	r0
    10c8:	df 91       	pop	r29
    10ca:	cf 91       	pop	r28
    10cc:	1f 91       	pop	r17
    10ce:	0f 91       	pop	r16
    10d0:	ff 90       	pop	r15
    10d2:	ef 90       	pop	r14
    10d4:	df 90       	pop	r13
    10d6:	cf 90       	pop	r12
    10d8:	bf 90       	pop	r11
    10da:	af 90       	pop	r10
    10dc:	08 95       	ret

000010de <_Z12get_tag_datav>:
  ElcanLcd.show_message("Acceso negado,  Informando...");
  send_intrussion_attemp_to_server();
  DO_INTRUSSION_BEEPS;
}

void get_tag_data() {
    10de:	0f 93       	push	r16
    10e0:	1f 93       	push	r17
    10e2:	cf 93       	push	r28
    10e4:	df 93       	push	r29
    10e6:	cd b7       	in	r28, 0x3d	; 61
    10e8:	de b7       	in	r29, 0x3e	; 62
    10ea:	65 97       	sbiw	r28, 0x15	; 21
    10ec:	0f b6       	in	r0, 0x3f	; 63
    10ee:	f8 94       	cli
    10f0:	de bf       	out	0x3e, r29	; 62
    10f2:	0f be       	out	0x3f, r0	; 63
    10f4:	cd bf       	out	0x3d, r28	; 61
  char tagPacket[TAG_PACKET_SIZE];
  byte pos;
  byte result[4];
  byte remov;

  memset(tagPacket, 0, sizeof(tagPacket));
    10f6:	8e 01       	movw	r16, r28
    10f8:	0f 5f       	subi	r16, 0xFF	; 255
    10fa:	1f 4f       	sbci	r17, 0xFF	; 255
    10fc:	8b e0       	ldi	r24, 0x0B	; 11
    10fe:	f8 01       	movw	r30, r16
    1100:	11 92       	st	Z+, r1
    1102:	8a 95       	dec	r24
    1104:	e9 f7       	brne	.-6      	; 0x1100 <_Z12get_tag_datav+0x22>
  wifi.readCardData(tagPacket, sizeof(tagPacket));
    1106:	4b e0       	ldi	r20, 0x0B	; 11
    1108:	b8 01       	movw	r22, r16
    110a:	8f e6       	ldi	r24, 0x6F	; 111
    110c:	92 e0       	ldi	r25, 0x02	; 2
    110e:	0e 94 b3 03 	call	0x766	; 0x766 <_ZN9ElcanWifi12readCardDataEPcc>
  struct card_block card;
  pos = tag_string_to_bytes(tagPacket, result, &remov);
    1112:	ae 01       	movw	r20, r28
    1114:	4b 5e       	subi	r20, 0xEB	; 235
    1116:	5f 4f       	sbci	r21, 0xFF	; 255
    1118:	be 01       	movw	r22, r28
    111a:	6f 5e       	subi	r22, 0xEF	; 239
    111c:	7f 4f       	sbci	r23, 0xFF	; 255
    111e:	c8 01       	movw	r24, r16
    1120:	0e 94 2d 08 	call	0x105a	; 0x105a <_Z19tag_string_to_bytesPcPhS0_>
    1124:	18 2f       	mov	r17, r24
  memcpy(card.card_uid, result, sizeof(result));
    1126:	89 89       	ldd	r24, Y+17	; 0x11
    1128:	9a 89       	ldd	r25, Y+18	; 0x12
    112a:	ab 89       	ldd	r26, Y+19	; 0x13
    112c:	bc 89       	ldd	r27, Y+20	; 0x14
    112e:	8c 87       	std	Y+12, r24	; 0x0c
    1130:	9d 87       	std	Y+13, r25	; 0x0d
    1132:	ae 87       	std	Y+14, r26	; 0x0e
    1134:	bf 87       	std	Y+15, r27	; 0x0f
  card.card_number = pos;
    1136:	18 8b       	std	Y+16, r17	; 0x10
  if (remov == '0') {
    1138:	8d 89       	ldd	r24, Y+21	; 0x15
    113a:	80 33       	cpi	r24, 0x30	; 48
    113c:	a1 f4       	brne	.+40     	; 0x1166 <_Z12get_tag_datav+0x88>
#ifdef DEBUG
    Serial.print("#Storing @ ");
    Serial.println(pos);
#endif
    delay(400);
    113e:	60 e9       	ldi	r22, 0x90	; 144
    1140:	71 e0       	ldi	r23, 0x01	; 1
    1142:	80 e0       	ldi	r24, 0x00	; 0
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <delay>
    if (!store_card(card, pos)) {
    114a:	21 2f       	mov	r18, r17
    114c:	4c 85       	ldd	r20, Y+12	; 0x0c
    114e:	5d 85       	ldd	r21, Y+13	; 0x0d
    1150:	6e 85       	ldd	r22, Y+14	; 0x0e
    1152:	7f 85       	ldd	r23, Y+15	; 0x0f
    1154:	88 89       	ldd	r24, Y+16	; 0x10
    1156:	0e 94 13 01 	call	0x226	; 0x226 <_Z10store_card10card_blockc>
    115a:	81 11       	cpse	r24, r1
    115c:	07 c0       	rjmp	.+14     	; 0x116c <_Z12get_tag_datav+0x8e>
      sys_state = ERROR_INVALID;
    115e:	87 e0       	ldi	r24, 0x07	; 7
    1160:	80 93 9c 02 	sts	0x029C, r24	; 0x80029c <sys_state>
    1164:	03 c0       	rjmp	.+6      	; 0x116c <_Z12get_tag_datav+0x8e>
  } else {
#ifdef DEBUG
    Serial.println("#Erasing @ ");
    Serial.println(pos);
#endif
    erase_card(pos);
    1166:	81 2f       	mov	r24, r17
    1168:	0e 94 50 01 	call	0x2a0	; 0x2a0 <_Z10erase_cardc>
  }
}
    116c:	65 96       	adiw	r28, 0x15	; 21
    116e:	0f b6       	in	r0, 0x3f	; 63
    1170:	f8 94       	cli
    1172:	de bf       	out	0x3e, r29	; 62
    1174:	0f be       	out	0x3f, r0	; 63
    1176:	cd bf       	out	0x3d, r28	; 61
    1178:	df 91       	pop	r29
    117a:	cf 91       	pop	r28
    117c:	1f 91       	pop	r17
    117e:	0f 91       	pop	r16
    1180:	08 95       	ret

00001182 <loop>:
#else
  ElcanLcd.show_message("Initialized...");
#endif
}

void loop() {
    1182:	0f 93       	push	r16
    1184:	1f 93       	push	r17
    1186:	cf 93       	push	r28
    1188:	df 93       	push	r29
    118a:	cd b7       	in	r28, 0x3d	; 61
    118c:	de b7       	in	r29, 0x3e	; 62
    118e:	6c 97       	sbiw	r28, 0x1c	; 28
    1190:	0f b6       	in	r0, 0x3f	; 63
    1192:	f8 94       	cli
    1194:	de bf       	out	0x3e, r29	; 62
    1196:	0f be       	out	0x3f, r0	; 63
    1198:	cd bf       	out	0x3d, r28	; 61
  char dateString[22];
  DateTime tstamp;
    119a:	40 e0       	ldi	r20, 0x00	; 0
    119c:	50 e0       	ldi	r21, 0x00	; 0
    119e:	ba 01       	movw	r22, r20
    11a0:	ce 01       	movw	r24, r28
    11a2:	47 96       	adiw	r24, 0x17	; 23
    11a4:	0e 94 1f 18 	call	0x303e	; 0x303e <_ZN8DateTimeC1Em>
  bool tmp;
  ElcanLcd.check_light();
    11a8:	81 e7       	ldi	r24, 0x71	; 113
    11aa:	92 e0       	ldi	r25, 0x02	; 2
    11ac:	0e 94 ed 02 	call	0x5da	; 0x5da <_ZN15ElcanLCDManager11check_lightEv>
  switch(sys_state) {
    11b0:	60 91 9c 02 	lds	r22, 0x029C	; 0x80029c <sys_state>
    11b4:	60 31       	cpi	r22, 0x10	; 16
    11b6:	09 f4       	brne	.+2      	; 0x11ba <loop+0x38>
    11b8:	6a c0       	rjmp	.+212    	; 0x128e <loop+0x10c>
    11ba:	88 f4       	brcc	.+34     	; 0x11de <loop+0x5c>
    11bc:	66 30       	cpi	r22, 0x06	; 6
    11be:	38 f4       	brcc	.+14     	; 0x11ce <loop+0x4c>
    11c0:	64 30       	cpi	r22, 0x04	; 4
    11c2:	70 f5       	brcc	.+92     	; 0x1220 <loop+0x9e>
    11c4:	61 30       	cpi	r22, 0x01	; 1
    11c6:	89 f1       	breq	.+98     	; 0x122a <loop+0xa8>
    11c8:	62 30       	cpi	r22, 0x02	; 2
    11ca:	51 f1       	breq	.+84     	; 0x1220 <loop+0x9e>
    11cc:	a7 c0       	rjmp	.+334    	; 0x131c <loop+0x19a>
    11ce:	67 30       	cpi	r22, 0x07	; 7
    11d0:	39 f1       	breq	.+78     	; 0x1220 <loop+0x9e>
    11d2:	68 30       	cpi	r22, 0x08	; 8
    11d4:	09 f0       	breq	.+2      	; 0x11d8 <loop+0x56>
    11d6:	a2 c0       	rjmp	.+324    	; 0x131c <loop+0x19a>
      } else {
        check_wifi();
      }
      break;
    case READ_RFID:
      check_card_and_act(); //checks the card and if its valid, it starts the sequence
    11d8:	0e 94 77 06 	call	0xcee	; 0xcee <_Z18check_card_and_actv>
      break;
    11dc:	9f c0       	rjmp	.+318    	; 0x131c <loop+0x19a>
void loop() {
  char dateString[22];
  DateTime tstamp;
  bool tmp;
  ElcanLcd.check_light();
  switch(sys_state) {
    11de:	69 38       	cpi	r22, 0x89	; 137
    11e0:	09 f4       	brne	.+2      	; 0x11e4 <loop+0x62>
    11e2:	92 c0       	rjmp	.+292    	; 0x1308 <loop+0x186>
    11e4:	88 f4       	brcc	.+34     	; 0x1208 <loop+0x86>
    11e6:	60 34       	cpi	r22, 0x40	; 64
    11e8:	09 f4       	brne	.+2      	; 0x11ec <loop+0x6a>
    11ea:	81 c0       	rjmp	.+258    	; 0x12ee <loop+0x16c>
    11ec:	60 38       	cpi	r22, 0x80	; 128
    11ee:	09 f4       	brne	.+2      	; 0x11f2 <loop+0x70>
    11f0:	65 c0       	rjmp	.+202    	; 0x12bc <loop+0x13a>
    11f2:	60 32       	cpi	r22, 0x20	; 32
    11f4:	09 f0       	breq	.+2      	; 0x11f8 <loop+0x76>
    11f6:	92 c0       	rjmp	.+292    	; 0x131c <loop+0x19a>
      ElcanLcd.show_message("Acceso permitido");
      enteringTime = rtc.now();
      sys_state = READ_WEIGHT;
      break;
    case READ_WEIGHT:
      ElcanLcd.show_message("Espere por favor...");
    11f8:	60 e0       	ldi	r22, 0x00	; 0
    11fa:	72 e0       	ldi	r23, 0x02	; 2
    11fc:	81 e7       	ldi	r24, 0x71	; 113
    11fe:	92 e0       	ldi	r25, 0x02	; 2
    1200:	0e 94 46 02 	call	0x48c	; 0x48c <_ZN15ElcanLCDManager12show_messageEPc>
 #ifdef WITH_WEIGHT
      scale.get_weight(measuredWeight);
 #endif
      sys_state = WRITE_RECORD;
    1204:	80 e8       	ldi	r24, 0x80	; 128
    1206:	88 c0       	rjmp	.+272    	; 0x1318 <loop+0x196>
void loop() {
  char dateString[22];
  DateTime tstamp;
  bool tmp;
  ElcanLcd.check_light();
  switch(sys_state) {
    1208:	61 3c       	cpi	r22, 0xC1	; 193
    120a:	09 f4       	brne	.+2      	; 0x120e <loop+0x8c>
    120c:	80 c0       	rjmp	.+256    	; 0x130e <loop+0x18c>
    120e:	6a 3f       	cpi	r22, 0xFA	; 250
    1210:	09 f4       	brne	.+2      	; 0x1214 <loop+0x92>
    1212:	67 c0       	rjmp	.+206    	; 0x12e2 <loop+0x160>
    1214:	6b 3a       	cpi	r22, 0xAB	; 171
    1216:	09 f0       	breq	.+2      	; 0x121a <loop+0x98>
    1218:	81 c0       	rjmp	.+258    	; 0x131c <loop+0x19a>
    case UNKNOWN_CARD:
      alertUnknown();
      sys_state = READY;
      break;
    case GET_TAG_DATA:
      get_tag_data();
    121a:	0e 94 6f 08 	call	0x10de	; 0x10de <_Z12get_tag_datav>
    121e:	7b c0       	rjmp	.+246    	; 0x1316 <loop+0x194>
  switch(sys_state) {
    case ERROR_WIFI:
    case ERROR_RFID:
    case ERROR_RTC:
    case ERROR_INVALID:
      ElcanLcd.show_error(sys_state);
    1220:	81 e7       	ldi	r24, 0x71	; 113
    1222:	92 e0       	ldi	r25, 0x02	; 2
    1224:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <_ZN15ElcanLCDManager10show_errorEc>
      break;
    1228:	79 c0       	rjmp	.+242    	; 0x131c <loop+0x19a>
    case READY:
      sprintf(dateString, "%02d/%02d/%04d %02d:%02d", tstamp.day(), tstamp.month(),
      tstamp.year(), tstamp.hour(), tstamp.minute());
    122a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    122c:	1f 92       	push	r1
    122e:	8f 93       	push	r24
    1230:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1232:	1f 92       	push	r1
    1234:	8f 93       	push	r24
    1236:	8f 89       	ldd	r24, Y+23	; 0x17
    1238:	90 e0       	ldi	r25, 0x00	; 0
    123a:	80 53       	subi	r24, 0x30	; 48
    123c:	98 4f       	sbci	r25, 0xF8	; 248
    123e:	9f 93       	push	r25
    1240:	8f 93       	push	r24
    1242:	88 8d       	ldd	r24, Y+24	; 0x18
    1244:	1f 92       	push	r1
    1246:	8f 93       	push	r24
    1248:	89 8d       	ldd	r24, Y+25	; 0x19
    124a:	1f 92       	push	r1
    124c:	8f 93       	push	r24
    124e:	86 ed       	ldi	r24, 0xD6	; 214
    1250:	91 e0       	ldi	r25, 0x01	; 1
    1252:	9f 93       	push	r25
    1254:	8f 93       	push	r24
    1256:	8e 01       	movw	r16, r28
    1258:	0f 5f       	subi	r16, 0xFF	; 255
    125a:	1f 4f       	sbci	r17, 0xFF	; 255
    125c:	1f 93       	push	r17
    125e:	0f 93       	push	r16
    1260:	0e 94 9d 1f 	call	0x3f3a	; 0x3f3a <sprintf>
      ElcanLcd.show_ready(dateString);
    1264:	b8 01       	movw	r22, r16
    1266:	81 e7       	ldi	r24, 0x71	; 113
    1268:	92 e0       	ldi	r25, 0x02	; 2
    126a:	0e 94 2a 02 	call	0x454	; 0x454 <_ZN15ElcanLCDManager10show_readyEPc>
      if (rfid.getID()) {
    126e:	8a e5       	ldi	r24, 0x5A	; 90
    1270:	92 e0       	ldi	r25, 0x02	; 2
    1272:	0e 94 c3 04 	call	0x986	; 0x986 <_ZN11RfidManager5getIDEv>
    1276:	0f b6       	in	r0, 0x3f	; 63
    1278:	f8 94       	cli
    127a:	de bf       	out	0x3e, r29	; 62
    127c:	0f be       	out	0x3f, r0	; 63
    127e:	cd bf       	out	0x3d, r28	; 61
    1280:	88 23       	and	r24, r24
    1282:	11 f0       	breq	.+4      	; 0x1288 <loop+0x106>
        sys_state = READ_RFID;
    1284:	88 e0       	ldi	r24, 0x08	; 8
    1286:	48 c0       	rjmp	.+144    	; 0x1318 <loop+0x196>
      } else {
        check_wifi();
    1288:	0e 94 fc 07 	call	0xff8	; 0xff8 <_Z10check_wifiv>
    128c:	47 c0       	rjmp	.+142    	; 0x131c <loop+0x19a>
      break;
    case READ_RFID:
      check_card_and_act(); //checks the card and if its valid, it starts the sequence
      break;
    case READ_RTC:
      ElcanLcd.show_message("Acceso permitido");
    128e:	6f ee       	ldi	r22, 0xEF	; 239
    1290:	71 e0       	ldi	r23, 0x01	; 1
    1292:	81 e7       	ldi	r24, 0x71	; 113
    1294:	92 e0       	ldi	r25, 0x02	; 2
    1296:	0e 94 46 02 	call	0x48c	; 0x48c <_ZN15ElcanLCDManager12show_messageEPc>
      enteringTime = rtc.now();
    129a:	6e e6       	ldi	r22, 0x6E	; 110
    129c:	72 e0       	ldi	r23, 0x02	; 2
    129e:	ce 01       	movw	r24, r28
    12a0:	01 96       	adiw	r24, 0x01	; 1
    12a2:	0e 94 11 05 	call	0xa22	; 0xa22 <_ZN8ElcanRtc3nowEv>
    12a6:	86 e0       	ldi	r24, 0x06	; 6
    12a8:	fe 01       	movw	r30, r28
    12aa:	31 96       	adiw	r30, 0x01	; 1
    12ac:	af e8       	ldi	r26, 0x8F	; 143
    12ae:	b2 e0       	ldi	r27, 0x02	; 2
    12b0:	01 90       	ld	r0, Z+
    12b2:	0d 92       	st	X+, r0
    12b4:	8a 95       	dec	r24
    12b6:	e1 f7       	brne	.-8      	; 0x12b0 <loop+0x12e>
      sys_state = READ_WEIGHT;
    12b8:	80 e2       	ldi	r24, 0x20	; 32
    12ba:	2e c0       	rjmp	.+92     	; 0x1318 <loop+0x196>
 #endif
      sys_state = WRITE_RECORD;
      break;
    case WRITE_RECORD:
#ifdef WITH_WIFI    
      send_to_server();
    12bc:	0e 94 e5 06 	call	0xdca	; 0xdca <_Z14send_to_serverv>
#endif
      timerStarted = rtc.now();
    12c0:	6e e6       	ldi	r22, 0x6E	; 110
    12c2:	72 e0       	ldi	r23, 0x02	; 2
    12c4:	ce 01       	movw	r24, r28
    12c6:	01 96       	adiw	r24, 0x01	; 1
    12c8:	0e 94 11 05 	call	0xa22	; 0xa22 <_ZN8ElcanRtc3nowEv>
    12cc:	86 e0       	ldi	r24, 0x06	; 6
    12ce:	fe 01       	movw	r30, r28
    12d0:	31 96       	adiw	r30, 0x01	; 1
    12d2:	a9 e8       	ldi	r26, 0x89	; 137
    12d4:	b2 e0       	ldi	r27, 0x02	; 2
    12d6:	01 90       	ld	r0, Z+
    12d8:	0d 92       	st	X+, r0
    12da:	8a 95       	dec	r24
    12dc:	e1 f7       	brne	.-8      	; 0x12d6 <loop+0x154>
      sys_state = TIMED_WAIT;
    12de:	8a ef       	ldi	r24, 0xFA	; 250
    12e0:	1b c0       	rjmp	.+54     	; 0x1318 <loop+0x196>
      break;
    case TIMED_WAIT:
      if (check_elapsed_time()) {
    12e2:	0e 94 b8 06 	call	0xd70	; 0xd70 <_Z18check_elapsed_timev>
    12e6:	88 23       	and	r24, r24
    12e8:	c9 f0       	breq	.+50     	; 0x131c <loop+0x19a>
        sys_state = OPEN_BARRIER;
    12ea:	80 e4       	ldi	r24, 0x40	; 64
    12ec:	15 c0       	rjmp	.+42     	; 0x1318 <loop+0x196>
      }
      break;
    case OPEN_BARRIER:
      ElcanLcd.show_message("Avance...");
    12ee:	64 e1       	ldi	r22, 0x14	; 20
    12f0:	72 e0       	ldi	r23, 0x02	; 2
    12f2:	81 e7       	ldi	r24, 0x71	; 113
    12f4:	92 e0       	ldi	r25, 0x02	; 2
    12f6:	0e 94 46 02 	call	0x48c	; 0x48c <_ZN15ElcanLCDManager12show_messageEPc>
      open_barrier();
    12fa:	0e 94 aa 06 	call	0xd54	; 0xd54 <_Z12open_barrierv>
      ElcanLcd.light_on();
    12fe:	81 e7       	ldi	r24, 0x71	; 113
    1300:	92 e0       	ldi	r25, 0x02	; 2
    1302:	0e 94 19 03 	call	0x632	; 0x632 <_ZN15ElcanLCDManager8light_onEv>
    1306:	07 c0       	rjmp	.+14     	; 0x1316 <loop+0x194>
      sys_state = READY;
      break;
    case UNKNOWN_CARD:
      alertUnknown();
    1308:	0e 94 df 07 	call	0xfbe	; 0xfbe <_Z12alertUnknownv>
    130c:	04 c0       	rjmp	.+8      	; 0x1316 <loop+0x194>
    case GET_TAG_DATA:
      get_tag_data();
      sys_state = READY;
      break;
    case ADJUST_TIME:
      rtc.adjust_from_serial();
    130e:	8e e6       	ldi	r24, 0x6E	; 110
    1310:	92 e0       	ldi	r25, 0x02	; 2
    1312:	0e 94 7d 05 	call	0xafa	; 0xafa <_ZN8ElcanRtc18adjust_from_serialEv>
      sys_state = READY;
    1316:	81 e0       	ldi	r24, 0x01	; 1
    1318:	80 93 9c 02 	sts	0x029C, r24	; 0x80029c <sys_state>
      break;
  }
}
    131c:	6c 96       	adiw	r28, 0x1c	; 28
    131e:	0f b6       	in	r0, 0x3f	; 63
    1320:	f8 94       	cli
    1322:	de bf       	out	0x3e, r29	; 62
    1324:	0f be       	out	0x3f, r0	; 63
    1326:	cd bf       	out	0x3d, r28	; 61
    1328:	df 91       	pop	r29
    132a:	cf 91       	pop	r28
    132c:	1f 91       	pop	r17
    132e:	0f 91       	pop	r16
    1330:	08 95       	ret

00001332 <_GLOBAL__sub_I_sys_state>:
#include "card_format.h"
#include "card_manager.h"

char sys_state;
char measuredWeight[7]; // Stores weight in ram
DateTime enteringTime;  //last time readed on the RTC
    1332:	40 e0       	ldi	r20, 0x00	; 0
    1334:	50 e0       	ldi	r21, 0x00	; 0
    1336:	ba 01       	movw	r22, r20
    1338:	8f e8       	ldi	r24, 0x8F	; 143
    133a:	92 e0       	ldi	r25, 0x02	; 2
    133c:	0e 94 1f 18 	call	0x303e	; 0x303e <_ZN8DateTimeC1Em>
DateTime timerStarted;
    1340:	40 e0       	ldi	r20, 0x00	; 0
    1342:	50 e0       	ldi	r21, 0x00	; 0
    1344:	ba 01       	movw	r22, r20
    1346:	89 e8       	ldi	r24, 0x89	; 137
    1348:	92 e0       	ldi	r25, 0x02	; 2
    134a:	0e 94 1f 18 	call	0x303e	; 0x303e <_ZN8DateTimeC1Em>
long backlightStart;
long lastPoll;
ElcanLCDManager ElcanLcd(LCD_ADDRESS, 16, 2);
    134e:	22 e0       	ldi	r18, 0x02	; 2
    1350:	40 e1       	ldi	r20, 0x10	; 16
    1352:	67 e2       	ldi	r22, 0x27	; 39
    1354:	81 e7       	ldi	r24, 0x71	; 113
    1356:	92 e0       	ldi	r25, 0x02	; 2
    1358:	0e 94 93 01 	call	0x326	; 0x326 <_ZN15ElcanLCDManagerC1Eccc>
ElcanWifi wifi;
    135c:	8f e6       	ldi	r24, 0x6F	; 111
    135e:	92 e0       	ldi	r25, 0x02	; 2
    1360:	0e 94 3c 03 	call	0x678	; 0x678 <_ZN9ElcanWifiC1Ev>
ElcanRtc rtc;
    1364:	8e e6       	ldi	r24, 0x6E	; 110
    1366:	92 e0       	ldi	r25, 0x02	; 2
    1368:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <_ZN8ElcanRtcC1Ev>
RfidManager rfid;
    136c:	8a e5       	ldi	r24, 0x5A	; 90
    136e:	92 e0       	ldi	r25, 0x02	; 2
    1370:	0c 94 83 04 	jmp	0x906	; 0x906 <_ZN11RfidManagerC1Ev>

00001374 <_Z9substringPcS_ii>:
﻿void substring(char src[], char dst[], int p, int l) {
    1374:	41 50       	subi	r20, 0x01	; 1
    1376:	51 09       	sbc	r21, r1
    1378:	fc 01       	movw	r30, r24
    137a:	e4 0f       	add	r30, r20
    137c:	f5 1f       	adc	r31, r21
    137e:	db 01       	movw	r26, r22
	int c = 0;	
	while (c < l) {
    1380:	ad 01       	movw	r20, r26
    1382:	46 1b       	sub	r20, r22
    1384:	57 0b       	sbc	r21, r23
    1386:	42 17       	cp	r20, r18
    1388:	53 07       	cpc	r21, r19
    138a:	1c f4       	brge	.+6      	; 0x1392 <_Z9substringPcS_ii+0x1e>
		dst[c] = src[p+c-1];
    138c:	41 91       	ld	r20, Z+
    138e:	4d 93       	st	X+, r20
﻿void substring(char src[], char dst[], int p, int l) {
	int c = 0;	
	while (c < l) {
    1390:	f7 cf       	rjmp	.-18     	; 0x1380 <_Z9substringPcS_ii+0xc>
		dst[c] = src[p+c-1];
		c++;
	}
	src[c] = '\0';
    1392:	37 ff       	sbrs	r19, 7
    1394:	02 c0       	rjmp	.+4      	; 0x139a <_Z9substringPcS_ii+0x26>
    1396:	20 e0       	ldi	r18, 0x00	; 0
    1398:	30 e0       	ldi	r19, 0x00	; 0
    139a:	fc 01       	movw	r30, r24
    139c:	e2 0f       	add	r30, r18
    139e:	f3 1f       	adc	r31, r19
    13a0:	10 82       	st	Z, r1
    13a2:	08 95       	ret

000013a4 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    13a4:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    13a6:	91 8d       	ldd	r25, Z+25	; 0x19
    13a8:	22 8d       	ldd	r18, Z+26	; 0x1a
    13aa:	89 2f       	mov	r24, r25
    13ac:	90 e0       	ldi	r25, 0x00	; 0
    13ae:	80 5c       	subi	r24, 0xC0	; 192
    13b0:	9f 4f       	sbci	r25, 0xFF	; 255
    13b2:	82 1b       	sub	r24, r18
    13b4:	91 09       	sbc	r25, r1
}
    13b6:	8f 73       	andi	r24, 0x3F	; 63
    13b8:	99 27       	eor	r25, r25
    13ba:	08 95       	ret

000013bc <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    13bc:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    13be:	91 8d       	ldd	r25, Z+25	; 0x19
    13c0:	82 8d       	ldd	r24, Z+26	; 0x1a
    13c2:	98 17       	cp	r25, r24
    13c4:	31 f0       	breq	.+12     	; 0x13d2 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    13c6:	82 8d       	ldd	r24, Z+26	; 0x1a
    13c8:	e8 0f       	add	r30, r24
    13ca:	f1 1d       	adc	r31, r1
    13cc:	85 8d       	ldd	r24, Z+29	; 0x1d
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    13d2:	8f ef       	ldi	r24, 0xFF	; 255
    13d4:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    13d6:	08 95       	ret

000013d8 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    13d8:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    13da:	91 8d       	ldd	r25, Z+25	; 0x19
    13dc:	82 8d       	ldd	r24, Z+26	; 0x1a
    13de:	98 17       	cp	r25, r24
    13e0:	61 f0       	breq	.+24     	; 0x13fa <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    13e2:	82 8d       	ldd	r24, Z+26	; 0x1a
    13e4:	df 01       	movw	r26, r30
    13e6:	a8 0f       	add	r26, r24
    13e8:	b1 1d       	adc	r27, r1
    13ea:	5d 96       	adiw	r26, 0x1d	; 29
    13ec:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    13ee:	92 8d       	ldd	r25, Z+26	; 0x1a
    13f0:	9f 5f       	subi	r25, 0xFF	; 255
    13f2:	9f 73       	andi	r25, 0x3F	; 63
    13f4:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    13fa:	8f ef       	ldi	r24, 0xFF	; 255
    13fc:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    13fe:	08 95       	ret

00001400 <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    1400:	fc 01       	movw	r30, r24
    1402:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
    1404:	44 8d       	ldd	r20, Z+28	; 0x1c
    1406:	25 2f       	mov	r18, r21
    1408:	30 e0       	ldi	r19, 0x00	; 0
    140a:	84 2f       	mov	r24, r20
    140c:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    140e:	82 1b       	sub	r24, r18
    1410:	93 0b       	sbc	r25, r19
    1412:	54 17       	cp	r21, r20
    1414:	10 f0       	brcs	.+4      	; 0x141a <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    1416:	cf 96       	adiw	r24, 0x3f	; 63
    1418:	08 95       	ret
  return tail - head - 1;
    141a:	01 97       	sbiw	r24, 0x01	; 1
}
    141c:	08 95       	ret

0000141e <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    141e:	8f e6       	ldi	r24, 0x6F	; 111
    1420:	9b e0       	ldi	r25, 0x0B	; 11
    1422:	89 2b       	or	r24, r25
    1424:	49 f0       	breq	.+18     	; 0x1438 <_Z14serialEventRunv+0x1a>
    1426:	80 e0       	ldi	r24, 0x00	; 0
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	89 2b       	or	r24, r25
    142c:	29 f0       	breq	.+10     	; 0x1438 <_Z14serialEventRunv+0x1a>
    142e:	0e 94 6f 0b 	call	0x16de	; 0x16de <_Z17Serial0_availablev>
    1432:	81 11       	cpse	r24, r1
    1434:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    1438:	08 95       	ret

0000143a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    143a:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    143c:	84 8d       	ldd	r24, Z+28	; 0x1c
    143e:	df 01       	movw	r26, r30
    1440:	a8 0f       	add	r26, r24
    1442:	b1 1d       	adc	r27, r1
    1444:	a3 5a       	subi	r26, 0xA3	; 163
    1446:	bf 4f       	sbci	r27, 0xFF	; 255
    1448:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    144a:	84 8d       	ldd	r24, Z+28	; 0x1c
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	01 96       	adiw	r24, 0x01	; 1
    1450:	8f 73       	andi	r24, 0x3F	; 63
    1452:	99 27       	eor	r25, r25
    1454:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    1456:	a6 89       	ldd	r26, Z+22	; 0x16
    1458:	b7 89       	ldd	r27, Z+23	; 0x17
    145a:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    145c:	a0 89       	ldd	r26, Z+16	; 0x10
    145e:	b1 89       	ldd	r27, Z+17	; 0x11
    1460:	8c 91       	ld	r24, X
    1462:	83 70       	andi	r24, 0x03	; 3
    1464:	80 64       	ori	r24, 0x40	; 64
    1466:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    1468:	93 8d       	ldd	r25, Z+27	; 0x1b
    146a:	84 8d       	ldd	r24, Z+28	; 0x1c
    146c:	98 13       	cpse	r25, r24
    146e:	06 c0       	rjmp	.+12     	; 0x147c <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    1470:	02 88       	ldd	r0, Z+18	; 0x12
    1472:	f3 89       	ldd	r31, Z+19	; 0x13
    1474:	e0 2d       	mov	r30, r0
    1476:	80 81       	ld	r24, Z
    1478:	8f 7d       	andi	r24, 0xDF	; 223
    147a:	80 83       	st	Z, r24
    147c:	08 95       	ret

0000147e <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    147e:	ef 92       	push	r14
    1480:	ff 92       	push	r15
    1482:	0f 93       	push	r16
    1484:	1f 93       	push	r17
    1486:	cf 93       	push	r28
    1488:	df 93       	push	r29
    148a:	ec 01       	movw	r28, r24
  _written = true;
    148c:	81 e0       	ldi	r24, 0x01	; 1
    148e:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    1490:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1492:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1494:	98 13       	cpse	r25, r24
    1496:	05 c0       	rjmp	.+10     	; 0x14a2 <_ZN14HardwareSerial5writeEh+0x24>
    1498:	e8 89       	ldd	r30, Y+16	; 0x10
    149a:	f9 89       	ldd	r31, Y+17	; 0x11
    149c:	80 81       	ld	r24, Z
    149e:	85 fd       	sbrc	r24, 5
    14a0:	26 c0       	rjmp	.+76     	; 0x14ee <_ZN14HardwareSerial5writeEh+0x70>
    14a2:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    14a4:	0b 8d       	ldd	r16, Y+27	; 0x1b
    14a6:	10 e0       	ldi	r17, 0x00	; 0
    14a8:	0f 5f       	subi	r16, 0xFF	; 255
    14aa:	1f 4f       	sbci	r17, 0xFF	; 255
    14ac:	0f 73       	andi	r16, 0x3F	; 63
    14ae:	11 27       	eor	r17, r17
    14b0:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    14b2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    14b4:	e8 12       	cpse	r14, r24
    14b6:	0c c0       	rjmp	.+24     	; 0x14d0 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    14b8:	0f b6       	in	r0, 0x3f	; 63
    14ba:	07 fc       	sbrc	r0, 7
    14bc:	fa cf       	rjmp	.-12     	; 0x14b2 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    14be:	e8 89       	ldd	r30, Y+16	; 0x10
    14c0:	f9 89       	ldd	r31, Y+17	; 0x11
    14c2:	80 81       	ld	r24, Z
    14c4:	85 ff       	sbrs	r24, 5
    14c6:	f5 cf       	rjmp	.-22     	; 0x14b2 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    14c8:	ce 01       	movw	r24, r28
    14ca:	0e 94 1d 0a 	call	0x143a	; 0x143a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    14ce:	f1 cf       	rjmp	.-30     	; 0x14b2 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    14d0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14d2:	fe 01       	movw	r30, r28
    14d4:	e8 0f       	add	r30, r24
    14d6:	f1 1d       	adc	r31, r1
    14d8:	e3 5a       	subi	r30, 0xA3	; 163
    14da:	ff 4f       	sbci	r31, 0xFF	; 255
    14dc:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    14de:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    14e0:	f8 94       	cli
    _tx_buffer_head = i;
    14e2:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    14e4:	ea 89       	ldd	r30, Y+18	; 0x12
    14e6:	fb 89       	ldd	r31, Y+19	; 0x13
    14e8:	80 81       	ld	r24, Z
    14ea:	80 62       	ori	r24, 0x20	; 32
    14ec:	0a c0       	rjmp	.+20     	; 0x1502 <_ZN14HardwareSerial5writeEh+0x84>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    14ee:	9f b7       	in	r25, 0x3f	; 63
    14f0:	f8 94       	cli
      *_udr = c;
    14f2:	ee 89       	ldd	r30, Y+22	; 0x16
    14f4:	ff 89       	ldd	r31, Y+23	; 0x17
    14f6:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    14f8:	e8 89       	ldd	r30, Y+16	; 0x10
    14fa:	f9 89       	ldd	r31, Y+17	; 0x11
    14fc:	80 81       	ld	r24, Z
    14fe:	83 70       	andi	r24, 0x03	; 3
    1500:	80 64       	ori	r24, 0x40	; 64
    1502:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1504:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
    1506:	81 e0       	ldi	r24, 0x01	; 1
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	df 91       	pop	r29
    150c:	cf 91       	pop	r28
    150e:	1f 91       	pop	r17
    1510:	0f 91       	pop	r16
    1512:	ff 90       	pop	r15
    1514:	ef 90       	pop	r14
    1516:	08 95       	ret

00001518 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    1518:	cf 93       	push	r28
    151a:	df 93       	push	r29
    151c:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    151e:	88 8d       	ldd	r24, Y+24	; 0x18
    1520:	88 23       	and	r24, r24
    1522:	c9 f0       	breq	.+50     	; 0x1556 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    1524:	ea 89       	ldd	r30, Y+18	; 0x12
    1526:	fb 89       	ldd	r31, Y+19	; 0x13
    1528:	80 81       	ld	r24, Z
    152a:	85 fd       	sbrc	r24, 5
    152c:	05 c0       	rjmp	.+10     	; 0x1538 <_ZN14HardwareSerial5flushEv+0x20>
    152e:	a8 89       	ldd	r26, Y+16	; 0x10
    1530:	b9 89       	ldd	r27, Y+17	; 0x11
    1532:	8c 91       	ld	r24, X
    1534:	86 fd       	sbrc	r24, 6
    1536:	0f c0       	rjmp	.+30     	; 0x1556 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    1538:	0f b6       	in	r0, 0x3f	; 63
    153a:	07 fc       	sbrc	r0, 7
    153c:	f5 cf       	rjmp	.-22     	; 0x1528 <_ZN14HardwareSerial5flushEv+0x10>
    153e:	80 81       	ld	r24, Z
    1540:	85 ff       	sbrs	r24, 5
    1542:	f2 cf       	rjmp	.-28     	; 0x1528 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    1544:	a8 89       	ldd	r26, Y+16	; 0x10
    1546:	b9 89       	ldd	r27, Y+17	; 0x11
    1548:	8c 91       	ld	r24, X
    154a:	85 ff       	sbrs	r24, 5
    154c:	ed cf       	rjmp	.-38     	; 0x1528 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    154e:	ce 01       	movw	r24, r28
    1550:	0e 94 1d 0a 	call	0x143a	; 0x143a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1554:	e7 cf       	rjmp	.-50     	; 0x1524 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    1556:	df 91       	pop	r29
    1558:	cf 91       	pop	r28
    155a:	08 95       	ret

0000155c <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    155c:	cf 92       	push	r12
    155e:	df 92       	push	r13
    1560:	ef 92       	push	r14
    1562:	ff 92       	push	r15
    1564:	1f 93       	push	r17
    1566:	cf 93       	push	r28
    1568:	df 93       	push	r29
    156a:	ec 01       	movw	r28, r24
    156c:	6a 01       	movw	r12, r20
    156e:	7b 01       	movw	r14, r22
    1570:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    1572:	e8 89       	ldd	r30, Y+16	; 0x10
    1574:	f9 89       	ldd	r31, Y+17	; 0x11
    1576:	82 e0       	ldi	r24, 0x02	; 2
    1578:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    157a:	41 15       	cp	r20, r1
    157c:	51 4e       	sbci	r21, 0xE1	; 225
    157e:	61 05       	cpc	r22, r1
    1580:	71 05       	cpc	r23, r1
    1582:	b1 f0       	breq	.+44     	; 0x15b0 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    1584:	60 e0       	ldi	r22, 0x00	; 0
    1586:	79 e0       	ldi	r23, 0x09	; 9
    1588:	8d e3       	ldi	r24, 0x3D	; 61
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	a7 01       	movw	r20, r14
    158e:	96 01       	movw	r18, r12
    1590:	0e 94 ad 1e 	call	0x3d5a	; 0x3d5a <__udivmodsi4>
    1594:	da 01       	movw	r26, r20
    1596:	c9 01       	movw	r24, r18
    1598:	01 97       	sbiw	r24, 0x01	; 1
    159a:	a1 09       	sbc	r26, r1
    159c:	b1 09       	sbc	r27, r1
    159e:	b6 95       	lsr	r27
    15a0:	a7 95       	ror	r26
    15a2:	97 95       	ror	r25
    15a4:	87 95       	ror	r24
    15a6:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    15a8:	21 15       	cp	r18, r1
    15aa:	80 e1       	ldi	r24, 0x10	; 16
    15ac:	38 07       	cpc	r19, r24
    15ae:	a8 f0       	brcs	.+42     	; 0x15da <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    15b0:	e8 89       	ldd	r30, Y+16	; 0x10
    15b2:	f9 89       	ldd	r31, Y+17	; 0x11
    15b4:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    15b6:	60 e8       	ldi	r22, 0x80	; 128
    15b8:	74 e8       	ldi	r23, 0x84	; 132
    15ba:	8e e1       	ldi	r24, 0x1E	; 30
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	a7 01       	movw	r20, r14
    15c0:	96 01       	movw	r18, r12
    15c2:	0e 94 ad 1e 	call	0x3d5a	; 0x3d5a <__udivmodsi4>
    15c6:	da 01       	movw	r26, r20
    15c8:	c9 01       	movw	r24, r18
    15ca:	01 97       	sbiw	r24, 0x01	; 1
    15cc:	a1 09       	sbc	r26, r1
    15ce:	b1 09       	sbc	r27, r1
    15d0:	b6 95       	lsr	r27
    15d2:	a7 95       	ror	r26
    15d4:	97 95       	ror	r25
    15d6:	87 95       	ror	r24
    15d8:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    15da:	ec 85       	ldd	r30, Y+12	; 0x0c
    15dc:	fd 85       	ldd	r31, Y+13	; 0x0d
    15de:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    15e0:	ee 85       	ldd	r30, Y+14	; 0x0e
    15e2:	ff 85       	ldd	r31, Y+15	; 0x0f
    15e4:	20 83       	st	Z, r18

  _written = false;
    15e6:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    15e8:	ec 89       	ldd	r30, Y+20	; 0x14
    15ea:	fd 89       	ldd	r31, Y+21	; 0x15
    15ec:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    15ee:	ea 89       	ldd	r30, Y+18	; 0x12
    15f0:	fb 89       	ldd	r31, Y+19	; 0x13
    15f2:	80 81       	ld	r24, Z
    15f4:	80 61       	ori	r24, 0x10	; 16
    15f6:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    15f8:	ea 89       	ldd	r30, Y+18	; 0x12
    15fa:	fb 89       	ldd	r31, Y+19	; 0x13
    15fc:	80 81       	ld	r24, Z
    15fe:	88 60       	ori	r24, 0x08	; 8
    1600:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    1602:	ea 89       	ldd	r30, Y+18	; 0x12
    1604:	fb 89       	ldd	r31, Y+19	; 0x13
    1606:	80 81       	ld	r24, Z
    1608:	80 68       	ori	r24, 0x80	; 128
    160a:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    160c:	ea 89       	ldd	r30, Y+18	; 0x12
    160e:	fb 89       	ldd	r31, Y+19	; 0x13
    1610:	80 81       	ld	r24, Z
    1612:	8f 7d       	andi	r24, 0xDF	; 223
    1614:	80 83       	st	Z, r24
}
    1616:	df 91       	pop	r29
    1618:	cf 91       	pop	r28
    161a:	1f 91       	pop	r17
    161c:	ff 90       	pop	r15
    161e:	ef 90       	pop	r14
    1620:	df 90       	pop	r13
    1622:	cf 90       	pop	r12
    1624:	08 95       	ret

00001626 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    1626:	80 e0       	ldi	r24, 0x00	; 0
    1628:	90 e0       	ldi	r25, 0x00	; 0
    162a:	08 95       	ret

0000162c <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    162c:	08 95       	ret

0000162e <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    162e:	1f 92       	push	r1
    1630:	0f 92       	push	r0
    1632:	0f b6       	in	r0, 0x3f	; 63
    1634:	0f 92       	push	r0
    1636:	11 24       	eor	r1, r1
    1638:	2f 93       	push	r18
    163a:	8f 93       	push	r24
    163c:	9f 93       	push	r25
    163e:	ef 93       	push	r30
    1640:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    1642:	e0 91 ad 02 	lds	r30, 0x02AD	; 0x8002ad <Serial+0x10>
    1646:	f0 91 ae 02 	lds	r31, 0x02AE	; 0x8002ae <Serial+0x11>
    164a:	80 81       	ld	r24, Z
    164c:	e0 91 b3 02 	lds	r30, 0x02B3	; 0x8002b3 <Serial+0x16>
    1650:	f0 91 b4 02 	lds	r31, 0x02B4	; 0x8002b4 <Serial+0x17>
    1654:	82 fd       	sbrc	r24, 2
    1656:	12 c0       	rjmp	.+36     	; 0x167c <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    1658:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    165a:	80 91 b6 02 	lds	r24, 0x02B6	; 0x8002b6 <Serial+0x19>
    165e:	8f 5f       	subi	r24, 0xFF	; 255
    1660:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    1662:	20 91 b7 02 	lds	r18, 0x02B7	; 0x8002b7 <Serial+0x1a>
    1666:	82 17       	cp	r24, r18
    1668:	51 f0       	breq	.+20     	; 0x167e <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    166a:	e0 91 b6 02 	lds	r30, 0x02B6	; 0x8002b6 <Serial+0x19>
    166e:	f0 e0       	ldi	r31, 0x00	; 0
    1670:	e3 56       	subi	r30, 0x63	; 99
    1672:	fd 4f       	sbci	r31, 0xFD	; 253
    1674:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    1676:	80 93 b6 02 	sts	0x02B6, r24	; 0x8002b6 <Serial+0x19>
    167a:	01 c0       	rjmp	.+2      	; 0x167e <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    167c:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    167e:	ff 91       	pop	r31
    1680:	ef 91       	pop	r30
    1682:	9f 91       	pop	r25
    1684:	8f 91       	pop	r24
    1686:	2f 91       	pop	r18
    1688:	0f 90       	pop	r0
    168a:	0f be       	out	0x3f, r0	; 63
    168c:	0f 90       	pop	r0
    168e:	1f 90       	pop	r1
    1690:	18 95       	reti

00001692 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    1692:	1f 92       	push	r1
    1694:	0f 92       	push	r0
    1696:	0f b6       	in	r0, 0x3f	; 63
    1698:	0f 92       	push	r0
    169a:	11 24       	eor	r1, r1
    169c:	2f 93       	push	r18
    169e:	3f 93       	push	r19
    16a0:	4f 93       	push	r20
    16a2:	5f 93       	push	r21
    16a4:	6f 93       	push	r22
    16a6:	7f 93       	push	r23
    16a8:	8f 93       	push	r24
    16aa:	9f 93       	push	r25
    16ac:	af 93       	push	r26
    16ae:	bf 93       	push	r27
    16b0:	ef 93       	push	r30
    16b2:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    16b4:	8d e9       	ldi	r24, 0x9D	; 157
    16b6:	92 e0       	ldi	r25, 0x02	; 2
    16b8:	0e 94 1d 0a 	call	0x143a	; 0x143a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    16bc:	ff 91       	pop	r31
    16be:	ef 91       	pop	r30
    16c0:	bf 91       	pop	r27
    16c2:	af 91       	pop	r26
    16c4:	9f 91       	pop	r25
    16c6:	8f 91       	pop	r24
    16c8:	7f 91       	pop	r23
    16ca:	6f 91       	pop	r22
    16cc:	5f 91       	pop	r21
    16ce:	4f 91       	pop	r20
    16d0:	3f 91       	pop	r19
    16d2:	2f 91       	pop	r18
    16d4:	0f 90       	pop	r0
    16d6:	0f be       	out	0x3f, r0	; 63
    16d8:	0f 90       	pop	r0
    16da:	1f 90       	pop	r1
    16dc:	18 95       	reti

000016de <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    16de:	8d e9       	ldi	r24, 0x9D	; 157
    16e0:	92 e0       	ldi	r25, 0x02	; 2
    16e2:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <_ZN14HardwareSerial9availableEv>
    16e6:	21 e0       	ldi	r18, 0x01	; 1
    16e8:	89 2b       	or	r24, r25
    16ea:	09 f4       	brne	.+2      	; 0x16ee <_Z17Serial0_availablev+0x10>
    16ec:	20 e0       	ldi	r18, 0x00	; 0
}
    16ee:	82 2f       	mov	r24, r18
    16f0:	08 95       	ret

000016f2 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    16f2:	ed e9       	ldi	r30, 0x9D	; 157
    16f4:	f2 e0       	ldi	r31, 0x02	; 2
    16f6:	13 82       	std	Z+3, r1	; 0x03
    16f8:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    16fa:	88 ee       	ldi	r24, 0xE8	; 232
    16fc:	93 e0       	ldi	r25, 0x03	; 3
    16fe:	a0 e0       	ldi	r26, 0x00	; 0
    1700:	b0 e0       	ldi	r27, 0x00	; 0
    1702:	84 83       	std	Z+4, r24	; 0x04
    1704:	95 83       	std	Z+5, r25	; 0x05
    1706:	a6 83       	std	Z+6, r26	; 0x06
    1708:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    170a:	82 e2       	ldi	r24, 0x22	; 34
    170c:	92 e0       	ldi	r25, 0x02	; 2
    170e:	91 83       	std	Z+1, r25	; 0x01
    1710:	80 83       	st	Z, r24
    1712:	85 ec       	ldi	r24, 0xC5	; 197
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	95 87       	std	Z+13, r25	; 0x0d
    1718:	84 87       	std	Z+12, r24	; 0x0c
    171a:	84 ec       	ldi	r24, 0xC4	; 196
    171c:	90 e0       	ldi	r25, 0x00	; 0
    171e:	97 87       	std	Z+15, r25	; 0x0f
    1720:	86 87       	std	Z+14, r24	; 0x0e
    1722:	80 ec       	ldi	r24, 0xC0	; 192
    1724:	90 e0       	ldi	r25, 0x00	; 0
    1726:	91 8b       	std	Z+17, r25	; 0x11
    1728:	80 8b       	std	Z+16, r24	; 0x10
    172a:	81 ec       	ldi	r24, 0xC1	; 193
    172c:	90 e0       	ldi	r25, 0x00	; 0
    172e:	93 8b       	std	Z+19, r25	; 0x13
    1730:	82 8b       	std	Z+18, r24	; 0x12
    1732:	82 ec       	ldi	r24, 0xC2	; 194
    1734:	90 e0       	ldi	r25, 0x00	; 0
    1736:	95 8b       	std	Z+21, r25	; 0x15
    1738:	84 8b       	std	Z+20, r24	; 0x14
    173a:	86 ec       	ldi	r24, 0xC6	; 198
    173c:	90 e0       	ldi	r25, 0x00	; 0
    173e:	97 8b       	std	Z+23, r25	; 0x17
    1740:	86 8b       	std	Z+22, r24	; 0x16
    1742:	11 8e       	std	Z+25, r1	; 0x19
    1744:	12 8e       	std	Z+26, r1	; 0x1a
    1746:	13 8e       	std	Z+27, r1	; 0x1b
    1748:	14 8e       	std	Z+28, r1	; 0x1c
    174a:	08 95       	ret

0000174c <initVariant>:
    174c:	08 95       	ret

0000174e <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    174e:	0e 94 3f 10 	call	0x207e	; 0x207e <init>

	initVariant();
    1752:	0e 94 a6 0b 	call	0x174c	; 0x174c <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    1756:	0e 94 ee 05 	call	0xbdc	; 0xbdc <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    175a:	cf e0       	ldi	r28, 0x0F	; 15
    175c:	da e0       	ldi	r29, 0x0A	; 10
#endif
	
	setup();
    
	for (;;) {
		loop();
    175e:	0e 94 c1 08 	call	0x1182	; 0x1182 <loop>
		if (serialEventRun) serialEventRun();
    1762:	20 97       	sbiw	r28, 0x00	; 0
    1764:	e1 f3       	breq	.-8      	; 0x175e <main+0x10>
    1766:	0e 94 0f 0a 	call	0x141e	; 0x141e <_Z14serialEventRunv>
    176a:	f9 cf       	rjmp	.-14     	; 0x175e <main+0x10>

0000176c <_ZN5Print5writeEPKhj>:
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
    virtual size_t write(const uint8_t *buffer, size_t size);
    size_t write(const char *buffer, size_t size) {
      return write((const uint8_t *)buffer, size);
    176c:	cf 92       	push	r12
    176e:	df 92       	push	r13
    1770:	ef 92       	push	r14
    1772:	ff 92       	push	r15
    1774:	0f 93       	push	r16
    1776:	1f 93       	push	r17
    1778:	cf 93       	push	r28
    177a:	df 93       	push	r29
    177c:	6c 01       	movw	r12, r24
    177e:	7a 01       	movw	r14, r20
    1780:	8b 01       	movw	r16, r22
    1782:	c0 e0       	ldi	r28, 0x00	; 0
    1784:	d0 e0       	ldi	r29, 0x00	; 0
    1786:	ce 15       	cp	r28, r14
    1788:	df 05       	cpc	r29, r15
    178a:	81 f0       	breq	.+32     	; 0x17ac <_ZN5Print5writeEPKhj+0x40>
    178c:	d8 01       	movw	r26, r16
    178e:	6d 91       	ld	r22, X+
    1790:	8d 01       	movw	r16, r26
    1792:	d6 01       	movw	r26, r12
    1794:	ed 91       	ld	r30, X+
    1796:	fc 91       	ld	r31, X
    1798:	01 90       	ld	r0, Z+
    179a:	f0 81       	ld	r31, Z
    179c:	e0 2d       	mov	r30, r0
    179e:	c6 01       	movw	r24, r12
    17a0:	09 95       	icall
    17a2:	89 2b       	or	r24, r25
    17a4:	11 f0       	breq	.+4      	; 0x17aa <_ZN5Print5writeEPKhj+0x3e>
    17a6:	21 96       	adiw	r28, 0x01	; 1
    17a8:	ee cf       	rjmp	.-36     	; 0x1786 <_ZN5Print5writeEPKhj+0x1a>
    17aa:	7e 01       	movw	r14, r28
    17ac:	c7 01       	movw	r24, r14
    17ae:	df 91       	pop	r29
    17b0:	cf 91       	pop	r28
    17b2:	1f 91       	pop	r17
    17b4:	0f 91       	pop	r16
    17b6:	ff 90       	pop	r15
    17b8:	ef 90       	pop	r14
    17ba:	df 90       	pop	r13
    17bc:	cf 90       	pop	r12
    17be:	08 95       	ret

000017c0 <_ZN5Print5printEPK19__FlashStringHelper>:
    17c0:	ef 92       	push	r14
    17c2:	ff 92       	push	r15
    17c4:	0f 93       	push	r16
    17c6:	1f 93       	push	r17
    17c8:	cf 93       	push	r28
    17ca:	df 93       	push	r29
    17cc:	8c 01       	movw	r16, r24
    17ce:	7b 01       	movw	r14, r22
    17d0:	c0 e0       	ldi	r28, 0x00	; 0
    17d2:	d0 e0       	ldi	r29, 0x00	; 0
    17d4:	f7 01       	movw	r30, r14
    17d6:	ec 0f       	add	r30, r28
    17d8:	fd 1f       	adc	r31, r29
    17da:	64 91       	lpm	r22, Z
    17dc:	66 23       	and	r22, r22
    17de:	61 f0       	breq	.+24     	; 0x17f8 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    17e0:	d8 01       	movw	r26, r16
    17e2:	ed 91       	ld	r30, X+
    17e4:	fc 91       	ld	r31, X
    17e6:	01 90       	ld	r0, Z+
    17e8:	f0 81       	ld	r31, Z
    17ea:	e0 2d       	mov	r30, r0
    17ec:	c8 01       	movw	r24, r16
    17ee:	09 95       	icall
    17f0:	89 2b       	or	r24, r25
    17f2:	11 f0       	breq	.+4      	; 0x17f8 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    17f4:	21 96       	adiw	r28, 0x01	; 1
    17f6:	ee cf       	rjmp	.-36     	; 0x17d4 <_ZN5Print5printEPK19__FlashStringHelper+0x14>
    17f8:	ce 01       	movw	r24, r28
    17fa:	df 91       	pop	r29
    17fc:	cf 91       	pop	r28
    17fe:	1f 91       	pop	r17
    1800:	0f 91       	pop	r16
    1802:	ff 90       	pop	r15
    1804:	ef 90       	pop	r14
    1806:	08 95       	ret

00001808 <_ZN5Print5printEPKc>:
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    1808:	0c 94 27 03 	jmp	0x64e	; 0x64e <_ZN5Print5writeEPKc>

0000180c <_ZN6Stream9timedReadEv>:
    if (c < 0) break;
    *buffer++ = (char)c;
    count++;
  }
  return count;
}
    180c:	0f 93       	push	r16
    180e:	1f 93       	push	r17
    1810:	cf 93       	push	r28
    1812:	df 93       	push	r29
    1814:	ec 01       	movw	r28, r24
    1816:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <millis>
    181a:	68 87       	std	Y+8, r22	; 0x08
    181c:	79 87       	std	Y+9, r23	; 0x09
    181e:	8a 87       	std	Y+10, r24	; 0x0a
    1820:	9b 87       	std	Y+11, r25	; 0x0b
    1822:	e8 81       	ld	r30, Y
    1824:	f9 81       	ldd	r31, Y+1	; 0x01
    1826:	02 84       	ldd	r0, Z+10	; 0x0a
    1828:	f3 85       	ldd	r31, Z+11	; 0x0b
    182a:	e0 2d       	mov	r30, r0
    182c:	ce 01       	movw	r24, r28
    182e:	09 95       	icall
    1830:	97 ff       	sbrs	r25, 7
    1832:	17 c0       	rjmp	.+46     	; 0x1862 <_ZN6Stream9timedReadEv+0x56>
    1834:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <millis>
    1838:	08 85       	ldd	r16, Y+8	; 0x08
    183a:	19 85       	ldd	r17, Y+9	; 0x09
    183c:	2a 85       	ldd	r18, Y+10	; 0x0a
    183e:	3b 85       	ldd	r19, Y+11	; 0x0b
    1840:	dc 01       	movw	r26, r24
    1842:	cb 01       	movw	r24, r22
    1844:	80 1b       	sub	r24, r16
    1846:	91 0b       	sbc	r25, r17
    1848:	a2 0b       	sbc	r26, r18
    184a:	b3 0b       	sbc	r27, r19
    184c:	0c 81       	ldd	r16, Y+4	; 0x04
    184e:	1d 81       	ldd	r17, Y+5	; 0x05
    1850:	2e 81       	ldd	r18, Y+6	; 0x06
    1852:	3f 81       	ldd	r19, Y+7	; 0x07
    1854:	80 17       	cp	r24, r16
    1856:	91 07       	cpc	r25, r17
    1858:	a2 07       	cpc	r26, r18
    185a:	b3 07       	cpc	r27, r19
    185c:	10 f3       	brcs	.-60     	; 0x1822 <_ZN6Stream9timedReadEv+0x16>
    185e:	8f ef       	ldi	r24, 0xFF	; 255
    1860:	9f ef       	ldi	r25, 0xFF	; 255
    1862:	df 91       	pop	r29
    1864:	cf 91       	pop	r28
    1866:	1f 91       	pop	r17
    1868:	0f 91       	pop	r16
    186a:	08 95       	ret

0000186c <_ZN6Stream14readBytesUntilEcPcj>:
// as readBytes with terminator character
// terminates if length characters have been read, timeout, or if the terminator character  detected
// returns the number of characters placed in the buffer (0 means no valid data found)

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
    186c:	af 92       	push	r10
    186e:	bf 92       	push	r11
    1870:	cf 92       	push	r12
    1872:	df 92       	push	r13
    1874:	ef 92       	push	r14
    1876:	ff 92       	push	r15
    1878:	0f 93       	push	r16
    187a:	1f 93       	push	r17
    187c:	cf 93       	push	r28
    187e:	df 93       	push	r29
  if (length < 1) return 0;
    1880:	21 15       	cp	r18, r1
    1882:	31 05       	cpc	r19, r1
    1884:	c1 f0       	breq	.+48     	; 0x18b6 <_ZN6Stream14readBytesUntilEcPcj+0x4a>
    1886:	89 01       	movw	r16, r18
    1888:	5c 01       	movw	r10, r24
    188a:	6a 01       	movw	r12, r20
    188c:	c0 e0       	ldi	r28, 0x00	; 0
    188e:	d0 e0       	ldi	r29, 0x00	; 0
  size_t index = 0;
  while (index < length) {
    int c = timedRead();
    if (c < 0 || c == terminator) break;
    1890:	e6 2e       	mov	r14, r22
    1892:	f1 2c       	mov	r15, r1
size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
  if (length < 1) return 0;
  size_t index = 0;
  while (index < length) {
    int c = timedRead();
    1894:	c5 01       	movw	r24, r10
    1896:	0e 94 06 0c 	call	0x180c	; 0x180c <_ZN6Stream9timedReadEv>
    if (c < 0 || c == terminator) break;
    189a:	97 fd       	sbrc	r25, 7
    189c:	0f c0       	rjmp	.+30     	; 0x18bc <_ZN6Stream14readBytesUntilEcPcj+0x50>
    189e:	8e 15       	cp	r24, r14
    18a0:	9f 05       	cpc	r25, r15
    18a2:	61 f0       	breq	.+24     	; 0x18bc <_ZN6Stream14readBytesUntilEcPcj+0x50>
    *buffer++ = (char)c;
    18a4:	f6 01       	movw	r30, r12
    18a6:	81 93       	st	Z+, r24
    18a8:	6f 01       	movw	r12, r30
    index++;
    18aa:	21 96       	adiw	r28, 0x01	; 1

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
  if (length < 1) return 0;
  size_t index = 0;
  while (index < length) {
    18ac:	0c 17       	cp	r16, r28
    18ae:	1d 07       	cpc	r17, r29
    18b0:	89 f7       	brne	.-30     	; 0x1894 <_ZN6Stream14readBytesUntilEcPcj+0x28>
    18b2:	c8 01       	movw	r24, r16
    18b4:	04 c0       	rjmp	.+8      	; 0x18be <_ZN6Stream14readBytesUntilEcPcj+0x52>
// terminates if length characters have been read, timeout, or if the terminator character  detected
// returns the number of characters placed in the buffer (0 means no valid data found)

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
  if (length < 1) return 0;
    18b6:	80 e0       	ldi	r24, 0x00	; 0
    18b8:	90 e0       	ldi	r25, 0x00	; 0
    18ba:	01 c0       	rjmp	.+2      	; 0x18be <_ZN6Stream14readBytesUntilEcPcj+0x52>
    18bc:	ce 01       	movw	r24, r28
    if (c < 0 || c == terminator) break;
    *buffer++ = (char)c;
    index++;
  }
  return index; // return number of characters, not including null terminator
}
    18be:	df 91       	pop	r29
    18c0:	cf 91       	pop	r28
    18c2:	1f 91       	pop	r17
    18c4:	0f 91       	pop	r16
    18c6:	ff 90       	pop	r15
    18c8:	ef 90       	pop	r14
    18ca:	df 90       	pop	r13
    18cc:	cf 90       	pop	r12
    18ce:	bf 90       	pop	r11
    18d0:	af 90       	pop	r10
    18d2:	08 95       	ret

000018d4 <_Z4tonehjm>:


// frequency (in hertz) and duration (in milliseconds).

void tone(uint8_t _pin, unsigned int frequency, unsigned long duration)
{
    18d4:	4f 92       	push	r4
    18d6:	5f 92       	push	r5
    18d8:	6f 92       	push	r6
    18da:	7f 92       	push	r7
    18dc:	8f 92       	push	r8
    18de:	9f 92       	push	r9
    18e0:	af 92       	push	r10
    18e2:	bf 92       	push	r11
    18e4:	cf 92       	push	r12
    18e6:	df 92       	push	r13
    18e8:	ef 92       	push	r14
    18ea:	ff 92       	push	r15
    18ec:	0f 93       	push	r16
    18ee:	1f 93       	push	r17
    18f0:	cf 93       	push	r28
    18f2:	df 93       	push	r29
    18f4:	00 d0       	rcall	.+0      	; 0x18f6 <_Z4tonehjm+0x22>
    18f6:	00 d0       	rcall	.+0      	; 0x18f8 <_Z4tonehjm+0x24>
    18f8:	1f 92       	push	r1
    18fa:	cd b7       	in	r28, 0x3d	; 61
    18fc:	de b7       	in	r29, 0x3e	; 62
    18fe:	8b 01       	movw	r16, r22
    1900:	29 01       	movw	r4, r18
    1902:	3a 01       	movw	r6, r20
{
  int8_t _timer = -1;

  // if we're already using the pin, the timer should be configured.  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == _pin) {
    1904:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
    1908:	89 17       	cp	r24, r25
    190a:	21 f0       	breq	.+8      	; 0x1914 <_Z4tonehjm+0x40>
    }
  }
  
  // search for an unused timer.
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == 255) {
    190c:	9f 3f       	cpi	r25, 0xFF	; 255
    190e:	09 f0       	breq	.+2      	; 0x1912 <_Z4tonehjm+0x3e>
    1910:	4d c2       	rjmp	.+1178   	; 0x1dac <_Z4tonehjm+0x4d8>
    1912:	05 c0       	rjmp	.+10     	; 0x191e <_Z4tonehjm+0x4a>
  int8_t _timer = -1;

  // if we're already using the pin, the timer should be configured.  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == _pin) {
      return pgm_read_byte(tone_pin_to_timer_PGM + i);
    1914:	ee e8       	ldi	r30, 0x8E	; 142
    1916:	f0 e0       	ldi	r31, 0x00	; 0
    1918:	24 91       	lpm	r18, Z
    191a:	2d 83       	std	Y+5, r18	; 0x05
    191c:	84 c0       	rjmp	.+264    	; 0x1a26 <_Z4tonehjm+0x152>
  }
  
  // search for an unused timer.
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == 255) {
      tone_pins[i] = _pin;
    191e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
    1922:	ee e8       	ldi	r30, 0x8E	; 142
    1924:	f0 e0       	ldi	r31, 0x00	; 0
    1926:	94 91       	lpm	r25, Z
    1928:	9d 83       	std	Y+5, r25	; 0x05
      break;
    }
  }
  
  if (_timer != -1)
    192a:	9f 3f       	cpi	r25, 0xFF	; 255
    192c:	09 f4       	brne	.+2      	; 0x1930 <_Z4tonehjm+0x5c>
    192e:	3e c2       	rjmp	.+1148   	; 0x1dac <_Z4tonehjm+0x4d8>
  {
    // Set timer specific stuff
    // All timers in CTC mode
    // 8 bit timers will require changing prescalar values,
    // whereas 16 bit timers are set to either ck/1 or ck/64 prescalar
    switch (_timer)
    1930:	91 30       	cpi	r25, 0x01	; 1
    1932:	09 f4       	brne	.+2      	; 0x1936 <_Z4tonehjm+0x62>
    1934:	4d c0       	rjmp	.+154    	; 0x19d0 <_Z4tonehjm+0xfc>
    1936:	58 f1       	brcs	.+86     	; 0x198e <_Z4tonehjm+0xba>
    1938:	92 30       	cpi	r25, 0x02	; 2
    193a:	09 f0       	breq	.+2      	; 0x193e <_Z4tonehjm+0x6a>
    193c:	74 c0       	rjmp	.+232    	; 0x1a26 <_Z4tonehjm+0x152>
      #endif

      #if defined(TCCR2A) && defined(TCCR2B)
      case 2:
        // 8 bit timer
        TCCR2A = 0;
    193e:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
        TCCR2B = 0;
    1942:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
        bitWrite(TCCR2A, WGM21, 1);
    1946:	90 91 b0 00 	lds	r25, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    194a:	92 60       	ori	r25, 0x02	; 2
    194c:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
        bitWrite(TCCR2B, CS20, 1);
    1950:	90 91 b1 00 	lds	r25, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    1954:	91 60       	ori	r25, 0x01	; 1
    1956:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
        timer2_pin_port = portOutputRegister(digitalPinToPort(_pin));
    195a:	28 2f       	mov	r18, r24
    195c:	30 e0       	ldi	r19, 0x00	; 0
    195e:	f9 01       	movw	r30, r18
    1960:	e9 54       	subi	r30, 0x49	; 73
    1962:	ff 4f       	sbci	r31, 0xFF	; 255
    1964:	e4 91       	lpm	r30, Z
    1966:	f0 e0       	ldi	r31, 0x00	; 0
    1968:	ee 0f       	add	r30, r30
    196a:	ff 1f       	adc	r31, r31
    196c:	eb 52       	subi	r30, 0x2B	; 43
    196e:	ff 4f       	sbci	r31, 0xFF	; 255
    1970:	45 91       	lpm	r20, Z+
    1972:	54 91       	lpm	r21, Z
    1974:	50 93 3c 03 	sts	0x033C, r21	; 0x80033c <timer2_pin_port+0x1>
    1978:	40 93 3b 03 	sts	0x033B, r20	; 0x80033b <timer2_pin_port>
        timer2_pin_mask = digitalPinToBitMask(_pin);
    197c:	f9 01       	movw	r30, r18
    197e:	ed 55       	subi	r30, 0x5D	; 93
    1980:	ff 4f       	sbci	r31, 0xFF	; 255
    1982:	e4 91       	lpm	r30, Z
    1984:	e0 93 3a 03 	sts	0x033A, r30	; 0x80033a <timer2_pin_mask>
    1988:	92 e0       	ldi	r25, 0x02	; 2
    198a:	9d 83       	std	Y+5, r25	; 0x05
    198c:	0b c2       	rjmp	.+1046   	; 0x1da4 <_Z4tonehjm+0x4d0>
    switch (_timer)
    {
      #if defined(TCCR0A) && defined(TCCR0B) && defined(WGM01)
      case 0:
        // 8 bit timer
        TCCR0A = 0;
    198e:	14 bc       	out	0x24, r1	; 36
        TCCR0B = 0;
    1990:	15 bc       	out	0x25, r1	; 37
        bitWrite(TCCR0A, WGM01, 1);
    1992:	94 b5       	in	r25, 0x24	; 36
    1994:	92 60       	ori	r25, 0x02	; 2
    1996:	94 bd       	out	0x24, r25	; 36
        bitWrite(TCCR0B, CS00, 1);
    1998:	95 b5       	in	r25, 0x25	; 37
    199a:	91 60       	ori	r25, 0x01	; 1
    199c:	95 bd       	out	0x25, r25	; 37
        timer0_pin_port = portOutputRegister(digitalPinToPort(_pin));
    199e:	28 2f       	mov	r18, r24
    19a0:	30 e0       	ldi	r19, 0x00	; 0
    19a2:	f9 01       	movw	r30, r18
    19a4:	e9 54       	subi	r30, 0x49	; 73
    19a6:	ff 4f       	sbci	r31, 0xFF	; 255
    19a8:	e4 91       	lpm	r30, Z
    19aa:	f0 e0       	ldi	r31, 0x00	; 0
    19ac:	ee 0f       	add	r30, r30
    19ae:	ff 1f       	adc	r31, r31
    19b0:	eb 52       	subi	r30, 0x2B	; 43
    19b2:	ff 4f       	sbci	r31, 0xFF	; 255
    19b4:	45 91       	lpm	r20, Z+
    19b6:	54 91       	lpm	r21, Z
    19b8:	50 93 4a 03 	sts	0x034A, r21	; 0x80034a <timer0_pin_port+0x1>
    19bc:	40 93 49 03 	sts	0x0349, r20	; 0x800349 <timer0_pin_port>
        timer0_pin_mask = digitalPinToBitMask(_pin);
    19c0:	f9 01       	movw	r30, r18
    19c2:	ed 55       	subi	r30, 0x5D	; 93
    19c4:	ff 4f       	sbci	r31, 0xFF	; 255
    19c6:	e4 91       	lpm	r30, Z
    19c8:	e0 93 48 03 	sts	0x0348, r30	; 0x800348 <timer0_pin_mask>
    19cc:	1d 82       	std	Y+5, r1	; 0x05
    19ce:	ea c1       	rjmp	.+980    	; 0x1da4 <_Z4tonehjm+0x4d0>
      #endif

      #if defined(TCCR1A) && defined(TCCR1B) && defined(WGM12)
      case 1:
        // 16 bit timer
        TCCR1A = 0;
    19d0:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
        TCCR1B = 0;
    19d4:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
        bitWrite(TCCR1B, WGM12, 1);
    19d8:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    19dc:	98 60       	ori	r25, 0x08	; 8
    19de:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
        bitWrite(TCCR1B, CS10, 1);
    19e2:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    19e6:	91 60       	ori	r25, 0x01	; 1
    19e8:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
        timer1_pin_port = portOutputRegister(digitalPinToPort(_pin));
    19ec:	28 2f       	mov	r18, r24
    19ee:	30 e0       	ldi	r19, 0x00	; 0
    19f0:	f9 01       	movw	r30, r18
    19f2:	e9 54       	subi	r30, 0x49	; 73
    19f4:	ff 4f       	sbci	r31, 0xFF	; 255
    19f6:	e4 91       	lpm	r30, Z
    19f8:	f0 e0       	ldi	r31, 0x00	; 0
    19fa:	ee 0f       	add	r30, r30
    19fc:	ff 1f       	adc	r31, r31
    19fe:	eb 52       	subi	r30, 0x2B	; 43
    1a00:	ff 4f       	sbci	r31, 0xFF	; 255
    1a02:	45 91       	lpm	r20, Z+
    1a04:	54 91       	lpm	r21, Z
    1a06:	50 93 43 03 	sts	0x0343, r21	; 0x800343 <timer1_pin_port+0x1>
    1a0a:	40 93 42 03 	sts	0x0342, r20	; 0x800342 <timer1_pin_port>
        timer1_pin_mask = digitalPinToBitMask(_pin);
    1a0e:	f9 01       	movw	r30, r18
    1a10:	ed 55       	subi	r30, 0x5D	; 93
    1a12:	ff 4f       	sbci	r31, 0xFF	; 255
    1a14:	e4 91       	lpm	r30, Z
    1a16:	e0 93 41 03 	sts	0x0341, r30	; 0x800341 <timer1_pin_mask>
  _timer = toneBegin(_pin);

  if (_timer >= 0)
  {
    // Set the pinMode as OUTPUT
    pinMode(_pin, OUTPUT);
    1a1a:	61 e0       	ldi	r22, 0x01	; 1
    1a1c:	0e 94 a3 10 	call	0x2146	; 0x2146 <pinMode>
    1a20:	21 e0       	ldi	r18, 0x01	; 1
    1a22:	2d 83       	std	Y+5, r18	; 0x05
    1a24:	89 c0       	rjmp	.+274    	; 0x1b38 <_Z4tonehjm+0x264>
  uint32_t ocr = 0;
  int8_t _timer;

  _timer = toneBegin(_pin);

  if (_timer >= 0)
    1a26:	2d 81       	ldd	r18, Y+5	; 0x05
    1a28:	27 fd       	sbrc	r18, 7
    1a2a:	c0 c1       	rjmp	.+896    	; 0x1dac <_Z4tonehjm+0x4d8>
  {
    // Set the pinMode as OUTPUT
    pinMode(_pin, OUTPUT);
    1a2c:	61 e0       	ldi	r22, 0x01	; 1
    1a2e:	0e 94 a3 10 	call	0x2146	; 0x2146 <pinMode>
    
    // if we are using an 8 bit timer, scan through prescalars to find the best fit
    if (_timer == 0 || _timer == 2)
    1a32:	8d 81       	ldd	r24, Y+5	; 0x05
    1a34:	8d 7f       	andi	r24, 0xFD	; 253
    1a36:	09 f0       	breq	.+2      	; 0x1a3a <_Z4tonehjm+0x166>
    1a38:	7f c0       	rjmp	.+254    	; 0x1b38 <_Z4tonehjm+0x264>
    {
      ocr = F_CPU / frequency / 2 - 1;
    1a3a:	48 01       	movw	r8, r16
    1a3c:	a1 2c       	mov	r10, r1
    1a3e:	b1 2c       	mov	r11, r1
    1a40:	60 e0       	ldi	r22, 0x00	; 0
    1a42:	72 e1       	ldi	r23, 0x12	; 18
    1a44:	8a e7       	ldi	r24, 0x7A	; 122
    1a46:	90 e0       	ldi	r25, 0x00	; 0
    1a48:	a5 01       	movw	r20, r10
    1a4a:	94 01       	movw	r18, r8
    1a4c:	0e 94 cf 1e 	call	0x3d9e	; 0x3d9e <__divmodsi4>
    1a50:	29 83       	std	Y+1, r18	; 0x01
    1a52:	3a 83       	std	Y+2, r19	; 0x02
    1a54:	4b 83       	std	Y+3, r20	; 0x03
    1a56:	5c 83       	std	Y+4, r21	; 0x04
    1a58:	69 01       	movw	r12, r18
    1a5a:	7a 01       	movw	r14, r20
    1a5c:	81 e0       	ldi	r24, 0x01	; 1
    1a5e:	c8 1a       	sub	r12, r24
    1a60:	d1 08       	sbc	r13, r1
    1a62:	e1 08       	sbc	r14, r1
    1a64:	f1 08       	sbc	r15, r1
      prescalarbits = 0b001;  // ck/1: same for both timers
      if (ocr > 255)
    1a66:	9f ef       	ldi	r25, 0xFF	; 255
    1a68:	c9 16       	cp	r12, r25
    1a6a:	d1 04       	cpc	r13, r1
    1a6c:	e1 04       	cpc	r14, r1
    1a6e:	f1 04       	cpc	r15, r1
    1a70:	09 f0       	breq	.+2      	; 0x1a74 <_Z4tonehjm+0x1a0>
    1a72:	08 f4       	brcc	.+2      	; 0x1a76 <_Z4tonehjm+0x1a2>
    1a74:	4e c0       	rjmp	.+156    	; 0x1b12 <_Z4tonehjm+0x23e>
      {
        ocr = F_CPU / frequency / 2 / 8 - 1;
    1a76:	60 e4       	ldi	r22, 0x40	; 64
    1a78:	72 e4       	ldi	r23, 0x42	; 66
    1a7a:	8f e0       	ldi	r24, 0x0F	; 15
    1a7c:	90 e0       	ldi	r25, 0x00	; 0
    1a7e:	a5 01       	movw	r20, r10
    1a80:	94 01       	movw	r18, r8
    1a82:	0e 94 cf 1e 	call	0x3d9e	; 0x3d9e <__divmodsi4>
    1a86:	69 01       	movw	r12, r18
    1a88:	7a 01       	movw	r14, r20
    1a8a:	81 e0       	ldi	r24, 0x01	; 1
    1a8c:	c8 1a       	sub	r12, r24
    1a8e:	d1 08       	sbc	r13, r1
    1a90:	e1 08       	sbc	r14, r1
    1a92:	f1 08       	sbc	r15, r1
        prescalarbits = 0b010;  // ck/8: same for both timers

        if (_timer == 2 && ocr > 255)
    1a94:	9d 81       	ldd	r25, Y+5	; 0x05
    1a96:	92 30       	cpi	r25, 0x02	; 2
    1a98:	09 f5       	brne	.+66     	; 0x1adc <_Z4tonehjm+0x208>
    1a9a:	2f ef       	ldi	r18, 0xFF	; 255
    1a9c:	c2 16       	cp	r12, r18
    1a9e:	d1 04       	cpc	r13, r1
    1aa0:	e1 04       	cpc	r14, r1
    1aa2:	f1 04       	cpc	r15, r1
    1aa4:	09 f0       	breq	.+2      	; 0x1aa8 <_Z4tonehjm+0x1d4>
    1aa6:	08 f4       	brcc	.+2      	; 0x1aaa <_Z4tonehjm+0x1d6>
    1aa8:	44 c1       	rjmp	.+648    	; 0x1d32 <_Z4tonehjm+0x45e>
        {
          ocr = F_CPU / frequency / 2 / 32 - 1;
    1aaa:	60 e9       	ldi	r22, 0x90	; 144
    1aac:	70 ed       	ldi	r23, 0xD0	; 208
    1aae:	83 e0       	ldi	r24, 0x03	; 3
    1ab0:	90 e0       	ldi	r25, 0x00	; 0
    1ab2:	a5 01       	movw	r20, r10
    1ab4:	94 01       	movw	r18, r8
    1ab6:	0e 94 cf 1e 	call	0x3d9e	; 0x3d9e <__divmodsi4>
    1aba:	69 01       	movw	r12, r18
    1abc:	7a 01       	movw	r14, r20
    1abe:	81 e0       	ldi	r24, 0x01	; 1
    1ac0:	c8 1a       	sub	r12, r24
    1ac2:	d1 08       	sbc	r13, r1
    1ac4:	e1 08       	sbc	r14, r1
    1ac6:	f1 08       	sbc	r15, r1
          prescalarbits = 0b011;
        }

        if (ocr > 255)
    1ac8:	9f ef       	ldi	r25, 0xFF	; 255
    1aca:	c9 16       	cp	r12, r25
    1acc:	d1 04       	cpc	r13, r1
    1ace:	e1 04       	cpc	r14, r1
    1ad0:	f1 04       	cpc	r15, r1
    1ad2:	11 f0       	breq	.+4      	; 0x1ad8 <_Z4tonehjm+0x204>
    1ad4:	08 f0       	brcs	.+2      	; 0x1ad8 <_Z4tonehjm+0x204>
    1ad6:	ba c0       	rjmp	.+372    	; 0x1c4c <_Z4tonehjm+0x378>
        prescalarbits = 0b010;  // ck/8: same for both timers

        if (_timer == 2 && ocr > 255)
        {
          ocr = F_CPU / frequency / 2 / 32 - 1;
          prescalarbits = 0b011;
    1ad8:	83 e0       	ldi	r24, 0x03	; 3
    1ada:	27 c0       	rjmp	.+78     	; 0x1b2a <_Z4tonehjm+0x256>
        }

        if (ocr > 255)
    1adc:	2f ef       	ldi	r18, 0xFF	; 255
    1ade:	c2 16       	cp	r12, r18
    1ae0:	d1 04       	cpc	r13, r1
    1ae2:	e1 04       	cpc	r14, r1
    1ae4:	f1 04       	cpc	r15, r1
    1ae6:	b9 f0       	breq	.+46     	; 0x1b16 <_Z4tonehjm+0x242>
    1ae8:	b0 f0       	brcs	.+44     	; 0x1b16 <_Z4tonehjm+0x242>
        {
          ocr = F_CPU / frequency / 2 / 64 - 1;
    1aea:	68 e4       	ldi	r22, 0x48	; 72
    1aec:	78 ee       	ldi	r23, 0xE8	; 232
    1aee:	81 e0       	ldi	r24, 0x01	; 1
    1af0:	90 e0       	ldi	r25, 0x00	; 0
    1af2:	a5 01       	movw	r20, r10
    1af4:	94 01       	movw	r18, r8
    1af6:	0e 94 cf 1e 	call	0x3d9e	; 0x3d9e <__divmodsi4>
    1afa:	69 01       	movw	r12, r18
    1afc:	7a 01       	movw	r14, r20
    1afe:	81 e0       	ldi	r24, 0x01	; 1
    1b00:	c8 1a       	sub	r12, r24
    1b02:	d1 08       	sbc	r13, r1
    1b04:	e1 08       	sbc	r14, r1
    1b06:	f1 08       	sbc	r15, r1
          prescalarbits = _timer == 0 ? 0b011 : 0b100;
    1b08:	9d 81       	ldd	r25, Y+5	; 0x05
    1b0a:	99 23       	and	r25, r25
    1b0c:	09 f4       	brne	.+2      	; 0x1b10 <_Z4tonehjm+0x23c>
    1b0e:	13 c1       	rjmp	.+550    	; 0x1d36 <_Z4tonehjm+0x462>
    1b10:	dc c0       	rjmp	.+440    	; 0x1cca <_Z4tonehjm+0x3f6>
    
    // if we are using an 8 bit timer, scan through prescalars to find the best fit
    if (_timer == 0 || _timer == 2)
    {
      ocr = F_CPU / frequency / 2 - 1;
      prescalarbits = 0b001;  // ck/1: same for both timers
    1b12:	81 e0       	ldi	r24, 0x01	; 1
    1b14:	01 c0       	rjmp	.+2      	; 0x1b18 <_Z4tonehjm+0x244>
      if (ocr > 255)
      {
        ocr = F_CPU / frequency / 2 / 8 - 1;
        prescalarbits = 0b010;  // ck/8: same for both timers
    1b16:	82 e0       	ldi	r24, 0x02	; 2
          }
        }
      }

#if defined(TCCR0B)
      if (_timer == 0)
    1b18:	9d 81       	ldd	r25, Y+5	; 0x05
    1b1a:	91 11       	cpse	r25, r1
    1b1c:	06 c0       	rjmp	.+12     	; 0x1b2a <_Z4tonehjm+0x256>
      {
        TCCR0B = (TCCR0B & 0b11111000) | prescalarbits;
    1b1e:	95 b5       	in	r25, 0x25	; 37
    1b20:	98 7f       	andi	r25, 0xF8	; 248
    1b22:	89 2b       	or	r24, r25
    1b24:	85 bd       	out	0x25, r24	; 37
    1b26:	44 c0       	rjmp	.+136    	; 0x1bb0 <_Z4tonehjm+0x2dc>
          prescalarbits = _timer == 0 ? 0b011 : 0b100;

          if (_timer == 2 && ocr > 255)
          {
            ocr = F_CPU / frequency / 2 / 128 - 1;
            prescalarbits = 0b101;
    1b28:	85 e0       	ldi	r24, 0x05	; 5
      }
      else
#endif
#if defined(TCCR2B)
      {
        TCCR2B = (TCCR2B & 0b11111000) | prescalarbits;
    1b2a:	90 91 b1 00 	lds	r25, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    1b2e:	98 7f       	andi	r25, 0xF8	; 248
    1b30:	89 2b       	or	r24, r25
    1b32:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    1b36:	3c c0       	rjmp	.+120    	; 0x1bb0 <_Z4tonehjm+0x2dc>
#endif
    }
    else
    {
      // two choices for the 16 bit timers: ck/1 or ck/64
      ocr = F_CPU / frequency / 2 - 1;
    1b38:	48 01       	movw	r8, r16
    1b3a:	a1 2c       	mov	r10, r1
    1b3c:	b1 2c       	mov	r11, r1
    1b3e:	60 e0       	ldi	r22, 0x00	; 0
    1b40:	72 e1       	ldi	r23, 0x12	; 18
    1b42:	8a e7       	ldi	r24, 0x7A	; 122
    1b44:	90 e0       	ldi	r25, 0x00	; 0
    1b46:	a5 01       	movw	r20, r10
    1b48:	94 01       	movw	r18, r8
    1b4a:	0e 94 cf 1e 	call	0x3d9e	; 0x3d9e <__divmodsi4>
    1b4e:	69 01       	movw	r12, r18
    1b50:	7a 01       	movw	r14, r20
    1b52:	81 e0       	ldi	r24, 0x01	; 1
    1b54:	c8 1a       	sub	r12, r24
    1b56:	d1 08       	sbc	r13, r1
    1b58:	e1 08       	sbc	r14, r1
    1b5a:	f1 08       	sbc	r15, r1

      prescalarbits = 0b001;
      if (ocr > 0xffff)
    1b5c:	c1 14       	cp	r12, r1
    1b5e:	d1 04       	cpc	r13, r1
    1b60:	91 e0       	ldi	r25, 0x01	; 1
    1b62:	e9 06       	cpc	r14, r25
    1b64:	f1 04       	cpc	r15, r1
    1b66:	88 f0       	brcs	.+34     	; 0x1b8a <_Z4tonehjm+0x2b6>
      {
        ocr = F_CPU / frequency / 2 / 64 - 1;
    1b68:	68 e4       	ldi	r22, 0x48	; 72
    1b6a:	78 ee       	ldi	r23, 0xE8	; 232
    1b6c:	81 e0       	ldi	r24, 0x01	; 1
    1b6e:	90 e0       	ldi	r25, 0x00	; 0
    1b70:	a5 01       	movw	r20, r10
    1b72:	94 01       	movw	r18, r8
    1b74:	0e 94 cf 1e 	call	0x3d9e	; 0x3d9e <__divmodsi4>
    1b78:	69 01       	movw	r12, r18
    1b7a:	7a 01       	movw	r14, r20
    1b7c:	81 e0       	ldi	r24, 0x01	; 1
    1b7e:	c8 1a       	sub	r12, r24
    1b80:	d1 08       	sbc	r13, r1
    1b82:	e1 08       	sbc	r14, r1
    1b84:	f1 08       	sbc	r15, r1
        prescalarbits = 0b011;
    1b86:	83 e0       	ldi	r24, 0x03	; 3
    1b88:	01 c0       	rjmp	.+2      	; 0x1b8c <_Z4tonehjm+0x2b8>
    else
    {
      // two choices for the 16 bit timers: ck/1 or ck/64
      ocr = F_CPU / frequency / 2 - 1;

      prescalarbits = 0b001;
    1b8a:	81 e0       	ldi	r24, 0x01	; 1
      {
        ocr = F_CPU / frequency / 2 / 64 - 1;
        prescalarbits = 0b011;
      }

      if (_timer == 1)
    1b8c:	9d 81       	ldd	r25, Y+5	; 0x05
    1b8e:	91 30       	cpi	r25, 0x01	; 1
    1b90:	79 f4       	brne	.+30     	; 0x1bb0 <_Z4tonehjm+0x2dc>
      {
#if defined(TCCR1B)
        TCCR1B = (TCCR1B & 0b11111000) | prescalarbits;
    1b92:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1b96:	98 7f       	andi	r25, 0xF8	; 248
    1b98:	89 2b       	or	r24, r25
    1b9a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>

    }
    

    // Calculate the toggle count
    if (duration > 0)
    1b9e:	41 14       	cp	r4, r1
    1ba0:	51 04       	cpc	r5, r1
    1ba2:	61 04       	cpc	r6, r1
    1ba4:	71 04       	cpc	r7, r1
    1ba6:	49 f4       	brne	.+18     	; 0x1bba <_Z4tonehjm+0x2e6>
    {
      toggle_count = 2 * frequency * duration / 1000;
    }
    else
    {
      toggle_count = -1;
    1ba8:	2f ef       	ldi	r18, 0xFF	; 255
    1baa:	3f ef       	ldi	r19, 0xFF	; 255
    1bac:	a9 01       	movw	r20, r18
    1bae:	2c c0       	rjmp	.+88     	; 0x1c08 <_Z4tonehjm+0x334>

    }
    

    // Calculate the toggle count
    if (duration > 0)
    1bb0:	41 14       	cp	r4, r1
    1bb2:	51 04       	cpc	r5, r1
    1bb4:	61 04       	cpc	r6, r1
    1bb6:	71 04       	cpc	r7, r1
    1bb8:	71 f0       	breq	.+28     	; 0x1bd6 <_Z4tonehjm+0x302>
    {
      toggle_count = 2 * frequency * duration / 1000;
    1bba:	d8 01       	movw	r26, r16
    1bbc:	aa 0f       	add	r26, r26
    1bbe:	bb 1f       	adc	r27, r27
    1bc0:	a3 01       	movw	r20, r6
    1bc2:	92 01       	movw	r18, r4
    1bc4:	0e 94 03 1f 	call	0x3e06	; 0x3e06 <__muluhisi3>
    1bc8:	28 ee       	ldi	r18, 0xE8	; 232
    1bca:	33 e0       	ldi	r19, 0x03	; 3
    1bcc:	40 e0       	ldi	r20, 0x00	; 0
    1bce:	50 e0       	ldi	r21, 0x00	; 0
    1bd0:	0e 94 ad 1e 	call	0x3d5a	; 0x3d5a <__udivmodsi4>
    1bd4:	03 c0       	rjmp	.+6      	; 0x1bdc <_Z4tonehjm+0x308>
    }
    else
    {
      toggle_count = -1;
    1bd6:	2f ef       	ldi	r18, 0xFF	; 255
    1bd8:	3f ef       	ldi	r19, 0xFF	; 255
    1bda:	a9 01       	movw	r20, r18
    }

    // Set the OCR for the given timer,
    // set the toggle count,
    // then turn on the interrupts
    switch (_timer)
    1bdc:	8d 81       	ldd	r24, Y+5	; 0x05
    1bde:	81 30       	cpi	r24, 0x01	; 1
    1be0:	99 f0       	breq	.+38     	; 0x1c08 <_Z4tonehjm+0x334>
    1be2:	82 30       	cpi	r24, 0x02	; 2
    1be4:	19 f1       	breq	.+70     	; 0x1c2c <_Z4tonehjm+0x358>
    1be6:	81 11       	cpse	r24, r1
    1be8:	e1 c0       	rjmp	.+450    	; 0x1dac <_Z4tonehjm+0x4d8>
    {

#if defined(OCR0A) && defined(TIMSK0) && defined(OCIE0A)
      case 0:
        OCR0A = ocr;
    1bea:	c7 bc       	out	0x27, r12	; 39
        timer0_toggle_count = toggle_count;
    1bec:	20 93 4b 03 	sts	0x034B, r18	; 0x80034b <timer0_toggle_count>
    1bf0:	30 93 4c 03 	sts	0x034C, r19	; 0x80034c <timer0_toggle_count+0x1>
    1bf4:	40 93 4d 03 	sts	0x034D, r20	; 0x80034d <timer0_toggle_count+0x2>
    1bf8:	50 93 4e 03 	sts	0x034E, r21	; 0x80034e <timer0_toggle_count+0x3>
        bitWrite(TIMSK0, OCIE0A, 1);
    1bfc:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
    1c00:	82 60       	ori	r24, 0x02	; 2
    1c02:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
        break;
    1c06:	d2 c0       	rjmp	.+420    	; 0x1dac <_Z4tonehjm+0x4d8>
#endif

      case 1:
#if defined(OCR1A) && defined(TIMSK1) && defined(OCIE1A)
        OCR1A = ocr;
    1c08:	d0 92 89 00 	sts	0x0089, r13	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1c0c:	c0 92 88 00 	sts	0x0088, r12	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
        timer1_toggle_count = toggle_count;
    1c10:	20 93 44 03 	sts	0x0344, r18	; 0x800344 <timer1_toggle_count>
    1c14:	30 93 45 03 	sts	0x0345, r19	; 0x800345 <timer1_toggle_count+0x1>
    1c18:	40 93 46 03 	sts	0x0346, r20	; 0x800346 <timer1_toggle_count+0x2>
    1c1c:	50 93 47 03 	sts	0x0347, r21	; 0x800347 <timer1_toggle_count+0x3>
        bitWrite(TIMSK1, OCIE1A, 1);
    1c20:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    1c24:	82 60       	ori	r24, 0x02	; 2
    1c26:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
        // this combination is for at least the ATmega32
        OCR1A = ocr;
        timer1_toggle_count = toggle_count;
        bitWrite(TIMSK, OCIE1A, 1);
#endif
        break;
    1c2a:	c0 c0       	rjmp	.+384    	; 0x1dac <_Z4tonehjm+0x4d8>

#if defined(OCR2A) && defined(TIMSK2) && defined(OCIE2A)
      case 2:
        OCR2A = ocr;
    1c2c:	c0 92 b3 00 	sts	0x00B3, r12	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
        timer2_toggle_count = toggle_count;
    1c30:	20 93 3d 03 	sts	0x033D, r18	; 0x80033d <timer2_toggle_count>
    1c34:	30 93 3e 03 	sts	0x033E, r19	; 0x80033e <timer2_toggle_count+0x1>
    1c38:	40 93 3f 03 	sts	0x033F, r20	; 0x80033f <timer2_toggle_count+0x2>
    1c3c:	50 93 40 03 	sts	0x0340, r21	; 0x800340 <timer2_toggle_count+0x3>
        bitWrite(TIMSK2, OCIE2A, 1);
    1c40:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
    1c44:	82 60       	ori	r24, 0x02	; 2
    1c46:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
        break;
#endif

    }
  }
}
    1c4a:	b0 c0       	rjmp	.+352    	; 0x1dac <_Z4tonehjm+0x4d8>
          prescalarbits = 0b011;
        }

        if (ocr > 255)
        {
          ocr = F_CPU / frequency / 2 / 64 - 1;
    1c4c:	68 e4       	ldi	r22, 0x48	; 72
    1c4e:	78 ee       	ldi	r23, 0xE8	; 232
    1c50:	81 e0       	ldi	r24, 0x01	; 1
    1c52:	90 e0       	ldi	r25, 0x00	; 0
    1c54:	a5 01       	movw	r20, r10
    1c56:	94 01       	movw	r18, r8
    1c58:	0e 94 cf 1e 	call	0x3d9e	; 0x3d9e <__divmodsi4>
    1c5c:	69 01       	movw	r12, r18
    1c5e:	7a 01       	movw	r14, r20
    1c60:	91 e0       	ldi	r25, 0x01	; 1
    1c62:	c9 1a       	sub	r12, r25
    1c64:	d1 08       	sbc	r13, r1
    1c66:	e1 08       	sbc	r14, r1
    1c68:	f1 08       	sbc	r15, r1
          prescalarbits = _timer == 0 ? 0b011 : 0b100;

          if (_timer == 2 && ocr > 255)
    1c6a:	2f ef       	ldi	r18, 0xFF	; 255
    1c6c:	c2 16       	cp	r12, r18
    1c6e:	d1 04       	cpc	r13, r1
    1c70:	e1 04       	cpc	r14, r1
    1c72:	f1 04       	cpc	r15, r1
    1c74:	41 f1       	breq	.+80     	; 0x1cc6 <_Z4tonehjm+0x3f2>
    1c76:	38 f1       	brcs	.+78     	; 0x1cc6 <_Z4tonehjm+0x3f2>
          {
            ocr = F_CPU / frequency / 2 / 128 - 1;
    1c78:	64 e2       	ldi	r22, 0x24	; 36
    1c7a:	74 ef       	ldi	r23, 0xF4	; 244
    1c7c:	80 e0       	ldi	r24, 0x00	; 0
    1c7e:	90 e0       	ldi	r25, 0x00	; 0
    1c80:	a5 01       	movw	r20, r10
    1c82:	94 01       	movw	r18, r8
    1c84:	0e 94 cf 1e 	call	0x3d9e	; 0x3d9e <__divmodsi4>
    1c88:	69 01       	movw	r12, r18
    1c8a:	7a 01       	movw	r14, r20
    1c8c:	81 e0       	ldi	r24, 0x01	; 1
    1c8e:	c8 1a       	sub	r12, r24
    1c90:	d1 08       	sbc	r13, r1
    1c92:	e1 08       	sbc	r14, r1
    1c94:	f1 08       	sbc	r15, r1
            prescalarbits = 0b101;
          }

          if (ocr > 255)
    1c96:	9f ef       	ldi	r25, 0xFF	; 255
    1c98:	c9 16       	cp	r12, r25
    1c9a:	d1 04       	cpc	r13, r1
    1c9c:	e1 04       	cpc	r14, r1
    1c9e:	f1 04       	cpc	r15, r1
    1ca0:	09 f0       	breq	.+2      	; 0x1ca4 <_Z4tonehjm+0x3d0>
    1ca2:	08 f4       	brcc	.+2      	; 0x1ca6 <_Z4tonehjm+0x3d2>
    1ca4:	41 cf       	rjmp	.-382    	; 0x1b28 <_Z4tonehjm+0x254>
          {
            ocr = F_CPU / frequency / 2 / 256 - 1;
    1ca6:	62 e1       	ldi	r22, 0x12	; 18
    1ca8:	7a e7       	ldi	r23, 0x7A	; 122
    1caa:	80 e0       	ldi	r24, 0x00	; 0
    1cac:	90 e0       	ldi	r25, 0x00	; 0
    1cae:	a5 01       	movw	r20, r10
    1cb0:	94 01       	movw	r18, r8
    1cb2:	0e 94 cf 1e 	call	0x3d9e	; 0x3d9e <__divmodsi4>
    1cb6:	69 01       	movw	r12, r18
    1cb8:	7a 01       	movw	r14, r20
    1cba:	81 e0       	ldi	r24, 0x01	; 1
    1cbc:	c8 1a       	sub	r12, r24
    1cbe:	d1 08       	sbc	r13, r1
    1cc0:	e1 08       	sbc	r14, r1
    1cc2:	f1 08       	sbc	r15, r1
    1cc4:	19 c0       	rjmp	.+50     	; 0x1cf8 <_Z4tonehjm+0x424>
        }

        if (ocr > 255)
        {
          ocr = F_CPU / frequency / 2 / 64 - 1;
          prescalarbits = _timer == 0 ? 0b011 : 0b100;
    1cc6:	84 e0       	ldi	r24, 0x04	; 4
    1cc8:	30 cf       	rjmp	.-416    	; 0x1b2a <_Z4tonehjm+0x256>
          {
            ocr = F_CPU / frequency / 2 / 128 - 1;
            prescalarbits = 0b101;
          }

          if (ocr > 255)
    1cca:	2f ef       	ldi	r18, 0xFF	; 255
    1ccc:	c2 16       	cp	r12, r18
    1cce:	d1 04       	cpc	r13, r1
    1cd0:	e1 04       	cpc	r14, r1
    1cd2:	f1 04       	cpc	r15, r1
    1cd4:	09 f0       	breq	.+2      	; 0x1cd8 <_Z4tonehjm+0x404>
    1cd6:	08 f4       	brcc	.+2      	; 0x1cda <_Z4tonehjm+0x406>
    1cd8:	63 c0       	rjmp	.+198    	; 0x1da0 <_Z4tonehjm+0x4cc>
          {
            ocr = F_CPU / frequency / 2 / 256 - 1;
    1cda:	62 e1       	ldi	r22, 0x12	; 18
    1cdc:	7a e7       	ldi	r23, 0x7A	; 122
    1cde:	80 e0       	ldi	r24, 0x00	; 0
    1ce0:	90 e0       	ldi	r25, 0x00	; 0
    1ce2:	a5 01       	movw	r20, r10
    1ce4:	94 01       	movw	r18, r8
    1ce6:	0e 94 cf 1e 	call	0x3d9e	; 0x3d9e <__divmodsi4>
    1cea:	69 01       	movw	r12, r18
    1cec:	7a 01       	movw	r14, r20
    1cee:	91 e0       	ldi	r25, 0x01	; 1
    1cf0:	c9 1a       	sub	r12, r25
    1cf2:	d1 08       	sbc	r13, r1
    1cf4:	e1 08       	sbc	r14, r1
    1cf6:	f1 08       	sbc	r15, r1
            prescalarbits = _timer == 0 ? 0b100 : 0b110;
            if (ocr > 255)
    1cf8:	8f ef       	ldi	r24, 0xFF	; 255
    1cfa:	c8 16       	cp	r12, r24
    1cfc:	d1 04       	cpc	r13, r1
    1cfe:	e1 04       	cpc	r14, r1
    1d00:	f1 04       	cpc	r15, r1
    1d02:	a9 f0       	breq	.+42     	; 0x1d2e <_Z4tonehjm+0x45a>
    1d04:	a0 f0       	brcs	.+40     	; 0x1d2e <_Z4tonehjm+0x45a>
            {
              // can't do any better than /1024
              ocr = F_CPU / frequency / 2 / 1024 - 1;
    1d06:	89 81       	ldd	r24, Y+1	; 0x01
    1d08:	9a 81       	ldd	r25, Y+2	; 0x02
    1d0a:	ab 81       	ldd	r26, Y+3	; 0x03
    1d0c:	bc 81       	ldd	r27, Y+4	; 0x04
    1d0e:	2a e0       	ldi	r18, 0x0A	; 10
    1d10:	b5 95       	asr	r27
    1d12:	a7 95       	ror	r26
    1d14:	97 95       	ror	r25
    1d16:	87 95       	ror	r24
    1d18:	2a 95       	dec	r18
    1d1a:	d1 f7       	brne	.-12     	; 0x1d10 <_Z4tonehjm+0x43c>
    1d1c:	6c 01       	movw	r12, r24
    1d1e:	7d 01       	movw	r14, r26
    1d20:	21 e0       	ldi	r18, 0x01	; 1
    1d22:	c2 1a       	sub	r12, r18
    1d24:	d1 08       	sbc	r13, r1
    1d26:	e1 08       	sbc	r14, r1
    1d28:	f1 08       	sbc	r15, r1
              prescalarbits = _timer == 0 ? 0b101 : 0b111;
    1d2a:	87 e0       	ldi	r24, 0x07	; 7
    1d2c:	fe ce       	rjmp	.-516    	; 0x1b2a <_Z4tonehjm+0x256>
          }

          if (ocr > 255)
          {
            ocr = F_CPU / frequency / 2 / 256 - 1;
            prescalarbits = _timer == 0 ? 0b100 : 0b110;
    1d2e:	86 e0       	ldi	r24, 0x06	; 6
    1d30:	fc ce       	rjmp	.-520    	; 0x1b2a <_Z4tonehjm+0x256>
      ocr = F_CPU / frequency / 2 - 1;
      prescalarbits = 0b001;  // ck/1: same for both timers
      if (ocr > 255)
      {
        ocr = F_CPU / frequency / 2 / 8 - 1;
        prescalarbits = 0b010;  // ck/8: same for both timers
    1d32:	82 e0       	ldi	r24, 0x02	; 2
    1d34:	fa ce       	rjmp	.-524    	; 0x1b2a <_Z4tonehjm+0x256>
          {
            ocr = F_CPU / frequency / 2 / 128 - 1;
            prescalarbits = 0b101;
          }

          if (ocr > 255)
    1d36:	8f ef       	ldi	r24, 0xFF	; 255
    1d38:	c8 16       	cp	r12, r24
    1d3a:	d1 04       	cpc	r13, r1
    1d3c:	e1 04       	cpc	r14, r1
    1d3e:	f1 04       	cpc	r15, r1
    1d40:	69 f1       	breq	.+90     	; 0x1d9c <_Z4tonehjm+0x4c8>
    1d42:	60 f1       	brcs	.+88     	; 0x1d9c <_Z4tonehjm+0x4c8>
          {
            ocr = F_CPU / frequency / 2 / 256 - 1;
    1d44:	62 e1       	ldi	r22, 0x12	; 18
    1d46:	7a e7       	ldi	r23, 0x7A	; 122
    1d48:	80 e0       	ldi	r24, 0x00	; 0
    1d4a:	90 e0       	ldi	r25, 0x00	; 0
    1d4c:	a5 01       	movw	r20, r10
    1d4e:	94 01       	movw	r18, r8
    1d50:	0e 94 cf 1e 	call	0x3d9e	; 0x3d9e <__divmodsi4>
    1d54:	69 01       	movw	r12, r18
    1d56:	7a 01       	movw	r14, r20
    1d58:	91 e0       	ldi	r25, 0x01	; 1
    1d5a:	c9 1a       	sub	r12, r25
    1d5c:	d1 08       	sbc	r13, r1
    1d5e:	e1 08       	sbc	r14, r1
    1d60:	f1 08       	sbc	r15, r1
            prescalarbits = _timer == 0 ? 0b100 : 0b110;
            if (ocr > 255)
    1d62:	2f ef       	ldi	r18, 0xFF	; 255
    1d64:	c2 16       	cp	r12, r18
    1d66:	d1 04       	cpc	r13, r1
    1d68:	e1 04       	cpc	r14, r1
    1d6a:	f1 04       	cpc	r15, r1
    1d6c:	a9 f0       	breq	.+42     	; 0x1d98 <_Z4tonehjm+0x4c4>
    1d6e:	a0 f0       	brcs	.+40     	; 0x1d98 <_Z4tonehjm+0x4c4>
            {
              // can't do any better than /1024
              ocr = F_CPU / frequency / 2 / 1024 - 1;
    1d70:	89 81       	ldd	r24, Y+1	; 0x01
    1d72:	9a 81       	ldd	r25, Y+2	; 0x02
    1d74:	ab 81       	ldd	r26, Y+3	; 0x03
    1d76:	bc 81       	ldd	r27, Y+4	; 0x04
    1d78:	3a e0       	ldi	r19, 0x0A	; 10
    1d7a:	b5 95       	asr	r27
    1d7c:	a7 95       	ror	r26
    1d7e:	97 95       	ror	r25
    1d80:	87 95       	ror	r24
    1d82:	3a 95       	dec	r19
    1d84:	d1 f7       	brne	.-12     	; 0x1d7a <_Z4tonehjm+0x4a6>
    1d86:	6c 01       	movw	r12, r24
    1d88:	7d 01       	movw	r14, r26
    1d8a:	21 e0       	ldi	r18, 0x01	; 1
    1d8c:	c2 1a       	sub	r12, r18
    1d8e:	d1 08       	sbc	r13, r1
    1d90:	e1 08       	sbc	r14, r1
    1d92:	f1 08       	sbc	r15, r1
              prescalarbits = _timer == 0 ? 0b101 : 0b111;
    1d94:	85 e0       	ldi	r24, 0x05	; 5
    1d96:	c3 ce       	rjmp	.-634    	; 0x1b1e <_Z4tonehjm+0x24a>
          }

          if (ocr > 255)
          {
            ocr = F_CPU / frequency / 2 / 256 - 1;
            prescalarbits = _timer == 0 ? 0b100 : 0b110;
    1d98:	84 e0       	ldi	r24, 0x04	; 4
    1d9a:	c1 ce       	rjmp	.-638    	; 0x1b1e <_Z4tonehjm+0x24a>
        }

        if (ocr > 255)
        {
          ocr = F_CPU / frequency / 2 / 64 - 1;
          prescalarbits = _timer == 0 ? 0b011 : 0b100;
    1d9c:	83 e0       	ldi	r24, 0x03	; 3
    1d9e:	bf ce       	rjmp	.-642    	; 0x1b1e <_Z4tonehjm+0x24a>
    1da0:	84 e0       	ldi	r24, 0x04	; 4
    1da2:	ba ce       	rjmp	.-652    	; 0x1b18 <_Z4tonehjm+0x244>
  _timer = toneBegin(_pin);

  if (_timer >= 0)
  {
    // Set the pinMode as OUTPUT
    pinMode(_pin, OUTPUT);
    1da4:	61 e0       	ldi	r22, 0x01	; 1
    1da6:	0e 94 a3 10 	call	0x2146	; 0x2146 <pinMode>
    1daa:	47 ce       	rjmp	.-882    	; 0x1a3a <_Z4tonehjm+0x166>
        break;
#endif

    }
  }
}
    1dac:	0f 90       	pop	r0
    1dae:	0f 90       	pop	r0
    1db0:	0f 90       	pop	r0
    1db2:	0f 90       	pop	r0
    1db4:	0f 90       	pop	r0
    1db6:	df 91       	pop	r29
    1db8:	cf 91       	pop	r28
    1dba:	1f 91       	pop	r17
    1dbc:	0f 91       	pop	r16
    1dbe:	ff 90       	pop	r15
    1dc0:	ef 90       	pop	r14
    1dc2:	df 90       	pop	r13
    1dc4:	cf 90       	pop	r12
    1dc6:	bf 90       	pop	r11
    1dc8:	af 90       	pop	r10
    1dca:	9f 90       	pop	r9
    1dcc:	8f 90       	pop	r8
    1dce:	7f 90       	pop	r7
    1dd0:	6f 90       	pop	r6
    1dd2:	5f 90       	pop	r5
    1dd4:	4f 90       	pop	r4
    1dd6:	08 95       	ret

00001dd8 <_Z12disableTimerh>:
// XXX: this function only works properly for timer 2 (the only one we use
// currently).  for the others, it should end the tone, but won't restore
// proper PWM functionality for the timer.
void disableTimer(uint8_t _timer)
{
  switch (_timer)
    1dd8:	81 30       	cpi	r24, 0x01	; 1
    1dda:	39 f0       	breq	.+14     	; 0x1dea <_Z12disableTimerh+0x12>
    1ddc:	18 f0       	brcs	.+6      	; 0x1de4 <_Z12disableTimerh+0xc>
    1dde:	82 30       	cpi	r24, 0x02	; 2
    1de0:	51 f0       	breq	.+20     	; 0x1df6 <_Z12disableTimerh+0x1e>
    1de2:	08 95       	ret
  {
    case 0:
      #if defined(TIMSK0)
        TIMSK0 = 0;
    1de4:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
      #elif defined(TIMSK)
        TIMSK = 0; // atmega32
      #endif
      break;
    1de8:	08 95       	ret

#if defined(TIMSK1) && defined(OCIE1A)
    case 1:
      bitWrite(TIMSK1, OCIE1A, 0);
    1dea:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    1dee:	8d 7f       	andi	r24, 0xFD	; 253
    1df0:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
      break;
    1df4:	08 95       	ret
#endif

    case 2:
      #if defined(TIMSK2) && defined(OCIE2A)
        bitWrite(TIMSK2, OCIE2A, 0); // disable interrupt
    1df6:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
    1dfa:	8d 7f       	andi	r24, 0xFD	; 253
    1dfc:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
      #endif
      #if defined(TCCR2A) && defined(WGM20)
        TCCR2A = (1 << WGM20);
    1e00:	81 e0       	ldi	r24, 0x01	; 1
    1e02:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
      #endif
      #if defined(TCCR2B) && defined(CS22)
        TCCR2B = (TCCR2B & 0b11111000) | (1 << CS22);
    1e06:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    1e0a:	88 7f       	andi	r24, 0xF8	; 248
    1e0c:	84 60       	ori	r24, 0x04	; 4
    1e0e:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
      #endif
      #if defined(OCR2A)
        OCR2A = 0;
    1e12:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    1e16:	08 95       	ret

00001e18 <_Z6noToneh>:
  }
}


void noTone(uint8_t _pin)
{
    1e18:	cf 93       	push	r28
    1e1a:	c8 2f       	mov	r28, r24
  int8_t _timer = -1;
  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == _pin) {
    1e1c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    1e20:	c8 13       	cpse	r28, r24
    1e22:	07 c0       	rjmp	.+14     	; 0x1e32 <_Z6noToneh+0x1a>
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
    1e24:	ee e8       	ldi	r30, 0x8E	; 142
    1e26:	f0 e0       	ldi	r31, 0x00	; 0
    1e28:	84 91       	lpm	r24, Z
      tone_pins[i] = 255;
    1e2a:	9f ef       	ldi	r25, 0xFF	; 255
    1e2c:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <__data_start>
      break;
    1e30:	01 c0       	rjmp	.+2      	; 0x1e34 <_Z6noToneh+0x1c>
}


void noTone(uint8_t _pin)
{
  int8_t _timer = -1;
    1e32:	8f ef       	ldi	r24, 0xFF	; 255
      tone_pins[i] = 255;
      break;
    }
  }
  
  disableTimer(_timer);
    1e34:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <_Z12disableTimerh>

  digitalWrite(_pin, 0);
    1e38:	60 e0       	ldi	r22, 0x00	; 0
    1e3a:	8c 2f       	mov	r24, r28
}
    1e3c:	cf 91       	pop	r28
    }
  }
  
  disableTimer(_timer);

  digitalWrite(_pin, 0);
    1e3e:	0c 94 df 10 	jmp	0x21be	; 0x21be <digitalWrite>

00001e42 <__vector_7>:
#endif


#ifdef USE_TIMER2
ISR(TIMER2_COMPA_vect)
{
    1e42:	1f 92       	push	r1
    1e44:	0f 92       	push	r0
    1e46:	0f b6       	in	r0, 0x3f	; 63
    1e48:	0f 92       	push	r0
    1e4a:	11 24       	eor	r1, r1
    1e4c:	2f 93       	push	r18
    1e4e:	3f 93       	push	r19
    1e50:	4f 93       	push	r20
    1e52:	5f 93       	push	r21
    1e54:	6f 93       	push	r22
    1e56:	7f 93       	push	r23
    1e58:	8f 93       	push	r24
    1e5a:	9f 93       	push	r25
    1e5c:	af 93       	push	r26
    1e5e:	bf 93       	push	r27
    1e60:	ef 93       	push	r30
    1e62:	ff 93       	push	r31

  if (timer2_toggle_count != 0)
    1e64:	80 91 3d 03 	lds	r24, 0x033D	; 0x80033d <timer2_toggle_count>
    1e68:	90 91 3e 03 	lds	r25, 0x033E	; 0x80033e <timer2_toggle_count+0x1>
    1e6c:	a0 91 3f 03 	lds	r26, 0x033F	; 0x80033f <timer2_toggle_count+0x2>
    1e70:	b0 91 40 03 	lds	r27, 0x0340	; 0x800340 <timer2_toggle_count+0x3>
    1e74:	89 2b       	or	r24, r25
    1e76:	8a 2b       	or	r24, r26
    1e78:	8b 2b       	or	r24, r27
    1e7a:	51 f1       	breq	.+84     	; 0x1ed0 <__vector_7+0x8e>
  {
    // toggle the pin
    *timer2_pin_port ^= timer2_pin_mask;
    1e7c:	90 91 3a 03 	lds	r25, 0x033A	; 0x80033a <timer2_pin_mask>
    1e80:	e0 91 3b 03 	lds	r30, 0x033B	; 0x80033b <timer2_pin_port>
    1e84:	f0 91 3c 03 	lds	r31, 0x033C	; 0x80033c <timer2_pin_port+0x1>
    1e88:	80 81       	ld	r24, Z
    1e8a:	89 27       	eor	r24, r25
    1e8c:	80 83       	st	Z, r24

    if (timer2_toggle_count > 0)
    1e8e:	80 91 3d 03 	lds	r24, 0x033D	; 0x80033d <timer2_toggle_count>
    1e92:	90 91 3e 03 	lds	r25, 0x033E	; 0x80033e <timer2_toggle_count+0x1>
    1e96:	a0 91 3f 03 	lds	r26, 0x033F	; 0x80033f <timer2_toggle_count+0x2>
    1e9a:	b0 91 40 03 	lds	r27, 0x0340	; 0x800340 <timer2_toggle_count+0x3>
    1e9e:	18 16       	cp	r1, r24
    1ea0:	19 06       	cpc	r1, r25
    1ea2:	1a 06       	cpc	r1, r26
    1ea4:	1b 06       	cpc	r1, r27
    1ea6:	c4 f4       	brge	.+48     	; 0x1ed8 <__vector_7+0x96>
      timer2_toggle_count--;
    1ea8:	80 91 3d 03 	lds	r24, 0x033D	; 0x80033d <timer2_toggle_count>
    1eac:	90 91 3e 03 	lds	r25, 0x033E	; 0x80033e <timer2_toggle_count+0x1>
    1eb0:	a0 91 3f 03 	lds	r26, 0x033F	; 0x80033f <timer2_toggle_count+0x2>
    1eb4:	b0 91 40 03 	lds	r27, 0x0340	; 0x800340 <timer2_toggle_count+0x3>
    1eb8:	01 97       	sbiw	r24, 0x01	; 1
    1eba:	a1 09       	sbc	r26, r1
    1ebc:	b1 09       	sbc	r27, r1
    1ebe:	80 93 3d 03 	sts	0x033D, r24	; 0x80033d <timer2_toggle_count>
    1ec2:	90 93 3e 03 	sts	0x033E, r25	; 0x80033e <timer2_toggle_count+0x1>
    1ec6:	a0 93 3f 03 	sts	0x033F, r26	; 0x80033f <timer2_toggle_count+0x2>
    1eca:	b0 93 40 03 	sts	0x0340, r27	; 0x800340 <timer2_toggle_count+0x3>
    1ece:	04 c0       	rjmp	.+8      	; 0x1ed8 <__vector_7+0x96>
  else
  {
    // need to call noTone() so that the tone_pins[] entry is reset, so the
    // timer gets initialized next time we call tone().
    // XXX: this assumes timer 2 is always the first one used.
    noTone(tone_pins[0]);
    1ed0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    1ed4:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <_Z6noToneh>
//    disableTimer(2);
//    *timer2_pin_port &= ~(timer2_pin_mask);  // keep pin low after stop
  }
}
    1ed8:	ff 91       	pop	r31
    1eda:	ef 91       	pop	r30
    1edc:	bf 91       	pop	r27
    1ede:	af 91       	pop	r26
    1ee0:	9f 91       	pop	r25
    1ee2:	8f 91       	pop	r24
    1ee4:	7f 91       	pop	r23
    1ee6:	6f 91       	pop	r22
    1ee8:	5f 91       	pop	r21
    1eea:	4f 91       	pop	r20
    1eec:	3f 91       	pop	r19
    1eee:	2f 91       	pop	r18
    1ef0:	0f 90       	pop	r0
    1ef2:	0f be       	out	0x3f, r0	; 63
    1ef4:	0f 90       	pop	r0
    1ef6:	1f 90       	pop	r1
    1ef8:	18 95       	reti

00001efa <__vector_16>:
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    1efa:	1f 92       	push	r1
    1efc:	0f 92       	push	r0
    1efe:	0f b6       	in	r0, 0x3f	; 63
    1f00:	0f 92       	push	r0
    1f02:	11 24       	eor	r1, r1
    1f04:	2f 93       	push	r18
    1f06:	3f 93       	push	r19
    1f08:	8f 93       	push	r24
    1f0a:	9f 93       	push	r25
    1f0c:	af 93       	push	r26
    1f0e:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    1f10:	80 91 50 03 	lds	r24, 0x0350	; 0x800350 <timer0_millis>
    1f14:	90 91 51 03 	lds	r25, 0x0351	; 0x800351 <timer0_millis+0x1>
    1f18:	a0 91 52 03 	lds	r26, 0x0352	; 0x800352 <timer0_millis+0x2>
    1f1c:	b0 91 53 03 	lds	r27, 0x0353	; 0x800353 <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    1f20:	30 91 4f 03 	lds	r19, 0x034F	; 0x80034f <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    1f24:	23 e0       	ldi	r18, 0x03	; 3
    1f26:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    1f28:	2d 37       	cpi	r18, 0x7D	; 125
    1f2a:	20 f4       	brcc	.+8      	; 0x1f34 <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    1f2c:	01 96       	adiw	r24, 0x01	; 1
    1f2e:	a1 1d       	adc	r26, r1
    1f30:	b1 1d       	adc	r27, r1
    1f32:	05 c0       	rjmp	.+10     	; 0x1f3e <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    1f34:	26 e8       	ldi	r18, 0x86	; 134
    1f36:	23 0f       	add	r18, r19
		m += 1;
    1f38:	02 96       	adiw	r24, 0x02	; 2
    1f3a:	a1 1d       	adc	r26, r1
    1f3c:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    1f3e:	20 93 4f 03 	sts	0x034F, r18	; 0x80034f <timer0_fract>
	timer0_millis = m;
    1f42:	80 93 50 03 	sts	0x0350, r24	; 0x800350 <timer0_millis>
    1f46:	90 93 51 03 	sts	0x0351, r25	; 0x800351 <timer0_millis+0x1>
    1f4a:	a0 93 52 03 	sts	0x0352, r26	; 0x800352 <timer0_millis+0x2>
    1f4e:	b0 93 53 03 	sts	0x0353, r27	; 0x800353 <timer0_millis+0x3>
	timer0_overflow_count++;
    1f52:	80 91 54 03 	lds	r24, 0x0354	; 0x800354 <timer0_overflow_count>
    1f56:	90 91 55 03 	lds	r25, 0x0355	; 0x800355 <timer0_overflow_count+0x1>
    1f5a:	a0 91 56 03 	lds	r26, 0x0356	; 0x800356 <timer0_overflow_count+0x2>
    1f5e:	b0 91 57 03 	lds	r27, 0x0357	; 0x800357 <timer0_overflow_count+0x3>
    1f62:	01 96       	adiw	r24, 0x01	; 1
    1f64:	a1 1d       	adc	r26, r1
    1f66:	b1 1d       	adc	r27, r1
    1f68:	80 93 54 03 	sts	0x0354, r24	; 0x800354 <timer0_overflow_count>
    1f6c:	90 93 55 03 	sts	0x0355, r25	; 0x800355 <timer0_overflow_count+0x1>
    1f70:	a0 93 56 03 	sts	0x0356, r26	; 0x800356 <timer0_overflow_count+0x2>
    1f74:	b0 93 57 03 	sts	0x0357, r27	; 0x800357 <timer0_overflow_count+0x3>
}
    1f78:	bf 91       	pop	r27
    1f7a:	af 91       	pop	r26
    1f7c:	9f 91       	pop	r25
    1f7e:	8f 91       	pop	r24
    1f80:	3f 91       	pop	r19
    1f82:	2f 91       	pop	r18
    1f84:	0f 90       	pop	r0
    1f86:	0f be       	out	0x3f, r0	; 63
    1f88:	0f 90       	pop	r0
    1f8a:	1f 90       	pop	r1
    1f8c:	18 95       	reti

00001f8e <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    1f8e:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    1f90:	f8 94       	cli
	m = timer0_millis;
    1f92:	60 91 50 03 	lds	r22, 0x0350	; 0x800350 <timer0_millis>
    1f96:	70 91 51 03 	lds	r23, 0x0351	; 0x800351 <timer0_millis+0x1>
    1f9a:	80 91 52 03 	lds	r24, 0x0352	; 0x800352 <timer0_millis+0x2>
    1f9e:	90 91 53 03 	lds	r25, 0x0353	; 0x800353 <timer0_millis+0x3>
	SREG = oldSREG;
    1fa2:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    1fa4:	08 95       	ret

00001fa6 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    1fa6:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    1fa8:	f8 94       	cli
	m = timer0_overflow_count;
    1faa:	80 91 54 03 	lds	r24, 0x0354	; 0x800354 <timer0_overflow_count>
    1fae:	90 91 55 03 	lds	r25, 0x0355	; 0x800355 <timer0_overflow_count+0x1>
    1fb2:	a0 91 56 03 	lds	r26, 0x0356	; 0x800356 <timer0_overflow_count+0x2>
    1fb6:	b0 91 57 03 	lds	r27, 0x0357	; 0x800357 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    1fba:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    1fbc:	a8 9b       	sbis	0x15, 0	; 21
    1fbe:	05 c0       	rjmp	.+10     	; 0x1fca <micros+0x24>
    1fc0:	2f 3f       	cpi	r18, 0xFF	; 255
    1fc2:	19 f0       	breq	.+6      	; 0x1fca <micros+0x24>
		m++;
    1fc4:	01 96       	adiw	r24, 0x01	; 1
    1fc6:	a1 1d       	adc	r26, r1
    1fc8:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    1fca:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    1fcc:	ba 2f       	mov	r27, r26
    1fce:	a9 2f       	mov	r26, r25
    1fd0:	98 2f       	mov	r25, r24
    1fd2:	88 27       	eor	r24, r24
    1fd4:	82 0f       	add	r24, r18
    1fd6:	91 1d       	adc	r25, r1
    1fd8:	a1 1d       	adc	r26, r1
    1fda:	b1 1d       	adc	r27, r1
    1fdc:	bc 01       	movw	r22, r24
    1fde:	cd 01       	movw	r24, r26
    1fe0:	42 e0       	ldi	r20, 0x02	; 2
    1fe2:	66 0f       	add	r22, r22
    1fe4:	77 1f       	adc	r23, r23
    1fe6:	88 1f       	adc	r24, r24
    1fe8:	99 1f       	adc	r25, r25
    1fea:	4a 95       	dec	r20
    1fec:	d1 f7       	brne	.-12     	; 0x1fe2 <micros+0x3c>
}
    1fee:	08 95       	ret

00001ff0 <delay>:

void delay(unsigned long ms)
{
    1ff0:	8f 92       	push	r8
    1ff2:	9f 92       	push	r9
    1ff4:	af 92       	push	r10
    1ff6:	bf 92       	push	r11
    1ff8:	cf 92       	push	r12
    1ffa:	df 92       	push	r13
    1ffc:	ef 92       	push	r14
    1ffe:	ff 92       	push	r15
    2000:	6b 01       	movw	r12, r22
    2002:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    2004:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <micros>
    2008:	4b 01       	movw	r8, r22
    200a:	5c 01       	movw	r10, r24

	while (ms > 0) {
    200c:	c1 14       	cp	r12, r1
    200e:	d1 04       	cpc	r13, r1
    2010:	e1 04       	cpc	r14, r1
    2012:	f1 04       	cpc	r15, r1
    2014:	01 f1       	breq	.+64     	; 0x2056 <delay+0x66>
		yield();
    2016:	0e 94 75 1c 	call	0x38ea	; 0x38ea <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
    201a:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <micros>
    201e:	dc 01       	movw	r26, r24
    2020:	cb 01       	movw	r24, r22
    2022:	88 19       	sub	r24, r8
    2024:	99 09       	sbc	r25, r9
    2026:	aa 09       	sbc	r26, r10
    2028:	bb 09       	sbc	r27, r11
    202a:	88 3e       	cpi	r24, 0xE8	; 232
    202c:	93 40       	sbci	r25, 0x03	; 3
    202e:	a1 05       	cpc	r26, r1
    2030:	b1 05       	cpc	r27, r1
    2032:	60 f3       	brcs	.-40     	; 0x200c <delay+0x1c>
			ms--;
    2034:	21 e0       	ldi	r18, 0x01	; 1
    2036:	c2 1a       	sub	r12, r18
    2038:	d1 08       	sbc	r13, r1
    203a:	e1 08       	sbc	r14, r1
    203c:	f1 08       	sbc	r15, r1
			start += 1000;
    203e:	88 ee       	ldi	r24, 0xE8	; 232
    2040:	88 0e       	add	r8, r24
    2042:	83 e0       	ldi	r24, 0x03	; 3
    2044:	98 1e       	adc	r9, r24
    2046:	a1 1c       	adc	r10, r1
    2048:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    204a:	c1 14       	cp	r12, r1
    204c:	d1 04       	cpc	r13, r1
    204e:	e1 04       	cpc	r14, r1
    2050:	f1 04       	cpc	r15, r1
    2052:	19 f7       	brne	.-58     	; 0x201a <delay+0x2a>
    2054:	db cf       	rjmp	.-74     	; 0x200c <delay+0x1c>
			ms--;
			start += 1000;
		}
	}
}
    2056:	ff 90       	pop	r15
    2058:	ef 90       	pop	r14
    205a:	df 90       	pop	r13
    205c:	cf 90       	pop	r12
    205e:	bf 90       	pop	r11
    2060:	af 90       	pop	r10
    2062:	9f 90       	pop	r9
    2064:	8f 90       	pop	r8
    2066:	08 95       	ret

00002068 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    2068:	82 30       	cpi	r24, 0x02	; 2
    206a:	91 05       	cpc	r25, r1
    206c:	38 f0       	brcs	.+14     	; 0x207c <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    206e:	88 0f       	add	r24, r24
    2070:	99 1f       	adc	r25, r25
    2072:	88 0f       	add	r24, r24
    2074:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    2076:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    2078:	01 97       	sbiw	r24, 0x01	; 1
    207a:	f1 f7       	brne	.-4      	; 0x2078 <delayMicroseconds+0x10>
    207c:	08 95       	ret

0000207e <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    207e:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    2080:	84 b5       	in	r24, 0x24	; 36
    2082:	82 60       	ori	r24, 0x02	; 2
    2084:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    2086:	84 b5       	in	r24, 0x24	; 36
    2088:	81 60       	ori	r24, 0x01	; 1
    208a:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    208c:	85 b5       	in	r24, 0x25	; 37
    208e:	82 60       	ori	r24, 0x02	; 2
    2090:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    2092:	85 b5       	in	r24, 0x25	; 37
    2094:	81 60       	ori	r24, 0x01	; 1
    2096:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    2098:	ee e6       	ldi	r30, 0x6E	; 110
    209a:	f0 e0       	ldi	r31, 0x00	; 0
    209c:	80 81       	ld	r24, Z
    209e:	81 60       	ori	r24, 0x01	; 1
    20a0:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    20a2:	e1 e8       	ldi	r30, 0x81	; 129
    20a4:	f0 e0       	ldi	r31, 0x00	; 0
    20a6:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    20a8:	80 81       	ld	r24, Z
    20aa:	82 60       	ori	r24, 0x02	; 2
    20ac:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    20ae:	80 81       	ld	r24, Z
    20b0:	81 60       	ori	r24, 0x01	; 1
    20b2:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    20b4:	e0 e8       	ldi	r30, 0x80	; 128
    20b6:	f0 e0       	ldi	r31, 0x00	; 0
    20b8:	80 81       	ld	r24, Z
    20ba:	81 60       	ori	r24, 0x01	; 1
    20bc:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    20be:	e1 eb       	ldi	r30, 0xB1	; 177
    20c0:	f0 e0       	ldi	r31, 0x00	; 0
    20c2:	80 81       	ld	r24, Z
    20c4:	84 60       	ori	r24, 0x04	; 4
    20c6:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    20c8:	e0 eb       	ldi	r30, 0xB0	; 176
    20ca:	f0 e0       	ldi	r31, 0x00	; 0
    20cc:	80 81       	ld	r24, Z
    20ce:	81 60       	ori	r24, 0x01	; 1
    20d0:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    20d2:	ea e7       	ldi	r30, 0x7A	; 122
    20d4:	f0 e0       	ldi	r31, 0x00	; 0
    20d6:	80 81       	ld	r24, Z
    20d8:	84 60       	ori	r24, 0x04	; 4
    20da:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    20dc:	80 81       	ld	r24, Z
    20de:	82 60       	ori	r24, 0x02	; 2
    20e0:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    20e2:	80 81       	ld	r24, Z
    20e4:	81 60       	ori	r24, 0x01	; 1
    20e6:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    20e8:	80 81       	ld	r24, Z
    20ea:	80 68       	ori	r24, 0x80	; 128
    20ec:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    20ee:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    20f2:	08 95       	ret

000020f4 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    20f4:	83 30       	cpi	r24, 0x03	; 3
    20f6:	81 f0       	breq	.+32     	; 0x2118 <turnOffPWM+0x24>
    20f8:	28 f4       	brcc	.+10     	; 0x2104 <turnOffPWM+0x10>
    20fa:	81 30       	cpi	r24, 0x01	; 1
    20fc:	99 f0       	breq	.+38     	; 0x2124 <turnOffPWM+0x30>
    20fe:	82 30       	cpi	r24, 0x02	; 2
    2100:	a1 f0       	breq	.+40     	; 0x212a <turnOffPWM+0x36>
    2102:	08 95       	ret
    2104:	87 30       	cpi	r24, 0x07	; 7
    2106:	a9 f0       	breq	.+42     	; 0x2132 <turnOffPWM+0x3e>
    2108:	88 30       	cpi	r24, 0x08	; 8
    210a:	b9 f0       	breq	.+46     	; 0x213a <turnOffPWM+0x46>
    210c:	84 30       	cpi	r24, 0x04	; 4
    210e:	d1 f4       	brne	.+52     	; 0x2144 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    2110:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    2114:	8f 7d       	andi	r24, 0xDF	; 223
    2116:	03 c0       	rjmp	.+6      	; 0x211e <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    2118:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    211c:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    211e:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    2122:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    2124:	84 b5       	in	r24, 0x24	; 36
    2126:	8f 77       	andi	r24, 0x7F	; 127
    2128:	02 c0       	rjmp	.+4      	; 0x212e <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    212a:	84 b5       	in	r24, 0x24	; 36
    212c:	8f 7d       	andi	r24, 0xDF	; 223
    212e:	84 bd       	out	0x24, r24	; 36
    2130:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    2132:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2136:	8f 77       	andi	r24, 0x7F	; 127
    2138:	03 c0       	rjmp	.+6      	; 0x2140 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    213a:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    213e:	8f 7d       	andi	r24, 0xDF	; 223
    2140:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2144:	08 95       	ret

00002146 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    2146:	cf 93       	push	r28
    2148:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    214a:	90 e0       	ldi	r25, 0x00	; 0
    214c:	fc 01       	movw	r30, r24
    214e:	ed 55       	subi	r30, 0x5D	; 93
    2150:	ff 4f       	sbci	r31, 0xFF	; 255
    2152:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    2154:	fc 01       	movw	r30, r24
    2156:	e9 54       	subi	r30, 0x49	; 73
    2158:	ff 4f       	sbci	r31, 0xFF	; 255
    215a:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    215c:	88 23       	and	r24, r24
    215e:	61 f1       	breq	.+88     	; 0x21b8 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    2160:	90 e0       	ldi	r25, 0x00	; 0
    2162:	88 0f       	add	r24, r24
    2164:	99 1f       	adc	r25, r25
    2166:	fc 01       	movw	r30, r24
    2168:	e1 52       	subi	r30, 0x21	; 33
    216a:	ff 4f       	sbci	r31, 0xFF	; 255
    216c:	c5 91       	lpm	r28, Z+
    216e:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    2170:	fc 01       	movw	r30, r24
    2172:	eb 52       	subi	r30, 0x2B	; 43
    2174:	ff 4f       	sbci	r31, 0xFF	; 255
    2176:	a5 91       	lpm	r26, Z+
    2178:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    217a:	61 11       	cpse	r22, r1
    217c:	09 c0       	rjmp	.+18     	; 0x2190 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    217e:	9f b7       	in	r25, 0x3f	; 63
                cli();
    2180:	f8 94       	cli
		*reg &= ~bit;
    2182:	88 81       	ld	r24, Y
    2184:	20 95       	com	r18
    2186:	82 23       	and	r24, r18
    2188:	88 83       	st	Y, r24
		*out &= ~bit;
    218a:	ec 91       	ld	r30, X
    218c:	2e 23       	and	r18, r30
    218e:	0b c0       	rjmp	.+22     	; 0x21a6 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    2190:	62 30       	cpi	r22, 0x02	; 2
    2192:	61 f4       	brne	.+24     	; 0x21ac <pinMode+0x66>
		uint8_t oldSREG = SREG;
    2194:	9f b7       	in	r25, 0x3f	; 63
                cli();
    2196:	f8 94       	cli
		*reg &= ~bit;
    2198:	88 81       	ld	r24, Y
    219a:	32 2f       	mov	r19, r18
    219c:	30 95       	com	r19
    219e:	83 23       	and	r24, r19
    21a0:	88 83       	st	Y, r24
		*out |= bit;
    21a2:	ec 91       	ld	r30, X
    21a4:	2e 2b       	or	r18, r30
    21a6:	2c 93       	st	X, r18
		SREG = oldSREG;
    21a8:	9f bf       	out	0x3f, r25	; 63
    21aa:	06 c0       	rjmp	.+12     	; 0x21b8 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    21ac:	8f b7       	in	r24, 0x3f	; 63
                cli();
    21ae:	f8 94       	cli
		*reg |= bit;
    21b0:	e8 81       	ld	r30, Y
    21b2:	2e 2b       	or	r18, r30
    21b4:	28 83       	st	Y, r18
		SREG = oldSREG;
    21b6:	8f bf       	out	0x3f, r24	; 63
	}
}
    21b8:	df 91       	pop	r29
    21ba:	cf 91       	pop	r28
    21bc:	08 95       	ret

000021be <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    21be:	1f 93       	push	r17
    21c0:	cf 93       	push	r28
    21c2:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    21c4:	28 2f       	mov	r18, r24
    21c6:	30 e0       	ldi	r19, 0x00	; 0
    21c8:	f9 01       	movw	r30, r18
    21ca:	e1 57       	subi	r30, 0x71	; 113
    21cc:	ff 4f       	sbci	r31, 0xFF	; 255
    21ce:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    21d0:	f9 01       	movw	r30, r18
    21d2:	ed 55       	subi	r30, 0x5D	; 93
    21d4:	ff 4f       	sbci	r31, 0xFF	; 255
    21d6:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    21d8:	f9 01       	movw	r30, r18
    21da:	e9 54       	subi	r30, 0x49	; 73
    21dc:	ff 4f       	sbci	r31, 0xFF	; 255
    21de:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    21e0:	cc 23       	and	r28, r28
    21e2:	c1 f0       	breq	.+48     	; 0x2214 <digitalWrite+0x56>
    21e4:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    21e6:	81 11       	cpse	r24, r1
    21e8:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <turnOffPWM>

	out = portOutputRegister(port);
    21ec:	ec 2f       	mov	r30, r28
    21ee:	f0 e0       	ldi	r31, 0x00	; 0
    21f0:	ee 0f       	add	r30, r30
    21f2:	ff 1f       	adc	r31, r31
    21f4:	eb 52       	subi	r30, 0x2B	; 43
    21f6:	ff 4f       	sbci	r31, 0xFF	; 255
    21f8:	a5 91       	lpm	r26, Z+
    21fa:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    21fc:	9f b7       	in	r25, 0x3f	; 63
	cli();
    21fe:	f8 94       	cli

	if (val == LOW) {
    2200:	11 11       	cpse	r17, r1
    2202:	04 c0       	rjmp	.+8      	; 0x220c <digitalWrite+0x4e>
		*out &= ~bit;
    2204:	8c 91       	ld	r24, X
    2206:	d0 95       	com	r29
    2208:	d8 23       	and	r29, r24
    220a:	02 c0       	rjmp	.+4      	; 0x2210 <digitalWrite+0x52>
	} else {
		*out |= bit;
    220c:	ec 91       	ld	r30, X
    220e:	de 2b       	or	r29, r30
    2210:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    2212:	9f bf       	out	0x3f, r25	; 63
}
    2214:	df 91       	pop	r29
    2216:	cf 91       	pop	r28
    2218:	1f 91       	pop	r17
    221a:	08 95       	ret

0000221c <digitalRead>:

int digitalRead(uint8_t pin)
{
    221c:	cf 93       	push	r28
    221e:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    2220:	28 2f       	mov	r18, r24
    2222:	30 e0       	ldi	r19, 0x00	; 0
    2224:	f9 01       	movw	r30, r18
    2226:	e1 57       	subi	r30, 0x71	; 113
    2228:	ff 4f       	sbci	r31, 0xFF	; 255
    222a:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    222c:	f9 01       	movw	r30, r18
    222e:	ed 55       	subi	r30, 0x5D	; 93
    2230:	ff 4f       	sbci	r31, 0xFF	; 255
    2232:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    2234:	f9 01       	movw	r30, r18
    2236:	e9 54       	subi	r30, 0x49	; 73
    2238:	ff 4f       	sbci	r31, 0xFF	; 255
    223a:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    223c:	cc 23       	and	r28, r28
    223e:	91 f0       	breq	.+36     	; 0x2264 <digitalRead+0x48>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    2240:	81 11       	cpse	r24, r1
    2242:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    2246:	ec 2f       	mov	r30, r28
    2248:	f0 e0       	ldi	r31, 0x00	; 0
    224a:	ee 0f       	add	r30, r30
    224c:	ff 1f       	adc	r31, r31
    224e:	e5 53       	subi	r30, 0x35	; 53
    2250:	ff 4f       	sbci	r31, 0xFF	; 255
    2252:	a5 91       	lpm	r26, Z+
    2254:	b4 91       	lpm	r27, Z
    2256:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    2258:	ed 23       	and	r30, r29
    225a:	81 e0       	ldi	r24, 0x01	; 1
    225c:	90 e0       	ldi	r25, 0x00	; 0
    225e:	21 f4       	brne	.+8      	; 0x2268 <digitalRead+0x4c>
    2260:	80 e0       	ldi	r24, 0x00	; 0
    2262:	02 c0       	rjmp	.+4      	; 0x2268 <digitalRead+0x4c>
    2264:	80 e0       	ldi	r24, 0x00	; 0
    2266:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    2268:	df 91       	pop	r29
    226a:	cf 91       	pop	r28
    226c:	08 95       	ret

0000226e <_ZN17LiquidCrystal_I2CC1Ev>:
void LiquidCrystal_I2C::blink_off(){
	noBlink();
}

void LiquidCrystal_I2C::load_custom_character(uint8_t char_num, uint8_t *rows){
		createChar(char_num, rows);
    226e:	fc 01       	movw	r30, r24
    2270:	13 82       	std	Z+3, r1	; 0x03
    2272:	12 82       	std	Z+2, r1	; 0x02
    2274:	84 e3       	ldi	r24, 0x34	; 52
    2276:	92 e0       	ldi	r25, 0x02	; 2
    2278:	91 83       	std	Z+1, r25	; 0x01
    227a:	80 83       	st	Z, r24
    227c:	13 86       	std	Z+11, r1	; 0x0b
    227e:	08 95       	ret

00002280 <_ZN17LiquidCrystal_I2C13expanderWriteEh>:
    2280:	1f 93       	push	r17
    2282:	cf 93       	push	r28
    2284:	df 93       	push	r29
    2286:	ec 01       	movw	r28, r24
    2288:	16 2f       	mov	r17, r22
    228a:	6c 81       	ldd	r22, Y+4	; 0x04
    228c:	8c e5       	ldi	r24, 0x5C	; 92
    228e:	93 e0       	ldi	r25, 0x03	; 3
    2290:	0e 94 e5 1b 	call	0x37ca	; 0x37ca <_ZN7TwoWire17beginTransmissionEh>
    2294:	6b 85       	ldd	r22, Y+11	; 0x0b
    2296:	61 2b       	or	r22, r17
    2298:	8c e5       	ldi	r24, 0x5C	; 92
    229a:	93 e0       	ldi	r25, 0x03	; 3
    229c:	0e 94 94 1b 	call	0x3728	; 0x3728 <_ZN7TwoWire5writeEh>
    22a0:	8c e5       	ldi	r24, 0x5C	; 92
    22a2:	93 e0       	ldi	r25, 0x03	; 3
    22a4:	df 91       	pop	r29
    22a6:	cf 91       	pop	r28
    22a8:	1f 91       	pop	r17
    22aa:	0c 94 6e 1c 	jmp	0x38dc	; 0x38dc <_ZN7TwoWire15endTransmissionEv>

000022ae <_ZN17LiquidCrystal_I2C11noBacklightEv>:
    22ae:	fc 01       	movw	r30, r24
    22b0:	13 86       	std	Z+11, r1	; 0x0b
    22b2:	60 e0       	ldi	r22, 0x00	; 0
    22b4:	0c 94 40 11 	jmp	0x2280	; 0x2280 <_ZN17LiquidCrystal_I2C13expanderWriteEh>

000022b8 <_ZN17LiquidCrystal_I2C9backlightEv>:
    22b8:	28 e0       	ldi	r18, 0x08	; 8
    22ba:	fc 01       	movw	r30, r24
    22bc:	23 87       	std	Z+11, r18	; 0x0b
    22be:	60 e0       	ldi	r22, 0x00	; 0
    22c0:	0c 94 40 11 	jmp	0x2280	; 0x2280 <_ZN17LiquidCrystal_I2C13expanderWriteEh>

000022c4 <_ZN17LiquidCrystal_I2C11pulseEnableEh>:
    22c4:	0f 93       	push	r16
    22c6:	1f 93       	push	r17
    22c8:	cf 93       	push	r28
    22ca:	8c 01       	movw	r16, r24
    22cc:	c6 2f       	mov	r28, r22
    22ce:	64 60       	ori	r22, 0x04	; 4
    22d0:	0e 94 40 11 	call	0x2280	; 0x2280 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
    22d4:	81 e0       	ldi	r24, 0x01	; 1
    22d6:	90 e0       	ldi	r25, 0x00	; 0
    22d8:	0e 94 34 10 	call	0x2068	; 0x2068 <delayMicroseconds>
    22dc:	6c 2f       	mov	r22, r28
    22de:	6b 7f       	andi	r22, 0xFB	; 251
    22e0:	c8 01       	movw	r24, r16
    22e2:	0e 94 40 11 	call	0x2280	; 0x2280 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
    22e6:	82 e3       	ldi	r24, 0x32	; 50
    22e8:	90 e0       	ldi	r25, 0x00	; 0
    22ea:	cf 91       	pop	r28
    22ec:	1f 91       	pop	r17
    22ee:	0f 91       	pop	r16
    22f0:	0c 94 34 10 	jmp	0x2068	; 0x2068 <delayMicroseconds>

000022f4 <_ZN17LiquidCrystal_I2C10write4bitsEh>:
    22f4:	1f 93       	push	r17
    22f6:	cf 93       	push	r28
    22f8:	df 93       	push	r29
    22fa:	ec 01       	movw	r28, r24
    22fc:	16 2f       	mov	r17, r22
    22fe:	0e 94 40 11 	call	0x2280	; 0x2280 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
    2302:	61 2f       	mov	r22, r17
    2304:	ce 01       	movw	r24, r28
    2306:	df 91       	pop	r29
    2308:	cf 91       	pop	r28
    230a:	1f 91       	pop	r17
    230c:	0c 94 62 11 	jmp	0x22c4	; 0x22c4 <_ZN17LiquidCrystal_I2C11pulseEnableEh>

00002310 <_ZN17LiquidCrystal_I2C4sendEhh>:
    2310:	0f 93       	push	r16
    2312:	1f 93       	push	r17
    2314:	cf 93       	push	r28
    2316:	df 93       	push	r29
    2318:	8c 01       	movw	r16, r24
    231a:	c6 2f       	mov	r28, r22
    231c:	d4 2f       	mov	r29, r20
    231e:	60 7f       	andi	r22, 0xF0	; 240
    2320:	64 2b       	or	r22, r20
    2322:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <_ZN17LiquidCrystal_I2C10write4bitsEh>
    2326:	80 e1       	ldi	r24, 0x10	; 16
    2328:	c8 9f       	mul	r28, r24
    232a:	b0 01       	movw	r22, r0
    232c:	11 24       	eor	r1, r1
    232e:	6d 2b       	or	r22, r29
    2330:	c8 01       	movw	r24, r16
    2332:	df 91       	pop	r29
    2334:	cf 91       	pop	r28
    2336:	1f 91       	pop	r17
    2338:	0f 91       	pop	r16
    233a:	0c 94 7a 11 	jmp	0x22f4	; 0x22f4 <_ZN17LiquidCrystal_I2C10write4bitsEh>

0000233e <_ZN17LiquidCrystal_I2C7commandEh>:
    233e:	40 e0       	ldi	r20, 0x00	; 0
    2340:	0c 94 88 11 	jmp	0x2310	; 0x2310 <_ZN17LiquidCrystal_I2C4sendEhh>

00002344 <_ZN17LiquidCrystal_I2C5clearEv>:
    2344:	61 e0       	ldi	r22, 0x01	; 1
    2346:	0e 94 9f 11 	call	0x233e	; 0x233e <_ZN17LiquidCrystal_I2C7commandEh>
    234a:	80 ed       	ldi	r24, 0xD0	; 208
    234c:	97 e0       	ldi	r25, 0x07	; 7
    234e:	0c 94 34 10 	jmp	0x2068	; 0x2068 <delayMicroseconds>

00002352 <_ZN17LiquidCrystal_I2C4homeEv>:
    2352:	62 e0       	ldi	r22, 0x02	; 2
    2354:	0e 94 9f 11 	call	0x233e	; 0x233e <_ZN17LiquidCrystal_I2C7commandEh>
    2358:	80 ed       	ldi	r24, 0xD0	; 208
    235a:	97 e0       	ldi	r25, 0x07	; 7
    235c:	0c 94 34 10 	jmp	0x2068	; 0x2068 <delayMicroseconds>

00002360 <_ZN17LiquidCrystal_I2C9setCursorEhh>:
    2360:	cf 93       	push	r28
    2362:	df 93       	push	r29
    2364:	cd b7       	in	r28, 0x3d	; 61
    2366:	de b7       	in	r29, 0x3e	; 62
    2368:	28 97       	sbiw	r28, 0x08	; 8
    236a:	0f b6       	in	r0, 0x3f	; 63
    236c:	f8 94       	cli
    236e:	de bf       	out	0x3e, r29	; 62
    2370:	0f be       	out	0x3f, r0	; 63
    2372:	cd bf       	out	0x3d, r28	; 61
    2374:	9c 01       	movw	r18, r24
    2376:	88 e0       	ldi	r24, 0x08	; 8
    2378:	e1 e0       	ldi	r30, 0x01	; 1
    237a:	f1 e0       	ldi	r31, 0x01	; 1
    237c:	de 01       	movw	r26, r28
    237e:	11 96       	adiw	r26, 0x01	; 1
    2380:	01 90       	ld	r0, Z+
    2382:	0d 92       	st	X+, r0
    2384:	8a 95       	dec	r24
    2386:	e1 f7       	brne	.-8      	; 0x2380 <_ZN17LiquidCrystal_I2C9setCursorEhh+0x20>
    2388:	f9 01       	movw	r30, r18
    238a:	80 85       	ldd	r24, Z+8	; 0x08
    238c:	84 17       	cp	r24, r20
    238e:	10 f4       	brcc	.+4      	; 0x2394 <_ZN17LiquidCrystal_I2C9setCursorEhh+0x34>
    2390:	4f ef       	ldi	r20, 0xFF	; 255
    2392:	48 0f       	add	r20, r24
    2394:	fe 01       	movw	r30, r28
    2396:	31 96       	adiw	r30, 0x01	; 1
    2398:	e4 0f       	add	r30, r20
    239a:	f1 1d       	adc	r31, r1
    239c:	e4 0f       	add	r30, r20
    239e:	f1 1d       	adc	r31, r1
    23a0:	90 81       	ld	r25, Z
    23a2:	69 0f       	add	r22, r25
    23a4:	60 68       	ori	r22, 0x80	; 128
    23a6:	c9 01       	movw	r24, r18
    23a8:	28 96       	adiw	r28, 0x08	; 8
    23aa:	0f b6       	in	r0, 0x3f	; 63
    23ac:	f8 94       	cli
    23ae:	de bf       	out	0x3e, r29	; 62
    23b0:	0f be       	out	0x3f, r0	; 63
    23b2:	cd bf       	out	0x3d, r28	; 61
    23b4:	df 91       	pop	r29
    23b6:	cf 91       	pop	r28
    23b8:	0c 94 9f 11 	jmp	0x233e	; 0x233e <_ZN17LiquidCrystal_I2C7commandEh>

000023bc <_ZN17LiquidCrystal_I2C7displayEv>:
    23bc:	fc 01       	movw	r30, r24
    23be:	66 81       	ldd	r22, Z+6	; 0x06
    23c0:	26 2f       	mov	r18, r22
    23c2:	24 60       	ori	r18, 0x04	; 4
    23c4:	26 83       	std	Z+6, r18	; 0x06
    23c6:	6c 60       	ori	r22, 0x0C	; 12
    23c8:	0c 94 9f 11 	jmp	0x233e	; 0x233e <_ZN17LiquidCrystal_I2C7commandEh>

000023cc <_ZN17LiquidCrystal_I2C5writeEh>:

#include "Arduino.h"

#define printIIC(args)	Wire.write(args)
inline size_t LiquidCrystal_I2C::write(uint8_t value) {
	send(value, Rs);
    23cc:	41 e0       	ldi	r20, 0x01	; 1
    23ce:	0e 94 88 11 	call	0x2310	; 0x2310 <_ZN17LiquidCrystal_I2C4sendEhh>
	return 1;
}
    23d2:	81 e0       	ldi	r24, 0x01	; 1
    23d4:	90 e0       	ldi	r25, 0x00	; 0
    23d6:	08 95       	ret

000023d8 <_ZN17LiquidCrystal_I2C5beginEhhh>:
	Wire.begin();
	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
	begin(_cols, _rows);  
}

void LiquidCrystal_I2C::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) {
    23d8:	cf 93       	push	r28
    23da:	df 93       	push	r29
    23dc:	ec 01       	movw	r28, r24
	if (lines > 1) {
    23de:	42 30       	cpi	r20, 0x02	; 2
    23e0:	18 f0       	brcs	.+6      	; 0x23e8 <_ZN17LiquidCrystal_I2C5beginEhhh+0x10>
		_displayfunction |= LCD_2LINE;
    23e2:	8d 81       	ldd	r24, Y+5	; 0x05
    23e4:	88 60       	ori	r24, 0x08	; 8
    23e6:	8d 83       	std	Y+5, r24	; 0x05
	}
	_numlines = lines;
    23e8:	48 87       	std	Y+8, r20	; 0x08

	// for some 1 line displays you can select a 10 pixel high font
	if ((dotsize != 0) && (lines == 1)) {
    23ea:	22 23       	and	r18, r18
    23ec:	29 f0       	breq	.+10     	; 0x23f8 <_ZN17LiquidCrystal_I2C5beginEhhh+0x20>
    23ee:	41 30       	cpi	r20, 0x01	; 1
    23f0:	19 f4       	brne	.+6      	; 0x23f8 <_ZN17LiquidCrystal_I2C5beginEhhh+0x20>
		_displayfunction |= LCD_5x10DOTS;
    23f2:	8d 81       	ldd	r24, Y+5	; 0x05
    23f4:	84 60       	ori	r24, 0x04	; 4
    23f6:	8d 83       	std	Y+5, r24	; 0x05
	}

	// SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
	// according to datasheet, we need at least 40ms after power rises above 2.7V
	// before sending commands. Arduino can turn on way befer 4.5V so we'll wait 50
	delay(50); 
    23f8:	62 e3       	ldi	r22, 0x32	; 50
    23fa:	70 e0       	ldi	r23, 0x00	; 0
    23fc:	80 e0       	ldi	r24, 0x00	; 0
    23fe:	90 e0       	ldi	r25, 0x00	; 0
    2400:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <delay>
  
	// Now we pull both RS and R/W low to begin commands
	expanderWrite(_backlightval);	// reset expanderand turn backlight off (Bit 8 =1)
    2404:	6b 85       	ldd	r22, Y+11	; 0x0b
    2406:	ce 01       	movw	r24, r28
    2408:	0e 94 40 11 	call	0x2280	; 0x2280 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
	delay(1000);
    240c:	68 ee       	ldi	r22, 0xE8	; 232
    240e:	73 e0       	ldi	r23, 0x03	; 3
    2410:	80 e0       	ldi	r24, 0x00	; 0
    2412:	90 e0       	ldi	r25, 0x00	; 0
    2414:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <delay>
  	//put the LCD into 4 bit mode
	// this is according to the hitachi HD44780 datasheet
	// figure 24, pg 46
	
	  // we start in 8bit mode, try to set 4 bit mode
   write4bits(0x03 << 4);
    2418:	60 e3       	ldi	r22, 0x30	; 48
    241a:	ce 01       	movw	r24, r28
    241c:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <_ZN17LiquidCrystal_I2C10write4bitsEh>
   delayMicroseconds(4500); // wait min 4.1ms
    2420:	84 e9       	ldi	r24, 0x94	; 148
    2422:	91 e1       	ldi	r25, 0x11	; 17
    2424:	0e 94 34 10 	call	0x2068	; 0x2068 <delayMicroseconds>
   
   // second try
   write4bits(0x03 << 4);
    2428:	60 e3       	ldi	r22, 0x30	; 48
    242a:	ce 01       	movw	r24, r28
    242c:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <_ZN17LiquidCrystal_I2C10write4bitsEh>
   delayMicroseconds(4500); // wait min 4.1ms
    2430:	84 e9       	ldi	r24, 0x94	; 148
    2432:	91 e1       	ldi	r25, 0x11	; 17
    2434:	0e 94 34 10 	call	0x2068	; 0x2068 <delayMicroseconds>
   
   // third go!
   write4bits(0x03 << 4); 
    2438:	60 e3       	ldi	r22, 0x30	; 48
    243a:	ce 01       	movw	r24, r28
    243c:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <_ZN17LiquidCrystal_I2C10write4bitsEh>
   delayMicroseconds(150);
    2440:	86 e9       	ldi	r24, 0x96	; 150
    2442:	90 e0       	ldi	r25, 0x00	; 0
    2444:	0e 94 34 10 	call	0x2068	; 0x2068 <delayMicroseconds>
   
   // finally, set to 4-bit interface
   write4bits(0x02 << 4); 
    2448:	60 e2       	ldi	r22, 0x20	; 32
    244a:	ce 01       	movw	r24, r28
    244c:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <_ZN17LiquidCrystal_I2C10write4bitsEh>


	// set # lines, font size, etc.
	command(LCD_FUNCTIONSET | _displayfunction);  
    2450:	6d 81       	ldd	r22, Y+5	; 0x05
    2452:	60 62       	ori	r22, 0x20	; 32
    2454:	ce 01       	movw	r24, r28
    2456:	0e 94 9f 11 	call	0x233e	; 0x233e <_ZN17LiquidCrystal_I2C7commandEh>
	
	// turn the display on with no cursor or blinking default
	_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
    245a:	84 e0       	ldi	r24, 0x04	; 4
    245c:	8e 83       	std	Y+6, r24	; 0x06
	display();
    245e:	ce 01       	movw	r24, r28
    2460:	0e 94 de 11 	call	0x23bc	; 0x23bc <_ZN17LiquidCrystal_I2C7displayEv>
	
	// clear it off
	clear();
    2464:	ce 01       	movw	r24, r28
    2466:	0e 94 a2 11 	call	0x2344	; 0x2344 <_ZN17LiquidCrystal_I2C5clearEv>
	
	// Initialize to default text direction (for roman languages)
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
    246a:	82 e0       	ldi	r24, 0x02	; 2
    246c:	8f 83       	std	Y+7, r24	; 0x07
	
	// set the entry mode
	command(LCD_ENTRYMODESET | _displaymode);
    246e:	66 e0       	ldi	r22, 0x06	; 6
    2470:	ce 01       	movw	r24, r28
    2472:	0e 94 9f 11 	call	0x233e	; 0x233e <_ZN17LiquidCrystal_I2C7commandEh>
	
	home();
    2476:	ce 01       	movw	r24, r28
  
}
    2478:	df 91       	pop	r29
    247a:	cf 91       	pop	r28
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
	
	// set the entry mode
	command(LCD_ENTRYMODESET | _displaymode);
	
	home();
    247c:	0c 94 a9 11 	jmp	0x2352	; 0x2352 <_ZN17LiquidCrystal_I2C4homeEv>

00002480 <_ZN17LiquidCrystal_I2C9init_privEv>:
  _rows = lcd_rows;
	init_priv();
}

void LiquidCrystal_I2C::init_priv()
{
    2480:	cf 93       	push	r28
    2482:	df 93       	push	r29
    2484:	ec 01       	movw	r28, r24
	Wire.begin();
    2486:	8c e5       	ldi	r24, 0x5C	; 92
    2488:	93 e0       	ldi	r25, 0x03	; 3
    248a:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <_ZN7TwoWire5beginEv>
	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
    248e:	1d 82       	std	Y+5, r1	; 0x05
	begin(_cols, _rows);  
    2490:	20 e0       	ldi	r18, 0x00	; 0
    2492:	4a 85       	ldd	r20, Y+10	; 0x0a
    2494:	69 85       	ldd	r22, Y+9	; 0x09
    2496:	ce 01       	movw	r24, r28
}
    2498:	df 91       	pop	r29
    249a:	cf 91       	pop	r28

void LiquidCrystal_I2C::init_priv()
{
	Wire.begin();
	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
	begin(_cols, _rows);  
    249c:	0c 94 ec 11 	jmp	0x23d8	; 0x23d8 <_ZN17LiquidCrystal_I2C5beginEhhh>

000024a0 <_ZN17LiquidCrystal_I2C4initEhhh>:

  _backlightval = LCD_NOBACKLIGHT;
}

void LiquidCrystal_I2C::init(uint8_t lcd_Addr,uint8_t lcd_cols,uint8_t lcd_rows){
  _Addr = lcd_Addr;
    24a0:	fc 01       	movw	r30, r24
    24a2:	64 83       	std	Z+4, r22	; 0x04
  _cols = lcd_cols;
    24a4:	41 87       	std	Z+9, r20	; 0x09
  _rows = lcd_rows;
    24a6:	22 87       	std	Z+10, r18	; 0x0a
	init_priv();
    24a8:	0c 94 40 12 	jmp	0x2480	; 0x2480 <_ZN17LiquidCrystal_I2C9init_privEv>

000024ac <_ZN7MFRC52219PICC_ReadCardSerialEv>:
 * @return STATUS_OK on success, STATUS_??? otherwise.
 */
MFRC522::StatusCode MFRC522::PICC_WakeupA(	byte *bufferATQA,	///< The buffer to store the ATQA (Answer to request) in
											byte *bufferSize	///< Buffer size, at least two bytes. Also number of bytes returned if STATUS_OK.
										) {
	return PICC_REQA_or_WUPA(PICC_CMD_WUPA, bufferATQA, bufferSize);
    24ac:	bc 01       	movw	r22, r24
    24ae:	6e 5f       	subi	r22, 0xFE	; 254
    24b0:	7f 4f       	sbci	r23, 0xFF	; 255
    24b2:	dc 01       	movw	r26, r24
    24b4:	ed 91       	ld	r30, X+
    24b6:	fc 91       	ld	r31, X
    24b8:	01 90       	ld	r0, Z+
    24ba:	f0 81       	ld	r31, Z
    24bc:	e0 2d       	mov	r30, r0
    24be:	40 e0       	ldi	r20, 0x00	; 0
    24c0:	09 95       	icall
    24c2:	91 e0       	ldi	r25, 0x01	; 1
    24c4:	81 11       	cpse	r24, r1
    24c6:	90 e0       	ldi	r25, 0x00	; 0
    24c8:	89 2f       	mov	r24, r25
    24ca:	08 95       	ret

000024cc <_ZN8SPIClass16beginTransactionE11SPISettings>:
    24cc:	20 91 5a 03 	lds	r18, 0x035A	; 0x80035a <_ZN8SPIClass13interruptModeE>
    24d0:	22 23       	and	r18, r18
    24d2:	99 f0       	breq	.+38     	; 0x24fa <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
    24d4:	4f b7       	in	r20, 0x3f	; 63
    24d6:	f8 94       	cli
    24d8:	20 91 5a 03 	lds	r18, 0x035A	; 0x80035a <_ZN8SPIClass13interruptModeE>
    24dc:	21 30       	cpi	r18, 0x01	; 1
    24de:	59 f4       	brne	.+22     	; 0x24f6 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2a>
    24e0:	2d b3       	in	r18, 0x1d	; 29
    24e2:	20 93 58 03 	sts	0x0358, r18	; 0x800358 <_ZN8SPIClass13interruptSaveE>
    24e6:	3d b3       	in	r19, 0x1d	; 29
    24e8:	20 91 59 03 	lds	r18, 0x0359	; 0x800359 <_ZN8SPIClass13interruptMaskE>
    24ec:	20 95       	com	r18
    24ee:	23 23       	and	r18, r19
    24f0:	2d bb       	out	0x1d, r18	; 29
    24f2:	4f bf       	out	0x3f, r20	; 63
    24f4:	02 c0       	rjmp	.+4      	; 0x24fa <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
    24f6:	40 93 58 03 	sts	0x0358, r20	; 0x800358 <_ZN8SPIClass13interruptSaveE>
    24fa:	8c bd       	out	0x2c, r24	; 44
    24fc:	9d bd       	out	0x2d, r25	; 45
    24fe:	08 95       	ret

00002500 <_ZN8SPIClass8transferEh>:
    2500:	8e bd       	out	0x2e, r24	; 46
    2502:	00 00       	nop
    2504:	0d b4       	in	r0, 0x2d	; 45
    2506:	07 fe       	sbrs	r0, 7
    2508:	fd cf       	rjmp	.-6      	; 0x2504 <_ZN8SPIClass8transferEh+0x4>
    250a:	8e b5       	in	r24, 0x2e	; 46
    250c:	08 95       	ret

0000250e <_ZN8SPIClass14endTransactionEv>:
    250e:	80 91 5a 03 	lds	r24, 0x035A	; 0x80035a <_ZN8SPIClass13interruptModeE>
    2512:	88 23       	and	r24, r24
    2514:	61 f0       	breq	.+24     	; 0x252e <_ZN8SPIClass14endTransactionEv+0x20>
    2516:	9f b7       	in	r25, 0x3f	; 63
    2518:	f8 94       	cli
    251a:	20 91 5a 03 	lds	r18, 0x035A	; 0x80035a <_ZN8SPIClass13interruptModeE>
    251e:	80 91 58 03 	lds	r24, 0x0358	; 0x800358 <_ZN8SPIClass13interruptSaveE>
    2522:	21 30       	cpi	r18, 0x01	; 1
    2524:	19 f4       	brne	.+6      	; 0x252c <_ZN8SPIClass14endTransactionEv+0x1e>
    2526:	8d bb       	out	0x1d, r24	; 29
    2528:	9f bf       	out	0x3f, r25	; 63
    252a:	08 95       	ret
    252c:	8f bf       	out	0x3f, r24	; 63
    252e:	08 95       	ret

00002530 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh.part.1.constprop.8>:
    2530:	af 92       	push	r10
    2532:	bf 92       	push	r11
    2534:	cf 92       	push	r12
    2536:	df 92       	push	r13
    2538:	ef 92       	push	r14
    253a:	ff 92       	push	r15
    253c:	0f 93       	push	r16
    253e:	1f 93       	push	r17
    2540:	cf 93       	push	r28
    2542:	df 93       	push	r29
    2544:	6c 01       	movw	r12, r24
    2546:	a4 2e       	mov	r10, r20
    2548:	79 01       	movw	r14, r18
    254a:	60 68       	ori	r22, 0x80	; 128
    254c:	b6 2e       	mov	r11, r22
    254e:	83 e5       	ldi	r24, 0x53	; 83
    2550:	90 e0       	ldi	r25, 0x00	; 0
    2552:	0e 94 66 12 	call	0x24cc	; 0x24cc <_ZN8SPIClass16beginTransactionE11SPISettings>
    2556:	60 e0       	ldi	r22, 0x00	; 0
    2558:	f6 01       	movw	r30, r12
    255a:	86 85       	ldd	r24, Z+14	; 0x0e
    255c:	0e 94 df 10 	call	0x21be	; 0x21be <digitalWrite>
    2560:	aa 94       	dec	r10
    2562:	8b 2d       	mov	r24, r11
    2564:	0e 94 80 12 	call	0x2500	; 0x2500 <_ZN8SPIClass8transferEh>
    2568:	00 23       	and	r16, r16
    256a:	a1 f0       	breq	.+40     	; 0x2594 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh.part.1.constprop.8+0x64>
    256c:	cf ef       	ldi	r28, 0xFF	; 255
    256e:	d0 e0       	ldi	r29, 0x00	; 0
    2570:	01 c0       	rjmp	.+2      	; 0x2574 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh.part.1.constprop.8+0x44>
    2572:	cc 0f       	add	r28, r28
    2574:	0a 95       	dec	r16
    2576:	ea f7       	brpl	.-6      	; 0x2572 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh.part.1.constprop.8+0x42>
    2578:	8b 2d       	mov	r24, r11
    257a:	0e 94 80 12 	call	0x2500	; 0x2500 <_ZN8SPIClass8transferEh>
    257e:	2c 2f       	mov	r18, r28
    2580:	20 95       	com	r18
    2582:	f7 01       	movw	r30, r14
    2584:	90 81       	ld	r25, Z
    2586:	92 23       	and	r25, r18
    2588:	8c 23       	and	r24, r28
    258a:	89 2b       	or	r24, r25
    258c:	f7 01       	movw	r30, r14
    258e:	80 83       	st	Z, r24
    2590:	11 e0       	ldi	r17, 0x01	; 1
    2592:	01 c0       	rjmp	.+2      	; 0x2596 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh.part.1.constprop.8+0x66>
    2594:	10 e0       	ldi	r17, 0x00	; 0
    2596:	81 2f       	mov	r24, r17
    2598:	90 e0       	ldi	r25, 0x00	; 0
    259a:	e7 01       	movw	r28, r14
    259c:	c8 0f       	add	r28, r24
    259e:	d9 1f       	adc	r29, r25
    25a0:	1a 15       	cp	r17, r10
    25a2:	30 f4       	brcc	.+12     	; 0x25b0 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh.part.1.constprop.8+0x80>
    25a4:	8b 2d       	mov	r24, r11
    25a6:	0e 94 80 12 	call	0x2500	; 0x2500 <_ZN8SPIClass8transferEh>
    25aa:	88 83       	st	Y, r24
    25ac:	1f 5f       	subi	r17, 0xFF	; 255
    25ae:	f3 cf       	rjmp	.-26     	; 0x2596 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh.part.1.constprop.8+0x66>
    25b0:	80 e0       	ldi	r24, 0x00	; 0
    25b2:	0e 94 80 12 	call	0x2500	; 0x2500 <_ZN8SPIClass8transferEh>
    25b6:	88 83       	st	Y, r24
    25b8:	61 e0       	ldi	r22, 0x01	; 1
    25ba:	f6 01       	movw	r30, r12
    25bc:	86 85       	ldd	r24, Z+14	; 0x0e
    25be:	0e 94 df 10 	call	0x21be	; 0x21be <digitalWrite>
    25c2:	df 91       	pop	r29
    25c4:	cf 91       	pop	r28
    25c6:	1f 91       	pop	r17
    25c8:	0f 91       	pop	r16
    25ca:	ff 90       	pop	r15
    25cc:	ef 90       	pop	r14
    25ce:	df 90       	pop	r13
    25d0:	cf 90       	pop	r12
    25d2:	bf 90       	pop	r11
    25d4:	af 90       	pop	r10
    25d6:	0c 94 87 12 	jmp	0x250e	; 0x250e <_ZN8SPIClass14endTransactionEv>

000025da <_ZN7MFRC522C1Ev>:
    25da:	fc 01       	movw	r30, r24
    25dc:	80 e4       	ldi	r24, 0x40	; 64
    25de:	92 e0       	ldi	r25, 0x02	; 2
    25e0:	91 83       	std	Z+1, r25	; 0x01
    25e2:	80 83       	st	Z, r24
    25e4:	8a e0       	ldi	r24, 0x0A	; 10
    25e6:	86 87       	std	Z+14, r24	; 0x0e
    25e8:	8f ef       	ldi	r24, 0xFF	; 255
    25ea:	87 87       	std	Z+15, r24	; 0x0f
    25ec:	08 95       	ret

000025ee <_ZN7MFRC522C1Ehh>:
    25ee:	fc 01       	movw	r30, r24
    25f0:	80 e4       	ldi	r24, 0x40	; 64
    25f2:	92 e0       	ldi	r25, 0x02	; 2
    25f4:	91 83       	std	Z+1, r25	; 0x01
    25f6:	80 83       	st	Z, r24
    25f8:	66 87       	std	Z+14, r22	; 0x0e
    25fa:	47 87       	std	Z+15, r20	; 0x0f
    25fc:	08 95       	ret

000025fe <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>:
    25fe:	0f 93       	push	r16
    2600:	1f 93       	push	r17
    2602:	cf 93       	push	r28
    2604:	df 93       	push	r29
    2606:	ec 01       	movw	r28, r24
    2608:	06 2f       	mov	r16, r22
    260a:	14 2f       	mov	r17, r20
    260c:	83 e5       	ldi	r24, 0x53	; 83
    260e:	90 e0       	ldi	r25, 0x00	; 0
    2610:	0e 94 66 12 	call	0x24cc	; 0x24cc <_ZN8SPIClass16beginTransactionE11SPISettings>
    2614:	60 e0       	ldi	r22, 0x00	; 0
    2616:	8e 85       	ldd	r24, Y+14	; 0x0e
    2618:	0e 94 df 10 	call	0x21be	; 0x21be <digitalWrite>
    261c:	80 2f       	mov	r24, r16
    261e:	0e 94 80 12 	call	0x2500	; 0x2500 <_ZN8SPIClass8transferEh>
    2622:	81 2f       	mov	r24, r17
    2624:	0e 94 80 12 	call	0x2500	; 0x2500 <_ZN8SPIClass8transferEh>
    2628:	61 e0       	ldi	r22, 0x01	; 1
    262a:	8e 85       	ldd	r24, Y+14	; 0x0e
    262c:	0e 94 df 10 	call	0x21be	; 0x21be <digitalWrite>
    2630:	df 91       	pop	r29
    2632:	cf 91       	pop	r28
    2634:	1f 91       	pop	r17
    2636:	0f 91       	pop	r16
    2638:	0c 94 87 12 	jmp	0x250e	; 0x250e <_ZN8SPIClass14endTransactionEv>

0000263c <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEhPh>:
    263c:	df 92       	push	r13
    263e:	ef 92       	push	r14
    2640:	ff 92       	push	r15
    2642:	0f 93       	push	r16
    2644:	1f 93       	push	r17
    2646:	cf 93       	push	r28
    2648:	df 93       	push	r29
    264a:	8c 01       	movw	r16, r24
    264c:	c6 2f       	mov	r28, r22
    264e:	f4 2e       	mov	r15, r20
    2650:	d2 2e       	mov	r13, r18
    2652:	e3 2e       	mov	r14, r19
    2654:	83 e5       	ldi	r24, 0x53	; 83
    2656:	90 e0       	ldi	r25, 0x00	; 0
    2658:	0e 94 66 12 	call	0x24cc	; 0x24cc <_ZN8SPIClass16beginTransactionE11SPISettings>
    265c:	60 e0       	ldi	r22, 0x00	; 0
    265e:	f8 01       	movw	r30, r16
    2660:	86 85       	ldd	r24, Z+14	; 0x0e
    2662:	0e 94 df 10 	call	0x21be	; 0x21be <digitalWrite>
    2666:	8c 2f       	mov	r24, r28
    2668:	0e 94 80 12 	call	0x2500	; 0x2500 <_ZN8SPIClass8transferEh>
    266c:	cd 2d       	mov	r28, r13
    266e:	de 2d       	mov	r29, r14
    2670:	ce 01       	movw	r24, r28
    2672:	8f 0d       	add	r24, r15
    2674:	91 1d       	adc	r25, r1
    2676:	7c 01       	movw	r14, r24
    2678:	ec 16       	cp	r14, r28
    267a:	fd 06       	cpc	r15, r29
    267c:	21 f0       	breq	.+8      	; 0x2686 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEhPh+0x4a>
    267e:	89 91       	ld	r24, Y+
    2680:	0e 94 80 12 	call	0x2500	; 0x2500 <_ZN8SPIClass8transferEh>
    2684:	f9 cf       	rjmp	.-14     	; 0x2678 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEhPh+0x3c>
    2686:	61 e0       	ldi	r22, 0x01	; 1
    2688:	f8 01       	movw	r30, r16
    268a:	86 85       	ldd	r24, Z+14	; 0x0e
    268c:	0e 94 df 10 	call	0x21be	; 0x21be <digitalWrite>
    2690:	df 91       	pop	r29
    2692:	cf 91       	pop	r28
    2694:	1f 91       	pop	r17
    2696:	0f 91       	pop	r16
    2698:	ff 90       	pop	r15
    269a:	ef 90       	pop	r14
    269c:	df 90       	pop	r13
    269e:	0c 94 87 12 	jmp	0x250e	; 0x250e <_ZN8SPIClass14endTransactionEv>

000026a2 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>:
    26a2:	1f 93       	push	r17
    26a4:	cf 93       	push	r28
    26a6:	df 93       	push	r29
    26a8:	ec 01       	movw	r28, r24
    26aa:	16 2f       	mov	r17, r22
    26ac:	83 e5       	ldi	r24, 0x53	; 83
    26ae:	90 e0       	ldi	r25, 0x00	; 0
    26b0:	0e 94 66 12 	call	0x24cc	; 0x24cc <_ZN8SPIClass16beginTransactionE11SPISettings>
    26b4:	60 e0       	ldi	r22, 0x00	; 0
    26b6:	8e 85       	ldd	r24, Y+14	; 0x0e
    26b8:	0e 94 df 10 	call	0x21be	; 0x21be <digitalWrite>
    26bc:	81 2f       	mov	r24, r17
    26be:	80 68       	ori	r24, 0x80	; 128
    26c0:	0e 94 80 12 	call	0x2500	; 0x2500 <_ZN8SPIClass8transferEh>
    26c4:	80 e0       	ldi	r24, 0x00	; 0
    26c6:	0e 94 80 12 	call	0x2500	; 0x2500 <_ZN8SPIClass8transferEh>
    26ca:	18 2f       	mov	r17, r24
    26cc:	61 e0       	ldi	r22, 0x01	; 1
    26ce:	8e 85       	ldd	r24, Y+14	; 0x0e
    26d0:	0e 94 df 10 	call	0x21be	; 0x21be <digitalWrite>
    26d4:	0e 94 87 12 	call	0x250e	; 0x250e <_ZN8SPIClass14endTransactionEv>
    26d8:	81 2f       	mov	r24, r17
    26da:	df 91       	pop	r29
    26dc:	cf 91       	pop	r28
    26de:	1f 91       	pop	r17
    26e0:	08 95       	ret

000026e2 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh>:
    26e2:	0f 93       	push	r16
    26e4:	41 11       	cpse	r20, r1
    26e6:	0e 94 98 12 	call	0x2530	; 0x2530 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh.part.1.constprop.8>
    26ea:	0f 91       	pop	r16
    26ec:	08 95       	ret

000026ee <_ZN7MFRC52222PCD_SetRegisterBitMaskENS_12PCD_RegisterEh>:
    26ee:	0f 93       	push	r16
    26f0:	1f 93       	push	r17
    26f2:	cf 93       	push	r28
    26f4:	df 93       	push	r29
    26f6:	8c 01       	movw	r16, r24
    26f8:	d6 2f       	mov	r29, r22
    26fa:	c4 2f       	mov	r28, r20
    26fc:	0e 94 51 13 	call	0x26a2	; 0x26a2 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    2700:	48 2f       	mov	r20, r24
    2702:	4c 2b       	or	r20, r28
    2704:	6d 2f       	mov	r22, r29
    2706:	c8 01       	movw	r24, r16
    2708:	df 91       	pop	r29
    270a:	cf 91       	pop	r28
    270c:	1f 91       	pop	r17
    270e:	0f 91       	pop	r16
    2710:	0c 94 ff 12 	jmp	0x25fe	; 0x25fe <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>

00002714 <_ZN7MFRC52224PCD_ClearRegisterBitMaskENS_12PCD_RegisterEh>:
    2714:	0f 93       	push	r16
    2716:	1f 93       	push	r17
    2718:	cf 93       	push	r28
    271a:	df 93       	push	r29
    271c:	8c 01       	movw	r16, r24
    271e:	d6 2f       	mov	r29, r22
    2720:	c4 2f       	mov	r28, r20
    2722:	0e 94 51 13 	call	0x26a2	; 0x26a2 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    2726:	c0 95       	com	r28
    2728:	4c 2f       	mov	r20, r28
    272a:	48 23       	and	r20, r24
    272c:	6d 2f       	mov	r22, r29
    272e:	c8 01       	movw	r24, r16
    2730:	df 91       	pop	r29
    2732:	cf 91       	pop	r28
    2734:	1f 91       	pop	r17
    2736:	0f 91       	pop	r16
    2738:	0c 94 ff 12 	jmp	0x25fe	; 0x25fe <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>

0000273c <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>:
    273c:	cf 92       	push	r12
    273e:	df 92       	push	r13
    2740:	ef 92       	push	r14
    2742:	ff 92       	push	r15
    2744:	0f 93       	push	r16
    2746:	1f 93       	push	r17
    2748:	cf 93       	push	r28
    274a:	df 93       	push	r29
    274c:	ec 01       	movw	r28, r24
    274e:	6b 01       	movw	r12, r22
    2750:	14 2f       	mov	r17, r20
    2752:	79 01       	movw	r14, r18
    2754:	40 e0       	ldi	r20, 0x00	; 0
    2756:	62 e0       	ldi	r22, 0x02	; 2
    2758:	0e 94 ff 12 	call	0x25fe	; 0x25fe <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    275c:	44 e0       	ldi	r20, 0x04	; 4
    275e:	6a e0       	ldi	r22, 0x0A	; 10
    2760:	ce 01       	movw	r24, r28
    2762:	0e 94 ff 12 	call	0x25fe	; 0x25fe <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    2766:	40 e8       	ldi	r20, 0x80	; 128
    2768:	64 e1       	ldi	r22, 0x14	; 20
    276a:	ce 01       	movw	r24, r28
    276c:	0e 94 ff 12 	call	0x25fe	; 0x25fe <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    2770:	96 01       	movw	r18, r12
    2772:	41 2f       	mov	r20, r17
    2774:	62 e1       	ldi	r22, 0x12	; 18
    2776:	ce 01       	movw	r24, r28
    2778:	0e 94 1e 13 	call	0x263c	; 0x263c <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEhPh>
    277c:	43 e0       	ldi	r20, 0x03	; 3
    277e:	62 e0       	ldi	r22, 0x02	; 2
    2780:	ce 01       	movw	r24, r28
    2782:	0e 94 ff 12 	call	0x25fe	; 0x25fe <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    2786:	08 e8       	ldi	r16, 0x88	; 136
    2788:	13 e1       	ldi	r17, 0x13	; 19
    278a:	6a e0       	ldi	r22, 0x0A	; 10
    278c:	ce 01       	movw	r24, r28
    278e:	0e 94 51 13 	call	0x26a2	; 0x26a2 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    2792:	82 ff       	sbrs	r24, 2
    2794:	13 c0       	rjmp	.+38     	; 0x27bc <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x80>
    2796:	40 e0       	ldi	r20, 0x00	; 0
    2798:	62 e0       	ldi	r22, 0x02	; 2
    279a:	ce 01       	movw	r24, r28
    279c:	0e 94 ff 12 	call	0x25fe	; 0x25fe <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    27a0:	64 e4       	ldi	r22, 0x44	; 68
    27a2:	ce 01       	movw	r24, r28
    27a4:	0e 94 51 13 	call	0x26a2	; 0x26a2 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    27a8:	f7 01       	movw	r30, r14
    27aa:	80 83       	st	Z, r24
    27ac:	62 e4       	ldi	r22, 0x42	; 66
    27ae:	ce 01       	movw	r24, r28
    27b0:	0e 94 51 13 	call	0x26a2	; 0x26a2 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    27b4:	f7 01       	movw	r30, r14
    27b6:	81 83       	std	Z+1, r24	; 0x01
    27b8:	80 e0       	ldi	r24, 0x00	; 0
    27ba:	04 c0       	rjmp	.+8      	; 0x27c4 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x88>
    27bc:	01 50       	subi	r16, 0x01	; 1
    27be:	11 09       	sbc	r17, r1
    27c0:	21 f7       	brne	.-56     	; 0x278a <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x4e>
    27c2:	83 e0       	ldi	r24, 0x03	; 3
    27c4:	df 91       	pop	r29
    27c6:	cf 91       	pop	r28
    27c8:	1f 91       	pop	r17
    27ca:	0f 91       	pop	r16
    27cc:	ff 90       	pop	r15
    27ce:	ef 90       	pop	r14
    27d0:	df 90       	pop	r13
    27d2:	cf 90       	pop	r12
    27d4:	08 95       	ret

000027d6 <_ZN7MFRC5229PCD_ResetEv>:
    27d6:	0f 93       	push	r16
    27d8:	1f 93       	push	r17
    27da:	cf 93       	push	r28
    27dc:	8c 01       	movw	r16, r24
    27de:	4f e0       	ldi	r20, 0x0F	; 15
    27e0:	62 e0       	ldi	r22, 0x02	; 2
    27e2:	0e 94 ff 12 	call	0x25fe	; 0x25fe <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    27e6:	c3 e0       	ldi	r28, 0x03	; 3
    27e8:	62 e3       	ldi	r22, 0x32	; 50
    27ea:	70 e0       	ldi	r23, 0x00	; 0
    27ec:	80 e0       	ldi	r24, 0x00	; 0
    27ee:	90 e0       	ldi	r25, 0x00	; 0
    27f0:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <delay>
    27f4:	62 e0       	ldi	r22, 0x02	; 2
    27f6:	c8 01       	movw	r24, r16
    27f8:	0e 94 51 13 	call	0x26a2	; 0x26a2 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    27fc:	84 ff       	sbrs	r24, 4
    27fe:	02 c0       	rjmp	.+4      	; 0x2804 <_ZN7MFRC5229PCD_ResetEv+0x2e>
    2800:	c1 50       	subi	r28, 0x01	; 1
    2802:	91 f7       	brne	.-28     	; 0x27e8 <_ZN7MFRC5229PCD_ResetEv+0x12>
    2804:	cf 91       	pop	r28
    2806:	1f 91       	pop	r17
    2808:	0f 91       	pop	r16
    280a:	08 95       	ret

0000280c <_ZN7MFRC52213PCD_AntennaOnEv>:
    280c:	cf 93       	push	r28
    280e:	df 93       	push	r29
    2810:	ec 01       	movw	r28, r24
    2812:	68 e2       	ldi	r22, 0x28	; 40
    2814:	0e 94 51 13 	call	0x26a2	; 0x26a2 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    2818:	98 2f       	mov	r25, r24
    281a:	93 70       	andi	r25, 0x03	; 3
    281c:	93 30       	cpi	r25, 0x03	; 3
    281e:	41 f0       	breq	.+16     	; 0x2830 <_ZN7MFRC52213PCD_AntennaOnEv+0x24>
    2820:	48 2f       	mov	r20, r24
    2822:	43 60       	ori	r20, 0x03	; 3
    2824:	68 e2       	ldi	r22, 0x28	; 40
    2826:	ce 01       	movw	r24, r28
    2828:	df 91       	pop	r29
    282a:	cf 91       	pop	r28
    282c:	0c 94 ff 12 	jmp	0x25fe	; 0x25fe <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    2830:	df 91       	pop	r29
    2832:	cf 91       	pop	r28
    2834:	08 95       	ret

00002836 <_ZN7MFRC5228PCD_InitEv>:
    2836:	cf 93       	push	r28
    2838:	df 93       	push	r29
    283a:	ec 01       	movw	r28, r24
    283c:	61 e0       	ldi	r22, 0x01	; 1
    283e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2840:	0e 94 a3 10 	call	0x2146	; 0x2146 <pinMode>
    2844:	61 e0       	ldi	r22, 0x01	; 1
    2846:	8e 85       	ldd	r24, Y+14	; 0x0e
    2848:	0e 94 df 10 	call	0x21be	; 0x21be <digitalWrite>
    284c:	8f 85       	ldd	r24, Y+15	; 0x0f
    284e:	8f 3f       	cpi	r24, 0xFF	; 255
    2850:	09 f4       	brne	.+2      	; 0x2854 <_ZN7MFRC5228PCD_InitEv+0x1e>
    2852:	51 c0       	rjmp	.+162    	; 0x28f6 <_ZN7MFRC5228PCD_InitEv+0xc0>
    2854:	60 e0       	ldi	r22, 0x00	; 0
    2856:	0e 94 a3 10 	call	0x2146	; 0x2146 <pinMode>
    285a:	8f 85       	ldd	r24, Y+15	; 0x0f
    285c:	0e 94 0e 11 	call	0x221c	; 0x221c <digitalRead>
    2860:	89 2b       	or	r24, r25
    2862:	09 f0       	breq	.+2      	; 0x2866 <_ZN7MFRC5228PCD_InitEv+0x30>
    2864:	48 c0       	rjmp	.+144    	; 0x28f6 <_ZN7MFRC5228PCD_InitEv+0xc0>
    2866:	61 e0       	ldi	r22, 0x01	; 1
    2868:	8f 85       	ldd	r24, Y+15	; 0x0f
    286a:	0e 94 a3 10 	call	0x2146	; 0x2146 <pinMode>
    286e:	60 e0       	ldi	r22, 0x00	; 0
    2870:	8f 85       	ldd	r24, Y+15	; 0x0f
    2872:	0e 94 df 10 	call	0x21be	; 0x21be <digitalWrite>
    2876:	82 e0       	ldi	r24, 0x02	; 2
    2878:	90 e0       	ldi	r25, 0x00	; 0
    287a:	0e 94 34 10 	call	0x2068	; 0x2068 <delayMicroseconds>
    287e:	61 e0       	ldi	r22, 0x01	; 1
    2880:	8f 85       	ldd	r24, Y+15	; 0x0f
    2882:	0e 94 df 10 	call	0x21be	; 0x21be <digitalWrite>
    2886:	62 e3       	ldi	r22, 0x32	; 50
    2888:	70 e0       	ldi	r23, 0x00	; 0
    288a:	80 e0       	ldi	r24, 0x00	; 0
    288c:	90 e0       	ldi	r25, 0x00	; 0
    288e:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <delay>
    2892:	40 e0       	ldi	r20, 0x00	; 0
    2894:	64 e2       	ldi	r22, 0x24	; 36
    2896:	ce 01       	movw	r24, r28
    2898:	0e 94 ff 12 	call	0x25fe	; 0x25fe <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    289c:	40 e0       	ldi	r20, 0x00	; 0
    289e:	66 e2       	ldi	r22, 0x26	; 38
    28a0:	ce 01       	movw	r24, r28
    28a2:	0e 94 ff 12 	call	0x25fe	; 0x25fe <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    28a6:	46 e2       	ldi	r20, 0x26	; 38
    28a8:	68 e4       	ldi	r22, 0x48	; 72
    28aa:	ce 01       	movw	r24, r28
    28ac:	0e 94 ff 12 	call	0x25fe	; 0x25fe <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    28b0:	40 e8       	ldi	r20, 0x80	; 128
    28b2:	64 e5       	ldi	r22, 0x54	; 84
    28b4:	ce 01       	movw	r24, r28
    28b6:	0e 94 ff 12 	call	0x25fe	; 0x25fe <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    28ba:	49 ea       	ldi	r20, 0xA9	; 169
    28bc:	66 e5       	ldi	r22, 0x56	; 86
    28be:	ce 01       	movw	r24, r28
    28c0:	0e 94 ff 12 	call	0x25fe	; 0x25fe <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    28c4:	43 e0       	ldi	r20, 0x03	; 3
    28c6:	68 e5       	ldi	r22, 0x58	; 88
    28c8:	ce 01       	movw	r24, r28
    28ca:	0e 94 ff 12 	call	0x25fe	; 0x25fe <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    28ce:	48 ee       	ldi	r20, 0xE8	; 232
    28d0:	6a e5       	ldi	r22, 0x5A	; 90
    28d2:	ce 01       	movw	r24, r28
    28d4:	0e 94 ff 12 	call	0x25fe	; 0x25fe <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    28d8:	40 e4       	ldi	r20, 0x40	; 64
    28da:	6a e2       	ldi	r22, 0x2A	; 42
    28dc:	ce 01       	movw	r24, r28
    28de:	0e 94 ff 12 	call	0x25fe	; 0x25fe <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    28e2:	4d e3       	ldi	r20, 0x3D	; 61
    28e4:	62 e2       	ldi	r22, 0x22	; 34
    28e6:	ce 01       	movw	r24, r28
    28e8:	0e 94 ff 12 	call	0x25fe	; 0x25fe <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    28ec:	ce 01       	movw	r24, r28
    28ee:	df 91       	pop	r29
    28f0:	cf 91       	pop	r28
    28f2:	0c 94 06 14 	jmp	0x280c	; 0x280c <_ZN7MFRC52213PCD_AntennaOnEv>
    28f6:	ce 01       	movw	r24, r28
    28f8:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <_ZN7MFRC5229PCD_ResetEv>
    28fc:	ca cf       	rjmp	.-108    	; 0x2892 <_ZN7MFRC5228PCD_InitEv+0x5c>

000028fe <_ZN7MFRC52218PCD_GetAntennaGainEv>:
    28fe:	6c e4       	ldi	r22, 0x4C	; 76
    2900:	0e 94 51 13 	call	0x26a2	; 0x26a2 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    2904:	80 77       	andi	r24, 0x70	; 112
    2906:	08 95       	ret

00002908 <_ZN7MFRC52218PCD_SetAntennaGainEh>:
    2908:	0f 93       	push	r16
    290a:	1f 93       	push	r17
    290c:	cf 93       	push	r28
    290e:	8c 01       	movw	r16, r24
    2910:	c6 2f       	mov	r28, r22
    2912:	0e 94 7f 14 	call	0x28fe	; 0x28fe <_ZN7MFRC52218PCD_GetAntennaGainEv>
    2916:	8c 17       	cp	r24, r28
    2918:	71 f0       	breq	.+28     	; 0x2936 <_ZN7MFRC52218PCD_SetAntennaGainEh+0x2e>
    291a:	40 e7       	ldi	r20, 0x70	; 112
    291c:	6c e4       	ldi	r22, 0x4C	; 76
    291e:	c8 01       	movw	r24, r16
    2920:	0e 94 8a 13 	call	0x2714	; 0x2714 <_ZN7MFRC52224PCD_ClearRegisterBitMaskENS_12PCD_RegisterEh>
    2924:	4c 2f       	mov	r20, r28
    2926:	40 77       	andi	r20, 0x70	; 112
    2928:	6c e4       	ldi	r22, 0x4C	; 76
    292a:	c8 01       	movw	r24, r16
    292c:	cf 91       	pop	r28
    292e:	1f 91       	pop	r17
    2930:	0f 91       	pop	r16
    2932:	0c 94 77 13 	jmp	0x26ee	; 0x26ee <_ZN7MFRC52222PCD_SetRegisterBitMaskENS_12PCD_RegisterEh>
    2936:	cf 91       	pop	r28
    2938:	1f 91       	pop	r17
    293a:	0f 91       	pop	r16
    293c:	08 95       	ret

0000293e <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>:
    293e:	3f 92       	push	r3
    2940:	4f 92       	push	r4
    2942:	5f 92       	push	r5
    2944:	6f 92       	push	r6
    2946:	7f 92       	push	r7
    2948:	8f 92       	push	r8
    294a:	9f 92       	push	r9
    294c:	af 92       	push	r10
    294e:	bf 92       	push	r11
    2950:	cf 92       	push	r12
    2952:	df 92       	push	r13
    2954:	ef 92       	push	r14
    2956:	ff 92       	push	r15
    2958:	0f 93       	push	r16
    295a:	1f 93       	push	r17
    295c:	cf 93       	push	r28
    295e:	df 93       	push	r29
    2960:	00 d0       	rcall	.+0      	; 0x2962 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24>
    2962:	cd b7       	in	r28, 0x3d	; 61
    2964:	de b7       	in	r29, 0x3e	; 62
    2966:	3c 01       	movw	r6, r24
    2968:	16 2f       	mov	r17, r22
    296a:	94 2e       	mov	r9, r20
    296c:	29 01       	movw	r4, r18
    296e:	a1 14       	cp	r10, r1
    2970:	b1 04       	cpc	r11, r1
    2972:	19 f0       	breq	.+6      	; 0x297a <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x3c>
    2974:	f5 01       	movw	r30, r10
    2976:	40 81       	ld	r20, Z
    2978:	01 c0       	rjmp	.+2      	; 0x297c <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x3e>
    297a:	40 e0       	ldi	r20, 0x00	; 0
    297c:	34 2e       	mov	r3, r20
    297e:	f0 e1       	ldi	r31, 0x10	; 16
    2980:	8f 9e       	mul	r8, r31
    2982:	30 0c       	add	r3, r0
    2984:	11 24       	eor	r1, r1
    2986:	40 e0       	ldi	r20, 0x00	; 0
    2988:	62 e0       	ldi	r22, 0x02	; 2
    298a:	c3 01       	movw	r24, r6
    298c:	0e 94 ff 12 	call	0x25fe	; 0x25fe <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    2990:	4f e7       	ldi	r20, 0x7F	; 127
    2992:	68 e0       	ldi	r22, 0x08	; 8
    2994:	c3 01       	movw	r24, r6
    2996:	0e 94 ff 12 	call	0x25fe	; 0x25fe <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    299a:	40 e8       	ldi	r20, 0x80	; 128
    299c:	64 e1       	ldi	r22, 0x14	; 20
    299e:	c3 01       	movw	r24, r6
    29a0:	0e 94 ff 12 	call	0x25fe	; 0x25fe <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    29a4:	92 01       	movw	r18, r4
    29a6:	40 2f       	mov	r20, r16
    29a8:	62 e1       	ldi	r22, 0x12	; 18
    29aa:	c3 01       	movw	r24, r6
    29ac:	0e 94 1e 13 	call	0x263c	; 0x263c <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEhPh>
    29b0:	43 2d       	mov	r20, r3
    29b2:	6a e1       	ldi	r22, 0x1A	; 26
    29b4:	c3 01       	movw	r24, r6
    29b6:	0e 94 ff 12 	call	0x25fe	; 0x25fe <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    29ba:	41 2f       	mov	r20, r17
    29bc:	62 e0       	ldi	r22, 0x02	; 2
    29be:	c3 01       	movw	r24, r6
    29c0:	0e 94 ff 12 	call	0x25fe	; 0x25fe <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    29c4:	1c 30       	cpi	r17, 0x0C	; 12
    29c6:	29 f4       	brne	.+10     	; 0x29d2 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x94>
    29c8:	40 e8       	ldi	r20, 0x80	; 128
    29ca:	6a e1       	ldi	r22, 0x1A	; 26
    29cc:	c3 01       	movw	r24, r6
    29ce:	0e 94 77 13 	call	0x26ee	; 0x26ee <_ZN7MFRC52222PCD_SetRegisterBitMaskENS_12PCD_RegisterEh>
    29d2:	00 ed       	ldi	r16, 0xD0	; 208
    29d4:	17 e0       	ldi	r17, 0x07	; 7
    29d6:	68 e0       	ldi	r22, 0x08	; 8
    29d8:	c3 01       	movw	r24, r6
    29da:	0e 94 51 13 	call	0x26a2	; 0x26a2 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    29de:	98 2f       	mov	r25, r24
    29e0:	99 21       	and	r25, r9
    29e2:	39 f4       	brne	.+14     	; 0x29f2 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xb4>
    29e4:	80 fd       	sbrc	r24, 0
    29e6:	03 c0       	rjmp	.+6      	; 0x29ee <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xb0>
    29e8:	01 50       	subi	r16, 0x01	; 1
    29ea:	11 09       	sbc	r17, r1
    29ec:	a1 f7       	brne	.-24     	; 0x29d6 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x98>
    29ee:	83 e0       	ldi	r24, 0x03	; 3
    29f0:	65 c0       	rjmp	.+202    	; 0x2abc <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x17e>
    29f2:	6c e0       	ldi	r22, 0x0C	; 12
    29f4:	c3 01       	movw	r24, r6
    29f6:	0e 94 51 13 	call	0x26a2	; 0x26a2 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    29fa:	18 2f       	mov	r17, r24
    29fc:	83 71       	andi	r24, 0x13	; 19
    29fe:	09 f0       	breq	.+2      	; 0x2a02 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xc4>
    2a00:	5a c0       	rjmp	.+180    	; 0x2ab6 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x178>
    2a02:	e1 14       	cp	r14, r1
    2a04:	f1 04       	cpc	r15, r1
    2a06:	f9 f0       	breq	.+62     	; 0x2a46 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x108>
    2a08:	c1 14       	cp	r12, r1
    2a0a:	d1 04       	cpc	r13, r1
    2a0c:	e1 f0       	breq	.+56     	; 0x2a46 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x108>
    2a0e:	64 e1       	ldi	r22, 0x14	; 20
    2a10:	c3 01       	movw	r24, r6
    2a12:	0e 94 51 13 	call	0x26a2	; 0x26a2 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    2a16:	f6 01       	movw	r30, r12
    2a18:	90 81       	ld	r25, Z
    2a1a:	98 17       	cp	r25, r24
    2a1c:	08 f4       	brcc	.+2      	; 0x2a20 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xe2>
    2a1e:	45 c0       	rjmp	.+138    	; 0x2aaa <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x16c>
    2a20:	80 83       	st	Z, r24
    2a22:	08 2d       	mov	r16, r8
    2a24:	97 01       	movw	r18, r14
    2a26:	48 2f       	mov	r20, r24
    2a28:	62 e1       	ldi	r22, 0x12	; 18
    2a2a:	c3 01       	movw	r24, r6
    2a2c:	0e 94 71 13 	call	0x26e2	; 0x26e2 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh>
    2a30:	68 e1       	ldi	r22, 0x18	; 24
    2a32:	c3 01       	movw	r24, r6
    2a34:	0e 94 51 13 	call	0x26a2	; 0x26a2 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    2a38:	87 70       	andi	r24, 0x07	; 7
    2a3a:	a1 14       	cp	r10, r1
    2a3c:	b1 04       	cpc	r11, r1
    2a3e:	21 f0       	breq	.+8      	; 0x2a48 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x10a>
    2a40:	f5 01       	movw	r30, r10
    2a42:	80 83       	st	Z, r24
    2a44:	01 c0       	rjmp	.+2      	; 0x2a48 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x10a>
    2a46:	80 e0       	ldi	r24, 0x00	; 0
    2a48:	13 fd       	sbrc	r17, 3
    2a4a:	31 c0       	rjmp	.+98     	; 0x2aae <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x170>
    2a4c:	e1 14       	cp	r14, r1
    2a4e:	f1 04       	cpc	r15, r1
    2a50:	81 f1       	breq	.+96     	; 0x2ab2 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x174>
    2a52:	c1 14       	cp	r12, r1
    2a54:	d1 04       	cpc	r13, r1
    2a56:	69 f1       	breq	.+90     	; 0x2ab2 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x174>
    2a58:	9e 89       	ldd	r25, Y+22	; 0x16
    2a5a:	99 23       	and	r25, r25
    2a5c:	51 f1       	breq	.+84     	; 0x2ab2 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x174>
    2a5e:	f6 01       	movw	r30, r12
    2a60:	40 81       	ld	r20, Z
    2a62:	41 30       	cpi	r20, 0x01	; 1
    2a64:	21 f4       	brne	.+8      	; 0x2a6e <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x130>
    2a66:	84 30       	cpi	r24, 0x04	; 4
    2a68:	41 f5       	brne	.+80     	; 0x2aba <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x17c>
    2a6a:	8f ef       	ldi	r24, 0xFF	; 255
    2a6c:	27 c0       	rjmp	.+78     	; 0x2abc <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x17e>
    2a6e:	42 30       	cpi	r20, 0x02	; 2
    2a70:	20 f1       	brcs	.+72     	; 0x2aba <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x17c>
    2a72:	81 11       	cpse	r24, r1
    2a74:	22 c0       	rjmp	.+68     	; 0x2aba <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x17c>
    2a76:	42 50       	subi	r20, 0x02	; 2
    2a78:	9e 01       	movw	r18, r28
    2a7a:	2f 5f       	subi	r18, 0xFF	; 255
    2a7c:	3f 4f       	sbci	r19, 0xFF	; 255
    2a7e:	b7 01       	movw	r22, r14
    2a80:	c3 01       	movw	r24, r6
    2a82:	0e 94 9e 13 	call	0x273c	; 0x273c <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
    2a86:	81 11       	cpse	r24, r1
    2a88:	19 c0       	rjmp	.+50     	; 0x2abc <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x17e>
    2a8a:	f6 01       	movw	r30, r12
    2a8c:	80 81       	ld	r24, Z
    2a8e:	e8 0e       	add	r14, r24
    2a90:	f1 1c       	adc	r15, r1
    2a92:	f7 01       	movw	r30, r14
    2a94:	32 97       	sbiw	r30, 0x02	; 2
    2a96:	90 81       	ld	r25, Z
    2a98:	89 81       	ldd	r24, Y+1	; 0x01
    2a9a:	98 13       	cpse	r25, r24
    2a9c:	0e c0       	rjmp	.+28     	; 0x2aba <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x17c>
    2a9e:	31 96       	adiw	r30, 0x01	; 1
    2aa0:	90 81       	ld	r25, Z
    2aa2:	8a 81       	ldd	r24, Y+2	; 0x02
    2aa4:	98 13       	cpse	r25, r24
    2aa6:	09 c0       	rjmp	.+18     	; 0x2aba <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x17c>
    2aa8:	04 c0       	rjmp	.+8      	; 0x2ab2 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x174>
    2aaa:	84 e0       	ldi	r24, 0x04	; 4
    2aac:	07 c0       	rjmp	.+14     	; 0x2abc <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x17e>
    2aae:	82 e0       	ldi	r24, 0x02	; 2
    2ab0:	05 c0       	rjmp	.+10     	; 0x2abc <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x17e>
    2ab2:	80 e0       	ldi	r24, 0x00	; 0
    2ab4:	03 c0       	rjmp	.+6      	; 0x2abc <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x17e>
    2ab6:	81 e0       	ldi	r24, 0x01	; 1
    2ab8:	01 c0       	rjmp	.+2      	; 0x2abc <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x17e>
    2aba:	87 e0       	ldi	r24, 0x07	; 7
    2abc:	0f 90       	pop	r0
    2abe:	0f 90       	pop	r0
    2ac0:	df 91       	pop	r29
    2ac2:	cf 91       	pop	r28
    2ac4:	1f 91       	pop	r17
    2ac6:	0f 91       	pop	r16
    2ac8:	ff 90       	pop	r15
    2aca:	ef 90       	pop	r14
    2acc:	df 90       	pop	r13
    2ace:	cf 90       	pop	r12
    2ad0:	bf 90       	pop	r11
    2ad2:	af 90       	pop	r10
    2ad4:	9f 90       	pop	r9
    2ad6:	8f 90       	pop	r8
    2ad8:	7f 90       	pop	r7
    2ada:	6f 90       	pop	r6
    2adc:	5f 90       	pop	r5
    2ade:	4f 90       	pop	r4
    2ae0:	3f 90       	pop	r3
    2ae2:	08 95       	ret

00002ae4 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>:
    2ae4:	8f 92       	push	r8
    2ae6:	af 92       	push	r10
    2ae8:	bf 92       	push	r11
    2aea:	cf 92       	push	r12
    2aec:	df 92       	push	r13
    2aee:	ef 92       	push	r14
    2af0:	ff 92       	push	r15
    2af2:	0f 93       	push	r16
    2af4:	1f 93       	push	r17
    2af6:	af 92       	push	r10
    2af8:	8c 2c       	mov	r8, r12
    2afa:	57 01       	movw	r10, r14
    2afc:	68 01       	movw	r12, r16
    2afe:	79 01       	movw	r14, r18
    2b00:	04 2f       	mov	r16, r20
    2b02:	9b 01       	movw	r18, r22
    2b04:	40 e3       	ldi	r20, 0x30	; 48
    2b06:	6c e0       	ldi	r22, 0x0C	; 12
    2b08:	0e 94 9f 14 	call	0x293e	; 0x293e <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>
    2b0c:	0f 90       	pop	r0
    2b0e:	1f 91       	pop	r17
    2b10:	0f 91       	pop	r16
    2b12:	ff 90       	pop	r15
    2b14:	ef 90       	pop	r14
    2b16:	df 90       	pop	r13
    2b18:	cf 90       	pop	r12
    2b1a:	bf 90       	pop	r11
    2b1c:	af 90       	pop	r10
    2b1e:	8f 90       	pop	r8
    2b20:	08 95       	ret

00002b22 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh>:
    2b22:	2f 92       	push	r2
    2b24:	3f 92       	push	r3
    2b26:	4f 92       	push	r4
    2b28:	5f 92       	push	r5
    2b2a:	6f 92       	push	r6
    2b2c:	7f 92       	push	r7
    2b2e:	8f 92       	push	r8
    2b30:	9f 92       	push	r9
    2b32:	af 92       	push	r10
    2b34:	bf 92       	push	r11
    2b36:	cf 92       	push	r12
    2b38:	df 92       	push	r13
    2b3a:	ef 92       	push	r14
    2b3c:	ff 92       	push	r15
    2b3e:	0f 93       	push	r16
    2b40:	1f 93       	push	r17
    2b42:	cf 93       	push	r28
    2b44:	df 93       	push	r29
    2b46:	cd b7       	in	r28, 0x3d	; 61
    2b48:	de b7       	in	r29, 0x3e	; 62
    2b4a:	2c 97       	sbiw	r28, 0x0c	; 12
    2b4c:	0f b6       	in	r0, 0x3f	; 63
    2b4e:	f8 94       	cli
    2b50:	de bf       	out	0x3e, r29	; 62
    2b52:	0f be       	out	0x3f, r0	; 63
    2b54:	cd bf       	out	0x3d, r28	; 61
    2b56:	41 35       	cpi	r20, 0x51	; 81
    2b58:	08 f0       	brcs	.+2      	; 0x2b5c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x3a>
    2b5a:	05 c1       	rjmp	.+522    	; 0x2d66 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x244>
    2b5c:	34 2e       	mov	r3, r20
    2b5e:	3b 01       	movw	r6, r22
    2b60:	4c 01       	movw	r8, r24
    2b62:	40 e8       	ldi	r20, 0x80	; 128
    2b64:	6c e1       	ldi	r22, 0x1C	; 28
    2b66:	0e 94 8a 13 	call	0x2714	; 0x2714 <_ZN7MFRC52224PCD_ClearRegisterBitMaskENS_12PCD_RegisterEh>
    2b6a:	22 24       	eor	r2, r2
    2b6c:	23 94       	inc	r2
    2b6e:	32 e0       	ldi	r19, 0x02	; 2
    2b70:	23 16       	cp	r2, r19
    2b72:	91 f0       	breq	.+36     	; 0x2b98 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x76>
    2b74:	83 e0       	ldi	r24, 0x03	; 3
    2b76:	28 16       	cp	r2, r24
    2b78:	e1 f0       	breq	.+56     	; 0x2bb2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x90>
    2b7a:	91 e0       	ldi	r25, 0x01	; 1
    2b7c:	29 12       	cpse	r2, r25
    2b7e:	f7 c0       	rjmp	.+494    	; 0x2d6e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x24c>
    2b80:	83 e9       	ldi	r24, 0x93	; 147
    2b82:	89 83       	std	Y+1, r24	; 0x01
    2b84:	33 20       	and	r3, r3
    2b86:	d1 f0       	breq	.+52     	; 0x2bbc <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x9a>
    2b88:	81 e0       	ldi	r24, 0x01	; 1
    2b8a:	f3 01       	movw	r30, r6
    2b8c:	90 81       	ld	r25, Z
    2b8e:	95 30       	cpi	r25, 0x05	; 5
    2b90:	08 f4       	brcc	.+2      	; 0x2b94 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x72>
    2b92:	80 e0       	ldi	r24, 0x00	; 0
    2b94:	b1 2c       	mov	r11, r1
    2b96:	17 c0       	rjmp	.+46     	; 0x2bc6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xa4>
    2b98:	f5 e9       	ldi	r31, 0x95	; 149
    2b9a:	f9 83       	std	Y+1, r31	; 0x01
    2b9c:	33 20       	and	r3, r3
    2b9e:	81 f0       	breq	.+32     	; 0x2bc0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x9e>
    2ba0:	81 e0       	ldi	r24, 0x01	; 1
    2ba2:	f3 01       	movw	r30, r6
    2ba4:	90 81       	ld	r25, Z
    2ba6:	98 30       	cpi	r25, 0x08	; 8
    2ba8:	08 f4       	brcc	.+2      	; 0x2bac <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x8a>
    2baa:	80 e0       	ldi	r24, 0x00	; 0
    2bac:	43 e0       	ldi	r20, 0x03	; 3
    2bae:	b4 2e       	mov	r11, r20
    2bb0:	0a c0       	rjmp	.+20     	; 0x2bc6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xa4>
    2bb2:	87 e9       	ldi	r24, 0x97	; 151
    2bb4:	89 83       	std	Y+1, r24	; 0x01
    2bb6:	36 e0       	ldi	r19, 0x06	; 6
    2bb8:	b3 2e       	mov	r11, r19
    2bba:	04 c0       	rjmp	.+8      	; 0x2bc4 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xa2>
    2bbc:	b1 2c       	mov	r11, r1
    2bbe:	02 c0       	rjmp	.+4      	; 0x2bc4 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xa2>
    2bc0:	23 e0       	ldi	r18, 0x03	; 3
    2bc2:	b2 2e       	mov	r11, r18
    2bc4:	80 e0       	ldi	r24, 0x00	; 0
    2bc6:	d3 2c       	mov	r13, r3
    2bc8:	f8 e0       	ldi	r31, 0x08	; 8
    2bca:	bf 9e       	mul	r11, r31
    2bcc:	d0 18       	sub	r13, r0
    2bce:	11 24       	eor	r1, r1
    2bd0:	d7 fc       	sbrc	r13, 7
    2bd2:	d1 2c       	mov	r13, r1
    2bd4:	88 23       	and	r24, r24
    2bd6:	21 f0       	breq	.+8      	; 0x2be0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xbe>
    2bd8:	98 e8       	ldi	r25, 0x88	; 136
    2bda:	9b 83       	std	Y+3, r25	; 0x03
    2bdc:	33 e0       	ldi	r19, 0x03	; 3
    2bde:	01 c0       	rjmp	.+2      	; 0x2be2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xc0>
    2be0:	32 e0       	ldi	r19, 0x02	; 2
    2be2:	21 e0       	ldi	r18, 0x01	; 1
    2be4:	9d 2d       	mov	r25, r13
    2be6:	97 70       	andi	r25, 0x07	; 7
    2be8:	09 f4       	brne	.+2      	; 0x2bec <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xca>
    2bea:	20 e0       	ldi	r18, 0x00	; 0
    2bec:	9d 2d       	mov	r25, r13
    2bee:	95 95       	asr	r25
    2bf0:	95 95       	asr	r25
    2bf2:	95 95       	asr	r25
    2bf4:	29 0f       	add	r18, r25
    2bf6:	31 f4       	brne	.+12     	; 0x2c04 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xe2>
    2bf8:	88 23       	and	r24, r24
    2bfa:	09 f4       	brne	.+2      	; 0x2bfe <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xdc>
    2bfc:	91 c0       	rjmp	.+290    	; 0x2d20 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1fe>
    2bfe:	38 e0       	ldi	r19, 0x08	; 8
    2c00:	d3 0e       	add	r13, r19
    2c02:	8e c0       	rjmp	.+284    	; 0x2d20 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1fe>
    2c04:	81 11       	cpse	r24, r1
    2c06:	02 c0       	rjmp	.+4      	; 0x2c0c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xea>
    2c08:	94 e0       	ldi	r25, 0x04	; 4
    2c0a:	01 c0       	rjmp	.+2      	; 0x2c0e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xec>
    2c0c:	93 e0       	ldi	r25, 0x03	; 3
    2c0e:	29 17       	cp	r18, r25
    2c10:	08 f4       	brcc	.+2      	; 0x2c14 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xf2>
    2c12:	92 2f       	mov	r25, r18
    2c14:	eb 2d       	mov	r30, r11
    2c16:	f0 e0       	ldi	r31, 0x00	; 0
    2c18:	31 96       	adiw	r30, 0x01	; 1
    2c1a:	e6 0d       	add	r30, r6
    2c1c:	f7 1d       	adc	r31, r7
    2c1e:	23 2f       	mov	r18, r19
    2c20:	41 91       	ld	r20, Z+
    2c22:	a1 e0       	ldi	r26, 0x01	; 1
    2c24:	b0 e0       	ldi	r27, 0x00	; 0
    2c26:	ac 0f       	add	r26, r28
    2c28:	bd 1f       	adc	r27, r29
    2c2a:	a2 0f       	add	r26, r18
    2c2c:	b1 1d       	adc	r27, r1
    2c2e:	4c 93       	st	X, r20
    2c30:	2f 5f       	subi	r18, 0xFF	; 255
    2c32:	42 2f       	mov	r20, r18
    2c34:	43 1b       	sub	r20, r19
    2c36:	49 17       	cp	r20, r25
    2c38:	98 f3       	brcs	.-26     	; 0x2c20 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xfe>
    2c3a:	de cf       	rjmp	.-68     	; 0x2bf8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xd6>
    2c3c:	81 11       	cpse	r24, r1
    2c3e:	dd c0       	rjmp	.+442    	; 0x2dfa <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2d8>
    2c40:	9f e1       	ldi	r25, 0x1F	; 31
    2c42:	9d 15       	cp	r25, r13
    2c44:	0c f4       	brge	.+2      	; 0x2c48 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x126>
    2c46:	95 c0       	rjmp	.+298    	; 0x2d72 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x250>
    2c48:	80 e2       	ldi	r24, 0x20	; 32
    2c4a:	d8 2e       	mov	r13, r24
    2c4c:	90 e7       	ldi	r25, 0x70	; 112
    2c4e:	9a 83       	std	Y+2, r25	; 0x02
    2c50:	9b 81       	ldd	r25, Y+3	; 0x03
    2c52:	8c 81       	ldd	r24, Y+4	; 0x04
    2c54:	89 27       	eor	r24, r25
    2c56:	9d 81       	ldd	r25, Y+5	; 0x05
    2c58:	89 27       	eor	r24, r25
    2c5a:	9e 81       	ldd	r25, Y+6	; 0x06
    2c5c:	89 27       	eor	r24, r25
    2c5e:	8f 83       	std	Y+7, r24	; 0x07
    2c60:	9e 01       	movw	r18, r28
    2c62:	28 5f       	subi	r18, 0xF8	; 248
    2c64:	3f 4f       	sbci	r19, 0xFF	; 255
    2c66:	47 e0       	ldi	r20, 0x07	; 7
    2c68:	be 01       	movw	r22, r28
    2c6a:	6f 5f       	subi	r22, 0xFF	; 255
    2c6c:	7f 4f       	sbci	r23, 0xFF	; 255
    2c6e:	c4 01       	movw	r24, r8
    2c70:	0e 94 9e 13 	call	0x273c	; 0x273c <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
    2c74:	81 11       	cpse	r24, r1
    2c76:	c1 c0       	rjmp	.+386    	; 0x2dfa <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2d8>
    2c78:	1b 86       	std	Y+11, r1	; 0x0b
    2c7a:	e3 e0       	ldi	r30, 0x03	; 3
    2c7c:	ea 87       	std	Y+10, r30	; 0x0a
    2c7e:	ce 01       	movw	r24, r28
    2c80:	07 96       	adiw	r24, 0x07	; 7
    2c82:	2c 01       	movw	r4, r24
    2c84:	99 e0       	ldi	r25, 0x09	; 9
    2c86:	9c 87       	std	Y+12, r25	; 0x0c
    2c88:	cb 84       	ldd	r12, Y+11	; 0x0b
    2c8a:	4c 2d       	mov	r20, r12
    2c8c:	42 95       	swap	r20
    2c8e:	40 7f       	andi	r20, 0xF0	; 240
    2c90:	4c 0d       	add	r20, r12
    2c92:	6a e1       	ldi	r22, 0x1A	; 26
    2c94:	c4 01       	movw	r24, r8
    2c96:	0e 94 ff 12 	call	0x25fe	; 0x25fe <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    2c9a:	a1 2c       	mov	r10, r1
    2c9c:	ce 01       	movw	r24, r28
    2c9e:	0b 96       	adiw	r24, 0x0b	; 11
    2ca0:	7c 01       	movw	r14, r24
    2ca2:	8e 01       	movw	r16, r28
    2ca4:	06 5f       	subi	r16, 0xF6	; 246
    2ca6:	1f 4f       	sbci	r17, 0xFF	; 255
    2ca8:	92 01       	movw	r18, r4
    2caa:	4c 85       	ldd	r20, Y+12	; 0x0c
    2cac:	be 01       	movw	r22, r28
    2cae:	6f 5f       	subi	r22, 0xFF	; 255
    2cb0:	7f 4f       	sbci	r23, 0xFF	; 255
    2cb2:	c4 01       	movw	r24, r8
    2cb4:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
    2cb8:	82 30       	cpi	r24, 0x02	; 2
    2cba:	09 f0       	breq	.+2      	; 0x2cbe <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x19c>
    2cbc:	bf cf       	rjmp	.-130    	; 0x2c3c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x11a>
    2cbe:	6c e1       	ldi	r22, 0x1C	; 28
    2cc0:	c4 01       	movw	r24, r8
    2cc2:	0e 94 51 13 	call	0x26a2	; 0x26a2 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    2cc6:	85 fd       	sbrc	r24, 5
    2cc8:	50 c0       	rjmp	.+160    	; 0x2d6a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x248>
    2cca:	8f 71       	andi	r24, 0x1F	; 31
    2ccc:	09 f4       	brne	.+2      	; 0x2cd0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1ae>
    2cce:	80 e2       	ldi	r24, 0x20	; 32
    2cd0:	28 2f       	mov	r18, r24
    2cd2:	30 e0       	ldi	r19, 0x00	; 0
    2cd4:	4d 2d       	mov	r20, r13
    2cd6:	dd 0c       	add	r13, r13
    2cd8:	55 0b       	sbc	r21, r21
    2cda:	42 17       	cp	r20, r18
    2cdc:	53 07       	cpc	r21, r19
    2cde:	0c f0       	brlt	.+2      	; 0x2ce2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1c0>
    2ce0:	46 c0       	rjmp	.+140    	; 0x2d6e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x24c>
    2ce2:	d8 2e       	mov	r13, r24
    2ce4:	85 95       	asr	r24
    2ce6:	85 95       	asr	r24
    2ce8:	85 95       	asr	r24
    2cea:	91 e0       	ldi	r25, 0x01	; 1
    2cec:	98 0f       	add	r25, r24
    2cee:	42 2f       	mov	r20, r18
    2cf0:	47 70       	andi	r20, 0x07	; 7
    2cf2:	81 e0       	ldi	r24, 0x01	; 1
    2cf4:	09 f4       	brne	.+2      	; 0x2cf8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1d6>
    2cf6:	80 e0       	ldi	r24, 0x00	; 0
    2cf8:	89 0f       	add	r24, r25
    2cfa:	e1 e0       	ldi	r30, 0x01	; 1
    2cfc:	f0 e0       	ldi	r31, 0x00	; 0
    2cfe:	ec 0f       	add	r30, r28
    2d00:	fd 1f       	adc	r31, r29
    2d02:	e8 0f       	add	r30, r24
    2d04:	f1 1d       	adc	r31, r1
    2d06:	21 50       	subi	r18, 0x01	; 1
    2d08:	31 09       	sbc	r19, r1
    2d0a:	27 70       	andi	r18, 0x07	; 7
    2d0c:	33 27       	eor	r19, r19
    2d0e:	81 e0       	ldi	r24, 0x01	; 1
    2d10:	90 e0       	ldi	r25, 0x00	; 0
    2d12:	01 c0       	rjmp	.+2      	; 0x2d16 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1f4>
    2d14:	88 0f       	add	r24, r24
    2d16:	2a 95       	dec	r18
    2d18:	ea f7       	brpl	.-6      	; 0x2d14 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1f2>
    2d1a:	90 81       	ld	r25, Z
    2d1c:	89 2b       	or	r24, r25
    2d1e:	80 83       	st	Z, r24
    2d20:	8f e1       	ldi	r24, 0x1F	; 31
    2d22:	8d 15       	cp	r24, r13
    2d24:	0c f4       	brge	.+2      	; 0x2d28 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x206>
    2d26:	92 cf       	rjmp	.-220    	; 0x2c4c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x12a>
    2d28:	9d 2d       	mov	r25, r13
    2d2a:	97 70       	andi	r25, 0x07	; 7
    2d2c:	9b 87       	std	Y+11, r25	; 0x0b
    2d2e:	8d 2d       	mov	r24, r13
    2d30:	85 95       	asr	r24
    2d32:	85 95       	asr	r24
    2d34:	85 95       	asr	r24
    2d36:	8e 5f       	subi	r24, 0xFE	; 254
    2d38:	29 2f       	mov	r18, r25
    2d3a:	e0 e1       	ldi	r30, 0x10	; 16
    2d3c:	8e 9f       	mul	r24, r30
    2d3e:	20 0d       	add	r18, r0
    2d40:	11 24       	eor	r1, r1
    2d42:	2a 83       	std	Y+2, r18	; 0x02
    2d44:	21 e0       	ldi	r18, 0x01	; 1
    2d46:	91 11       	cpse	r25, r1
    2d48:	01 c0       	rjmp	.+2      	; 0x2d4c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x22a>
    2d4a:	20 e0       	ldi	r18, 0x00	; 0
    2d4c:	28 0f       	add	r18, r24
    2d4e:	2c 87       	std	Y+12, r18	; 0x0c
    2d50:	44 24       	eor	r4, r4
    2d52:	43 94       	inc	r4
    2d54:	51 2c       	mov	r5, r1
    2d56:	4c 0e       	add	r4, r28
    2d58:	5d 1e       	adc	r5, r29
    2d5a:	48 0e       	add	r4, r24
    2d5c:	51 1c       	adc	r5, r1
    2d5e:	f9 e0       	ldi	r31, 0x09	; 9
    2d60:	f8 1b       	sub	r31, r24
    2d62:	fa 87       	std	Y+10, r31	; 0x0a
    2d64:	91 cf       	rjmp	.-222    	; 0x2c88 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x166>
    2d66:	86 e0       	ldi	r24, 0x06	; 6
    2d68:	48 c0       	rjmp	.+144    	; 0x2dfa <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2d8>
    2d6a:	82 e0       	ldi	r24, 0x02	; 2
    2d6c:	46 c0       	rjmp	.+140    	; 0x2dfa <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2d8>
    2d6e:	85 e0       	ldi	r24, 0x05	; 5
    2d70:	44 c0       	rjmp	.+136    	; 0x2dfa <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2d8>
    2d72:	8b 81       	ldd	r24, Y+3	; 0x03
    2d74:	88 38       	cpi	r24, 0x88	; 136
    2d76:	f1 f1       	breq	.+124    	; 0x2df4 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2d2>
    2d78:	82 e0       	ldi	r24, 0x02	; 2
    2d7a:	94 e0       	ldi	r25, 0x04	; 4
    2d7c:	eb 2d       	mov	r30, r11
    2d7e:	f0 e0       	ldi	r31, 0x00	; 0
    2d80:	31 96       	adiw	r30, 0x01	; 1
    2d82:	e6 0d       	add	r30, r6
    2d84:	f7 1d       	adc	r31, r7
    2d86:	98 0f       	add	r25, r24
    2d88:	a1 e0       	ldi	r26, 0x01	; 1
    2d8a:	b0 e0       	ldi	r27, 0x00	; 0
    2d8c:	ac 0f       	add	r26, r28
    2d8e:	bd 1f       	adc	r27, r29
    2d90:	a8 0f       	add	r26, r24
    2d92:	b1 1d       	adc	r27, r1
    2d94:	2c 91       	ld	r18, X
    2d96:	21 93       	st	Z+, r18
    2d98:	8f 5f       	subi	r24, 0xFF	; 255
    2d9a:	98 13       	cpse	r25, r24
    2d9c:	f5 cf       	rjmp	.-22     	; 0x2d88 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x266>
    2d9e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2da0:	83 30       	cpi	r24, 0x03	; 3
    2da2:	21 f5       	brne	.+72     	; 0x2dec <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2ca>
    2da4:	8b 85       	ldd	r24, Y+11	; 0x0b
    2da6:	81 11       	cpse	r24, r1
    2da8:	21 c0       	rjmp	.+66     	; 0x2dec <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2ca>
    2daa:	9e 01       	movw	r18, r28
    2dac:	2d 5f       	subi	r18, 0xFD	; 253
    2dae:	3f 4f       	sbci	r19, 0xFF	; 255
    2db0:	41 e0       	ldi	r20, 0x01	; 1
    2db2:	b2 01       	movw	r22, r4
    2db4:	c4 01       	movw	r24, r8
    2db6:	0e 94 9e 13 	call	0x273c	; 0x273c <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
    2dba:	81 11       	cpse	r24, r1
    2dbc:	1e c0       	rjmp	.+60     	; 0x2dfa <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2d8>
    2dbe:	9b 81       	ldd	r25, Y+3	; 0x03
    2dc0:	f2 01       	movw	r30, r4
    2dc2:	81 81       	ldd	r24, Z+1	; 0x01
    2dc4:	98 13       	cpse	r25, r24
    2dc6:	14 c0       	rjmp	.+40     	; 0x2df0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2ce>
    2dc8:	9c 81       	ldd	r25, Y+4	; 0x04
    2dca:	82 81       	ldd	r24, Z+2	; 0x02
    2dcc:	98 13       	cpse	r25, r24
    2dce:	10 c0       	rjmp	.+32     	; 0x2df0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2ce>
    2dd0:	80 81       	ld	r24, Z
    2dd2:	82 ff       	sbrs	r24, 2
    2dd4:	02 c0       	rjmp	.+4      	; 0x2dda <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2b8>
    2dd6:	23 94       	inc	r2
    2dd8:	ca ce       	rjmp	.-620    	; 0x2b6e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x4c>
    2dda:	f3 01       	movw	r30, r6
    2ddc:	83 87       	std	Z+11, r24	; 0x0b
    2dde:	82 2d       	mov	r24, r2
    2de0:	88 0f       	add	r24, r24
    2de2:	82 0d       	add	r24, r2
    2de4:	8f 5f       	subi	r24, 0xFF	; 255
    2de6:	80 83       	st	Z, r24
    2de8:	80 e0       	ldi	r24, 0x00	; 0
    2dea:	07 c0       	rjmp	.+14     	; 0x2dfa <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2d8>
    2dec:	81 e0       	ldi	r24, 0x01	; 1
    2dee:	05 c0       	rjmp	.+10     	; 0x2dfa <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2d8>
    2df0:	87 e0       	ldi	r24, 0x07	; 7
    2df2:	03 c0       	rjmp	.+6      	; 0x2dfa <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2d8>
    2df4:	83 e0       	ldi	r24, 0x03	; 3
    2df6:	93 e0       	ldi	r25, 0x03	; 3
    2df8:	c1 cf       	rjmp	.-126    	; 0x2d7c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x25a>
    2dfa:	2c 96       	adiw	r28, 0x0c	; 12
    2dfc:	0f b6       	in	r0, 0x3f	; 63
    2dfe:	f8 94       	cli
    2e00:	de bf       	out	0x3e, r29	; 62
    2e02:	0f be       	out	0x3f, r0	; 63
    2e04:	cd bf       	out	0x3d, r28	; 61
    2e06:	df 91       	pop	r29
    2e08:	cf 91       	pop	r28
    2e0a:	1f 91       	pop	r17
    2e0c:	0f 91       	pop	r16
    2e0e:	ff 90       	pop	r15
    2e10:	ef 90       	pop	r14
    2e12:	df 90       	pop	r13
    2e14:	cf 90       	pop	r12
    2e16:	bf 90       	pop	r11
    2e18:	af 90       	pop	r10
    2e1a:	9f 90       	pop	r9
    2e1c:	8f 90       	pop	r8
    2e1e:	7f 90       	pop	r7
    2e20:	6f 90       	pop	r6
    2e22:	5f 90       	pop	r5
    2e24:	4f 90       	pop	r4
    2e26:	3f 90       	pop	r3
    2e28:	2f 90       	pop	r2
    2e2a:	08 95       	ret

00002e2c <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_>:
    2e2c:	4f 92       	push	r4
    2e2e:	5f 92       	push	r5
    2e30:	6f 92       	push	r6
    2e32:	7f 92       	push	r7
    2e34:	8f 92       	push	r8
    2e36:	9f 92       	push	r9
    2e38:	af 92       	push	r10
    2e3a:	cf 92       	push	r12
    2e3c:	ef 92       	push	r14
    2e3e:	ff 92       	push	r15
    2e40:	0f 93       	push	r16
    2e42:	1f 93       	push	r17
    2e44:	cf 93       	push	r28
    2e46:	df 93       	push	r29
    2e48:	00 d0       	rcall	.+0      	; 0x2e4a <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x1e>
    2e4a:	cd b7       	in	r28, 0x3d	; 61
    2e4c:	de b7       	in	r29, 0x3e	; 62
    2e4e:	6a 83       	std	Y+2, r22	; 0x02
    2e50:	41 15       	cp	r20, r1
    2e52:	51 05       	cpc	r21, r1
    2e54:	39 f1       	breq	.+78     	; 0x2ea4 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x78>
    2e56:	f9 01       	movw	r30, r18
    2e58:	60 81       	ld	r22, Z
    2e5a:	62 30       	cpi	r22, 0x02	; 2
    2e5c:	18 f1       	brcs	.+70     	; 0x2ea4 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x78>
    2e5e:	49 01       	movw	r8, r18
    2e60:	2a 01       	movw	r4, r20
    2e62:	3c 01       	movw	r6, r24
    2e64:	40 e8       	ldi	r20, 0x80	; 128
    2e66:	6c e1       	ldi	r22, 0x1C	; 28
    2e68:	0e 94 8a 13 	call	0x2714	; 0x2714 <_ZN7MFRC52224PCD_ClearRegisterBitMaskENS_12PCD_RegisterEh>
    2e6c:	87 e0       	ldi	r24, 0x07	; 7
    2e6e:	89 83       	std	Y+1, r24	; 0x01
    2e70:	a1 2c       	mov	r10, r1
    2e72:	c1 2c       	mov	r12, r1
    2e74:	ce 01       	movw	r24, r28
    2e76:	01 96       	adiw	r24, 0x01	; 1
    2e78:	7c 01       	movw	r14, r24
    2e7a:	84 01       	movw	r16, r8
    2e7c:	92 01       	movw	r18, r4
    2e7e:	41 e0       	ldi	r20, 0x01	; 1
    2e80:	be 01       	movw	r22, r28
    2e82:	6e 5f       	subi	r22, 0xFE	; 254
    2e84:	7f 4f       	sbci	r23, 0xFF	; 255
    2e86:	c3 01       	movw	r24, r6
    2e88:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
    2e8c:	81 11       	cpse	r24, r1
    2e8e:	0d c0       	rjmp	.+26     	; 0x2eaa <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x7e>
    2e90:	f4 01       	movw	r30, r8
    2e92:	80 81       	ld	r24, Z
    2e94:	82 30       	cpi	r24, 0x02	; 2
    2e96:	41 f4       	brne	.+16     	; 0x2ea8 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x7c>
    2e98:	81 e0       	ldi	r24, 0x01	; 1
    2e9a:	99 81       	ldd	r25, Y+1	; 0x01
    2e9c:	91 11       	cpse	r25, r1
    2e9e:	05 c0       	rjmp	.+10     	; 0x2eaa <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x7e>
    2ea0:	80 e0       	ldi	r24, 0x00	; 0
    2ea2:	03 c0       	rjmp	.+6      	; 0x2eaa <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x7e>
    2ea4:	84 e0       	ldi	r24, 0x04	; 4
    2ea6:	01 c0       	rjmp	.+2      	; 0x2eaa <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x7e>
    2ea8:	81 e0       	ldi	r24, 0x01	; 1
    2eaa:	0f 90       	pop	r0
    2eac:	0f 90       	pop	r0
    2eae:	df 91       	pop	r29
    2eb0:	cf 91       	pop	r28
    2eb2:	1f 91       	pop	r17
    2eb4:	0f 91       	pop	r16
    2eb6:	ff 90       	pop	r15
    2eb8:	ef 90       	pop	r14
    2eba:	cf 90       	pop	r12
    2ebc:	af 90       	pop	r10
    2ebe:	9f 90       	pop	r9
    2ec0:	8f 90       	pop	r8
    2ec2:	7f 90       	pop	r7
    2ec4:	6f 90       	pop	r6
    2ec6:	5f 90       	pop	r5
    2ec8:	4f 90       	pop	r4
    2eca:	08 95       	ret

00002ecc <_ZN7MFRC52213PICC_RequestAEPhS0_>:
    2ecc:	9a 01       	movw	r18, r20
    2ece:	ab 01       	movw	r20, r22
    2ed0:	66 e2       	ldi	r22, 0x26	; 38
    2ed2:	0c 94 16 17 	jmp	0x2e2c	; 0x2e2c <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_>

00002ed6 <_ZN7MFRC52221PICC_IsNewCardPresentEv>:
    2ed6:	0f 93       	push	r16
    2ed8:	1f 93       	push	r17
    2eda:	cf 93       	push	r28
    2edc:	df 93       	push	r29
    2ede:	00 d0       	rcall	.+0      	; 0x2ee0 <_ZN7MFRC52221PICC_IsNewCardPresentEv+0xa>
    2ee0:	1f 92       	push	r1
    2ee2:	cd b7       	in	r28, 0x3d	; 61
    2ee4:	de b7       	in	r29, 0x3e	; 62
    2ee6:	8c 01       	movw	r16, r24
    2ee8:	82 e0       	ldi	r24, 0x02	; 2
    2eea:	8b 83       	std	Y+3, r24	; 0x03
    2eec:	40 e0       	ldi	r20, 0x00	; 0
    2eee:	64 e2       	ldi	r22, 0x24	; 36
    2ef0:	c8 01       	movw	r24, r16
    2ef2:	0e 94 ff 12 	call	0x25fe	; 0x25fe <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    2ef6:	40 e0       	ldi	r20, 0x00	; 0
    2ef8:	66 e2       	ldi	r22, 0x26	; 38
    2efa:	c8 01       	movw	r24, r16
    2efc:	0e 94 ff 12 	call	0x25fe	; 0x25fe <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    2f00:	46 e2       	ldi	r20, 0x26	; 38
    2f02:	68 e4       	ldi	r22, 0x48	; 72
    2f04:	c8 01       	movw	r24, r16
    2f06:	0e 94 ff 12 	call	0x25fe	; 0x25fe <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    2f0a:	ae 01       	movw	r20, r28
    2f0c:	4d 5f       	subi	r20, 0xFD	; 253
    2f0e:	5f 4f       	sbci	r21, 0xFF	; 255
    2f10:	be 01       	movw	r22, r28
    2f12:	6f 5f       	subi	r22, 0xFF	; 255
    2f14:	7f 4f       	sbci	r23, 0xFF	; 255
    2f16:	c8 01       	movw	r24, r16
    2f18:	0e 94 66 17 	call	0x2ecc	; 0x2ecc <_ZN7MFRC52213PICC_RequestAEPhS0_>
    2f1c:	98 2f       	mov	r25, r24
    2f1e:	81 e0       	ldi	r24, 0x01	; 1
    2f20:	99 23       	and	r25, r25
    2f22:	19 f0       	breq	.+6      	; 0x2f2a <_ZN7MFRC52221PICC_IsNewCardPresentEv+0x54>
    2f24:	92 30       	cpi	r25, 0x02	; 2
    2f26:	09 f0       	breq	.+2      	; 0x2f2a <_ZN7MFRC52221PICC_IsNewCardPresentEv+0x54>
    2f28:	80 e0       	ldi	r24, 0x00	; 0
    2f2a:	0f 90       	pop	r0
    2f2c:	0f 90       	pop	r0
    2f2e:	0f 90       	pop	r0
    2f30:	df 91       	pop	r29
    2f32:	cf 91       	pop	r28
    2f34:	1f 91       	pop	r17
    2f36:	0f 91       	pop	r16
    2f38:	08 95       	ret

00002f3a <_ZN7MFRC52210PICC_HaltAEv>:
/**
 * Instructs a PICC in state ACTIVE(*) to go to state HALT.
 *
 * @return STATUS_OK on success, STATUS_??? otherwise.
 */ 
MFRC522::StatusCode MFRC522::PICC_HaltA() {
    2f3a:	8f 92       	push	r8
    2f3c:	9f 92       	push	r9
    2f3e:	af 92       	push	r10
    2f40:	cf 92       	push	r12
    2f42:	ef 92       	push	r14
    2f44:	ff 92       	push	r15
    2f46:	0f 93       	push	r16
    2f48:	1f 93       	push	r17
    2f4a:	cf 93       	push	r28
    2f4c:	df 93       	push	r29
    2f4e:	00 d0       	rcall	.+0      	; 0x2f50 <_ZN7MFRC52210PICC_HaltAEv+0x16>
    2f50:	00 d0       	rcall	.+0      	; 0x2f52 <_ZN7MFRC52210PICC_HaltAEv+0x18>
    2f52:	cd b7       	in	r28, 0x3d	; 61
    2f54:	de b7       	in	r29, 0x3e	; 62
    2f56:	4c 01       	movw	r8, r24
	MFRC522::StatusCode result;
	byte buffer[4];
	
	// Build command buffer
	buffer[0] = PICC_CMD_HLTA;
    2f58:	80 e5       	ldi	r24, 0x50	; 80
    2f5a:	89 83       	std	Y+1, r24	; 0x01
	buffer[1] = 0;
    2f5c:	1a 82       	std	Y+2, r1	; 0x02
	// Calculate CRC_A
	result = PCD_CalculateCRC(buffer, 2, &buffer[2]);
    2f5e:	9e 01       	movw	r18, r28
    2f60:	2d 5f       	subi	r18, 0xFD	; 253
    2f62:	3f 4f       	sbci	r19, 0xFF	; 255
    2f64:	42 e0       	ldi	r20, 0x02	; 2
    2f66:	be 01       	movw	r22, r28
    2f68:	6f 5f       	subi	r22, 0xFF	; 255
    2f6a:	7f 4f       	sbci	r23, 0xFF	; 255
    2f6c:	c4 01       	movw	r24, r8
    2f6e:	0e 94 9e 13 	call	0x273c	; 0x273c <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
	if (result != STATUS_OK) {
    2f72:	81 11       	cpse	r24, r1
    2f74:	16 c0       	rjmp	.+44     	; 0x2fa2 <_ZN7MFRC52210PICC_HaltAEv+0x68>
	// Send the command.
	// The standard says:
	//		If the PICC responds with any modulation during a period of 1 ms after the end of the frame containing the
	//		HLTA command, this response shall be interpreted as 'not acknowledge'.
	// We interpret that this way: Only STATUS_TIMEOUT is a success.
	result = PCD_TransceiveData(buffer, sizeof(buffer), nullptr, 0);
    2f76:	a1 2c       	mov	r10, r1
    2f78:	c1 2c       	mov	r12, r1
    2f7a:	e1 2c       	mov	r14, r1
    2f7c:	f1 2c       	mov	r15, r1
    2f7e:	00 e0       	ldi	r16, 0x00	; 0
    2f80:	10 e0       	ldi	r17, 0x00	; 0
    2f82:	20 e0       	ldi	r18, 0x00	; 0
    2f84:	30 e0       	ldi	r19, 0x00	; 0
    2f86:	44 e0       	ldi	r20, 0x04	; 4
    2f88:	be 01       	movw	r22, r28
    2f8a:	6f 5f       	subi	r22, 0xFF	; 255
    2f8c:	7f 4f       	sbci	r23, 0xFF	; 255
    2f8e:	c4 01       	movw	r24, r8
    2f90:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
	if (result == STATUS_TIMEOUT) {
    2f94:	83 30       	cpi	r24, 0x03	; 3
    2f96:	21 f0       	breq	.+8      	; 0x2fa0 <_ZN7MFRC52210PICC_HaltAEv+0x66>
		return STATUS_OK;
	}
	if (result == STATUS_OK) { // That is ironically NOT ok in this case ;-)
    2f98:	81 11       	cpse	r24, r1
    2f9a:	03 c0       	rjmp	.+6      	; 0x2fa2 <_ZN7MFRC52210PICC_HaltAEv+0x68>
		return STATUS_ERROR;
    2f9c:	81 e0       	ldi	r24, 0x01	; 1
    2f9e:	01 c0       	rjmp	.+2      	; 0x2fa2 <_ZN7MFRC52210PICC_HaltAEv+0x68>
	//		If the PICC responds with any modulation during a period of 1 ms after the end of the frame containing the
	//		HLTA command, this response shall be interpreted as 'not acknowledge'.
	// We interpret that this way: Only STATUS_TIMEOUT is a success.
	result = PCD_TransceiveData(buffer, sizeof(buffer), nullptr, 0);
	if (result == STATUS_TIMEOUT) {
		return STATUS_OK;
    2fa0:	80 e0       	ldi	r24, 0x00	; 0
	}
	if (result == STATUS_OK) { // That is ironically NOT ok in this case ;-)
		return STATUS_ERROR;
	}
	return result;
} // End PICC_HaltA()
    2fa2:	0f 90       	pop	r0
    2fa4:	0f 90       	pop	r0
    2fa6:	0f 90       	pop	r0
    2fa8:	0f 90       	pop	r0
    2faa:	df 91       	pop	r29
    2fac:	cf 91       	pop	r28
    2fae:	1f 91       	pop	r17
    2fb0:	0f 91       	pop	r16
    2fb2:	ff 90       	pop	r15
    2fb4:	ef 90       	pop	r14
    2fb6:	cf 90       	pop	r12
    2fb8:	af 90       	pop	r10
    2fba:	9f 90       	pop	r9
    2fbc:	8f 90       	pop	r8
    2fbe:	08 95       	ret

00002fc0 <_ZL9date2daysjhh>:

static void write_i2c_register(uint8_t addr, uint8_t reg, uint8_t val) {
  Wire.beginTransmission(addr);
  Wire._I2C_WRITE((byte)reg);
  Wire._I2C_WRITE((byte)val);
  Wire.endTransmission();
    2fc0:	80 3d       	cpi	r24, 0xD0	; 208
    2fc2:	27 e0       	ldi	r18, 0x07	; 7
    2fc4:	92 07       	cpc	r25, r18
    2fc6:	10 f0       	brcs	.+4      	; 0x2fcc <_ZL9date2daysjhh+0xc>
    2fc8:	80 5d       	subi	r24, 0xD0	; 208
    2fca:	97 40       	sbci	r25, 0x07	; 7
    2fcc:	50 e0       	ldi	r21, 0x00	; 0
    2fce:	e9 ee       	ldi	r30, 0xE9	; 233
    2fd0:	f0 e0       	ldi	r31, 0x00	; 0
    2fd2:	21 e0       	ldi	r18, 0x01	; 1
    2fd4:	26 17       	cp	r18, r22
    2fd6:	30 f4       	brcc	.+12     	; 0x2fe4 <_ZL9date2daysjhh+0x24>
    2fd8:	34 91       	lpm	r19, Z
    2fda:	43 0f       	add	r20, r19
    2fdc:	51 1d       	adc	r21, r1
    2fde:	2f 5f       	subi	r18, 0xFF	; 255
    2fe0:	31 96       	adiw	r30, 0x01	; 1
    2fe2:	f8 cf       	rjmp	.-16     	; 0x2fd4 <_ZL9date2daysjhh+0x14>
    2fe4:	63 30       	cpi	r22, 0x03	; 3
    2fe6:	38 f0       	brcs	.+14     	; 0x2ff6 <_ZL9date2daysjhh+0x36>
    2fe8:	9c 01       	movw	r18, r24
    2fea:	23 70       	andi	r18, 0x03	; 3
    2fec:	33 27       	eor	r19, r19
    2fee:	23 2b       	or	r18, r19
    2ff0:	11 f4       	brne	.+4      	; 0x2ff6 <_ZL9date2daysjhh+0x36>
    2ff2:	4f 5f       	subi	r20, 0xFF	; 255
    2ff4:	5f 4f       	sbci	r21, 0xFF	; 255
    2ff6:	bc 01       	movw	r22, r24
    2ff8:	6d 5f       	subi	r22, 0xFD	; 253
    2ffa:	7f 4f       	sbci	r23, 0xFF	; 255
    2ffc:	76 95       	lsr	r23
    2ffe:	67 95       	ror	r22
    3000:	76 95       	lsr	r23
    3002:	67 95       	ror	r22
    3004:	ed e6       	ldi	r30, 0x6D	; 109
    3006:	f1 e0       	ldi	r31, 0x01	; 1
    3008:	8e 9f       	mul	r24, r30
    300a:	90 01       	movw	r18, r0
    300c:	8f 9f       	mul	r24, r31
    300e:	30 0d       	add	r19, r0
    3010:	9e 9f       	mul	r25, r30
    3012:	30 0d       	add	r19, r0
    3014:	11 24       	eor	r1, r1
    3016:	c9 01       	movw	r24, r18
    3018:	01 97       	sbiw	r24, 0x01	; 1
    301a:	86 0f       	add	r24, r22
    301c:	97 1f       	adc	r25, r23
    301e:	84 0f       	add	r24, r20
    3020:	95 1f       	adc	r25, r21
    3022:	08 95       	ret

00003024 <_ZL6conv2dPKc>:
    3024:	fc 01       	movw	r30, r24
    3026:	90 81       	ld	r25, Z
    3028:	90 53       	subi	r25, 0x30	; 48
    302a:	9a 30       	cpi	r25, 0x0A	; 10
    302c:	08 f0       	brcs	.+2      	; 0x3030 <_ZL6conv2dPKc+0xc>
    302e:	90 e0       	ldi	r25, 0x00	; 0
    3030:	81 81       	ldd	r24, Z+1	; 0x01
    3032:	80 53       	subi	r24, 0x30	; 48
    3034:	2a e0       	ldi	r18, 0x0A	; 10
    3036:	92 9f       	mul	r25, r18
    3038:	80 0d       	add	r24, r0
    303a:	11 24       	eor	r1, r1
    303c:	08 95       	ret

0000303e <_ZN8DateTimeC1Em>:
    303e:	8f 92       	push	r8
    3040:	9f 92       	push	r9
    3042:	af 92       	push	r10
    3044:	bf 92       	push	r11
    3046:	cf 92       	push	r12
    3048:	df 92       	push	r13
    304a:	ef 92       	push	r14
    304c:	ff 92       	push	r15
    304e:	cf 93       	push	r28
    3050:	df 93       	push	r29
    3052:	ec 01       	movw	r28, r24
    3054:	6a 01       	movw	r12, r20
    3056:	7b 01       	movw	r14, r22
    3058:	80 e8       	ldi	r24, 0x80	; 128
    305a:	c8 1a       	sub	r12, r24
    305c:	83 e4       	ldi	r24, 0x43	; 67
    305e:	d8 0a       	sbc	r13, r24
    3060:	8d e6       	ldi	r24, 0x6D	; 109
    3062:	e8 0a       	sbc	r14, r24
    3064:	88 e3       	ldi	r24, 0x38	; 56
    3066:	f8 0a       	sbc	r15, r24
    3068:	8c e3       	ldi	r24, 0x3C	; 60
    306a:	88 2e       	mov	r8, r24
    306c:	91 2c       	mov	r9, r1
    306e:	a1 2c       	mov	r10, r1
    3070:	b1 2c       	mov	r11, r1
    3072:	c7 01       	movw	r24, r14
    3074:	b6 01       	movw	r22, r12
    3076:	a5 01       	movw	r20, r10
    3078:	94 01       	movw	r18, r8
    307a:	0e 94 ad 1e 	call	0x3d5a	; 0x3d5a <__udivmodsi4>
    307e:	6d 83       	std	Y+5, r22	; 0x05
    3080:	ca 01       	movw	r24, r20
    3082:	b9 01       	movw	r22, r18
    3084:	a5 01       	movw	r20, r10
    3086:	94 01       	movw	r18, r8
    3088:	0e 94 ad 1e 	call	0x3d5a	; 0x3d5a <__udivmodsi4>
    308c:	6c 83       	std	Y+4, r22	; 0x04
    308e:	c7 01       	movw	r24, r14
    3090:	b6 01       	movw	r22, r12
    3092:	20 e1       	ldi	r18, 0x10	; 16
    3094:	3e e0       	ldi	r19, 0x0E	; 14
    3096:	40 e0       	ldi	r20, 0x00	; 0
    3098:	50 e0       	ldi	r21, 0x00	; 0
    309a:	0e 94 ad 1e 	call	0x3d5a	; 0x3d5a <__udivmodsi4>
    309e:	ca 01       	movw	r24, r20
    30a0:	b9 01       	movw	r22, r18
    30a2:	28 e1       	ldi	r18, 0x18	; 24
    30a4:	30 e0       	ldi	r19, 0x00	; 0
    30a6:	40 e0       	ldi	r20, 0x00	; 0
    30a8:	50 e0       	ldi	r21, 0x00	; 0
    30aa:	0e 94 ad 1e 	call	0x3d5a	; 0x3d5a <__udivmodsi4>
    30ae:	6b 83       	std	Y+3, r22	; 0x03
    30b0:	c7 01       	movw	r24, r14
    30b2:	b6 01       	movw	r22, r12
    30b4:	20 e8       	ldi	r18, 0x80	; 128
    30b6:	31 e5       	ldi	r19, 0x51	; 81
    30b8:	41 e0       	ldi	r20, 0x01	; 1
    30ba:	50 e0       	ldi	r21, 0x00	; 0
    30bc:	0e 94 ad 1e 	call	0x3d5a	; 0x3d5a <__udivmodsi4>
    30c0:	18 82       	st	Y, r1
    30c2:	48 81       	ld	r20, Y
    30c4:	54 2f       	mov	r21, r20
    30c6:	53 70       	andi	r21, 0x03	; 3
    30c8:	81 e0       	ldi	r24, 0x01	; 1
    30ca:	09 f0       	breq	.+2      	; 0x30ce <_ZN8DateTimeC1Em+0x90>
    30cc:	80 e0       	ldi	r24, 0x00	; 0
    30ce:	90 e0       	ldi	r25, 0x00	; 0
    30d0:	bc 01       	movw	r22, r24
    30d2:	63 59       	subi	r22, 0x93	; 147
    30d4:	7e 4f       	sbci	r23, 0xFE	; 254
    30d6:	26 17       	cp	r18, r22
    30d8:	37 07       	cpc	r19, r23
    30da:	38 f0       	brcs	.+14     	; 0x30ea <_ZN8DateTimeC1Em+0xac>
    30dc:	28 1b       	sub	r18, r24
    30de:	39 0b       	sbc	r19, r25
    30e0:	2d 56       	subi	r18, 0x6D	; 109
    30e2:	31 40       	sbci	r19, 0x01	; 1
    30e4:	4f 5f       	subi	r20, 0xFF	; 255
    30e6:	48 83       	st	Y, r20
    30e8:	ec cf       	rjmp	.-40     	; 0x30c2 <_ZN8DateTimeC1Em+0x84>
    30ea:	81 e0       	ldi	r24, 0x01	; 1
    30ec:	89 83       	std	Y+1, r24	; 0x01
    30ee:	89 81       	ldd	r24, Y+1	; 0x01
    30f0:	e8 2f       	mov	r30, r24
    30f2:	f0 e0       	ldi	r31, 0x00	; 0
    30f4:	e8 51       	subi	r30, 0x18	; 24
    30f6:	ff 4f       	sbci	r31, 0xFF	; 255
    30f8:	e4 91       	lpm	r30, Z
    30fa:	51 11       	cpse	r21, r1
    30fc:	03 c0       	rjmp	.+6      	; 0x3104 <_ZN8DateTimeC1Em+0xc6>
    30fe:	82 30       	cpi	r24, 0x02	; 2
    3100:	09 f4       	brne	.+2      	; 0x3104 <_ZN8DateTimeC1Em+0xc6>
    3102:	ef 5f       	subi	r30, 0xFF	; 255
    3104:	f0 e0       	ldi	r31, 0x00	; 0
    3106:	2e 17       	cp	r18, r30
    3108:	3f 07       	cpc	r19, r31
    310a:	20 f0       	brcs	.+8      	; 0x3114 <_ZN8DateTimeC1Em+0xd6>
    310c:	2e 1b       	sub	r18, r30
    310e:	3f 0b       	sbc	r19, r31
    3110:	8f 5f       	subi	r24, 0xFF	; 255
    3112:	ec cf       	rjmp	.-40     	; 0x30ec <_ZN8DateTimeC1Em+0xae>
    3114:	2f 5f       	subi	r18, 0xFF	; 255
    3116:	2a 83       	std	Y+2, r18	; 0x02
    3118:	df 91       	pop	r29
    311a:	cf 91       	pop	r28
    311c:	ff 90       	pop	r15
    311e:	ef 90       	pop	r14
    3120:	df 90       	pop	r13
    3122:	cf 90       	pop	r12
    3124:	bf 90       	pop	r11
    3126:	af 90       	pop	r10
    3128:	9f 90       	pop	r9
    312a:	8f 90       	pop	r8
    312c:	08 95       	ret

0000312e <_ZN8DateTimeC1Ejhhhhh>:
    312e:	cf 92       	push	r12
    3130:	ef 92       	push	r14
    3132:	0f 93       	push	r16
    3134:	fc 01       	movw	r30, r24
    3136:	60 3d       	cpi	r22, 0xD0	; 208
    3138:	87 e0       	ldi	r24, 0x07	; 7
    313a:	78 07       	cpc	r23, r24
    313c:	10 f0       	brcs	.+4      	; 0x3142 <_ZN8DateTimeC1Ejhhhhh+0x14>
    313e:	60 5d       	subi	r22, 0xD0	; 208
    3140:	77 40       	sbci	r23, 0x07	; 7
    3142:	60 83       	st	Z, r22
    3144:	41 83       	std	Z+1, r20	; 0x01
    3146:	22 83       	std	Z+2, r18	; 0x02
    3148:	03 83       	std	Z+3, r16	; 0x03
    314a:	e4 82       	std	Z+4, r14	; 0x04
    314c:	c5 82       	std	Z+5, r12	; 0x05
    314e:	0f 91       	pop	r16
    3150:	ef 90       	pop	r14
    3152:	cf 90       	pop	r12
    3154:	08 95       	ret

00003156 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_>:
    3156:	ef 92       	push	r14
    3158:	ff 92       	push	r15
    315a:	0f 93       	push	r16
    315c:	1f 93       	push	r17
    315e:	cf 93       	push	r28
    3160:	df 93       	push	r29
    3162:	cd b7       	in	r28, 0x3d	; 61
    3164:	de b7       	in	r29, 0x3e	; 62
    3166:	2b 97       	sbiw	r28, 0x0b	; 11
    3168:	0f b6       	in	r0, 0x3f	; 63
    316a:	f8 94       	cli
    316c:	de bf       	out	0x3e, r29	; 62
    316e:	0f be       	out	0x3f, r0	; 63
    3170:	cd bf       	out	0x3d, r28	; 61
    3172:	8c 01       	movw	r16, r24
    3174:	7a 01       	movw	r14, r20
    3176:	4b e0       	ldi	r20, 0x0B	; 11
    3178:	50 e0       	ldi	r21, 0x00	; 0
    317a:	ce 01       	movw	r24, r28
    317c:	01 96       	adiw	r24, 0x01	; 1
    317e:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <memcpy_P>
    3182:	ce 01       	movw	r24, r28
    3184:	0a 96       	adiw	r24, 0x0a	; 10
    3186:	0e 94 12 18 	call	0x3024	; 0x3024 <_ZL6conv2dPKc>
    318a:	f8 01       	movw	r30, r16
    318c:	80 83       	st	Z, r24
    318e:	e9 81       	ldd	r30, Y+1	; 0x01
    3190:	8e 2f       	mov	r24, r30
    3192:	90 e0       	ldi	r25, 0x00	; 0
    3194:	fc 01       	movw	r30, r24
    3196:	e1 54       	subi	r30, 0x41	; 65
    3198:	f1 09       	sbc	r31, r1
    319a:	e3 31       	cpi	r30, 0x13	; 19
    319c:	f1 05       	cpc	r31, r1
    319e:	48 f5       	brcc	.+82     	; 0x31f2 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x9c>
    31a0:	ec 5c       	subi	r30, 0xCC	; 204
    31a2:	ff 4f       	sbci	r31, 0xFF	; 255
    31a4:	0c 94 ee 1e 	jmp	0x3ddc	; 0x3ddc <__tablejump2__>
    31a8:	8a 81       	ldd	r24, Y+2	; 0x02
    31aa:	81 36       	cpi	r24, 0x61	; 97
    31ac:	39 f0       	breq	.+14     	; 0x31bc <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x66>
    31ae:	8b 81       	ldd	r24, Y+3	; 0x03
    31b0:	8e 36       	cpi	r24, 0x6E	; 110
    31b2:	11 f0       	breq	.+4      	; 0x31b8 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x62>
    31b4:	87 e0       	ldi	r24, 0x07	; 7
    31b6:	1b c0       	rjmp	.+54     	; 0x31ee <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x98>
    31b8:	86 e0       	ldi	r24, 0x06	; 6
    31ba:	19 c0       	rjmp	.+50     	; 0x31ee <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x98>
    31bc:	81 e0       	ldi	r24, 0x01	; 1
    31be:	17 c0       	rjmp	.+46     	; 0x31ee <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x98>
    31c0:	82 e0       	ldi	r24, 0x02	; 2
    31c2:	15 c0       	rjmp	.+42     	; 0x31ee <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x98>
    31c4:	8b 81       	ldd	r24, Y+3	; 0x03
    31c6:	82 37       	cpi	r24, 0x72	; 114
    31c8:	11 f0       	breq	.+4      	; 0x31ce <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x78>
    31ca:	88 e0       	ldi	r24, 0x08	; 8
    31cc:	10 c0       	rjmp	.+32     	; 0x31ee <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x98>
    31ce:	84 e0       	ldi	r24, 0x04	; 4
    31d0:	0e c0       	rjmp	.+28     	; 0x31ee <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x98>
    31d2:	8b 81       	ldd	r24, Y+3	; 0x03
    31d4:	82 37       	cpi	r24, 0x72	; 114
    31d6:	11 f0       	breq	.+4      	; 0x31dc <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x86>
    31d8:	85 e0       	ldi	r24, 0x05	; 5
    31da:	09 c0       	rjmp	.+18     	; 0x31ee <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x98>
    31dc:	83 e0       	ldi	r24, 0x03	; 3
    31de:	07 c0       	rjmp	.+14     	; 0x31ee <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x98>
    31e0:	89 e0       	ldi	r24, 0x09	; 9
    31e2:	05 c0       	rjmp	.+10     	; 0x31ee <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x98>
    31e4:	8a e0       	ldi	r24, 0x0A	; 10
    31e6:	03 c0       	rjmp	.+6      	; 0x31ee <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x98>
    31e8:	8b e0       	ldi	r24, 0x0B	; 11
    31ea:	01 c0       	rjmp	.+2      	; 0x31ee <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x98>
    31ec:	8c e0       	ldi	r24, 0x0C	; 12
    31ee:	f8 01       	movw	r30, r16
    31f0:	81 83       	std	Z+1, r24	; 0x01
    31f2:	ce 01       	movw	r24, r28
    31f4:	05 96       	adiw	r24, 0x05	; 5
    31f6:	0e 94 12 18 	call	0x3024	; 0x3024 <_ZL6conv2dPKc>
    31fa:	f8 01       	movw	r30, r16
    31fc:	82 83       	std	Z+2, r24	; 0x02
    31fe:	48 e0       	ldi	r20, 0x08	; 8
    3200:	50 e0       	ldi	r21, 0x00	; 0
    3202:	b7 01       	movw	r22, r14
    3204:	ce 01       	movw	r24, r28
    3206:	01 96       	adiw	r24, 0x01	; 1
    3208:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <memcpy_P>
    320c:	ce 01       	movw	r24, r28
    320e:	01 96       	adiw	r24, 0x01	; 1
    3210:	0e 94 12 18 	call	0x3024	; 0x3024 <_ZL6conv2dPKc>
    3214:	f8 01       	movw	r30, r16
    3216:	83 83       	std	Z+3, r24	; 0x03
    3218:	ce 01       	movw	r24, r28
    321a:	04 96       	adiw	r24, 0x04	; 4
    321c:	0e 94 12 18 	call	0x3024	; 0x3024 <_ZL6conv2dPKc>
    3220:	f8 01       	movw	r30, r16
    3222:	84 83       	std	Z+4, r24	; 0x04
    3224:	ce 01       	movw	r24, r28
    3226:	07 96       	adiw	r24, 0x07	; 7
    3228:	0e 94 12 18 	call	0x3024	; 0x3024 <_ZL6conv2dPKc>
    322c:	f8 01       	movw	r30, r16
    322e:	85 83       	std	Z+5, r24	; 0x05
    3230:	2b 96       	adiw	r28, 0x0b	; 11
    3232:	0f b6       	in	r0, 0x3f	; 63
    3234:	f8 94       	cli
    3236:	de bf       	out	0x3e, r29	; 62
    3238:	0f be       	out	0x3f, r0	; 63
    323a:	cd bf       	out	0x3d, r28	; 61
    323c:	df 91       	pop	r29
    323e:	cf 91       	pop	r28
    3240:	1f 91       	pop	r17
    3242:	0f 91       	pop	r16
    3244:	ff 90       	pop	r15
    3246:	ef 90       	pop	r14
    3248:	08 95       	ret

0000324a <_ZNK8DateTime8unixtimeEv>:
    324a:	ef 92       	push	r14
    324c:	ff 92       	push	r15
    324e:	0f 93       	push	r16
    3250:	1f 93       	push	r17
    3252:	cf 93       	push	r28
    3254:	df 93       	push	r29
    3256:	ec 01       	movw	r28, r24
    3258:	88 81       	ld	r24, Y
    325a:	4a 81       	ldd	r20, Y+2	; 0x02
    325c:	69 81       	ldd	r22, Y+1	; 0x01
    325e:	90 e0       	ldi	r25, 0x00	; 0
    3260:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <_ZL9date2daysjhh>
    3264:	9c 01       	movw	r18, r24
    3266:	a8 e1       	ldi	r26, 0x18	; 24
    3268:	b0 e0       	ldi	r27, 0x00	; 0
    326a:	0e 94 f4 1e 	call	0x3de8	; 0x3de8 <__umulhisi3>
    326e:	2b 81       	ldd	r18, Y+3	; 0x03
    3270:	7b 01       	movw	r14, r22
    3272:	8c 01       	movw	r16, r24
    3274:	e2 0e       	add	r14, r18
    3276:	f1 1c       	adc	r15, r1
    3278:	01 1d       	adc	r16, r1
    327a:	11 1d       	adc	r17, r1
    327c:	a8 01       	movw	r20, r16
    327e:	97 01       	movw	r18, r14
    3280:	ac e3       	ldi	r26, 0x3C	; 60
    3282:	b0 e0       	ldi	r27, 0x00	; 0
    3284:	0e 94 03 1f 	call	0x3e06	; 0x3e06 <__muluhisi3>
    3288:	2c 81       	ldd	r18, Y+4	; 0x04
    328a:	7b 01       	movw	r14, r22
    328c:	8c 01       	movw	r16, r24
    328e:	e2 0e       	add	r14, r18
    3290:	f1 1c       	adc	r15, r1
    3292:	01 1d       	adc	r16, r1
    3294:	11 1d       	adc	r17, r1
    3296:	a8 01       	movw	r20, r16
    3298:	97 01       	movw	r18, r14
    329a:	0e 94 03 1f 	call	0x3e06	; 0x3e06 <__muluhisi3>
    329e:	2d 81       	ldd	r18, Y+5	; 0x05
    32a0:	dc 01       	movw	r26, r24
    32a2:	cb 01       	movw	r24, r22
    32a4:	82 0f       	add	r24, r18
    32a6:	91 1d       	adc	r25, r1
    32a8:	a1 1d       	adc	r26, r1
    32aa:	b1 1d       	adc	r27, r1
    32ac:	bc 01       	movw	r22, r24
    32ae:	cd 01       	movw	r24, r26
    32b0:	60 58       	subi	r22, 0x80	; 128
    32b2:	7c 4b       	sbci	r23, 0xBC	; 188
    32b4:	82 49       	sbci	r24, 0x92	; 146
    32b6:	97 4c       	sbci	r25, 0xC7	; 199
    32b8:	df 91       	pop	r29
    32ba:	cf 91       	pop	r28
    32bc:	1f 91       	pop	r17
    32be:	0f 91       	pop	r16
    32c0:	ff 90       	pop	r15
    32c2:	ef 90       	pop	r14
    32c4:	08 95       	ret

000032c6 <_ZN8DateTimemiERKS_>:
    32c6:	cf 92       	push	r12
    32c8:	df 92       	push	r13
    32ca:	ef 92       	push	r14
    32cc:	ff 92       	push	r15
    32ce:	0f 93       	push	r16
    32d0:	1f 93       	push	r17
    32d2:	cf 93       	push	r28
    32d4:	df 93       	push	r29
    32d6:	ec 01       	movw	r28, r24
    32d8:	cb 01       	movw	r24, r22
    32da:	8a 01       	movw	r16, r20
    32dc:	0e 94 25 19 	call	0x324a	; 0x324a <_ZNK8DateTime8unixtimeEv>
    32e0:	6b 01       	movw	r12, r22
    32e2:	7c 01       	movw	r14, r24
    32e4:	c8 01       	movw	r24, r16
    32e6:	0e 94 25 19 	call	0x324a	; 0x324a <_ZNK8DateTime8unixtimeEv>
    32ea:	c6 1a       	sub	r12, r22
    32ec:	d7 0a       	sbc	r13, r23
    32ee:	e8 0a       	sbc	r14, r24
    32f0:	f9 0a       	sbc	r15, r25
    32f2:	c8 82       	st	Y, r12
    32f4:	d9 82       	std	Y+1, r13	; 0x01
    32f6:	ea 82       	std	Y+2, r14	; 0x02
    32f8:	fb 82       	std	Y+3, r15	; 0x03
    32fa:	ce 01       	movw	r24, r28
    32fc:	df 91       	pop	r29
    32fe:	cf 91       	pop	r28
    3300:	1f 91       	pop	r17
    3302:	0f 91       	pop	r16
    3304:	ff 90       	pop	r15
    3306:	ef 90       	pop	r14
    3308:	df 90       	pop	r13
    330a:	cf 90       	pop	r12
    330c:	08 95       	ret

0000330e <_ZN10RTC_DS32315beginEv>:
    330e:	8c e5       	ldi	r24, 0x5C	; 92
    3310:	93 e0       	ldi	r25, 0x03	; 3
    3312:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <_ZN7TwoWire5beginEv>
    3316:	81 e0       	ldi	r24, 0x01	; 1
    3318:	08 95       	ret

0000331a <_ZN10RTC_DS32313nowEv>:
    331a:	cf 92       	push	r12
    331c:	df 92       	push	r13
    331e:	ef 92       	push	r14
    3320:	ff 92       	push	r15
    3322:	0f 93       	push	r16
    3324:	1f 93       	push	r17
    3326:	cf 93       	push	r28
    3328:	df 93       	push	r29
    332a:	ec 01       	movw	r28, r24
    332c:	68 e6       	ldi	r22, 0x68	; 104
    332e:	70 e0       	ldi	r23, 0x00	; 0
    3330:	8c e5       	ldi	r24, 0x5C	; 92
    3332:	93 e0       	ldi	r25, 0x03	; 3
    3334:	0e 94 ef 1b 	call	0x37de	; 0x37de <_ZN7TwoWire17beginTransmissionEi>
    3338:	60 e0       	ldi	r22, 0x00	; 0
    333a:	8c e5       	ldi	r24, 0x5C	; 92
    333c:	93 e0       	ldi	r25, 0x03	; 3
    333e:	0e 94 94 1b 	call	0x3728	; 0x3728 <_ZN7TwoWire5writeEh>
    3342:	8c e5       	ldi	r24, 0x5C	; 92
    3344:	93 e0       	ldi	r25, 0x03	; 3
    3346:	0e 94 6e 1c 	call	0x38dc	; 0x38dc <_ZN7TwoWire15endTransmissionEv>
    334a:	47 e0       	ldi	r20, 0x07	; 7
    334c:	50 e0       	ldi	r21, 0x00	; 0
    334e:	68 e6       	ldi	r22, 0x68	; 104
    3350:	70 e0       	ldi	r23, 0x00	; 0
    3352:	8c e5       	ldi	r24, 0x5C	; 92
    3354:	93 e0       	ldi	r25, 0x03	; 3
    3356:	0e 94 6b 1c 	call	0x38d6	; 0x38d6 <_ZN7TwoWire11requestFromEii>
    335a:	8c e5       	ldi	r24, 0x5C	; 92
    335c:	93 e0       	ldi	r25, 0x03	; 3
    335e:	0e 94 0d 1b 	call	0x361a	; 0x361a <_ZN7TwoWire4readEv>
    3362:	8f 77       	andi	r24, 0x7F	; 127
    3364:	98 2f       	mov	r25, r24
    3366:	92 95       	swap	r25
    3368:	9f 70       	andi	r25, 0x0F	; 15
    336a:	1a ef       	ldi	r17, 0xFA	; 250
    336c:	08 2f       	mov	r16, r24
    336e:	91 9f       	mul	r25, r17
    3370:	00 0d       	add	r16, r0
    3372:	11 24       	eor	r1, r1
    3374:	8c e5       	ldi	r24, 0x5C	; 92
    3376:	93 e0       	ldi	r25, 0x03	; 3
    3378:	0e 94 0d 1b 	call	0x361a	; 0x361a <_ZN7TwoWire4readEv>
    337c:	9c 01       	movw	r18, r24
    337e:	33 27       	eor	r19, r19
    3380:	94 e0       	ldi	r25, 0x04	; 4
    3382:	35 95       	asr	r19
    3384:	27 95       	ror	r18
    3386:	9a 95       	dec	r25
    3388:	e1 f7       	brne	.-8      	; 0x3382 <_ZN10RTC_DS32313nowEv+0x68>
    338a:	f8 2e       	mov	r15, r24
    338c:	12 9f       	mul	r17, r18
    338e:	f0 0c       	add	r15, r0
    3390:	11 24       	eor	r1, r1
    3392:	8c e5       	ldi	r24, 0x5C	; 92
    3394:	93 e0       	ldi	r25, 0x03	; 3
    3396:	0e 94 0d 1b 	call	0x361a	; 0x361a <_ZN7TwoWire4readEv>
    339a:	9c 01       	movw	r18, r24
    339c:	33 27       	eor	r19, r19
    339e:	44 e0       	ldi	r20, 0x04	; 4
    33a0:	35 95       	asr	r19
    33a2:	27 95       	ror	r18
    33a4:	4a 95       	dec	r20
    33a6:	e1 f7       	brne	.-8      	; 0x33a0 <_ZN10RTC_DS32313nowEv+0x86>
    33a8:	e8 2e       	mov	r14, r24
    33aa:	12 9f       	mul	r17, r18
    33ac:	e0 0c       	add	r14, r0
    33ae:	11 24       	eor	r1, r1
    33b0:	8c e5       	ldi	r24, 0x5C	; 92
    33b2:	93 e0       	ldi	r25, 0x03	; 3
    33b4:	0e 94 0d 1b 	call	0x361a	; 0x361a <_ZN7TwoWire4readEv>
    33b8:	8c e5       	ldi	r24, 0x5C	; 92
    33ba:	93 e0       	ldi	r25, 0x03	; 3
    33bc:	0e 94 0d 1b 	call	0x361a	; 0x361a <_ZN7TwoWire4readEv>
    33c0:	9c 01       	movw	r18, r24
    33c2:	33 27       	eor	r19, r19
    33c4:	54 e0       	ldi	r21, 0x04	; 4
    33c6:	35 95       	asr	r19
    33c8:	27 95       	ror	r18
    33ca:	5a 95       	dec	r21
    33cc:	e1 f7       	brne	.-8      	; 0x33c6 <_ZN10RTC_DS32313nowEv+0xac>
    33ce:	d8 2e       	mov	r13, r24
    33d0:	12 9f       	mul	r17, r18
    33d2:	d0 0c       	add	r13, r0
    33d4:	11 24       	eor	r1, r1
    33d6:	8c e5       	ldi	r24, 0x5C	; 92
    33d8:	93 e0       	ldi	r25, 0x03	; 3
    33da:	0e 94 0d 1b 	call	0x361a	; 0x361a <_ZN7TwoWire4readEv>
    33de:	9c 01       	movw	r18, r24
    33e0:	33 27       	eor	r19, r19
    33e2:	64 e0       	ldi	r22, 0x04	; 4
    33e4:	35 95       	asr	r19
    33e6:	27 95       	ror	r18
    33e8:	6a 95       	dec	r22
    33ea:	e1 f7       	brne	.-8      	; 0x33e4 <_ZN10RTC_DS32313nowEv+0xca>
    33ec:	c8 2e       	mov	r12, r24
    33ee:	12 9f       	mul	r17, r18
    33f0:	c0 0c       	add	r12, r0
    33f2:	11 24       	eor	r1, r1
    33f4:	8c e5       	ldi	r24, 0x5C	; 92
    33f6:	93 e0       	ldi	r25, 0x03	; 3
    33f8:	0e 94 0d 1b 	call	0x361a	; 0x361a <_ZN7TwoWire4readEv>
    33fc:	9c 01       	movw	r18, r24
    33fe:	33 27       	eor	r19, r19
    3400:	74 e0       	ldi	r23, 0x04	; 4
    3402:	35 95       	asr	r19
    3404:	27 95       	ror	r18
    3406:	7a 95       	dec	r23
    3408:	e1 f7       	brne	.-8      	; 0x3402 <_ZN10RTC_DS32313nowEv+0xe8>
    340a:	12 9f       	mul	r17, r18
    340c:	80 0d       	add	r24, r0
    340e:	11 24       	eor	r1, r1
    3410:	88 83       	st	Y, r24
    3412:	c9 82       	std	Y+1, r12	; 0x01
    3414:	da 82       	std	Y+2, r13	; 0x02
    3416:	eb 82       	std	Y+3, r14	; 0x03
    3418:	fc 82       	std	Y+4, r15	; 0x04
    341a:	0d 83       	std	Y+5, r16	; 0x05
    341c:	ce 01       	movw	r24, r28
    341e:	df 91       	pop	r29
    3420:	cf 91       	pop	r28
    3422:	1f 91       	pop	r17
    3424:	0f 91       	pop	r16
    3426:	ff 90       	pop	r15
    3428:	ef 90       	pop	r14
    342a:	df 90       	pop	r13
    342c:	cf 90       	pop	r12
    342e:	08 95       	ret

00003430 <_ZL17read_i2c_registerhh.constprop.7>:
    3430:	cf 93       	push	r28
    3432:	c8 2f       	mov	r28, r24
    3434:	68 e6       	ldi	r22, 0x68	; 104
    3436:	8c e5       	ldi	r24, 0x5C	; 92
    3438:	93 e0       	ldi	r25, 0x03	; 3
    343a:	0e 94 e5 1b 	call	0x37ca	; 0x37ca <_ZN7TwoWire17beginTransmissionEh>
    343e:	6c 2f       	mov	r22, r28
    3440:	8c e5       	ldi	r24, 0x5C	; 92
    3442:	93 e0       	ldi	r25, 0x03	; 3
    3444:	0e 94 94 1b 	call	0x3728	; 0x3728 <_ZN7TwoWire5writeEh>
    3448:	8c e5       	ldi	r24, 0x5C	; 92
    344a:	93 e0       	ldi	r25, 0x03	; 3
    344c:	0e 94 6e 1c 	call	0x38dc	; 0x38dc <_ZN7TwoWire15endTransmissionEv>
    3450:	41 e0       	ldi	r20, 0x01	; 1
    3452:	68 e6       	ldi	r22, 0x68	; 104
    3454:	8c e5       	ldi	r24, 0x5C	; 92
    3456:	93 e0       	ldi	r25, 0x03	; 3
    3458:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <_ZN7TwoWire11requestFromEhh>
    345c:	8c e5       	ldi	r24, 0x5C	; 92
    345e:	93 e0       	ldi	r25, 0x03	; 3
    3460:	0e 94 0d 1b 	call	0x361a	; 0x361a <_ZN7TwoWire4readEv>
    3464:	cf 91       	pop	r28
    3466:	08 95       	ret

00003468 <_ZN10RTC_DS32316adjustERK8DateTime>:

bool RTC_DS3231::lostPower(void) {
  return (read_i2c_register(DS3231_ADDRESS, DS3231_STATUSREG) >> 7);
}

void RTC_DS3231::adjust(const DateTime& dt) {
    3468:	0f 93       	push	r16
    346a:	1f 93       	push	r17
    346c:	cf 93       	push	r28
    346e:	8c 01       	movw	r16, r24
  Wire.beginTransmission(DS3231_ADDRESS);
    3470:	68 e6       	ldi	r22, 0x68	; 104
    3472:	70 e0       	ldi	r23, 0x00	; 0
    3474:	8c e5       	ldi	r24, 0x5C	; 92
    3476:	93 e0       	ldi	r25, 0x03	; 3
    3478:	0e 94 ef 1b 	call	0x37de	; 0x37de <_ZN7TwoWire17beginTransmissionEi>
  Wire._I2C_WRITE((byte)0); // start at location 0
    347c:	60 e0       	ldi	r22, 0x00	; 0
    347e:	8c e5       	ldi	r24, 0x5C	; 92
    3480:	93 e0       	ldi	r25, 0x03	; 3
    3482:	0e 94 94 1b 	call	0x3728	; 0x3728 <_ZN7TwoWire5writeEh>
    3486:	f8 01       	movw	r30, r16
    3488:	25 81       	ldd	r18, Z+5	; 0x05
  Wire._I2C_WRITE(bin2bcd(dt.second()));
    348a:	ca e0       	ldi	r28, 0x0A	; 10
    348c:	82 2f       	mov	r24, r18
    348e:	6c 2f       	mov	r22, r28
    3490:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <__udivmodqi4>
    3494:	68 2f       	mov	r22, r24
    3496:	66 0f       	add	r22, r22
    3498:	86 0f       	add	r24, r22
    349a:	88 0f       	add	r24, r24
    349c:	68 2f       	mov	r22, r24
    349e:	62 0f       	add	r22, r18
    34a0:	8c e5       	ldi	r24, 0x5C	; 92
    34a2:	93 e0       	ldi	r25, 0x03	; 3
    34a4:	0e 94 94 1b 	call	0x3728	; 0x3728 <_ZN7TwoWire5writeEh>
    34a8:	f8 01       	movw	r30, r16
    34aa:	24 81       	ldd	r18, Z+4	; 0x04
  Wire._I2C_WRITE(bin2bcd(dt.minute()));
    34ac:	82 2f       	mov	r24, r18
    34ae:	6c 2f       	mov	r22, r28
    34b0:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <__udivmodqi4>
    34b4:	68 2f       	mov	r22, r24
    34b6:	66 0f       	add	r22, r22
    34b8:	86 0f       	add	r24, r22
    34ba:	88 0f       	add	r24, r24
    34bc:	68 2f       	mov	r22, r24
    34be:	62 0f       	add	r22, r18
    34c0:	8c e5       	ldi	r24, 0x5C	; 92
    34c2:	93 e0       	ldi	r25, 0x03	; 3
    34c4:	0e 94 94 1b 	call	0x3728	; 0x3728 <_ZN7TwoWire5writeEh>
    34c8:	f8 01       	movw	r30, r16
    34ca:	23 81       	ldd	r18, Z+3	; 0x03
  Wire._I2C_WRITE(bin2bcd(dt.hour()));
    34cc:	82 2f       	mov	r24, r18
    34ce:	6c 2f       	mov	r22, r28
    34d0:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <__udivmodqi4>
    34d4:	68 2f       	mov	r22, r24
    34d6:	66 0f       	add	r22, r22
    34d8:	86 0f       	add	r24, r22
    34da:	88 0f       	add	r24, r24
    34dc:	68 2f       	mov	r22, r24
    34de:	62 0f       	add	r22, r18
    34e0:	8c e5       	ldi	r24, 0x5C	; 92
    34e2:	93 e0       	ldi	r25, 0x03	; 3
    34e4:	0e 94 94 1b 	call	0x3728	; 0x3728 <_ZN7TwoWire5writeEh>
  Wire._I2C_WRITE(bin2bcd(0));
    34e8:	60 e0       	ldi	r22, 0x00	; 0
    34ea:	8c e5       	ldi	r24, 0x5C	; 92
    34ec:	93 e0       	ldi	r25, 0x03	; 3
    34ee:	0e 94 94 1b 	call	0x3728	; 0x3728 <_ZN7TwoWire5writeEh>
    34f2:	f8 01       	movw	r30, r16
    34f4:	22 81       	ldd	r18, Z+2	; 0x02
  Wire._I2C_WRITE(bin2bcd(dt.day()));
    34f6:	82 2f       	mov	r24, r18
    34f8:	6c 2f       	mov	r22, r28
    34fa:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <__udivmodqi4>
    34fe:	68 2f       	mov	r22, r24
    3500:	66 0f       	add	r22, r22
    3502:	86 0f       	add	r24, r22
    3504:	88 0f       	add	r24, r24
    3506:	68 2f       	mov	r22, r24
    3508:	62 0f       	add	r22, r18
    350a:	8c e5       	ldi	r24, 0x5C	; 92
    350c:	93 e0       	ldi	r25, 0x03	; 3
    350e:	0e 94 94 1b 	call	0x3728	; 0x3728 <_ZN7TwoWire5writeEh>
    3512:	f8 01       	movw	r30, r16
    3514:	21 81       	ldd	r18, Z+1	; 0x01
  Wire._I2C_WRITE(bin2bcd(dt.month()));
    3516:	82 2f       	mov	r24, r18
    3518:	6c 2f       	mov	r22, r28
    351a:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <__udivmodqi4>
    351e:	68 2f       	mov	r22, r24
    3520:	66 0f       	add	r22, r22
    3522:	86 0f       	add	r24, r22
    3524:	88 0f       	add	r24, r24
    3526:	68 2f       	mov	r22, r24
    3528:	62 0f       	add	r22, r18
    352a:	8c e5       	ldi	r24, 0x5C	; 92
    352c:	93 e0       	ldi	r25, 0x03	; 3
    352e:	0e 94 94 1b 	call	0x3728	; 0x3728 <_ZN7TwoWire5writeEh>
  Wire._I2C_WRITE(bin2bcd(dt.year() - 2000));
    3532:	f8 01       	movw	r30, r16
    3534:	20 81       	ld	r18, Z
    3536:	82 2f       	mov	r24, r18
    3538:	6c 2f       	mov	r22, r28
    353a:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <__udivmodqi4>
    353e:	68 2f       	mov	r22, r24
    3540:	66 0f       	add	r22, r22
    3542:	86 0f       	add	r24, r22
    3544:	88 0f       	add	r24, r24
    3546:	68 2f       	mov	r22, r24
    3548:	62 0f       	add	r22, r18
    354a:	8c e5       	ldi	r24, 0x5C	; 92
    354c:	93 e0       	ldi	r25, 0x03	; 3
    354e:	0e 94 94 1b 	call	0x3728	; 0x3728 <_ZN7TwoWire5writeEh>
  Wire.endTransmission();
    3552:	8c e5       	ldi	r24, 0x5C	; 92
    3554:	93 e0       	ldi	r25, 0x03	; 3
    3556:	0e 94 6e 1c 	call	0x38dc	; 0x38dc <_ZN7TwoWire15endTransmissionEv>

  uint8_t statreg = read_i2c_register(DS3231_ADDRESS, DS3231_STATUSREG);
    355a:	8f e0       	ldi	r24, 0x0F	; 15
    355c:	0e 94 18 1a 	call	0x3430	; 0x3430 <_ZL17read_i2c_registerhh.constprop.7>
    3560:	c8 2f       	mov	r28, r24
  Wire.requestFrom(addr, (byte)1);
  return Wire._I2C_READ();
}

static void write_i2c_register(uint8_t addr, uint8_t reg, uint8_t val) {
  Wire.beginTransmission(addr);
    3562:	68 e6       	ldi	r22, 0x68	; 104
    3564:	8c e5       	ldi	r24, 0x5C	; 92
    3566:	93 e0       	ldi	r25, 0x03	; 3
    3568:	0e 94 e5 1b 	call	0x37ca	; 0x37ca <_ZN7TwoWire17beginTransmissionEh>
  Wire._I2C_WRITE((byte)reg);
    356c:	6f e0       	ldi	r22, 0x0F	; 15
    356e:	8c e5       	ldi	r24, 0x5C	; 92
    3570:	93 e0       	ldi	r25, 0x03	; 3
    3572:	0e 94 94 1b 	call	0x3728	; 0x3728 <_ZN7TwoWire5writeEh>
  Wire._I2C_WRITE((byte)val);
    3576:	6c 2f       	mov	r22, r28
    3578:	6f 77       	andi	r22, 0x7F	; 127
    357a:	8c e5       	ldi	r24, 0x5C	; 92
    357c:	93 e0       	ldi	r25, 0x03	; 3
    357e:	0e 94 94 1b 	call	0x3728	; 0x3728 <_ZN7TwoWire5writeEh>
  Wire.endTransmission();
    3582:	8c e5       	ldi	r24, 0x5C	; 92
    3584:	93 e0       	ldi	r25, 0x03	; 3
  Wire.endTransmission();

  uint8_t statreg = read_i2c_register(DS3231_ADDRESS, DS3231_STATUSREG);
  statreg &= ~0x80; // flip OSF bit
  write_i2c_register(DS3231_ADDRESS, DS3231_STATUSREG, statreg);
}
    3586:	cf 91       	pop	r28
    3588:	1f 91       	pop	r17
    358a:	0f 91       	pop	r16

static void write_i2c_register(uint8_t addr, uint8_t reg, uint8_t val) {
  Wire.beginTransmission(addr);
  Wire._I2C_WRITE((byte)reg);
  Wire._I2C_WRITE((byte)val);
  Wire.endTransmission();
    358c:	0c 94 6e 1c 	jmp	0x38dc	; 0x38dc <_ZN7TwoWire15endTransmissionEv>

00003590 <_ZN10RTC_DS32319lostPowerEv>:
  Wire.begin();
  return true;
}

bool RTC_DS3231::lostPower(void) {
  return (read_i2c_register(DS3231_ADDRESS, DS3231_STATUSREG) >> 7);
    3590:	8f e0       	ldi	r24, 0x0F	; 15
    3592:	0e 94 18 1a 	call	0x3430	; 0x3430 <_ZL17read_i2c_registerhh.constprop.7>
    3596:	87 fb       	bst	r24, 7
    3598:	88 27       	eor	r24, r24
    359a:	80 f9       	bld	r24, 0
}
    359c:	08 95       	ret

0000359e <_ZN8SPIClass5beginEv>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    359e:	cf 93       	push	r28
  uint8_t sreg = SREG;
    35a0:	cf b7       	in	r28, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    35a2:	f8 94       	cli
  if (!initialized) {
    35a4:	80 91 5b 03 	lds	r24, 0x035B	; 0x80035b <_ZN8SPIClass11initializedE>
    35a8:	81 11       	cpse	r24, r1
    35aa:	27 c0       	rjmp	.+78     	; 0x35fa <_ZN8SPIClass5beginEv+0x5c>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    35ac:	e1 ec       	ldi	r30, 0xC1	; 193
    35ae:	f0 e0       	ldi	r31, 0x00	; 0
    35b0:	84 91       	lpm	r24, Z
    uint8_t bit = digitalPinToBitMask(SS);
    35b2:	ed ea       	ldi	r30, 0xAD	; 173
    35b4:	f0 e0       	ldi	r31, 0x00	; 0
    35b6:	94 91       	lpm	r25, Z
    volatile uint8_t *reg = portModeRegister(port);
    35b8:	e8 2f       	mov	r30, r24
    35ba:	f0 e0       	ldi	r31, 0x00	; 0
    35bc:	ee 0f       	add	r30, r30
    35be:	ff 1f       	adc	r31, r31
    35c0:	e1 52       	subi	r30, 0x21	; 33
    35c2:	ff 4f       	sbci	r31, 0xFF	; 255
    35c4:	a5 91       	lpm	r26, Z+
    35c6:	b4 91       	lpm	r27, Z

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    35c8:	ec 91       	ld	r30, X
    35ca:	e9 23       	and	r30, r25
    35cc:	21 f4       	brne	.+8      	; 0x35d6 <_ZN8SPIClass5beginEv+0x38>
      digitalWrite(SS, HIGH);
    35ce:	61 e0       	ldi	r22, 0x01	; 1
    35d0:	8a e0       	ldi	r24, 0x0A	; 10
    35d2:	0e 94 df 10 	call	0x21be	; 0x21be <digitalWrite>
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    35d6:	61 e0       	ldi	r22, 0x01	; 1
    35d8:	8a e0       	ldi	r24, 0x0A	; 10
    35da:	0e 94 a3 10 	call	0x2146	; 0x2146 <pinMode>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    35de:	8c b5       	in	r24, 0x2c	; 44
    35e0:	80 61       	ori	r24, 0x10	; 16
    35e2:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
    35e4:	8c b5       	in	r24, 0x2c	; 44
    35e6:	80 64       	ori	r24, 0x40	; 64
    35e8:	8c bd       	out	0x2c, r24	; 44
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    35ea:	61 e0       	ldi	r22, 0x01	; 1
    35ec:	8d e0       	ldi	r24, 0x0D	; 13
    35ee:	0e 94 a3 10 	call	0x2146	; 0x2146 <pinMode>
    pinMode(MOSI, OUTPUT);
    35f2:	61 e0       	ldi	r22, 0x01	; 1
    35f4:	8b e0       	ldi	r24, 0x0B	; 11
    35f6:	0e 94 a3 10 	call	0x2146	; 0x2146 <pinMode>
  }
  initialized++; // reference count
    35fa:	80 91 5b 03 	lds	r24, 0x035B	; 0x80035b <_ZN8SPIClass11initializedE>
    35fe:	8f 5f       	subi	r24, 0xFF	; 255
    3600:	80 93 5b 03 	sts	0x035B, r24	; 0x80035b <_ZN8SPIClass11initializedE>
  SREG = sreg;
    3604:	cf bf       	out	0x3f, r28	; 63
}
    3606:	cf 91       	pop	r28
    3608:	08 95       	ret

0000360a <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    360a:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <_ZN7TwoWire14rxBufferLengthE>
    360e:	90 e0       	ldi	r25, 0x00	; 0
    3610:	20 91 91 03 	lds	r18, 0x0391	; 0x800391 <_ZN7TwoWire13rxBufferIndexE>
    3614:	82 1b       	sub	r24, r18
    3616:	91 09       	sbc	r25, r1
    3618:	08 95       	ret

0000361a <_ZN7TwoWire4readEv>:
    361a:	90 91 91 03 	lds	r25, 0x0391	; 0x800391 <_ZN7TwoWire13rxBufferIndexE>
    361e:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <_ZN7TwoWire14rxBufferLengthE>
    3622:	98 17       	cp	r25, r24
    3624:	50 f4       	brcc	.+20     	; 0x363a <_ZN7TwoWire4readEv+0x20>
    3626:	e9 2f       	mov	r30, r25
    3628:	f0 e0       	ldi	r31, 0x00	; 0
    362a:	ee 56       	subi	r30, 0x6E	; 110
    362c:	fc 4f       	sbci	r31, 0xFC	; 252
    362e:	20 81       	ld	r18, Z
    3630:	30 e0       	ldi	r19, 0x00	; 0
    3632:	9f 5f       	subi	r25, 0xFF	; 255
    3634:	90 93 91 03 	sts	0x0391, r25	; 0x800391 <_ZN7TwoWire13rxBufferIndexE>
    3638:	02 c0       	rjmp	.+4      	; 0x363e <_ZN7TwoWire4readEv+0x24>
    363a:	2f ef       	ldi	r18, 0xFF	; 255
    363c:	3f ef       	ldi	r19, 0xFF	; 255
    363e:	c9 01       	movw	r24, r18
    3640:	08 95       	ret

00003642 <_ZN7TwoWire4peekEv>:
    3642:	e0 91 91 03 	lds	r30, 0x0391	; 0x800391 <_ZN7TwoWire13rxBufferIndexE>
    3646:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <_ZN7TwoWire14rxBufferLengthE>
    364a:	e8 17       	cp	r30, r24
    364c:	30 f4       	brcc	.+12     	; 0x365a <_ZN7TwoWire4peekEv+0x18>
    364e:	f0 e0       	ldi	r31, 0x00	; 0
    3650:	ee 56       	subi	r30, 0x6E	; 110
    3652:	fc 4f       	sbci	r31, 0xFC	; 252
    3654:	80 81       	ld	r24, Z
    3656:	90 e0       	ldi	r25, 0x00	; 0
    3658:	08 95       	ret
    365a:	8f ef       	ldi	r24, 0xFF	; 255
    365c:	9f ef       	ldi	r25, 0xFF	; 255
    365e:	08 95       	ret

00003660 <_ZN7TwoWire5flushEv>:
    3660:	08 95       	ret

00003662 <_ZN7TwoWire16onReceiveServiceEPhi>:
    3662:	cf 93       	push	r28
    3664:	df 93       	push	r29
    3666:	ec 01       	movw	r28, r24
    3668:	e0 91 68 03 	lds	r30, 0x0368	; 0x800368 <_ZN7TwoWire14user_onReceiveE>
    366c:	f0 91 69 03 	lds	r31, 0x0369	; 0x800369 <_ZN7TwoWire14user_onReceiveE+0x1>
    3670:	30 97       	sbiw	r30, 0x00	; 0
    3672:	f1 f0       	breq	.+60     	; 0x36b0 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    3674:	90 91 91 03 	lds	r25, 0x0391	; 0x800391 <_ZN7TwoWire13rxBufferIndexE>
    3678:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <_ZN7TwoWire14rxBufferLengthE>
    367c:	98 17       	cp	r25, r24
    367e:	c0 f0       	brcs	.+48     	; 0x36b0 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    3680:	90 e0       	ldi	r25, 0x00	; 0
    3682:	29 2f       	mov	r18, r25
    3684:	30 e0       	ldi	r19, 0x00	; 0
    3686:	26 17       	cp	r18, r22
    3688:	37 07       	cpc	r19, r23
    368a:	54 f4       	brge	.+20     	; 0x36a0 <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    368c:	de 01       	movw	r26, r28
    368e:	a2 0f       	add	r26, r18
    3690:	b3 1f       	adc	r27, r19
    3692:	4c 91       	ld	r20, X
    3694:	d9 01       	movw	r26, r18
    3696:	ae 56       	subi	r26, 0x6E	; 110
    3698:	bc 4f       	sbci	r27, 0xFC	; 252
    369a:	4c 93       	st	X, r20
    369c:	9f 5f       	subi	r25, 0xFF	; 255
    369e:	f1 cf       	rjmp	.-30     	; 0x3682 <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    36a0:	10 92 91 03 	sts	0x0391, r1	; 0x800391 <_ZN7TwoWire13rxBufferIndexE>
    36a4:	60 93 90 03 	sts	0x0390, r22	; 0x800390 <_ZN7TwoWire14rxBufferLengthE>
    36a8:	cb 01       	movw	r24, r22
    36aa:	df 91       	pop	r29
    36ac:	cf 91       	pop	r28
    36ae:	09 94       	ijmp
    36b0:	df 91       	pop	r29
    36b2:	cf 91       	pop	r28
    36b4:	08 95       	ret

000036b6 <_ZN7TwoWire16onRequestServiceEv>:
    36b6:	e0 91 6a 03 	lds	r30, 0x036A	; 0x80036a <_ZN7TwoWire14user_onRequestE>
    36ba:	f0 91 6b 03 	lds	r31, 0x036B	; 0x80036b <_ZN7TwoWire14user_onRequestE+0x1>
    36be:	30 97       	sbiw	r30, 0x00	; 0
    36c0:	29 f0       	breq	.+10     	; 0x36cc <_ZN7TwoWire16onRequestServiceEv+0x16>
    36c2:	10 92 6e 03 	sts	0x036E, r1	; 0x80036e <_ZN7TwoWire13txBufferIndexE>
    36c6:	10 92 6d 03 	sts	0x036D, r1	; 0x80036d <_ZN7TwoWire14txBufferLengthE>
    36ca:	09 94       	ijmp
    36cc:	08 95       	ret

000036ce <_ZN7TwoWire5writeEPKhj>:
    36ce:	cf 92       	push	r12
    36d0:	df 92       	push	r13
    36d2:	ef 92       	push	r14
    36d4:	ff 92       	push	r15
    36d6:	0f 93       	push	r16
    36d8:	1f 93       	push	r17
    36da:	cf 93       	push	r28
    36dc:	df 93       	push	r29
    36de:	7c 01       	movw	r14, r24
    36e0:	cb 01       	movw	r24, r22
    36e2:	8a 01       	movw	r16, r20
    36e4:	20 91 6c 03 	lds	r18, 0x036C	; 0x80036c <_ZN7TwoWire12transmittingE>
    36e8:	22 23       	and	r18, r18
    36ea:	89 f0       	breq	.+34     	; 0x370e <_ZN7TwoWire5writeEPKhj+0x40>
    36ec:	eb 01       	movw	r28, r22
    36ee:	6b 01       	movw	r12, r22
    36f0:	c4 0e       	add	r12, r20
    36f2:	d5 1e       	adc	r13, r21
    36f4:	cc 15       	cp	r28, r12
    36f6:	dd 05       	cpc	r29, r13
    36f8:	69 f0       	breq	.+26     	; 0x3714 <_ZN7TwoWire5writeEPKhj+0x46>
    36fa:	69 91       	ld	r22, Y+
    36fc:	d7 01       	movw	r26, r14
    36fe:	ed 91       	ld	r30, X+
    3700:	fc 91       	ld	r31, X
    3702:	01 90       	ld	r0, Z+
    3704:	f0 81       	ld	r31, Z
    3706:	e0 2d       	mov	r30, r0
    3708:	c7 01       	movw	r24, r14
    370a:	09 95       	icall
    370c:	f3 cf       	rjmp	.-26     	; 0x36f4 <_ZN7TwoWire5writeEPKhj+0x26>
    370e:	64 2f       	mov	r22, r20
    3710:	0e 94 32 1d 	call	0x3a64	; 0x3a64 <twi_transmit>
    3714:	c8 01       	movw	r24, r16
    3716:	df 91       	pop	r29
    3718:	cf 91       	pop	r28
    371a:	1f 91       	pop	r17
    371c:	0f 91       	pop	r16
    371e:	ff 90       	pop	r15
    3720:	ef 90       	pop	r14
    3722:	df 90       	pop	r13
    3724:	cf 90       	pop	r12
    3726:	08 95       	ret

00003728 <_ZN7TwoWire5writeEh>:
    3728:	cf 93       	push	r28
    372a:	df 93       	push	r29
    372c:	1f 92       	push	r1
    372e:	cd b7       	in	r28, 0x3d	; 61
    3730:	de b7       	in	r29, 0x3e	; 62
    3732:	69 83       	std	Y+1, r22	; 0x01
    3734:	20 91 6c 03 	lds	r18, 0x036C	; 0x80036c <_ZN7TwoWire12transmittingE>
    3738:	22 23       	and	r18, r18
    373a:	d1 f0       	breq	.+52     	; 0x3770 <_ZN7TwoWire5writeEh+0x48>
    373c:	20 91 6d 03 	lds	r18, 0x036D	; 0x80036d <_ZN7TwoWire14txBufferLengthE>
    3740:	20 32       	cpi	r18, 0x20	; 32
    3742:	40 f0       	brcs	.+16     	; 0x3754 <_ZN7TwoWire5writeEh+0x2c>
    3744:	21 e0       	ldi	r18, 0x01	; 1
    3746:	30 e0       	ldi	r19, 0x00	; 0
    3748:	fc 01       	movw	r30, r24
    374a:	33 83       	std	Z+3, r19	; 0x03
    374c:	22 83       	std	Z+2, r18	; 0x02
    374e:	80 e0       	ldi	r24, 0x00	; 0
    3750:	90 e0       	ldi	r25, 0x00	; 0
    3752:	15 c0       	rjmp	.+42     	; 0x377e <_ZN7TwoWire5writeEh+0x56>
    3754:	80 91 6e 03 	lds	r24, 0x036E	; 0x80036e <_ZN7TwoWire13txBufferIndexE>
    3758:	e8 2f       	mov	r30, r24
    375a:	f0 e0       	ldi	r31, 0x00	; 0
    375c:	e1 59       	subi	r30, 0x91	; 145
    375e:	fc 4f       	sbci	r31, 0xFC	; 252
    3760:	99 81       	ldd	r25, Y+1	; 0x01
    3762:	90 83       	st	Z, r25
    3764:	8f 5f       	subi	r24, 0xFF	; 255
    3766:	80 93 6e 03 	sts	0x036E, r24	; 0x80036e <_ZN7TwoWire13txBufferIndexE>
    376a:	80 93 6d 03 	sts	0x036D, r24	; 0x80036d <_ZN7TwoWire14txBufferLengthE>
    376e:	05 c0       	rjmp	.+10     	; 0x377a <_ZN7TwoWire5writeEh+0x52>
    3770:	61 e0       	ldi	r22, 0x01	; 1
    3772:	ce 01       	movw	r24, r28
    3774:	01 96       	adiw	r24, 0x01	; 1
    3776:	0e 94 32 1d 	call	0x3a64	; 0x3a64 <twi_transmit>
    377a:	81 e0       	ldi	r24, 0x01	; 1
    377c:	90 e0       	ldi	r25, 0x00	; 0
    377e:	0f 90       	pop	r0
    3780:	df 91       	pop	r29
    3782:	cf 91       	pop	r28
    3784:	08 95       	ret

00003786 <_ZN7TwoWireC1Ev>:
    3786:	fc 01       	movw	r30, r24
    3788:	13 82       	std	Z+3, r1	; 0x03
    378a:	12 82       	std	Z+2, r1	; 0x02
    378c:	88 ee       	ldi	r24, 0xE8	; 232
    378e:	93 e0       	ldi	r25, 0x03	; 3
    3790:	a0 e0       	ldi	r26, 0x00	; 0
    3792:	b0 e0       	ldi	r27, 0x00	; 0
    3794:	84 83       	std	Z+4, r24	; 0x04
    3796:	95 83       	std	Z+5, r25	; 0x05
    3798:	a6 83       	std	Z+6, r26	; 0x06
    379a:	b7 83       	std	Z+7, r27	; 0x07
    379c:	8a e4       	ldi	r24, 0x4A	; 74
    379e:	92 e0       	ldi	r25, 0x02	; 2
    37a0:	91 83       	std	Z+1, r25	; 0x01
    37a2:	80 83       	st	Z, r24
    37a4:	08 95       	ret

000037a6 <_ZN7TwoWire5beginEv>:
    37a6:	10 92 91 03 	sts	0x0391, r1	; 0x800391 <_ZN7TwoWire13rxBufferIndexE>
    37aa:	10 92 90 03 	sts	0x0390, r1	; 0x800390 <_ZN7TwoWire14rxBufferLengthE>
    37ae:	10 92 6e 03 	sts	0x036E, r1	; 0x80036e <_ZN7TwoWire13txBufferIndexE>
    37b2:	10 92 6d 03 	sts	0x036D, r1	; 0x80036d <_ZN7TwoWire14txBufferLengthE>
    37b6:	0e 94 76 1c 	call	0x38ec	; 0x38ec <twi_init>
    37ba:	8b e5       	ldi	r24, 0x5B	; 91
    37bc:	9b e1       	ldi	r25, 0x1B	; 27
    37be:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <twi_attachSlaveTxEvent>
    37c2:	81 e3       	ldi	r24, 0x31	; 49
    37c4:	9b e1       	ldi	r25, 0x1B	; 27
    37c6:	0c 94 5a 1d 	jmp	0x3ab4	; 0x3ab4 <twi_attachSlaveRxEvent>

000037ca <_ZN7TwoWire17beginTransmissionEh>:
    37ca:	81 e0       	ldi	r24, 0x01	; 1
    37cc:	80 93 6c 03 	sts	0x036C, r24	; 0x80036c <_ZN7TwoWire12transmittingE>
    37d0:	60 93 8f 03 	sts	0x038F, r22	; 0x80038f <_ZN7TwoWire9txAddressE>
    37d4:	10 92 6e 03 	sts	0x036E, r1	; 0x80036e <_ZN7TwoWire13txBufferIndexE>
    37d8:	10 92 6d 03 	sts	0x036D, r1	; 0x80036d <_ZN7TwoWire14txBufferLengthE>
    37dc:	08 95       	ret

000037de <_ZN7TwoWire17beginTransmissionEi>:
    37de:	0c 94 e5 1b 	jmp	0x37ca	; 0x37ca <_ZN7TwoWire17beginTransmissionEh>

000037e2 <_ZN7TwoWire15endTransmissionEh>:
    37e2:	0f 93       	push	r16
    37e4:	06 2f       	mov	r16, r22
    37e6:	21 e0       	ldi	r18, 0x01	; 1
    37e8:	40 91 6d 03 	lds	r20, 0x036D	; 0x80036d <_ZN7TwoWire14txBufferLengthE>
    37ec:	6f e6       	ldi	r22, 0x6F	; 111
    37ee:	73 e0       	ldi	r23, 0x03	; 3
    37f0:	80 91 8f 03 	lds	r24, 0x038F	; 0x80038f <_ZN7TwoWire9txAddressE>
    37f4:	0e 94 dc 1c 	call	0x39b8	; 0x39b8 <twi_writeTo>
    37f8:	10 92 6e 03 	sts	0x036E, r1	; 0x80036e <_ZN7TwoWire13txBufferIndexE>
    37fc:	10 92 6d 03 	sts	0x036D, r1	; 0x80036d <_ZN7TwoWire14txBufferLengthE>
    3800:	10 92 6c 03 	sts	0x036C, r1	; 0x80036c <_ZN7TwoWire12transmittingE>
    3804:	0f 91       	pop	r16
    3806:	08 95       	ret

00003808 <_ZN7TwoWire11requestFromEhhmhh>:
    3808:	4f 92       	push	r4
    380a:	5f 92       	push	r5
    380c:	6f 92       	push	r6
    380e:	7f 92       	push	r7
    3810:	af 92       	push	r10
    3812:	bf 92       	push	r11
    3814:	cf 92       	push	r12
    3816:	ef 92       	push	r14
    3818:	ff 92       	push	r15
    381a:	0f 93       	push	r16
    381c:	1f 93       	push	r17
    381e:	cf 93       	push	r28
    3820:	df 93       	push	r29
    3822:	5c 01       	movw	r10, r24
    3824:	f6 2e       	mov	r15, r22
    3826:	d4 2f       	mov	r29, r20
    3828:	28 01       	movw	r4, r16
    382a:	39 01       	movw	r6, r18
    382c:	ee 20       	and	r14, r14
    382e:	21 f1       	breq	.+72     	; 0x3878 <_ZN7TwoWire11requestFromEhhmhh+0x70>
    3830:	0e 94 e5 1b 	call	0x37ca	; 0x37ca <_ZN7TwoWire17beginTransmissionEh>
    3834:	ce 2d       	mov	r28, r14
    3836:	c4 30       	cpi	r28, 0x04	; 4
    3838:	08 f0       	brcs	.+2      	; 0x383c <_ZN7TwoWire11requestFromEhhmhh+0x34>
    383a:	c3 e0       	ldi	r28, 0x03	; 3
    383c:	c1 50       	subi	r28, 0x01	; 1
    383e:	c0 f0       	brcs	.+48     	; 0x3870 <_ZN7TwoWire11requestFromEhhmhh+0x68>
    3840:	28 e0       	ldi	r18, 0x08	; 8
    3842:	c2 9f       	mul	r28, r18
    3844:	c0 01       	movw	r24, r0
    3846:	11 24       	eor	r1, r1
    3848:	a3 01       	movw	r20, r6
    384a:	92 01       	movw	r18, r4
    384c:	04 c0       	rjmp	.+8      	; 0x3856 <_ZN7TwoWire11requestFromEhhmhh+0x4e>
    384e:	56 95       	lsr	r21
    3850:	47 95       	ror	r20
    3852:	37 95       	ror	r19
    3854:	27 95       	ror	r18
    3856:	8a 95       	dec	r24
    3858:	d2 f7       	brpl	.-12     	; 0x384e <_ZN7TwoWire11requestFromEhhmhh+0x46>
    385a:	ca 01       	movw	r24, r20
    385c:	b9 01       	movw	r22, r18
    385e:	d5 01       	movw	r26, r10
    3860:	ed 91       	ld	r30, X+
    3862:	fc 91       	ld	r31, X
    3864:	01 90       	ld	r0, Z+
    3866:	f0 81       	ld	r31, Z
    3868:	e0 2d       	mov	r30, r0
    386a:	c5 01       	movw	r24, r10
    386c:	09 95       	icall
    386e:	e6 cf       	rjmp	.-52     	; 0x383c <_ZN7TwoWire11requestFromEhhmhh+0x34>
    3870:	60 e0       	ldi	r22, 0x00	; 0
    3872:	c5 01       	movw	r24, r10
    3874:	0e 94 f1 1b 	call	0x37e2	; 0x37e2 <_ZN7TwoWire15endTransmissionEh>
    3878:	4d 2f       	mov	r20, r29
    387a:	d1 32       	cpi	r29, 0x21	; 33
    387c:	08 f0       	brcs	.+2      	; 0x3880 <_ZN7TwoWire11requestFromEhhmhh+0x78>
    387e:	40 e2       	ldi	r20, 0x20	; 32
    3880:	2c 2d       	mov	r18, r12
    3882:	62 e9       	ldi	r22, 0x92	; 146
    3884:	73 e0       	ldi	r23, 0x03	; 3
    3886:	8f 2d       	mov	r24, r15
    3888:	0e 94 94 1c 	call	0x3928	; 0x3928 <twi_readFrom>
    388c:	10 92 91 03 	sts	0x0391, r1	; 0x800391 <_ZN7TwoWire13rxBufferIndexE>
    3890:	80 93 90 03 	sts	0x0390, r24	; 0x800390 <_ZN7TwoWire14rxBufferLengthE>
    3894:	df 91       	pop	r29
    3896:	cf 91       	pop	r28
    3898:	1f 91       	pop	r17
    389a:	0f 91       	pop	r16
    389c:	ff 90       	pop	r15
    389e:	ef 90       	pop	r14
    38a0:	cf 90       	pop	r12
    38a2:	bf 90       	pop	r11
    38a4:	af 90       	pop	r10
    38a6:	7f 90       	pop	r7
    38a8:	6f 90       	pop	r6
    38aa:	5f 90       	pop	r5
    38ac:	4f 90       	pop	r4
    38ae:	08 95       	ret

000038b0 <_ZN7TwoWire11requestFromEhhh>:
    38b0:	cf 92       	push	r12
    38b2:	ef 92       	push	r14
    38b4:	0f 93       	push	r16
    38b6:	1f 93       	push	r17
    38b8:	c2 2e       	mov	r12, r18
    38ba:	e1 2c       	mov	r14, r1
    38bc:	00 e0       	ldi	r16, 0x00	; 0
    38be:	10 e0       	ldi	r17, 0x00	; 0
    38c0:	98 01       	movw	r18, r16
    38c2:	0e 94 04 1c 	call	0x3808	; 0x3808 <_ZN7TwoWire11requestFromEhhmhh>
    38c6:	1f 91       	pop	r17
    38c8:	0f 91       	pop	r16
    38ca:	ef 90       	pop	r14
    38cc:	cf 90       	pop	r12
    38ce:	08 95       	ret

000038d0 <_ZN7TwoWire11requestFromEhh>:
    38d0:	21 e0       	ldi	r18, 0x01	; 1
    38d2:	0c 94 58 1c 	jmp	0x38b0	; 0x38b0 <_ZN7TwoWire11requestFromEhhh>

000038d6 <_ZN7TwoWire11requestFromEii>:
    38d6:	21 e0       	ldi	r18, 0x01	; 1
    38d8:	0c 94 58 1c 	jmp	0x38b0	; 0x38b0 <_ZN7TwoWire11requestFromEhhh>

000038dc <_ZN7TwoWire15endTransmissionEv>:
    38dc:	61 e0       	ldi	r22, 0x01	; 1
    38de:	0c 94 f1 1b 	jmp	0x37e2	; 0x37e2 <_ZN7TwoWire15endTransmissionEh>

000038e2 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    38e2:	8c e5       	ldi	r24, 0x5C	; 92
    38e4:	93 e0       	ldi	r25, 0x03	; 3
    38e6:	0c 94 c3 1b 	jmp	0x3786	; 0x3786 <_ZN7TwoWireC1Ev>

000038ea <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    38ea:	08 95       	ret

000038ec <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    38ec:	10 92 1f 04 	sts	0x041F, r1	; 0x80041f <twi_state>
    38f0:	81 e0       	ldi	r24, 0x01	; 1
    38f2:	80 93 1d 04 	sts	0x041D, r24	; 0x80041d <twi_sendStop>
    38f6:	10 92 1c 04 	sts	0x041C, r1	; 0x80041c <twi_inRepStart>
    38fa:	61 e0       	ldi	r22, 0x01	; 1
    38fc:	82 e1       	ldi	r24, 0x12	; 18
    38fe:	0e 94 df 10 	call	0x21be	; 0x21be <digitalWrite>
    3902:	61 e0       	ldi	r22, 0x01	; 1
    3904:	83 e1       	ldi	r24, 0x13	; 19
    3906:	0e 94 df 10 	call	0x21be	; 0x21be <digitalWrite>
    390a:	e9 eb       	ldi	r30, 0xB9	; 185
    390c:	f0 e0       	ldi	r31, 0x00	; 0
    390e:	80 81       	ld	r24, Z
    3910:	8e 7f       	andi	r24, 0xFE	; 254
    3912:	80 83       	st	Z, r24
    3914:	80 81       	ld	r24, Z
    3916:	8d 7f       	andi	r24, 0xFD	; 253
    3918:	80 83       	st	Z, r24
    391a:	88 e4       	ldi	r24, 0x48	; 72
    391c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    3920:	85 e4       	ldi	r24, 0x45	; 69
    3922:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    3926:	08 95       	ret

00003928 <twi_readFrom>:
    3928:	41 32       	cpi	r20, 0x21	; 33
    392a:	08 f0       	brcs	.+2      	; 0x392e <twi_readFrom+0x6>
    392c:	43 c0       	rjmp	.+134    	; 0x39b4 <twi_readFrom+0x8c>
    392e:	90 91 1f 04 	lds	r25, 0x041F	; 0x80041f <twi_state>
    3932:	91 11       	cpse	r25, r1
    3934:	fc cf       	rjmp	.-8      	; 0x392e <twi_readFrom+0x6>
    3936:	91 e0       	ldi	r25, 0x01	; 1
    3938:	90 93 1f 04 	sts	0x041F, r25	; 0x80041f <twi_state>
    393c:	20 93 1d 04 	sts	0x041D, r18	; 0x80041d <twi_sendStop>
    3940:	2f ef       	ldi	r18, 0xFF	; 255
    3942:	20 93 b2 03 	sts	0x03B2, r18	; 0x8003b2 <twi_error>
    3946:	10 92 f7 03 	sts	0x03F7, r1	; 0x8003f7 <twi_masterBufferIndex>
    394a:	24 0f       	add	r18, r20
    394c:	20 93 f6 03 	sts	0x03F6, r18	; 0x8003f6 <twi_masterBufferLength>
    3950:	90 93 1e 04 	sts	0x041E, r25	; 0x80041e <twi_slarw>
    3954:	90 91 1e 04 	lds	r25, 0x041E	; 0x80041e <twi_slarw>
    3958:	88 0f       	add	r24, r24
    395a:	89 2b       	or	r24, r25
    395c:	80 93 1e 04 	sts	0x041E, r24	; 0x80041e <twi_slarw>
    3960:	80 91 1c 04 	lds	r24, 0x041C	; 0x80041c <twi_inRepStart>
    3964:	81 30       	cpi	r24, 0x01	; 1
    3966:	61 f4       	brne	.+24     	; 0x3980 <twi_readFrom+0x58>
    3968:	10 92 1c 04 	sts	0x041C, r1	; 0x80041c <twi_inRepStart>
    396c:	80 91 1e 04 	lds	r24, 0x041E	; 0x80041e <twi_slarw>
    3970:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    3974:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    3978:	83 fd       	sbrc	r24, 3
    397a:	f8 cf       	rjmp	.-16     	; 0x396c <twi_readFrom+0x44>
    397c:	85 ec       	ldi	r24, 0xC5	; 197
    397e:	01 c0       	rjmp	.+2      	; 0x3982 <twi_readFrom+0x5a>
    3980:	85 ee       	ldi	r24, 0xE5	; 229
    3982:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    3986:	80 91 1f 04 	lds	r24, 0x041F	; 0x80041f <twi_state>
    398a:	81 30       	cpi	r24, 0x01	; 1
    398c:	e1 f3       	breq	.-8      	; 0x3986 <twi_readFrom+0x5e>
    398e:	80 91 f7 03 	lds	r24, 0x03F7	; 0x8003f7 <twi_masterBufferIndex>
    3992:	84 17       	cp	r24, r20
    3994:	10 f4       	brcc	.+4      	; 0x399a <twi_readFrom+0x72>
    3996:	40 91 f7 03 	lds	r20, 0x03F7	; 0x8003f7 <twi_masterBufferIndex>
    399a:	a8 ef       	ldi	r26, 0xF8	; 248
    399c:	b3 e0       	ldi	r27, 0x03	; 3
    399e:	96 2f       	mov	r25, r22
    39a0:	fb 01       	movw	r30, r22
    39a2:	8e 2f       	mov	r24, r30
    39a4:	89 1b       	sub	r24, r25
    39a6:	84 17       	cp	r24, r20
    39a8:	18 f4       	brcc	.+6      	; 0x39b0 <twi_readFrom+0x88>
    39aa:	8d 91       	ld	r24, X+
    39ac:	81 93       	st	Z+, r24
    39ae:	f9 cf       	rjmp	.-14     	; 0x39a2 <twi_readFrom+0x7a>
    39b0:	84 2f       	mov	r24, r20
    39b2:	08 95       	ret
    39b4:	80 e0       	ldi	r24, 0x00	; 0
    39b6:	08 95       	ret

000039b8 <twi_writeTo>:
    39b8:	0f 93       	push	r16
    39ba:	41 32       	cpi	r20, 0x21	; 33
    39bc:	08 f0       	brcs	.+2      	; 0x39c0 <twi_writeTo+0x8>
    39be:	4a c0       	rjmp	.+148    	; 0x3a54 <twi_writeTo+0x9c>
    39c0:	90 91 1f 04 	lds	r25, 0x041F	; 0x80041f <twi_state>
    39c4:	91 11       	cpse	r25, r1
    39c6:	fc cf       	rjmp	.-8      	; 0x39c0 <twi_writeTo+0x8>
    39c8:	32 e0       	ldi	r19, 0x02	; 2
    39ca:	30 93 1f 04 	sts	0x041F, r19	; 0x80041f <twi_state>
    39ce:	00 93 1d 04 	sts	0x041D, r16	; 0x80041d <twi_sendStop>
    39d2:	3f ef       	ldi	r19, 0xFF	; 255
    39d4:	30 93 b2 03 	sts	0x03B2, r19	; 0x8003b2 <twi_error>
    39d8:	10 92 f7 03 	sts	0x03F7, r1	; 0x8003f7 <twi_masterBufferIndex>
    39dc:	40 93 f6 03 	sts	0x03F6, r20	; 0x8003f6 <twi_masterBufferLength>
    39e0:	56 2f       	mov	r21, r22
    39e2:	a8 ef       	ldi	r26, 0xF8	; 248
    39e4:	b3 e0       	ldi	r27, 0x03	; 3
    39e6:	fb 01       	movw	r30, r22
    39e8:	3e 2f       	mov	r19, r30
    39ea:	35 1b       	sub	r19, r21
    39ec:	34 17       	cp	r19, r20
    39ee:	18 f4       	brcc	.+6      	; 0x39f6 <twi_writeTo+0x3e>
    39f0:	31 91       	ld	r19, Z+
    39f2:	3d 93       	st	X+, r19
    39f4:	f9 cf       	rjmp	.-14     	; 0x39e8 <twi_writeTo+0x30>
    39f6:	10 92 1e 04 	sts	0x041E, r1	; 0x80041e <twi_slarw>
    39fa:	30 91 1e 04 	lds	r19, 0x041E	; 0x80041e <twi_slarw>
    39fe:	88 0f       	add	r24, r24
    3a00:	83 2b       	or	r24, r19
    3a02:	80 93 1e 04 	sts	0x041E, r24	; 0x80041e <twi_slarw>
    3a06:	80 91 1c 04 	lds	r24, 0x041C	; 0x80041c <twi_inRepStart>
    3a0a:	81 30       	cpi	r24, 0x01	; 1
    3a0c:	61 f4       	brne	.+24     	; 0x3a26 <twi_writeTo+0x6e>
    3a0e:	10 92 1c 04 	sts	0x041C, r1	; 0x80041c <twi_inRepStart>
    3a12:	80 91 1e 04 	lds	r24, 0x041E	; 0x80041e <twi_slarw>
    3a16:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    3a1a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    3a1e:	83 fd       	sbrc	r24, 3
    3a20:	f8 cf       	rjmp	.-16     	; 0x3a12 <twi_writeTo+0x5a>
    3a22:	85 ec       	ldi	r24, 0xC5	; 197
    3a24:	01 c0       	rjmp	.+2      	; 0x3a28 <twi_writeTo+0x70>
    3a26:	85 ee       	ldi	r24, 0xE5	; 229
    3a28:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    3a2c:	22 23       	and	r18, r18
    3a2e:	21 f0       	breq	.+8      	; 0x3a38 <twi_writeTo+0x80>
    3a30:	80 91 1f 04 	lds	r24, 0x041F	; 0x80041f <twi_state>
    3a34:	82 30       	cpi	r24, 0x02	; 2
    3a36:	d1 f3       	breq	.-12     	; 0x3a2c <twi_writeTo+0x74>
    3a38:	80 91 b2 03 	lds	r24, 0x03B2	; 0x8003b2 <twi_error>
    3a3c:	8f 3f       	cpi	r24, 0xFF	; 255
    3a3e:	79 f0       	breq	.+30     	; 0x3a5e <twi_writeTo+0xa6>
    3a40:	80 91 b2 03 	lds	r24, 0x03B2	; 0x8003b2 <twi_error>
    3a44:	80 32       	cpi	r24, 0x20	; 32
    3a46:	41 f0       	breq	.+16     	; 0x3a58 <twi_writeTo+0xa0>
    3a48:	80 91 b2 03 	lds	r24, 0x03B2	; 0x8003b2 <twi_error>
    3a4c:	80 33       	cpi	r24, 0x30	; 48
    3a4e:	31 f0       	breq	.+12     	; 0x3a5c <twi_writeTo+0xa4>
    3a50:	94 e0       	ldi	r25, 0x04	; 4
    3a52:	05 c0       	rjmp	.+10     	; 0x3a5e <twi_writeTo+0xa6>
    3a54:	91 e0       	ldi	r25, 0x01	; 1
    3a56:	03 c0       	rjmp	.+6      	; 0x3a5e <twi_writeTo+0xa6>
    3a58:	92 e0       	ldi	r25, 0x02	; 2
    3a5a:	01 c0       	rjmp	.+2      	; 0x3a5e <twi_writeTo+0xa6>
    3a5c:	93 e0       	ldi	r25, 0x03	; 3
    3a5e:	89 2f       	mov	r24, r25
    3a60:	0f 91       	pop	r16
    3a62:	08 95       	ret

00003a64 <twi_transmit>:
    3a64:	40 91 d4 03 	lds	r20, 0x03D4	; 0x8003d4 <twi_txBufferLength>
    3a68:	26 2f       	mov	r18, r22
    3a6a:	30 e0       	ldi	r19, 0x00	; 0
    3a6c:	24 0f       	add	r18, r20
    3a6e:	31 1d       	adc	r19, r1
    3a70:	21 32       	cpi	r18, 0x21	; 33
    3a72:	31 05       	cpc	r19, r1
    3a74:	dc f4       	brge	.+54     	; 0x3aac <twi_transmit+0x48>
    3a76:	20 91 1f 04 	lds	r18, 0x041F	; 0x80041f <twi_state>
    3a7a:	24 30       	cpi	r18, 0x04	; 4
    3a7c:	c9 f4       	brne	.+50     	; 0x3ab0 <twi_transmit+0x4c>
    3a7e:	fc 01       	movw	r30, r24
    3a80:	80 e0       	ldi	r24, 0x00	; 0
    3a82:	90 e0       	ldi	r25, 0x00	; 0
    3a84:	86 17       	cp	r24, r22
    3a86:	58 f4       	brcc	.+22     	; 0x3a9e <twi_transmit+0x3a>
    3a88:	30 91 d4 03 	lds	r19, 0x03D4	; 0x8003d4 <twi_txBufferLength>
    3a8c:	21 91       	ld	r18, Z+
    3a8e:	dc 01       	movw	r26, r24
    3a90:	aa 52       	subi	r26, 0x2A	; 42
    3a92:	bc 4f       	sbci	r27, 0xFC	; 252
    3a94:	a3 0f       	add	r26, r19
    3a96:	b1 1d       	adc	r27, r1
    3a98:	2c 93       	st	X, r18
    3a9a:	01 96       	adiw	r24, 0x01	; 1
    3a9c:	f3 cf       	rjmp	.-26     	; 0x3a84 <twi_transmit+0x20>
    3a9e:	80 91 d4 03 	lds	r24, 0x03D4	; 0x8003d4 <twi_txBufferLength>
    3aa2:	68 0f       	add	r22, r24
    3aa4:	60 93 d4 03 	sts	0x03D4, r22	; 0x8003d4 <twi_txBufferLength>
    3aa8:	80 e0       	ldi	r24, 0x00	; 0
    3aaa:	08 95       	ret
    3aac:	81 e0       	ldi	r24, 0x01	; 1
    3aae:	08 95       	ret
    3ab0:	82 e0       	ldi	r24, 0x02	; 2
    3ab2:	08 95       	ret

00003ab4 <twi_attachSlaveRxEvent>:
    3ab4:	90 93 19 04 	sts	0x0419, r25	; 0x800419 <twi_onSlaveReceive+0x1>
    3ab8:	80 93 18 04 	sts	0x0418, r24	; 0x800418 <twi_onSlaveReceive>
    3abc:	08 95       	ret

00003abe <twi_attachSlaveTxEvent>:
    3abe:	90 93 1b 04 	sts	0x041B, r25	; 0x80041b <twi_onSlaveTransmit+0x1>
    3ac2:	80 93 1a 04 	sts	0x041A, r24	; 0x80041a <twi_onSlaveTransmit>
    3ac6:	08 95       	ret

00003ac8 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    3ac8:	85 ed       	ldi	r24, 0xD5	; 213
    3aca:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    3ace:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    3ad2:	84 fd       	sbrc	r24, 4
    3ad4:	fc cf       	rjmp	.-8      	; 0x3ace <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    3ad6:	10 92 1f 04 	sts	0x041F, r1	; 0x80041f <twi_state>
    3ada:	08 95       	ret

00003adc <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    3adc:	85 ec       	ldi	r24, 0xC5	; 197
    3ade:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // update twi state
  twi_state = TWI_READY;
    3ae2:	10 92 1f 04 	sts	0x041F, r1	; 0x80041f <twi_state>
    3ae6:	08 95       	ret

00003ae8 <__vector_24>:
}

ISR(TWI_vect)
{
    3ae8:	1f 92       	push	r1
    3aea:	0f 92       	push	r0
    3aec:	0f b6       	in	r0, 0x3f	; 63
    3aee:	0f 92       	push	r0
    3af0:	11 24       	eor	r1, r1
    3af2:	2f 93       	push	r18
    3af4:	3f 93       	push	r19
    3af6:	4f 93       	push	r20
    3af8:	5f 93       	push	r21
    3afa:	6f 93       	push	r22
    3afc:	7f 93       	push	r23
    3afe:	8f 93       	push	r24
    3b00:	9f 93       	push	r25
    3b02:	af 93       	push	r26
    3b04:	bf 93       	push	r27
    3b06:	ef 93       	push	r30
    3b08:	ff 93       	push	r31
  switch(TW_STATUS){
    3b0a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    3b0e:	88 7f       	andi	r24, 0xF8	; 248
    3b10:	80 36       	cpi	r24, 0x60	; 96
    3b12:	09 f4       	brne	.+2      	; 0x3b16 <__vector_24+0x2e>
    3b14:	9e c0       	rjmp	.+316    	; 0x3c52 <__vector_24+0x16a>
    3b16:	78 f5       	brcc	.+94     	; 0x3b76 <__vector_24+0x8e>
    3b18:	88 32       	cpi	r24, 0x28	; 40
    3b1a:	09 f4       	brne	.+2      	; 0x3b1e <__vector_24+0x36>
    3b1c:	5d c0       	rjmp	.+186    	; 0x3bd8 <__vector_24+0xf0>
    3b1e:	90 f4       	brcc	.+36     	; 0x3b44 <__vector_24+0x5c>
    3b20:	80 31       	cpi	r24, 0x10	; 16
    3b22:	09 f4       	brne	.+2      	; 0x3b26 <__vector_24+0x3e>
    3b24:	56 c0       	rjmp	.+172    	; 0x3bd2 <__vector_24+0xea>
    3b26:	38 f4       	brcc	.+14     	; 0x3b36 <__vector_24+0x4e>
    3b28:	88 23       	and	r24, r24
    3b2a:	09 f4       	brne	.+2      	; 0x3b2e <__vector_24+0x46>
    3b2c:	f5 c0       	rjmp	.+490    	; 0x3d18 <__vector_24+0x230>
    3b2e:	88 30       	cpi	r24, 0x08	; 8
    3b30:	09 f4       	brne	.+2      	; 0x3b34 <__vector_24+0x4c>
    3b32:	4f c0       	rjmp	.+158    	; 0x3bd2 <__vector_24+0xea>
    3b34:	f5 c0       	rjmp	.+490    	; 0x3d20 <__vector_24+0x238>
    3b36:	88 31       	cpi	r24, 0x18	; 24
    3b38:	09 f4       	brne	.+2      	; 0x3b3c <__vector_24+0x54>
    3b3a:	4e c0       	rjmp	.+156    	; 0x3bd8 <__vector_24+0xf0>
    3b3c:	80 32       	cpi	r24, 0x20	; 32
    3b3e:	09 f4       	brne	.+2      	; 0x3b42 <__vector_24+0x5a>
    3b40:	5f c0       	rjmp	.+190    	; 0x3c00 <__vector_24+0x118>
    3b42:	ee c0       	rjmp	.+476    	; 0x3d20 <__vector_24+0x238>
    3b44:	80 34       	cpi	r24, 0x40	; 64
    3b46:	09 f4       	brne	.+2      	; 0x3b4a <__vector_24+0x62>
    3b48:	6a c0       	rjmp	.+212    	; 0x3c1e <__vector_24+0x136>
    3b4a:	58 f4       	brcc	.+22     	; 0x3b62 <__vector_24+0x7a>
    3b4c:	80 33       	cpi	r24, 0x30	; 48
    3b4e:	09 f4       	brne	.+2      	; 0x3b52 <__vector_24+0x6a>
    3b50:	57 c0       	rjmp	.+174    	; 0x3c00 <__vector_24+0x118>
    3b52:	88 33       	cpi	r24, 0x38	; 56
    3b54:	09 f0       	breq	.+2      	; 0x3b58 <__vector_24+0x70>
    3b56:	e4 c0       	rjmp	.+456    	; 0x3d20 <__vector_24+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    3b58:	80 93 b2 03 	sts	0x03B2, r24	; 0x8003b2 <twi_error>
      twi_releaseBus();
    3b5c:	0e 94 6e 1d 	call	0x3adc	; 0x3adc <twi_releaseBus>
      break;
    3b60:	df c0       	rjmp	.+446    	; 0x3d20 <__vector_24+0x238>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    3b62:	80 35       	cpi	r24, 0x50	; 80
    3b64:	09 f4       	brne	.+2      	; 0x3b68 <__vector_24+0x80>
    3b66:	4f c0       	rjmp	.+158    	; 0x3c06 <__vector_24+0x11e>
    3b68:	88 35       	cpi	r24, 0x58	; 88
    3b6a:	09 f4       	brne	.+2      	; 0x3b6e <__vector_24+0x86>
    3b6c:	5d c0       	rjmp	.+186    	; 0x3c28 <__vector_24+0x140>
    3b6e:	88 34       	cpi	r24, 0x48	; 72
    3b70:	09 f0       	breq	.+2      	; 0x3b74 <__vector_24+0x8c>
    3b72:	d6 c0       	rjmp	.+428    	; 0x3d20 <__vector_24+0x238>
    3b74:	d3 c0       	rjmp	.+422    	; 0x3d1c <__vector_24+0x234>
    3b76:	88 39       	cpi	r24, 0x98	; 152
    3b78:	09 f4       	brne	.+2      	; 0x3b7c <__vector_24+0x94>
    3b7a:	c4 c0       	rjmp	.+392    	; 0x3d04 <__vector_24+0x21c>
    3b7c:	a8 f4       	brcc	.+42     	; 0x3ba8 <__vector_24+0xc0>
    3b7e:	88 37       	cpi	r24, 0x78	; 120
    3b80:	09 f4       	brne	.+2      	; 0x3b84 <__vector_24+0x9c>
    3b82:	67 c0       	rjmp	.+206    	; 0x3c52 <__vector_24+0x16a>
    3b84:	38 f4       	brcc	.+14     	; 0x3b94 <__vector_24+0xac>
    3b86:	88 36       	cpi	r24, 0x68	; 104
    3b88:	09 f4       	brne	.+2      	; 0x3b8c <__vector_24+0xa4>
    3b8a:	63 c0       	rjmp	.+198    	; 0x3c52 <__vector_24+0x16a>
    3b8c:	80 37       	cpi	r24, 0x70	; 112
    3b8e:	09 f4       	brne	.+2      	; 0x3b92 <__vector_24+0xaa>
    3b90:	60 c0       	rjmp	.+192    	; 0x3c52 <__vector_24+0x16a>
    3b92:	c6 c0       	rjmp	.+396    	; 0x3d20 <__vector_24+0x238>
    3b94:	88 38       	cpi	r24, 0x88	; 136
    3b96:	09 f4       	brne	.+2      	; 0x3b9a <__vector_24+0xb2>
    3b98:	b5 c0       	rjmp	.+362    	; 0x3d04 <__vector_24+0x21c>
    3b9a:	80 39       	cpi	r24, 0x90	; 144
    3b9c:	09 f4       	brne	.+2      	; 0x3ba0 <__vector_24+0xb8>
    3b9e:	5f c0       	rjmp	.+190    	; 0x3c5e <__vector_24+0x176>
    3ba0:	80 38       	cpi	r24, 0x80	; 128
    3ba2:	09 f0       	breq	.+2      	; 0x3ba6 <__vector_24+0xbe>
    3ba4:	bd c0       	rjmp	.+378    	; 0x3d20 <__vector_24+0x238>
    3ba6:	5b c0       	rjmp	.+182    	; 0x3c5e <__vector_24+0x176>
    3ba8:	80 3b       	cpi	r24, 0xB0	; 176
    3baa:	09 f4       	brne	.+2      	; 0x3bae <__vector_24+0xc6>
    3bac:	83 c0       	rjmp	.+262    	; 0x3cb4 <__vector_24+0x1cc>
    3bae:	38 f4       	brcc	.+14     	; 0x3bbe <__vector_24+0xd6>
    3bb0:	80 3a       	cpi	r24, 0xA0	; 160
    3bb2:	09 f4       	brne	.+2      	; 0x3bb6 <__vector_24+0xce>
    3bb4:	66 c0       	rjmp	.+204    	; 0x3c82 <__vector_24+0x19a>
    3bb6:	88 3a       	cpi	r24, 0xA8	; 168
    3bb8:	09 f4       	brne	.+2      	; 0x3bbc <__vector_24+0xd4>
    3bba:	7c c0       	rjmp	.+248    	; 0x3cb4 <__vector_24+0x1cc>
    3bbc:	b1 c0       	rjmp	.+354    	; 0x3d20 <__vector_24+0x238>
    3bbe:	80 3c       	cpi	r24, 0xC0	; 192
    3bc0:	09 f4       	brne	.+2      	; 0x3bc4 <__vector_24+0xdc>
    3bc2:	a4 c0       	rjmp	.+328    	; 0x3d0c <__vector_24+0x224>
    3bc4:	88 3c       	cpi	r24, 0xC8	; 200
    3bc6:	09 f4       	brne	.+2      	; 0x3bca <__vector_24+0xe2>
    3bc8:	a1 c0       	rjmp	.+322    	; 0x3d0c <__vector_24+0x224>
    3bca:	88 3b       	cpi	r24, 0xB8	; 184
    3bcc:	09 f4       	brne	.+2      	; 0x3bd0 <__vector_24+0xe8>
    3bce:	87 c0       	rjmp	.+270    	; 0x3cde <__vector_24+0x1f6>
    3bd0:	a7 c0       	rjmp	.+334    	; 0x3d20 <__vector_24+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    3bd2:	80 91 1e 04 	lds	r24, 0x041E	; 0x80041e <twi_slarw>
    3bd6:	10 c0       	rjmp	.+32     	; 0x3bf8 <__vector_24+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    3bd8:	90 91 f7 03 	lds	r25, 0x03F7	; 0x8003f7 <twi_masterBufferIndex>
    3bdc:	80 91 f6 03 	lds	r24, 0x03F6	; 0x8003f6 <twi_masterBufferLength>
    3be0:	98 17       	cp	r25, r24
    3be2:	70 f5       	brcc	.+92     	; 0x3c40 <__vector_24+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    3be4:	e0 91 f7 03 	lds	r30, 0x03F7	; 0x8003f7 <twi_masterBufferIndex>
    3be8:	81 e0       	ldi	r24, 0x01	; 1
    3bea:	8e 0f       	add	r24, r30
    3bec:	80 93 f7 03 	sts	0x03F7, r24	; 0x8003f7 <twi_masterBufferIndex>
    3bf0:	f0 e0       	ldi	r31, 0x00	; 0
    3bf2:	e8 50       	subi	r30, 0x08	; 8
    3bf4:	fc 4f       	sbci	r31, 0xFC	; 252
    3bf6:	80 81       	ld	r24, Z
    3bf8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    3bfc:	85 ec       	ldi	r24, 0xC5	; 197
    3bfe:	83 c0       	rjmp	.+262    	; 0x3d06 <__vector_24+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    3c00:	80 93 b2 03 	sts	0x03B2, r24	; 0x8003b2 <twi_error>
    3c04:	8b c0       	rjmp	.+278    	; 0x3d1c <__vector_24+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    3c06:	e0 91 f7 03 	lds	r30, 0x03F7	; 0x8003f7 <twi_masterBufferIndex>
    3c0a:	81 e0       	ldi	r24, 0x01	; 1
    3c0c:	8e 0f       	add	r24, r30
    3c0e:	80 93 f7 03 	sts	0x03F7, r24	; 0x8003f7 <twi_masterBufferIndex>
    3c12:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    3c16:	f0 e0       	ldi	r31, 0x00	; 0
    3c18:	e8 50       	subi	r30, 0x08	; 8
    3c1a:	fc 4f       	sbci	r31, 0xFC	; 252
    3c1c:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    3c1e:	90 91 f7 03 	lds	r25, 0x03F7	; 0x8003f7 <twi_masterBufferIndex>
    3c22:	80 91 f6 03 	lds	r24, 0x03F6	; 0x8003f6 <twi_masterBufferLength>
    3c26:	6b c0       	rjmp	.+214    	; 0x3cfe <__vector_24+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    3c28:	e0 91 f7 03 	lds	r30, 0x03F7	; 0x8003f7 <twi_masterBufferIndex>
    3c2c:	81 e0       	ldi	r24, 0x01	; 1
    3c2e:	8e 0f       	add	r24, r30
    3c30:	80 93 f7 03 	sts	0x03F7, r24	; 0x8003f7 <twi_masterBufferIndex>
    3c34:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    3c38:	f0 e0       	ldi	r31, 0x00	; 0
    3c3a:	e8 50       	subi	r30, 0x08	; 8
    3c3c:	fc 4f       	sbci	r31, 0xFC	; 252
    3c3e:	80 83       	st	Z, r24
	if (twi_sendStop)
    3c40:	80 91 1d 04 	lds	r24, 0x041D	; 0x80041d <twi_sendStop>
    3c44:	81 11       	cpse	r24, r1
    3c46:	6a c0       	rjmp	.+212    	; 0x3d1c <__vector_24+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    3c48:	81 e0       	ldi	r24, 0x01	; 1
    3c4a:	80 93 1c 04 	sts	0x041C, r24	; 0x80041c <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    3c4e:	84 ea       	ldi	r24, 0xA4	; 164
    3c50:	5e c0       	rjmp	.+188    	; 0x3d0e <__vector_24+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    3c52:	83 e0       	ldi	r24, 0x03	; 3
    3c54:	80 93 1f 04 	sts	0x041F, r24	; 0x80041f <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    3c58:	10 92 b3 03 	sts	0x03B3, r1	; 0x8003b3 <twi_rxBufferIndex>
    3c5c:	cf cf       	rjmp	.-98     	; 0x3bfc <__vector_24+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    3c5e:	80 91 b3 03 	lds	r24, 0x03B3	; 0x8003b3 <twi_rxBufferIndex>
    3c62:	80 32       	cpi	r24, 0x20	; 32
    3c64:	08 f0       	brcs	.+2      	; 0x3c68 <__vector_24+0x180>
    3c66:	4e c0       	rjmp	.+156    	; 0x3d04 <__vector_24+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    3c68:	e0 91 b3 03 	lds	r30, 0x03B3	; 0x8003b3 <twi_rxBufferIndex>
    3c6c:	81 e0       	ldi	r24, 0x01	; 1
    3c6e:	8e 0f       	add	r24, r30
    3c70:	80 93 b3 03 	sts	0x03B3, r24	; 0x8003b3 <twi_rxBufferIndex>
    3c74:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    3c78:	f0 e0       	ldi	r31, 0x00	; 0
    3c7a:	ec 54       	subi	r30, 0x4C	; 76
    3c7c:	fc 4f       	sbci	r31, 0xFC	; 252
    3c7e:	80 83       	st	Z, r24
    3c80:	bd cf       	rjmp	.-134    	; 0x3bfc <__vector_24+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    3c82:	0e 94 6e 1d 	call	0x3adc	; 0x3adc <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    3c86:	80 91 b3 03 	lds	r24, 0x03B3	; 0x8003b3 <twi_rxBufferIndex>
    3c8a:	80 32       	cpi	r24, 0x20	; 32
    3c8c:	30 f4       	brcc	.+12     	; 0x3c9a <__vector_24+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    3c8e:	e0 91 b3 03 	lds	r30, 0x03B3	; 0x8003b3 <twi_rxBufferIndex>
    3c92:	f0 e0       	ldi	r31, 0x00	; 0
    3c94:	ec 54       	subi	r30, 0x4C	; 76
    3c96:	fc 4f       	sbci	r31, 0xFC	; 252
    3c98:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    3c9a:	60 91 b3 03 	lds	r22, 0x03B3	; 0x8003b3 <twi_rxBufferIndex>
    3c9e:	70 e0       	ldi	r23, 0x00	; 0
    3ca0:	e0 91 18 04 	lds	r30, 0x0418	; 0x800418 <twi_onSlaveReceive>
    3ca4:	f0 91 19 04 	lds	r31, 0x0419	; 0x800419 <twi_onSlaveReceive+0x1>
    3ca8:	84 eb       	ldi	r24, 0xB4	; 180
    3caa:	93 e0       	ldi	r25, 0x03	; 3
    3cac:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    3cae:	10 92 b3 03 	sts	0x03B3, r1	; 0x8003b3 <twi_rxBufferIndex>
      break;
    3cb2:	36 c0       	rjmp	.+108    	; 0x3d20 <__vector_24+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    3cb4:	84 e0       	ldi	r24, 0x04	; 4
    3cb6:	80 93 1f 04 	sts	0x041F, r24	; 0x80041f <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    3cba:	10 92 d5 03 	sts	0x03D5, r1	; 0x8003d5 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    3cbe:	10 92 d4 03 	sts	0x03D4, r1	; 0x8003d4 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    3cc2:	e0 91 1a 04 	lds	r30, 0x041A	; 0x80041a <twi_onSlaveTransmit>
    3cc6:	f0 91 1b 04 	lds	r31, 0x041B	; 0x80041b <twi_onSlaveTransmit+0x1>
    3cca:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    3ccc:	80 91 d4 03 	lds	r24, 0x03D4	; 0x8003d4 <twi_txBufferLength>
    3cd0:	81 11       	cpse	r24, r1
    3cd2:	05 c0       	rjmp	.+10     	; 0x3cde <__vector_24+0x1f6>
        twi_txBufferLength = 1;
    3cd4:	81 e0       	ldi	r24, 0x01	; 1
    3cd6:	80 93 d4 03 	sts	0x03D4, r24	; 0x8003d4 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    3cda:	10 92 d6 03 	sts	0x03D6, r1	; 0x8003d6 <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    3cde:	e0 91 d5 03 	lds	r30, 0x03D5	; 0x8003d5 <twi_txBufferIndex>
    3ce2:	81 e0       	ldi	r24, 0x01	; 1
    3ce4:	8e 0f       	add	r24, r30
    3ce6:	80 93 d5 03 	sts	0x03D5, r24	; 0x8003d5 <twi_txBufferIndex>
    3cea:	f0 e0       	ldi	r31, 0x00	; 0
    3cec:	ea 52       	subi	r30, 0x2A	; 42
    3cee:	fc 4f       	sbci	r31, 0xFC	; 252
    3cf0:	80 81       	ld	r24, Z
    3cf2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    3cf6:	90 91 d5 03 	lds	r25, 0x03D5	; 0x8003d5 <twi_txBufferIndex>
    3cfa:	80 91 d4 03 	lds	r24, 0x03D4	; 0x8003d4 <twi_txBufferLength>
    3cfe:	98 17       	cp	r25, r24
    3d00:	08 f4       	brcc	.+2      	; 0x3d04 <__vector_24+0x21c>
    3d02:	7c cf       	rjmp	.-264    	; 0x3bfc <__vector_24+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    3d04:	85 e8       	ldi	r24, 0x85	; 133
    3d06:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    3d0a:	0a c0       	rjmp	.+20     	; 0x3d20 <__vector_24+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    3d0c:	85 ec       	ldi	r24, 0xC5	; 197
    3d0e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    3d12:	10 92 1f 04 	sts	0x041F, r1	; 0x80041f <twi_state>
      break;
    3d16:	04 c0       	rjmp	.+8      	; 0x3d20 <__vector_24+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    3d18:	10 92 b2 03 	sts	0x03B2, r1	; 0x8003b2 <twi_error>
      twi_stop();
    3d1c:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <twi_stop>
      break;
  }
}
    3d20:	ff 91       	pop	r31
    3d22:	ef 91       	pop	r30
    3d24:	bf 91       	pop	r27
    3d26:	af 91       	pop	r26
    3d28:	9f 91       	pop	r25
    3d2a:	8f 91       	pop	r24
    3d2c:	7f 91       	pop	r23
    3d2e:	6f 91       	pop	r22
    3d30:	5f 91       	pop	r21
    3d32:	4f 91       	pop	r20
    3d34:	3f 91       	pop	r19
    3d36:	2f 91       	pop	r18
    3d38:	0f 90       	pop	r0
    3d3a:	0f be       	out	0x3f, r0	; 63
    3d3c:	0f 90       	pop	r0
    3d3e:	1f 90       	pop	r1
    3d40:	18 95       	reti

00003d42 <__udivmodqi4>:
    3d42:	99 1b       	sub	r25, r25
    3d44:	79 e0       	ldi	r23, 0x09	; 9
    3d46:	04 c0       	rjmp	.+8      	; 0x3d50 <__udivmodqi4_ep>

00003d48 <__udivmodqi4_loop>:
    3d48:	99 1f       	adc	r25, r25
    3d4a:	96 17       	cp	r25, r22
    3d4c:	08 f0       	brcs	.+2      	; 0x3d50 <__udivmodqi4_ep>
    3d4e:	96 1b       	sub	r25, r22

00003d50 <__udivmodqi4_ep>:
    3d50:	88 1f       	adc	r24, r24
    3d52:	7a 95       	dec	r23
    3d54:	c9 f7       	brne	.-14     	; 0x3d48 <__udivmodqi4_loop>
    3d56:	80 95       	com	r24
    3d58:	08 95       	ret

00003d5a <__udivmodsi4>:
    3d5a:	a1 e2       	ldi	r26, 0x21	; 33
    3d5c:	1a 2e       	mov	r1, r26
    3d5e:	aa 1b       	sub	r26, r26
    3d60:	bb 1b       	sub	r27, r27
    3d62:	fd 01       	movw	r30, r26
    3d64:	0d c0       	rjmp	.+26     	; 0x3d80 <__udivmodsi4_ep>

00003d66 <__udivmodsi4_loop>:
    3d66:	aa 1f       	adc	r26, r26
    3d68:	bb 1f       	adc	r27, r27
    3d6a:	ee 1f       	adc	r30, r30
    3d6c:	ff 1f       	adc	r31, r31
    3d6e:	a2 17       	cp	r26, r18
    3d70:	b3 07       	cpc	r27, r19
    3d72:	e4 07       	cpc	r30, r20
    3d74:	f5 07       	cpc	r31, r21
    3d76:	20 f0       	brcs	.+8      	; 0x3d80 <__udivmodsi4_ep>
    3d78:	a2 1b       	sub	r26, r18
    3d7a:	b3 0b       	sbc	r27, r19
    3d7c:	e4 0b       	sbc	r30, r20
    3d7e:	f5 0b       	sbc	r31, r21

00003d80 <__udivmodsi4_ep>:
    3d80:	66 1f       	adc	r22, r22
    3d82:	77 1f       	adc	r23, r23
    3d84:	88 1f       	adc	r24, r24
    3d86:	99 1f       	adc	r25, r25
    3d88:	1a 94       	dec	r1
    3d8a:	69 f7       	brne	.-38     	; 0x3d66 <__udivmodsi4_loop>
    3d8c:	60 95       	com	r22
    3d8e:	70 95       	com	r23
    3d90:	80 95       	com	r24
    3d92:	90 95       	com	r25
    3d94:	9b 01       	movw	r18, r22
    3d96:	ac 01       	movw	r20, r24
    3d98:	bd 01       	movw	r22, r26
    3d9a:	cf 01       	movw	r24, r30
    3d9c:	08 95       	ret

00003d9e <__divmodsi4>:
    3d9e:	05 2e       	mov	r0, r21
    3da0:	97 fb       	bst	r25, 7
    3da2:	1e f4       	brtc	.+6      	; 0x3daa <__divmodsi4+0xc>
    3da4:	00 94       	com	r0
    3da6:	0e 94 e6 1e 	call	0x3dcc	; 0x3dcc <__negsi2>
    3daa:	57 fd       	sbrc	r21, 7
    3dac:	07 d0       	rcall	.+14     	; 0x3dbc <__divmodsi4_neg2>
    3dae:	0e 94 ad 1e 	call	0x3d5a	; 0x3d5a <__udivmodsi4>
    3db2:	07 fc       	sbrc	r0, 7
    3db4:	03 d0       	rcall	.+6      	; 0x3dbc <__divmodsi4_neg2>
    3db6:	4e f4       	brtc	.+18     	; 0x3dca <__divmodsi4_exit>
    3db8:	0c 94 e6 1e 	jmp	0x3dcc	; 0x3dcc <__negsi2>

00003dbc <__divmodsi4_neg2>:
    3dbc:	50 95       	com	r21
    3dbe:	40 95       	com	r20
    3dc0:	30 95       	com	r19
    3dc2:	21 95       	neg	r18
    3dc4:	3f 4f       	sbci	r19, 0xFF	; 255
    3dc6:	4f 4f       	sbci	r20, 0xFF	; 255
    3dc8:	5f 4f       	sbci	r21, 0xFF	; 255

00003dca <__divmodsi4_exit>:
    3dca:	08 95       	ret

00003dcc <__negsi2>:
    3dcc:	90 95       	com	r25
    3dce:	80 95       	com	r24
    3dd0:	70 95       	com	r23
    3dd2:	61 95       	neg	r22
    3dd4:	7f 4f       	sbci	r23, 0xFF	; 255
    3dd6:	8f 4f       	sbci	r24, 0xFF	; 255
    3dd8:	9f 4f       	sbci	r25, 0xFF	; 255
    3dda:	08 95       	ret

00003ddc <__tablejump2__>:
    3ddc:	ee 0f       	add	r30, r30
    3dde:	ff 1f       	adc	r31, r31
    3de0:	05 90       	lpm	r0, Z+
    3de2:	f4 91       	lpm	r31, Z
    3de4:	e0 2d       	mov	r30, r0
    3de6:	09 94       	ijmp

00003de8 <__umulhisi3>:
    3de8:	a2 9f       	mul	r26, r18
    3dea:	b0 01       	movw	r22, r0
    3dec:	b3 9f       	mul	r27, r19
    3dee:	c0 01       	movw	r24, r0
    3df0:	a3 9f       	mul	r26, r19
    3df2:	70 0d       	add	r23, r0
    3df4:	81 1d       	adc	r24, r1
    3df6:	11 24       	eor	r1, r1
    3df8:	91 1d       	adc	r25, r1
    3dfa:	b2 9f       	mul	r27, r18
    3dfc:	70 0d       	add	r23, r0
    3dfe:	81 1d       	adc	r24, r1
    3e00:	11 24       	eor	r1, r1
    3e02:	91 1d       	adc	r25, r1
    3e04:	08 95       	ret

00003e06 <__muluhisi3>:
    3e06:	0e 94 f4 1e 	call	0x3de8	; 0x3de8 <__umulhisi3>
    3e0a:	a5 9f       	mul	r26, r21
    3e0c:	90 0d       	add	r25, r0
    3e0e:	b4 9f       	mul	r27, r20
    3e10:	90 0d       	add	r25, r0
    3e12:	a4 9f       	mul	r26, r20
    3e14:	80 0d       	add	r24, r0
    3e16:	91 1d       	adc	r25, r1
    3e18:	11 24       	eor	r1, r1
    3e1a:	08 95       	ret

00003e1c <atoi>:
    3e1c:	fc 01       	movw	r30, r24
    3e1e:	88 27       	eor	r24, r24
    3e20:	99 27       	eor	r25, r25
    3e22:	e8 94       	clt
    3e24:	21 91       	ld	r18, Z+
    3e26:	20 32       	cpi	r18, 0x20	; 32
    3e28:	e9 f3       	breq	.-6      	; 0x3e24 <atoi+0x8>
    3e2a:	29 30       	cpi	r18, 0x09	; 9
    3e2c:	10 f0       	brcs	.+4      	; 0x3e32 <atoi+0x16>
    3e2e:	2e 30       	cpi	r18, 0x0E	; 14
    3e30:	c8 f3       	brcs	.-14     	; 0x3e24 <atoi+0x8>
    3e32:	2b 32       	cpi	r18, 0x2B	; 43
    3e34:	41 f0       	breq	.+16     	; 0x3e46 <atoi+0x2a>
    3e36:	2d 32       	cpi	r18, 0x2D	; 45
    3e38:	39 f4       	brne	.+14     	; 0x3e48 <atoi+0x2c>
    3e3a:	68 94       	set
    3e3c:	04 c0       	rjmp	.+8      	; 0x3e46 <atoi+0x2a>
    3e3e:	0e 94 95 1f 	call	0x3f2a	; 0x3f2a <__mulhi_const_10>
    3e42:	82 0f       	add	r24, r18
    3e44:	91 1d       	adc	r25, r1
    3e46:	21 91       	ld	r18, Z+
    3e48:	20 53       	subi	r18, 0x30	; 48
    3e4a:	2a 30       	cpi	r18, 0x0A	; 10
    3e4c:	c0 f3       	brcs	.-16     	; 0x3e3e <atoi+0x22>
    3e4e:	1e f4       	brtc	.+6      	; 0x3e56 <atoi+0x3a>
    3e50:	90 95       	com	r25
    3e52:	81 95       	neg	r24
    3e54:	9f 4f       	sbci	r25, 0xFF	; 255
    3e56:	08 95       	ret

00003e58 <memcpy_P>:
    3e58:	fb 01       	movw	r30, r22
    3e5a:	dc 01       	movw	r26, r24
    3e5c:	02 c0       	rjmp	.+4      	; 0x3e62 <memcpy_P+0xa>
    3e5e:	05 90       	lpm	r0, Z+
    3e60:	0d 92       	st	X+, r0
    3e62:	41 50       	subi	r20, 0x01	; 1
    3e64:	50 40       	sbci	r21, 0x00	; 0
    3e66:	d8 f7       	brcc	.-10     	; 0x3e5e <memcpy_P+0x6>
    3e68:	08 95       	ret

00003e6a <strtok>:
    3e6a:	48 e5       	ldi	r20, 0x58	; 88
    3e6c:	52 e0       	ldi	r21, 0x02	; 2
    3e6e:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <strtok_r>
    3e72:	08 95       	ret

00003e74 <memcpy>:
    3e74:	fb 01       	movw	r30, r22
    3e76:	dc 01       	movw	r26, r24
    3e78:	02 c0       	rjmp	.+4      	; 0x3e7e <memcpy+0xa>
    3e7a:	01 90       	ld	r0, Z+
    3e7c:	0d 92       	st	X+, r0
    3e7e:	41 50       	subi	r20, 0x01	; 1
    3e80:	50 40       	sbci	r21, 0x00	; 0
    3e82:	d8 f7       	brcc	.-10     	; 0x3e7a <memcpy+0x6>
    3e84:	08 95       	ret

00003e86 <memset>:
    3e86:	dc 01       	movw	r26, r24
    3e88:	01 c0       	rjmp	.+2      	; 0x3e8c <memset+0x6>
    3e8a:	6d 93       	st	X+, r22
    3e8c:	41 50       	subi	r20, 0x01	; 1
    3e8e:	50 40       	sbci	r21, 0x00	; 0
    3e90:	e0 f7       	brcc	.-8      	; 0x3e8a <memset+0x4>
    3e92:	08 95       	ret

00003e94 <strcat>:
    3e94:	fb 01       	movw	r30, r22
    3e96:	dc 01       	movw	r26, r24
    3e98:	0d 90       	ld	r0, X+
    3e9a:	00 20       	and	r0, r0
    3e9c:	e9 f7       	brne	.-6      	; 0x3e98 <strcat+0x4>
    3e9e:	11 97       	sbiw	r26, 0x01	; 1
    3ea0:	01 90       	ld	r0, Z+
    3ea2:	0d 92       	st	X+, r0
    3ea4:	00 20       	and	r0, r0
    3ea6:	e1 f7       	brne	.-8      	; 0x3ea0 <strcat+0xc>
    3ea8:	08 95       	ret

00003eaa <strcmp>:
    3eaa:	fb 01       	movw	r30, r22
    3eac:	dc 01       	movw	r26, r24
    3eae:	8d 91       	ld	r24, X+
    3eb0:	01 90       	ld	r0, Z+
    3eb2:	80 19       	sub	r24, r0
    3eb4:	01 10       	cpse	r0, r1
    3eb6:	d9 f3       	breq	.-10     	; 0x3eae <strcmp+0x4>
    3eb8:	99 0b       	sbc	r25, r25
    3eba:	08 95       	ret

00003ebc <strncat>:
    3ebc:	fb 01       	movw	r30, r22
    3ebe:	dc 01       	movw	r26, r24
    3ec0:	0d 90       	ld	r0, X+
    3ec2:	00 20       	and	r0, r0
    3ec4:	e9 f7       	brne	.-6      	; 0x3ec0 <strncat+0x4>
    3ec6:	11 97       	sbiw	r26, 0x01	; 1
    3ec8:	41 50       	subi	r20, 0x01	; 1
    3eca:	50 40       	sbci	r21, 0x00	; 0
    3ecc:	28 f0       	brcs	.+10     	; 0x3ed8 <strncat+0x1c>
    3ece:	01 90       	ld	r0, Z+
    3ed0:	00 20       	and	r0, r0
    3ed2:	0d 92       	st	X+, r0
    3ed4:	c9 f7       	brne	.-14     	; 0x3ec8 <strncat+0xc>
    3ed6:	08 95       	ret
    3ed8:	1c 92       	st	X, r1
    3eda:	08 95       	ret

00003edc <strtok_r>:
    3edc:	fa 01       	movw	r30, r20
    3ede:	a1 91       	ld	r26, Z+
    3ee0:	b0 81       	ld	r27, Z
    3ee2:	00 97       	sbiw	r24, 0x00	; 0
    3ee4:	19 f4       	brne	.+6      	; 0x3eec <strtok_r+0x10>
    3ee6:	10 97       	sbiw	r26, 0x00	; 0
    3ee8:	e1 f0       	breq	.+56     	; 0x3f22 <strtok_r+0x46>
    3eea:	cd 01       	movw	r24, r26
    3eec:	dc 01       	movw	r26, r24
    3eee:	cd 01       	movw	r24, r26
    3ef0:	0d 90       	ld	r0, X+
    3ef2:	00 20       	and	r0, r0
    3ef4:	11 f4       	brne	.+4      	; 0x3efa <strtok_r+0x1e>
    3ef6:	c0 01       	movw	r24, r0
    3ef8:	13 c0       	rjmp	.+38     	; 0x3f20 <strtok_r+0x44>
    3efa:	fb 01       	movw	r30, r22
    3efc:	21 91       	ld	r18, Z+
    3efe:	22 23       	and	r18, r18
    3f00:	19 f0       	breq	.+6      	; 0x3f08 <strtok_r+0x2c>
    3f02:	20 15       	cp	r18, r0
    3f04:	d9 f7       	brne	.-10     	; 0x3efc <strtok_r+0x20>
    3f06:	f3 cf       	rjmp	.-26     	; 0x3eee <strtok_r+0x12>
    3f08:	fb 01       	movw	r30, r22
    3f0a:	21 91       	ld	r18, Z+
    3f0c:	20 15       	cp	r18, r0
    3f0e:	19 f4       	brne	.+6      	; 0x3f16 <strtok_r+0x3a>
    3f10:	1e 92       	st	-X, r1
    3f12:	11 96       	adiw	r26, 0x01	; 1
    3f14:	06 c0       	rjmp	.+12     	; 0x3f22 <strtok_r+0x46>
    3f16:	22 23       	and	r18, r18
    3f18:	c1 f7       	brne	.-16     	; 0x3f0a <strtok_r+0x2e>
    3f1a:	0d 90       	ld	r0, X+
    3f1c:	00 20       	and	r0, r0
    3f1e:	a1 f7       	brne	.-24     	; 0x3f08 <strtok_r+0x2c>
    3f20:	d0 01       	movw	r26, r0
    3f22:	fa 01       	movw	r30, r20
    3f24:	a1 93       	st	Z+, r26
    3f26:	b0 83       	st	Z, r27
    3f28:	08 95       	ret

00003f2a <__mulhi_const_10>:
    3f2a:	7a e0       	ldi	r23, 0x0A	; 10
    3f2c:	97 9f       	mul	r25, r23
    3f2e:	90 2d       	mov	r25, r0
    3f30:	87 9f       	mul	r24, r23
    3f32:	80 2d       	mov	r24, r0
    3f34:	91 0d       	add	r25, r1
    3f36:	11 24       	eor	r1, r1
    3f38:	08 95       	ret

00003f3a <sprintf>:
    3f3a:	ae e0       	ldi	r26, 0x0E	; 14
    3f3c:	b0 e0       	ldi	r27, 0x00	; 0
    3f3e:	e3 ea       	ldi	r30, 0xA3	; 163
    3f40:	ff e1       	ldi	r31, 0x1F	; 31
    3f42:	0c 94 74 22 	jmp	0x44e8	; 0x44e8 <__prologue_saves__+0x1c>
    3f46:	0d 89       	ldd	r16, Y+21	; 0x15
    3f48:	1e 89       	ldd	r17, Y+22	; 0x16
    3f4a:	86 e0       	ldi	r24, 0x06	; 6
    3f4c:	8c 83       	std	Y+4, r24	; 0x04
    3f4e:	1a 83       	std	Y+2, r17	; 0x02
    3f50:	09 83       	std	Y+1, r16	; 0x01
    3f52:	8f ef       	ldi	r24, 0xFF	; 255
    3f54:	9f e7       	ldi	r25, 0x7F	; 127
    3f56:	9e 83       	std	Y+6, r25	; 0x06
    3f58:	8d 83       	std	Y+5, r24	; 0x05
    3f5a:	ae 01       	movw	r20, r28
    3f5c:	47 5e       	subi	r20, 0xE7	; 231
    3f5e:	5f 4f       	sbci	r21, 0xFF	; 255
    3f60:	6f 89       	ldd	r22, Y+23	; 0x17
    3f62:	78 8d       	ldd	r23, Y+24	; 0x18
    3f64:	ce 01       	movw	r24, r28
    3f66:	01 96       	adiw	r24, 0x01	; 1
    3f68:	0e 94 bf 1f 	call	0x3f7e	; 0x3f7e <vfprintf>
    3f6c:	ef 81       	ldd	r30, Y+7	; 0x07
    3f6e:	f8 85       	ldd	r31, Y+8	; 0x08
    3f70:	e0 0f       	add	r30, r16
    3f72:	f1 1f       	adc	r31, r17
    3f74:	10 82       	st	Z, r1
    3f76:	2e 96       	adiw	r28, 0x0e	; 14
    3f78:	e4 e0       	ldi	r30, 0x04	; 4
    3f7a:	0c 94 90 22 	jmp	0x4520	; 0x4520 <__epilogue_restores__+0x1c>

00003f7e <vfprintf>:
    3f7e:	ab e0       	ldi	r26, 0x0B	; 11
    3f80:	b0 e0       	ldi	r27, 0x00	; 0
    3f82:	e5 ec       	ldi	r30, 0xC5	; 197
    3f84:	ff e1       	ldi	r31, 0x1F	; 31
    3f86:	0c 94 66 22 	jmp	0x44cc	; 0x44cc <__prologue_saves__>
    3f8a:	6c 01       	movw	r12, r24
    3f8c:	7b 01       	movw	r14, r22
    3f8e:	8a 01       	movw	r16, r20
    3f90:	fc 01       	movw	r30, r24
    3f92:	17 82       	std	Z+7, r1	; 0x07
    3f94:	16 82       	std	Z+6, r1	; 0x06
    3f96:	83 81       	ldd	r24, Z+3	; 0x03
    3f98:	81 ff       	sbrs	r24, 1
    3f9a:	cc c1       	rjmp	.+920    	; 0x4334 <vfprintf+0x3b6>
    3f9c:	ce 01       	movw	r24, r28
    3f9e:	01 96       	adiw	r24, 0x01	; 1
    3fa0:	3c 01       	movw	r6, r24
    3fa2:	f6 01       	movw	r30, r12
    3fa4:	93 81       	ldd	r25, Z+3	; 0x03
    3fa6:	f7 01       	movw	r30, r14
    3fa8:	93 fd       	sbrc	r25, 3
    3faa:	85 91       	lpm	r24, Z+
    3fac:	93 ff       	sbrs	r25, 3
    3fae:	81 91       	ld	r24, Z+
    3fb0:	7f 01       	movw	r14, r30
    3fb2:	88 23       	and	r24, r24
    3fb4:	09 f4       	brne	.+2      	; 0x3fb8 <vfprintf+0x3a>
    3fb6:	ba c1       	rjmp	.+884    	; 0x432c <vfprintf+0x3ae>
    3fb8:	85 32       	cpi	r24, 0x25	; 37
    3fba:	39 f4       	brne	.+14     	; 0x3fca <vfprintf+0x4c>
    3fbc:	93 fd       	sbrc	r25, 3
    3fbe:	85 91       	lpm	r24, Z+
    3fc0:	93 ff       	sbrs	r25, 3
    3fc2:	81 91       	ld	r24, Z+
    3fc4:	7f 01       	movw	r14, r30
    3fc6:	85 32       	cpi	r24, 0x25	; 37
    3fc8:	29 f4       	brne	.+10     	; 0x3fd4 <vfprintf+0x56>
    3fca:	b6 01       	movw	r22, r12
    3fcc:	90 e0       	ldi	r25, 0x00	; 0
    3fce:	0e 94 b6 21 	call	0x436c	; 0x436c <fputc>
    3fd2:	e7 cf       	rjmp	.-50     	; 0x3fa2 <vfprintf+0x24>
    3fd4:	91 2c       	mov	r9, r1
    3fd6:	21 2c       	mov	r2, r1
    3fd8:	31 2c       	mov	r3, r1
    3fda:	ff e1       	ldi	r31, 0x1F	; 31
    3fdc:	f3 15       	cp	r31, r3
    3fde:	d8 f0       	brcs	.+54     	; 0x4016 <vfprintf+0x98>
    3fe0:	8b 32       	cpi	r24, 0x2B	; 43
    3fe2:	79 f0       	breq	.+30     	; 0x4002 <vfprintf+0x84>
    3fe4:	38 f4       	brcc	.+14     	; 0x3ff4 <vfprintf+0x76>
    3fe6:	80 32       	cpi	r24, 0x20	; 32
    3fe8:	79 f0       	breq	.+30     	; 0x4008 <vfprintf+0x8a>
    3fea:	83 32       	cpi	r24, 0x23	; 35
    3fec:	a1 f4       	brne	.+40     	; 0x4016 <vfprintf+0x98>
    3fee:	23 2d       	mov	r18, r3
    3ff0:	20 61       	ori	r18, 0x10	; 16
    3ff2:	1d c0       	rjmp	.+58     	; 0x402e <vfprintf+0xb0>
    3ff4:	8d 32       	cpi	r24, 0x2D	; 45
    3ff6:	61 f0       	breq	.+24     	; 0x4010 <vfprintf+0x92>
    3ff8:	80 33       	cpi	r24, 0x30	; 48
    3ffa:	69 f4       	brne	.+26     	; 0x4016 <vfprintf+0x98>
    3ffc:	23 2d       	mov	r18, r3
    3ffe:	21 60       	ori	r18, 0x01	; 1
    4000:	16 c0       	rjmp	.+44     	; 0x402e <vfprintf+0xb0>
    4002:	83 2d       	mov	r24, r3
    4004:	82 60       	ori	r24, 0x02	; 2
    4006:	38 2e       	mov	r3, r24
    4008:	e3 2d       	mov	r30, r3
    400a:	e4 60       	ori	r30, 0x04	; 4
    400c:	3e 2e       	mov	r3, r30
    400e:	2a c0       	rjmp	.+84     	; 0x4064 <vfprintf+0xe6>
    4010:	f3 2d       	mov	r31, r3
    4012:	f8 60       	ori	r31, 0x08	; 8
    4014:	1d c0       	rjmp	.+58     	; 0x4050 <vfprintf+0xd2>
    4016:	37 fc       	sbrc	r3, 7
    4018:	2d c0       	rjmp	.+90     	; 0x4074 <vfprintf+0xf6>
    401a:	20 ed       	ldi	r18, 0xD0	; 208
    401c:	28 0f       	add	r18, r24
    401e:	2a 30       	cpi	r18, 0x0A	; 10
    4020:	40 f0       	brcs	.+16     	; 0x4032 <vfprintf+0xb4>
    4022:	8e 32       	cpi	r24, 0x2E	; 46
    4024:	b9 f4       	brne	.+46     	; 0x4054 <vfprintf+0xd6>
    4026:	36 fc       	sbrc	r3, 6
    4028:	81 c1       	rjmp	.+770    	; 0x432c <vfprintf+0x3ae>
    402a:	23 2d       	mov	r18, r3
    402c:	20 64       	ori	r18, 0x40	; 64
    402e:	32 2e       	mov	r3, r18
    4030:	19 c0       	rjmp	.+50     	; 0x4064 <vfprintf+0xe6>
    4032:	36 fe       	sbrs	r3, 6
    4034:	06 c0       	rjmp	.+12     	; 0x4042 <vfprintf+0xc4>
    4036:	8a e0       	ldi	r24, 0x0A	; 10
    4038:	98 9e       	mul	r9, r24
    403a:	20 0d       	add	r18, r0
    403c:	11 24       	eor	r1, r1
    403e:	92 2e       	mov	r9, r18
    4040:	11 c0       	rjmp	.+34     	; 0x4064 <vfprintf+0xe6>
    4042:	ea e0       	ldi	r30, 0x0A	; 10
    4044:	2e 9e       	mul	r2, r30
    4046:	20 0d       	add	r18, r0
    4048:	11 24       	eor	r1, r1
    404a:	22 2e       	mov	r2, r18
    404c:	f3 2d       	mov	r31, r3
    404e:	f0 62       	ori	r31, 0x20	; 32
    4050:	3f 2e       	mov	r3, r31
    4052:	08 c0       	rjmp	.+16     	; 0x4064 <vfprintf+0xe6>
    4054:	8c 36       	cpi	r24, 0x6C	; 108
    4056:	21 f4       	brne	.+8      	; 0x4060 <vfprintf+0xe2>
    4058:	83 2d       	mov	r24, r3
    405a:	80 68       	ori	r24, 0x80	; 128
    405c:	38 2e       	mov	r3, r24
    405e:	02 c0       	rjmp	.+4      	; 0x4064 <vfprintf+0xe6>
    4060:	88 36       	cpi	r24, 0x68	; 104
    4062:	41 f4       	brne	.+16     	; 0x4074 <vfprintf+0xf6>
    4064:	f7 01       	movw	r30, r14
    4066:	93 fd       	sbrc	r25, 3
    4068:	85 91       	lpm	r24, Z+
    406a:	93 ff       	sbrs	r25, 3
    406c:	81 91       	ld	r24, Z+
    406e:	7f 01       	movw	r14, r30
    4070:	81 11       	cpse	r24, r1
    4072:	b3 cf       	rjmp	.-154    	; 0x3fda <vfprintf+0x5c>
    4074:	98 2f       	mov	r25, r24
    4076:	9f 7d       	andi	r25, 0xDF	; 223
    4078:	95 54       	subi	r25, 0x45	; 69
    407a:	93 30       	cpi	r25, 0x03	; 3
    407c:	28 f4       	brcc	.+10     	; 0x4088 <vfprintf+0x10a>
    407e:	0c 5f       	subi	r16, 0xFC	; 252
    4080:	1f 4f       	sbci	r17, 0xFF	; 255
    4082:	9f e3       	ldi	r25, 0x3F	; 63
    4084:	99 83       	std	Y+1, r25	; 0x01
    4086:	0d c0       	rjmp	.+26     	; 0x40a2 <vfprintf+0x124>
    4088:	83 36       	cpi	r24, 0x63	; 99
    408a:	31 f0       	breq	.+12     	; 0x4098 <vfprintf+0x11a>
    408c:	83 37       	cpi	r24, 0x73	; 115
    408e:	71 f0       	breq	.+28     	; 0x40ac <vfprintf+0x12e>
    4090:	83 35       	cpi	r24, 0x53	; 83
    4092:	09 f0       	breq	.+2      	; 0x4096 <vfprintf+0x118>
    4094:	59 c0       	rjmp	.+178    	; 0x4148 <vfprintf+0x1ca>
    4096:	21 c0       	rjmp	.+66     	; 0x40da <vfprintf+0x15c>
    4098:	f8 01       	movw	r30, r16
    409a:	80 81       	ld	r24, Z
    409c:	89 83       	std	Y+1, r24	; 0x01
    409e:	0e 5f       	subi	r16, 0xFE	; 254
    40a0:	1f 4f       	sbci	r17, 0xFF	; 255
    40a2:	88 24       	eor	r8, r8
    40a4:	83 94       	inc	r8
    40a6:	91 2c       	mov	r9, r1
    40a8:	53 01       	movw	r10, r6
    40aa:	13 c0       	rjmp	.+38     	; 0x40d2 <vfprintf+0x154>
    40ac:	28 01       	movw	r4, r16
    40ae:	f2 e0       	ldi	r31, 0x02	; 2
    40b0:	4f 0e       	add	r4, r31
    40b2:	51 1c       	adc	r5, r1
    40b4:	f8 01       	movw	r30, r16
    40b6:	a0 80       	ld	r10, Z
    40b8:	b1 80       	ldd	r11, Z+1	; 0x01
    40ba:	36 fe       	sbrs	r3, 6
    40bc:	03 c0       	rjmp	.+6      	; 0x40c4 <vfprintf+0x146>
    40be:	69 2d       	mov	r22, r9
    40c0:	70 e0       	ldi	r23, 0x00	; 0
    40c2:	02 c0       	rjmp	.+4      	; 0x40c8 <vfprintf+0x14a>
    40c4:	6f ef       	ldi	r22, 0xFF	; 255
    40c6:	7f ef       	ldi	r23, 0xFF	; 255
    40c8:	c5 01       	movw	r24, r10
    40ca:	0e 94 ab 21 	call	0x4356	; 0x4356 <strnlen>
    40ce:	4c 01       	movw	r8, r24
    40d0:	82 01       	movw	r16, r4
    40d2:	f3 2d       	mov	r31, r3
    40d4:	ff 77       	andi	r31, 0x7F	; 127
    40d6:	3f 2e       	mov	r3, r31
    40d8:	16 c0       	rjmp	.+44     	; 0x4106 <vfprintf+0x188>
    40da:	28 01       	movw	r4, r16
    40dc:	22 e0       	ldi	r18, 0x02	; 2
    40de:	42 0e       	add	r4, r18
    40e0:	51 1c       	adc	r5, r1
    40e2:	f8 01       	movw	r30, r16
    40e4:	a0 80       	ld	r10, Z
    40e6:	b1 80       	ldd	r11, Z+1	; 0x01
    40e8:	36 fe       	sbrs	r3, 6
    40ea:	03 c0       	rjmp	.+6      	; 0x40f2 <vfprintf+0x174>
    40ec:	69 2d       	mov	r22, r9
    40ee:	70 e0       	ldi	r23, 0x00	; 0
    40f0:	02 c0       	rjmp	.+4      	; 0x40f6 <vfprintf+0x178>
    40f2:	6f ef       	ldi	r22, 0xFF	; 255
    40f4:	7f ef       	ldi	r23, 0xFF	; 255
    40f6:	c5 01       	movw	r24, r10
    40f8:	0e 94 a0 21 	call	0x4340	; 0x4340 <strnlen_P>
    40fc:	4c 01       	movw	r8, r24
    40fe:	f3 2d       	mov	r31, r3
    4100:	f0 68       	ori	r31, 0x80	; 128
    4102:	3f 2e       	mov	r3, r31
    4104:	82 01       	movw	r16, r4
    4106:	33 fc       	sbrc	r3, 3
    4108:	1b c0       	rjmp	.+54     	; 0x4140 <vfprintf+0x1c2>
    410a:	82 2d       	mov	r24, r2
    410c:	90 e0       	ldi	r25, 0x00	; 0
    410e:	88 16       	cp	r8, r24
    4110:	99 06       	cpc	r9, r25
    4112:	b0 f4       	brcc	.+44     	; 0x4140 <vfprintf+0x1c2>
    4114:	b6 01       	movw	r22, r12
    4116:	80 e2       	ldi	r24, 0x20	; 32
    4118:	90 e0       	ldi	r25, 0x00	; 0
    411a:	0e 94 b6 21 	call	0x436c	; 0x436c <fputc>
    411e:	2a 94       	dec	r2
    4120:	f4 cf       	rjmp	.-24     	; 0x410a <vfprintf+0x18c>
    4122:	f5 01       	movw	r30, r10
    4124:	37 fc       	sbrc	r3, 7
    4126:	85 91       	lpm	r24, Z+
    4128:	37 fe       	sbrs	r3, 7
    412a:	81 91       	ld	r24, Z+
    412c:	5f 01       	movw	r10, r30
    412e:	b6 01       	movw	r22, r12
    4130:	90 e0       	ldi	r25, 0x00	; 0
    4132:	0e 94 b6 21 	call	0x436c	; 0x436c <fputc>
    4136:	21 10       	cpse	r2, r1
    4138:	2a 94       	dec	r2
    413a:	21 e0       	ldi	r18, 0x01	; 1
    413c:	82 1a       	sub	r8, r18
    413e:	91 08       	sbc	r9, r1
    4140:	81 14       	cp	r8, r1
    4142:	91 04       	cpc	r9, r1
    4144:	71 f7       	brne	.-36     	; 0x4122 <vfprintf+0x1a4>
    4146:	e8 c0       	rjmp	.+464    	; 0x4318 <vfprintf+0x39a>
    4148:	84 36       	cpi	r24, 0x64	; 100
    414a:	11 f0       	breq	.+4      	; 0x4150 <vfprintf+0x1d2>
    414c:	89 36       	cpi	r24, 0x69	; 105
    414e:	41 f5       	brne	.+80     	; 0x41a0 <vfprintf+0x222>
    4150:	f8 01       	movw	r30, r16
    4152:	37 fe       	sbrs	r3, 7
    4154:	07 c0       	rjmp	.+14     	; 0x4164 <vfprintf+0x1e6>
    4156:	60 81       	ld	r22, Z
    4158:	71 81       	ldd	r23, Z+1	; 0x01
    415a:	82 81       	ldd	r24, Z+2	; 0x02
    415c:	93 81       	ldd	r25, Z+3	; 0x03
    415e:	0c 5f       	subi	r16, 0xFC	; 252
    4160:	1f 4f       	sbci	r17, 0xFF	; 255
    4162:	08 c0       	rjmp	.+16     	; 0x4174 <vfprintf+0x1f6>
    4164:	60 81       	ld	r22, Z
    4166:	71 81       	ldd	r23, Z+1	; 0x01
    4168:	07 2e       	mov	r0, r23
    416a:	00 0c       	add	r0, r0
    416c:	88 0b       	sbc	r24, r24
    416e:	99 0b       	sbc	r25, r25
    4170:	0e 5f       	subi	r16, 0xFE	; 254
    4172:	1f 4f       	sbci	r17, 0xFF	; 255
    4174:	f3 2d       	mov	r31, r3
    4176:	ff 76       	andi	r31, 0x6F	; 111
    4178:	3f 2e       	mov	r3, r31
    417a:	97 ff       	sbrs	r25, 7
    417c:	09 c0       	rjmp	.+18     	; 0x4190 <vfprintf+0x212>
    417e:	90 95       	com	r25
    4180:	80 95       	com	r24
    4182:	70 95       	com	r23
    4184:	61 95       	neg	r22
    4186:	7f 4f       	sbci	r23, 0xFF	; 255
    4188:	8f 4f       	sbci	r24, 0xFF	; 255
    418a:	9f 4f       	sbci	r25, 0xFF	; 255
    418c:	f0 68       	ori	r31, 0x80	; 128
    418e:	3f 2e       	mov	r3, r31
    4190:	2a e0       	ldi	r18, 0x0A	; 10
    4192:	30 e0       	ldi	r19, 0x00	; 0
    4194:	a3 01       	movw	r20, r6
    4196:	0e 94 f2 21 	call	0x43e4	; 0x43e4 <__ultoa_invert>
    419a:	88 2e       	mov	r8, r24
    419c:	86 18       	sub	r8, r6
    419e:	45 c0       	rjmp	.+138    	; 0x422a <vfprintf+0x2ac>
    41a0:	85 37       	cpi	r24, 0x75	; 117
    41a2:	31 f4       	brne	.+12     	; 0x41b0 <vfprintf+0x232>
    41a4:	23 2d       	mov	r18, r3
    41a6:	2f 7e       	andi	r18, 0xEF	; 239
    41a8:	b2 2e       	mov	r11, r18
    41aa:	2a e0       	ldi	r18, 0x0A	; 10
    41ac:	30 e0       	ldi	r19, 0x00	; 0
    41ae:	25 c0       	rjmp	.+74     	; 0x41fa <vfprintf+0x27c>
    41b0:	93 2d       	mov	r25, r3
    41b2:	99 7f       	andi	r25, 0xF9	; 249
    41b4:	b9 2e       	mov	r11, r25
    41b6:	8f 36       	cpi	r24, 0x6F	; 111
    41b8:	c1 f0       	breq	.+48     	; 0x41ea <vfprintf+0x26c>
    41ba:	18 f4       	brcc	.+6      	; 0x41c2 <vfprintf+0x244>
    41bc:	88 35       	cpi	r24, 0x58	; 88
    41be:	79 f0       	breq	.+30     	; 0x41de <vfprintf+0x260>
    41c0:	b5 c0       	rjmp	.+362    	; 0x432c <vfprintf+0x3ae>
    41c2:	80 37       	cpi	r24, 0x70	; 112
    41c4:	19 f0       	breq	.+6      	; 0x41cc <vfprintf+0x24e>
    41c6:	88 37       	cpi	r24, 0x78	; 120
    41c8:	21 f0       	breq	.+8      	; 0x41d2 <vfprintf+0x254>
    41ca:	b0 c0       	rjmp	.+352    	; 0x432c <vfprintf+0x3ae>
    41cc:	e9 2f       	mov	r30, r25
    41ce:	e0 61       	ori	r30, 0x10	; 16
    41d0:	be 2e       	mov	r11, r30
    41d2:	b4 fe       	sbrs	r11, 4
    41d4:	0d c0       	rjmp	.+26     	; 0x41f0 <vfprintf+0x272>
    41d6:	fb 2d       	mov	r31, r11
    41d8:	f4 60       	ori	r31, 0x04	; 4
    41da:	bf 2e       	mov	r11, r31
    41dc:	09 c0       	rjmp	.+18     	; 0x41f0 <vfprintf+0x272>
    41de:	34 fe       	sbrs	r3, 4
    41e0:	0a c0       	rjmp	.+20     	; 0x41f6 <vfprintf+0x278>
    41e2:	29 2f       	mov	r18, r25
    41e4:	26 60       	ori	r18, 0x06	; 6
    41e6:	b2 2e       	mov	r11, r18
    41e8:	06 c0       	rjmp	.+12     	; 0x41f6 <vfprintf+0x278>
    41ea:	28 e0       	ldi	r18, 0x08	; 8
    41ec:	30 e0       	ldi	r19, 0x00	; 0
    41ee:	05 c0       	rjmp	.+10     	; 0x41fa <vfprintf+0x27c>
    41f0:	20 e1       	ldi	r18, 0x10	; 16
    41f2:	30 e0       	ldi	r19, 0x00	; 0
    41f4:	02 c0       	rjmp	.+4      	; 0x41fa <vfprintf+0x27c>
    41f6:	20 e1       	ldi	r18, 0x10	; 16
    41f8:	32 e0       	ldi	r19, 0x02	; 2
    41fa:	f8 01       	movw	r30, r16
    41fc:	b7 fe       	sbrs	r11, 7
    41fe:	07 c0       	rjmp	.+14     	; 0x420e <vfprintf+0x290>
    4200:	60 81       	ld	r22, Z
    4202:	71 81       	ldd	r23, Z+1	; 0x01
    4204:	82 81       	ldd	r24, Z+2	; 0x02
    4206:	93 81       	ldd	r25, Z+3	; 0x03
    4208:	0c 5f       	subi	r16, 0xFC	; 252
    420a:	1f 4f       	sbci	r17, 0xFF	; 255
    420c:	06 c0       	rjmp	.+12     	; 0x421a <vfprintf+0x29c>
    420e:	60 81       	ld	r22, Z
    4210:	71 81       	ldd	r23, Z+1	; 0x01
    4212:	80 e0       	ldi	r24, 0x00	; 0
    4214:	90 e0       	ldi	r25, 0x00	; 0
    4216:	0e 5f       	subi	r16, 0xFE	; 254
    4218:	1f 4f       	sbci	r17, 0xFF	; 255
    421a:	a3 01       	movw	r20, r6
    421c:	0e 94 f2 21 	call	0x43e4	; 0x43e4 <__ultoa_invert>
    4220:	88 2e       	mov	r8, r24
    4222:	86 18       	sub	r8, r6
    4224:	fb 2d       	mov	r31, r11
    4226:	ff 77       	andi	r31, 0x7F	; 127
    4228:	3f 2e       	mov	r3, r31
    422a:	36 fe       	sbrs	r3, 6
    422c:	0d c0       	rjmp	.+26     	; 0x4248 <vfprintf+0x2ca>
    422e:	23 2d       	mov	r18, r3
    4230:	2e 7f       	andi	r18, 0xFE	; 254
    4232:	a2 2e       	mov	r10, r18
    4234:	89 14       	cp	r8, r9
    4236:	58 f4       	brcc	.+22     	; 0x424e <vfprintf+0x2d0>
    4238:	34 fe       	sbrs	r3, 4
    423a:	0b c0       	rjmp	.+22     	; 0x4252 <vfprintf+0x2d4>
    423c:	32 fc       	sbrc	r3, 2
    423e:	09 c0       	rjmp	.+18     	; 0x4252 <vfprintf+0x2d4>
    4240:	83 2d       	mov	r24, r3
    4242:	8e 7e       	andi	r24, 0xEE	; 238
    4244:	a8 2e       	mov	r10, r24
    4246:	05 c0       	rjmp	.+10     	; 0x4252 <vfprintf+0x2d4>
    4248:	b8 2c       	mov	r11, r8
    424a:	a3 2c       	mov	r10, r3
    424c:	03 c0       	rjmp	.+6      	; 0x4254 <vfprintf+0x2d6>
    424e:	b8 2c       	mov	r11, r8
    4250:	01 c0       	rjmp	.+2      	; 0x4254 <vfprintf+0x2d6>
    4252:	b9 2c       	mov	r11, r9
    4254:	a4 fe       	sbrs	r10, 4
    4256:	0f c0       	rjmp	.+30     	; 0x4276 <vfprintf+0x2f8>
    4258:	fe 01       	movw	r30, r28
    425a:	e8 0d       	add	r30, r8
    425c:	f1 1d       	adc	r31, r1
    425e:	80 81       	ld	r24, Z
    4260:	80 33       	cpi	r24, 0x30	; 48
    4262:	21 f4       	brne	.+8      	; 0x426c <vfprintf+0x2ee>
    4264:	9a 2d       	mov	r25, r10
    4266:	99 7e       	andi	r25, 0xE9	; 233
    4268:	a9 2e       	mov	r10, r25
    426a:	09 c0       	rjmp	.+18     	; 0x427e <vfprintf+0x300>
    426c:	a2 fe       	sbrs	r10, 2
    426e:	06 c0       	rjmp	.+12     	; 0x427c <vfprintf+0x2fe>
    4270:	b3 94       	inc	r11
    4272:	b3 94       	inc	r11
    4274:	04 c0       	rjmp	.+8      	; 0x427e <vfprintf+0x300>
    4276:	8a 2d       	mov	r24, r10
    4278:	86 78       	andi	r24, 0x86	; 134
    427a:	09 f0       	breq	.+2      	; 0x427e <vfprintf+0x300>
    427c:	b3 94       	inc	r11
    427e:	a3 fc       	sbrc	r10, 3
    4280:	11 c0       	rjmp	.+34     	; 0x42a4 <vfprintf+0x326>
    4282:	a0 fe       	sbrs	r10, 0
    4284:	06 c0       	rjmp	.+12     	; 0x4292 <vfprintf+0x314>
    4286:	b2 14       	cp	r11, r2
    4288:	88 f4       	brcc	.+34     	; 0x42ac <vfprintf+0x32e>
    428a:	28 0c       	add	r2, r8
    428c:	92 2c       	mov	r9, r2
    428e:	9b 18       	sub	r9, r11
    4290:	0e c0       	rjmp	.+28     	; 0x42ae <vfprintf+0x330>
    4292:	b2 14       	cp	r11, r2
    4294:	60 f4       	brcc	.+24     	; 0x42ae <vfprintf+0x330>
    4296:	b6 01       	movw	r22, r12
    4298:	80 e2       	ldi	r24, 0x20	; 32
    429a:	90 e0       	ldi	r25, 0x00	; 0
    429c:	0e 94 b6 21 	call	0x436c	; 0x436c <fputc>
    42a0:	b3 94       	inc	r11
    42a2:	f7 cf       	rjmp	.-18     	; 0x4292 <vfprintf+0x314>
    42a4:	b2 14       	cp	r11, r2
    42a6:	18 f4       	brcc	.+6      	; 0x42ae <vfprintf+0x330>
    42a8:	2b 18       	sub	r2, r11
    42aa:	02 c0       	rjmp	.+4      	; 0x42b0 <vfprintf+0x332>
    42ac:	98 2c       	mov	r9, r8
    42ae:	21 2c       	mov	r2, r1
    42b0:	a4 fe       	sbrs	r10, 4
    42b2:	10 c0       	rjmp	.+32     	; 0x42d4 <vfprintf+0x356>
    42b4:	b6 01       	movw	r22, r12
    42b6:	80 e3       	ldi	r24, 0x30	; 48
    42b8:	90 e0       	ldi	r25, 0x00	; 0
    42ba:	0e 94 b6 21 	call	0x436c	; 0x436c <fputc>
    42be:	a2 fe       	sbrs	r10, 2
    42c0:	17 c0       	rjmp	.+46     	; 0x42f0 <vfprintf+0x372>
    42c2:	a1 fc       	sbrc	r10, 1
    42c4:	03 c0       	rjmp	.+6      	; 0x42cc <vfprintf+0x34e>
    42c6:	88 e7       	ldi	r24, 0x78	; 120
    42c8:	90 e0       	ldi	r25, 0x00	; 0
    42ca:	02 c0       	rjmp	.+4      	; 0x42d0 <vfprintf+0x352>
    42cc:	88 e5       	ldi	r24, 0x58	; 88
    42ce:	90 e0       	ldi	r25, 0x00	; 0
    42d0:	b6 01       	movw	r22, r12
    42d2:	0c c0       	rjmp	.+24     	; 0x42ec <vfprintf+0x36e>
    42d4:	8a 2d       	mov	r24, r10
    42d6:	86 78       	andi	r24, 0x86	; 134
    42d8:	59 f0       	breq	.+22     	; 0x42f0 <vfprintf+0x372>
    42da:	a1 fe       	sbrs	r10, 1
    42dc:	02 c0       	rjmp	.+4      	; 0x42e2 <vfprintf+0x364>
    42de:	8b e2       	ldi	r24, 0x2B	; 43
    42e0:	01 c0       	rjmp	.+2      	; 0x42e4 <vfprintf+0x366>
    42e2:	80 e2       	ldi	r24, 0x20	; 32
    42e4:	a7 fc       	sbrc	r10, 7
    42e6:	8d e2       	ldi	r24, 0x2D	; 45
    42e8:	b6 01       	movw	r22, r12
    42ea:	90 e0       	ldi	r25, 0x00	; 0
    42ec:	0e 94 b6 21 	call	0x436c	; 0x436c <fputc>
    42f0:	89 14       	cp	r8, r9
    42f2:	38 f4       	brcc	.+14     	; 0x4302 <vfprintf+0x384>
    42f4:	b6 01       	movw	r22, r12
    42f6:	80 e3       	ldi	r24, 0x30	; 48
    42f8:	90 e0       	ldi	r25, 0x00	; 0
    42fa:	0e 94 b6 21 	call	0x436c	; 0x436c <fputc>
    42fe:	9a 94       	dec	r9
    4300:	f7 cf       	rjmp	.-18     	; 0x42f0 <vfprintf+0x372>
    4302:	8a 94       	dec	r8
    4304:	f3 01       	movw	r30, r6
    4306:	e8 0d       	add	r30, r8
    4308:	f1 1d       	adc	r31, r1
    430a:	80 81       	ld	r24, Z
    430c:	b6 01       	movw	r22, r12
    430e:	90 e0       	ldi	r25, 0x00	; 0
    4310:	0e 94 b6 21 	call	0x436c	; 0x436c <fputc>
    4314:	81 10       	cpse	r8, r1
    4316:	f5 cf       	rjmp	.-22     	; 0x4302 <vfprintf+0x384>
    4318:	22 20       	and	r2, r2
    431a:	09 f4       	brne	.+2      	; 0x431e <vfprintf+0x3a0>
    431c:	42 ce       	rjmp	.-892    	; 0x3fa2 <vfprintf+0x24>
    431e:	b6 01       	movw	r22, r12
    4320:	80 e2       	ldi	r24, 0x20	; 32
    4322:	90 e0       	ldi	r25, 0x00	; 0
    4324:	0e 94 b6 21 	call	0x436c	; 0x436c <fputc>
    4328:	2a 94       	dec	r2
    432a:	f6 cf       	rjmp	.-20     	; 0x4318 <vfprintf+0x39a>
    432c:	f6 01       	movw	r30, r12
    432e:	86 81       	ldd	r24, Z+6	; 0x06
    4330:	97 81       	ldd	r25, Z+7	; 0x07
    4332:	02 c0       	rjmp	.+4      	; 0x4338 <vfprintf+0x3ba>
    4334:	8f ef       	ldi	r24, 0xFF	; 255
    4336:	9f ef       	ldi	r25, 0xFF	; 255
    4338:	2b 96       	adiw	r28, 0x0b	; 11
    433a:	e2 e1       	ldi	r30, 0x12	; 18
    433c:	0c 94 82 22 	jmp	0x4504	; 0x4504 <__epilogue_restores__>

00004340 <strnlen_P>:
    4340:	fc 01       	movw	r30, r24
    4342:	05 90       	lpm	r0, Z+
    4344:	61 50       	subi	r22, 0x01	; 1
    4346:	70 40       	sbci	r23, 0x00	; 0
    4348:	01 10       	cpse	r0, r1
    434a:	d8 f7       	brcc	.-10     	; 0x4342 <strnlen_P+0x2>
    434c:	80 95       	com	r24
    434e:	90 95       	com	r25
    4350:	8e 0f       	add	r24, r30
    4352:	9f 1f       	adc	r25, r31
    4354:	08 95       	ret

00004356 <strnlen>:
    4356:	fc 01       	movw	r30, r24
    4358:	61 50       	subi	r22, 0x01	; 1
    435a:	70 40       	sbci	r23, 0x00	; 0
    435c:	01 90       	ld	r0, Z+
    435e:	01 10       	cpse	r0, r1
    4360:	d8 f7       	brcc	.-10     	; 0x4358 <strnlen+0x2>
    4362:	80 95       	com	r24
    4364:	90 95       	com	r25
    4366:	8e 0f       	add	r24, r30
    4368:	9f 1f       	adc	r25, r31
    436a:	08 95       	ret

0000436c <fputc>:
    436c:	0f 93       	push	r16
    436e:	1f 93       	push	r17
    4370:	cf 93       	push	r28
    4372:	df 93       	push	r29
    4374:	fb 01       	movw	r30, r22
    4376:	23 81       	ldd	r18, Z+3	; 0x03
    4378:	21 fd       	sbrc	r18, 1
    437a:	03 c0       	rjmp	.+6      	; 0x4382 <fputc+0x16>
    437c:	8f ef       	ldi	r24, 0xFF	; 255
    437e:	9f ef       	ldi	r25, 0xFF	; 255
    4380:	2c c0       	rjmp	.+88     	; 0x43da <fputc+0x6e>
    4382:	22 ff       	sbrs	r18, 2
    4384:	16 c0       	rjmp	.+44     	; 0x43b2 <fputc+0x46>
    4386:	46 81       	ldd	r20, Z+6	; 0x06
    4388:	57 81       	ldd	r21, Z+7	; 0x07
    438a:	24 81       	ldd	r18, Z+4	; 0x04
    438c:	35 81       	ldd	r19, Z+5	; 0x05
    438e:	42 17       	cp	r20, r18
    4390:	53 07       	cpc	r21, r19
    4392:	44 f4       	brge	.+16     	; 0x43a4 <fputc+0x38>
    4394:	a0 81       	ld	r26, Z
    4396:	b1 81       	ldd	r27, Z+1	; 0x01
    4398:	9d 01       	movw	r18, r26
    439a:	2f 5f       	subi	r18, 0xFF	; 255
    439c:	3f 4f       	sbci	r19, 0xFF	; 255
    439e:	31 83       	std	Z+1, r19	; 0x01
    43a0:	20 83       	st	Z, r18
    43a2:	8c 93       	st	X, r24
    43a4:	26 81       	ldd	r18, Z+6	; 0x06
    43a6:	37 81       	ldd	r19, Z+7	; 0x07
    43a8:	2f 5f       	subi	r18, 0xFF	; 255
    43aa:	3f 4f       	sbci	r19, 0xFF	; 255
    43ac:	37 83       	std	Z+7, r19	; 0x07
    43ae:	26 83       	std	Z+6, r18	; 0x06
    43b0:	14 c0       	rjmp	.+40     	; 0x43da <fputc+0x6e>
    43b2:	8b 01       	movw	r16, r22
    43b4:	ec 01       	movw	r28, r24
    43b6:	fb 01       	movw	r30, r22
    43b8:	00 84       	ldd	r0, Z+8	; 0x08
    43ba:	f1 85       	ldd	r31, Z+9	; 0x09
    43bc:	e0 2d       	mov	r30, r0
    43be:	09 95       	icall
    43c0:	89 2b       	or	r24, r25
    43c2:	e1 f6       	brne	.-72     	; 0x437c <fputc+0x10>
    43c4:	d8 01       	movw	r26, r16
    43c6:	16 96       	adiw	r26, 0x06	; 6
    43c8:	8d 91       	ld	r24, X+
    43ca:	9c 91       	ld	r25, X
    43cc:	17 97       	sbiw	r26, 0x07	; 7
    43ce:	01 96       	adiw	r24, 0x01	; 1
    43d0:	17 96       	adiw	r26, 0x07	; 7
    43d2:	9c 93       	st	X, r25
    43d4:	8e 93       	st	-X, r24
    43d6:	16 97       	sbiw	r26, 0x06	; 6
    43d8:	ce 01       	movw	r24, r28
    43da:	df 91       	pop	r29
    43dc:	cf 91       	pop	r28
    43de:	1f 91       	pop	r17
    43e0:	0f 91       	pop	r16
    43e2:	08 95       	ret

000043e4 <__ultoa_invert>:
    43e4:	fa 01       	movw	r30, r20
    43e6:	aa 27       	eor	r26, r26
    43e8:	28 30       	cpi	r18, 0x08	; 8
    43ea:	51 f1       	breq	.+84     	; 0x4440 <__ultoa_invert+0x5c>
    43ec:	20 31       	cpi	r18, 0x10	; 16
    43ee:	81 f1       	breq	.+96     	; 0x4450 <__ultoa_invert+0x6c>
    43f0:	e8 94       	clt
    43f2:	6f 93       	push	r22
    43f4:	6e 7f       	andi	r22, 0xFE	; 254
    43f6:	6e 5f       	subi	r22, 0xFE	; 254
    43f8:	7f 4f       	sbci	r23, 0xFF	; 255
    43fa:	8f 4f       	sbci	r24, 0xFF	; 255
    43fc:	9f 4f       	sbci	r25, 0xFF	; 255
    43fe:	af 4f       	sbci	r26, 0xFF	; 255
    4400:	b1 e0       	ldi	r27, 0x01	; 1
    4402:	3e d0       	rcall	.+124    	; 0x4480 <__ultoa_invert+0x9c>
    4404:	b4 e0       	ldi	r27, 0x04	; 4
    4406:	3c d0       	rcall	.+120    	; 0x4480 <__ultoa_invert+0x9c>
    4408:	67 0f       	add	r22, r23
    440a:	78 1f       	adc	r23, r24
    440c:	89 1f       	adc	r24, r25
    440e:	9a 1f       	adc	r25, r26
    4410:	a1 1d       	adc	r26, r1
    4412:	68 0f       	add	r22, r24
    4414:	79 1f       	adc	r23, r25
    4416:	8a 1f       	adc	r24, r26
    4418:	91 1d       	adc	r25, r1
    441a:	a1 1d       	adc	r26, r1
    441c:	6a 0f       	add	r22, r26
    441e:	71 1d       	adc	r23, r1
    4420:	81 1d       	adc	r24, r1
    4422:	91 1d       	adc	r25, r1
    4424:	a1 1d       	adc	r26, r1
    4426:	20 d0       	rcall	.+64     	; 0x4468 <__ultoa_invert+0x84>
    4428:	09 f4       	brne	.+2      	; 0x442c <__ultoa_invert+0x48>
    442a:	68 94       	set
    442c:	3f 91       	pop	r19
    442e:	2a e0       	ldi	r18, 0x0A	; 10
    4430:	26 9f       	mul	r18, r22
    4432:	11 24       	eor	r1, r1
    4434:	30 19       	sub	r19, r0
    4436:	30 5d       	subi	r19, 0xD0	; 208
    4438:	31 93       	st	Z+, r19
    443a:	de f6       	brtc	.-74     	; 0x43f2 <__ultoa_invert+0xe>
    443c:	cf 01       	movw	r24, r30
    443e:	08 95       	ret
    4440:	46 2f       	mov	r20, r22
    4442:	47 70       	andi	r20, 0x07	; 7
    4444:	40 5d       	subi	r20, 0xD0	; 208
    4446:	41 93       	st	Z+, r20
    4448:	b3 e0       	ldi	r27, 0x03	; 3
    444a:	0f d0       	rcall	.+30     	; 0x446a <__ultoa_invert+0x86>
    444c:	c9 f7       	brne	.-14     	; 0x4440 <__ultoa_invert+0x5c>
    444e:	f6 cf       	rjmp	.-20     	; 0x443c <__ultoa_invert+0x58>
    4450:	46 2f       	mov	r20, r22
    4452:	4f 70       	andi	r20, 0x0F	; 15
    4454:	40 5d       	subi	r20, 0xD0	; 208
    4456:	4a 33       	cpi	r20, 0x3A	; 58
    4458:	18 f0       	brcs	.+6      	; 0x4460 <__ultoa_invert+0x7c>
    445a:	49 5d       	subi	r20, 0xD9	; 217
    445c:	31 fd       	sbrc	r19, 1
    445e:	40 52       	subi	r20, 0x20	; 32
    4460:	41 93       	st	Z+, r20
    4462:	02 d0       	rcall	.+4      	; 0x4468 <__ultoa_invert+0x84>
    4464:	a9 f7       	brne	.-22     	; 0x4450 <__ultoa_invert+0x6c>
    4466:	ea cf       	rjmp	.-44     	; 0x443c <__ultoa_invert+0x58>
    4468:	b4 e0       	ldi	r27, 0x04	; 4
    446a:	a6 95       	lsr	r26
    446c:	97 95       	ror	r25
    446e:	87 95       	ror	r24
    4470:	77 95       	ror	r23
    4472:	67 95       	ror	r22
    4474:	ba 95       	dec	r27
    4476:	c9 f7       	brne	.-14     	; 0x446a <__ultoa_invert+0x86>
    4478:	00 97       	sbiw	r24, 0x00	; 0
    447a:	61 05       	cpc	r22, r1
    447c:	71 05       	cpc	r23, r1
    447e:	08 95       	ret
    4480:	9b 01       	movw	r18, r22
    4482:	ac 01       	movw	r20, r24
    4484:	0a 2e       	mov	r0, r26
    4486:	06 94       	lsr	r0
    4488:	57 95       	ror	r21
    448a:	47 95       	ror	r20
    448c:	37 95       	ror	r19
    448e:	27 95       	ror	r18
    4490:	ba 95       	dec	r27
    4492:	c9 f7       	brne	.-14     	; 0x4486 <__ultoa_invert+0xa2>
    4494:	62 0f       	add	r22, r18
    4496:	73 1f       	adc	r23, r19
    4498:	84 1f       	adc	r24, r20
    449a:	95 1f       	adc	r25, r21
    449c:	a0 1d       	adc	r26, r0
    449e:	08 95       	ret

000044a0 <eeprom_read_byte>:
    44a0:	f9 99       	sbic	0x1f, 1	; 31
    44a2:	fe cf       	rjmp	.-4      	; 0x44a0 <eeprom_read_byte>
    44a4:	92 bd       	out	0x22, r25	; 34
    44a6:	81 bd       	out	0x21, r24	; 33
    44a8:	f8 9a       	sbi	0x1f, 0	; 31
    44aa:	99 27       	eor	r25, r25
    44ac:	80 b5       	in	r24, 0x20	; 32
    44ae:	08 95       	ret

000044b0 <eeprom_write_byte>:
    44b0:	26 2f       	mov	r18, r22

000044b2 <eeprom_write_r18>:
    44b2:	f9 99       	sbic	0x1f, 1	; 31
    44b4:	fe cf       	rjmp	.-4      	; 0x44b2 <eeprom_write_r18>
    44b6:	1f ba       	out	0x1f, r1	; 31
    44b8:	92 bd       	out	0x22, r25	; 34
    44ba:	81 bd       	out	0x21, r24	; 33
    44bc:	20 bd       	out	0x20, r18	; 32
    44be:	0f b6       	in	r0, 0x3f	; 63
    44c0:	f8 94       	cli
    44c2:	fa 9a       	sbi	0x1f, 2	; 31
    44c4:	f9 9a       	sbi	0x1f, 1	; 31
    44c6:	0f be       	out	0x3f, r0	; 63
    44c8:	01 96       	adiw	r24, 0x01	; 1
    44ca:	08 95       	ret

000044cc <__prologue_saves__>:
    44cc:	2f 92       	push	r2
    44ce:	3f 92       	push	r3
    44d0:	4f 92       	push	r4
    44d2:	5f 92       	push	r5
    44d4:	6f 92       	push	r6
    44d6:	7f 92       	push	r7
    44d8:	8f 92       	push	r8
    44da:	9f 92       	push	r9
    44dc:	af 92       	push	r10
    44de:	bf 92       	push	r11
    44e0:	cf 92       	push	r12
    44e2:	df 92       	push	r13
    44e4:	ef 92       	push	r14
    44e6:	ff 92       	push	r15
    44e8:	0f 93       	push	r16
    44ea:	1f 93       	push	r17
    44ec:	cf 93       	push	r28
    44ee:	df 93       	push	r29
    44f0:	cd b7       	in	r28, 0x3d	; 61
    44f2:	de b7       	in	r29, 0x3e	; 62
    44f4:	ca 1b       	sub	r28, r26
    44f6:	db 0b       	sbc	r29, r27
    44f8:	0f b6       	in	r0, 0x3f	; 63
    44fa:	f8 94       	cli
    44fc:	de bf       	out	0x3e, r29	; 62
    44fe:	0f be       	out	0x3f, r0	; 63
    4500:	cd bf       	out	0x3d, r28	; 61
    4502:	09 94       	ijmp

00004504 <__epilogue_restores__>:
    4504:	2a 88       	ldd	r2, Y+18	; 0x12
    4506:	39 88       	ldd	r3, Y+17	; 0x11
    4508:	48 88       	ldd	r4, Y+16	; 0x10
    450a:	5f 84       	ldd	r5, Y+15	; 0x0f
    450c:	6e 84       	ldd	r6, Y+14	; 0x0e
    450e:	7d 84       	ldd	r7, Y+13	; 0x0d
    4510:	8c 84       	ldd	r8, Y+12	; 0x0c
    4512:	9b 84       	ldd	r9, Y+11	; 0x0b
    4514:	aa 84       	ldd	r10, Y+10	; 0x0a
    4516:	b9 84       	ldd	r11, Y+9	; 0x09
    4518:	c8 84       	ldd	r12, Y+8	; 0x08
    451a:	df 80       	ldd	r13, Y+7	; 0x07
    451c:	ee 80       	ldd	r14, Y+6	; 0x06
    451e:	fd 80       	ldd	r15, Y+5	; 0x05
    4520:	0c 81       	ldd	r16, Y+4	; 0x04
    4522:	1b 81       	ldd	r17, Y+3	; 0x03
    4524:	aa 81       	ldd	r26, Y+2	; 0x02
    4526:	b9 81       	ldd	r27, Y+1	; 0x01
    4528:	ce 0f       	add	r28, r30
    452a:	d1 1d       	adc	r29, r1
    452c:	0f b6       	in	r0, 0x3f	; 63
    452e:	f8 94       	cli
    4530:	de bf       	out	0x3e, r29	; 62
    4532:	0f be       	out	0x3f, r0	; 63
    4534:	cd bf       	out	0x3d, r28	; 61
    4536:	ed 01       	movw	r28, r26
    4538:	08 95       	ret

0000453a <_exit>:
    453a:	f8 94       	cli

0000453c <__stop_program>:
    453c:	ff cf       	rjmp	.-2      	; 0x453c <__stop_program>
