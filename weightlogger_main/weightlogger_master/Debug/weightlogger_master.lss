
weightlogger_master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000018c  00800100  00004ac8  00004b5c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004ac8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001cb  0080028c  0080028c  00004ce8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00004ce8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004d44  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000c78  00000000  00000000  00004d88  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001fb9b  00000000  00000000  00005a00  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005201  00000000  00000000  0002559b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000079be  00000000  00000000  0002a79c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002b2c  00000000  00000000  0003215c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00006324  00000000  00000000  00034c88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000f20a  00000000  00000000  0003afac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000c28  00000000  00000000  0004a1b6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__ctors_end>
       4:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
       8:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
       c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      10:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      14:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      18:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      1c:	0c 94 e6 11 	jmp	0x23cc	; 0x23cc <__vector_7>
      20:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      24:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      28:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      2c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      30:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      34:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      38:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      3c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      40:	0c 94 42 12 	jmp	0x2484	; 0x2484 <__vector_16>
      44:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      48:	0c 94 d7 0c 	jmp	0x19ae	; 0x19ae <__vector_18>
      4c:	0c 94 09 0d 	jmp	0x1a12	; 0x1a12 <__vector_19>
      50:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      54:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      58:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      5c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      60:	0c 94 39 20 	jmp	0x4072	; 0x4072 <__vector_24>
      64:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      68:	a7 1b       	sub	r26, r23
      6a:	be 1b       	sub	r27, r30
      6c:	be 1b       	sub	r27, r30
      6e:	bb 1b       	sub	r27, r27
      70:	be 1b       	sub	r27, r30
      72:	a5 1b       	sub	r26, r21
      74:	be 1b       	sub	r27, r30
      76:	be 1b       	sub	r27, r30
      78:	be 1b       	sub	r27, r30
      7a:	99 1b       	sub	r25, r25
      7c:	be 1b       	sub	r27, r30
      7e:	be 1b       	sub	r27, r30
      80:	ae 1b       	sub	r26, r30
      82:	b9 1b       	sub	r27, r25
      84:	b7 1b       	sub	r27, r23
      86:	be 1b       	sub	r27, r30
      88:	be 1b       	sub	r27, r30
      8a:	be 1b       	sub	r27, r30
      8c:	b5 1b       	sub	r27, r21

0000008e <__trampolines_end>:
      8e:	02 00       	Address 0x0000008e is out of bounds.
.word	0xffff	; ????

0000008f <digital_pin_to_timer_PGM>:
      8f:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
      9f:	00 00 00 00                                         ....

000000a3 <digital_pin_to_bit_mask_PGM>:
      a3:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      b3:	04 08 10 20                                         ... 

000000b7 <digital_pin_to_port_PGM>:
      b7:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      c7:	03 03 03 03                                         ....

000000cb <port_to_input_PGM>:
      cb:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000d5 <port_to_output_PGM>:
      d5:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000df <port_to_mode_PGM>:
      df:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000e9 <_ZL11daysInMonth>:
      e9:	1f 1c 1f 1e 1f 1e 1f 1f 1e 1f 1e 1f 00              .............

000000f6 <__ctors_start>:
      f6:	46 09       	sbc	r20, r6
      f8:	39 0d       	add	r19, r9
      fa:	36 1f       	adc	r19, r22

000000fc <__ctors_end>:
      fc:	11 24       	eor	r1, r1
      fe:	1f be       	out	0x3f, r1	; 63
     100:	cf ef       	ldi	r28, 0xFF	; 255
     102:	d8 e0       	ldi	r29, 0x08	; 8
     104:	de bf       	out	0x3e, r29	; 62
     106:	cd bf       	out	0x3d, r28	; 61

00000108 <__do_copy_data>:
     108:	12 e0       	ldi	r17, 0x02	; 2
     10a:	a0 e0       	ldi	r26, 0x00	; 0
     10c:	b1 e0       	ldi	r27, 0x01	; 1
     10e:	e8 ec       	ldi	r30, 0xC8	; 200
     110:	fa e4       	ldi	r31, 0x4A	; 74
     112:	02 c0       	rjmp	.+4      	; 0x118 <__do_copy_data+0x10>
     114:	05 90       	lpm	r0, Z+
     116:	0d 92       	st	X+, r0
     118:	ac 38       	cpi	r26, 0x8C	; 140
     11a:	b1 07       	cpc	r27, r17
     11c:	d9 f7       	brne	.-10     	; 0x114 <__do_copy_data+0xc>

0000011e <__do_clear_bss>:
     11e:	24 e0       	ldi	r18, 0x04	; 4
     120:	ac e8       	ldi	r26, 0x8C	; 140
     122:	b2 e0       	ldi	r27, 0x02	; 2
     124:	01 c0       	rjmp	.+2      	; 0x128 <.do_clear_bss_start>

00000126 <.do_clear_bss_loop>:
     126:	1d 92       	st	X+, r1

00000128 <.do_clear_bss_start>:
     128:	a7 35       	cpi	r26, 0x57	; 87
     12a:	b2 07       	cpc	r27, r18
     12c:	e1 f7       	brne	.-8      	; 0x126 <.do_clear_bss_loop>

0000012e <__do_global_ctors>:
     12e:	10 e0       	ldi	r17, 0x00	; 0
     130:	ce e7       	ldi	r28, 0x7E	; 126
     132:	d0 e0       	ldi	r29, 0x00	; 0
     134:	04 c0       	rjmp	.+8      	; 0x13e <__do_global_ctors+0x10>
     136:	21 97       	sbiw	r28, 0x01	; 1
     138:	fe 01       	movw	r30, r28
     13a:	0e 94 b3 21 	call	0x4366	; 0x4366 <__tablejump2__>
     13e:	cb 37       	cpi	r28, 0x7B	; 123
     140:	d1 07       	cpc	r29, r17
     142:	c9 f7       	brne	.-14     	; 0x136 <__do_global_ctors+0x8>
     144:	0e 94 67 0d 	call	0x1ace	; 0x1ace <main>
     148:	0c 94 62 25 	jmp	0x4ac4	; 0x4ac4 <_exit>

0000014c <__bad_interrupt>:
     14c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000150 <_Z12compare_cardPcS_>:

/**
 * this function compares a card with the readed bytes,
 * if they match it returns true
 */
bool compare_card(char *card_one, char *card_two) {
     150:	af 92       	push	r10
     152:	bf 92       	push	r11
     154:	cf 92       	push	r12
     156:	df 92       	push	r13
     158:	ef 92       	push	r14
     15a:	ff 92       	push	r15
     15c:	0f 93       	push	r16
     15e:	1f 93       	push	r17
     160:	cf 93       	push	r28
     162:	df 93       	push	r29
     164:	ec 01       	movw	r28, r24
     166:	8b 01       	movw	r16, r22
     168:	7c 01       	movw	r14, r24
     16a:	84 e0       	ldi	r24, 0x04	; 4
     16c:	e8 0e       	add	r14, r24
     16e:	f1 1c       	adc	r15, r1
  char i;
  for (i = 0; i < CARD_UID_SIZE; i++) {
#ifdef DEBUG    
    Serial.print("#");
     170:	69 e0       	ldi	r22, 0x09	; 9
     172:	71 e0       	ldi	r23, 0x01	; 1
     174:	84 ed       	ldi	r24, 0xD4	; 212
     176:	92 e0       	ldi	r25, 0x02	; 2
     178:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <_ZN5Print5printEPKc>
     17c:	5e 01       	movw	r10, r28
    Serial.print(card_one[i], HEX);
     17e:	69 91       	ld	r22, Y+
     180:	70 e0       	ldi	r23, 0x00	; 0
     182:	40 e1       	ldi	r20, 0x10	; 16
     184:	50 e0       	ldi	r21, 0x00	; 0
     186:	84 ed       	ldi	r24, 0xD4	; 212
     188:	92 e0       	ldi	r25, 0x02	; 2
     18a:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <_ZN5Print5printEii>
    Serial.print("-");
     18e:	6b e0       	ldi	r22, 0x0B	; 11
     190:	71 e0       	ldi	r23, 0x01	; 1
     192:	84 ed       	ldi	r24, 0xD4	; 212
     194:	92 e0       	ldi	r25, 0x02	; 2
     196:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <_ZN5Print5printEPKc>
     19a:	68 01       	movw	r12, r16
    Serial.println(card_two[i], HEX);
     19c:	f8 01       	movw	r30, r16
     19e:	61 91       	ld	r22, Z+
     1a0:	8f 01       	movw	r16, r30
     1a2:	70 e0       	ldi	r23, 0x00	; 0
     1a4:	40 e1       	ldi	r20, 0x10	; 16
     1a6:	50 e0       	ldi	r21, 0x00	; 0
     1a8:	84 ed       	ldi	r24, 0xD4	; 212
     1aa:	92 e0       	ldi	r25, 0x02	; 2
     1ac:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <_ZN5Print7printlnEii>
#endif
    if (card_one[i] != card_two[i]) {
     1b0:	f5 01       	movw	r30, r10
     1b2:	90 81       	ld	r25, Z
     1b4:	f6 01       	movw	r30, r12
     1b6:	80 81       	ld	r24, Z
     1b8:	98 13       	cpse	r25, r24
     1ba:	05 c0       	rjmp	.+10     	; 0x1c6 <_Z12compare_cardPcS_+0x76>
 * this function compares a card with the readed bytes,
 * if they match it returns true
 */
bool compare_card(char *card_one, char *card_two) {
  char i;
  for (i = 0; i < CARD_UID_SIZE; i++) {
     1bc:	ce 15       	cp	r28, r14
     1be:	df 05       	cpc	r29, r15
     1c0:	b9 f6       	brne	.-82     	; 0x170 <_Z12compare_cardPcS_+0x20>
#endif
    if (card_one[i] != card_two[i]) {
      return false;
    }
  }
  return true;
     1c2:	81 e0       	ldi	r24, 0x01	; 1
     1c4:	01 c0       	rjmp	.+2      	; 0x1c8 <_Z12compare_cardPcS_+0x78>
    Serial.print(card_one[i], HEX);
    Serial.print("-");
    Serial.println(card_two[i], HEX);
#endif
    if (card_one[i] != card_two[i]) {
      return false;
     1c6:	80 e0       	ldi	r24, 0x00	; 0
    }
  }
  return true;
}
     1c8:	df 91       	pop	r29
     1ca:	cf 91       	pop	r28
     1cc:	1f 91       	pop	r17
     1ce:	0f 91       	pop	r16
     1d0:	ff 90       	pop	r15
     1d2:	ef 90       	pop	r14
     1d4:	df 90       	pop	r13
     1d6:	cf 90       	pop	r12
     1d8:	bf 90       	pop	r11
     1da:	af 90       	pop	r10
     1dc:	08 95       	ret

000001de <_Z13is_known_cardPc>:

/**
 * this function checks if a card id sent is known by the device, if so, 
 * it returns the card_number value, it returns 0 for unknown cards
 */
char is_known_card(char *card_id) {
     1de:	5f 92       	push	r5
     1e0:	6f 92       	push	r6
     1e2:	7f 92       	push	r7
     1e4:	8f 92       	push	r8
     1e6:	9f 92       	push	r9
     1e8:	af 92       	push	r10
     1ea:	bf 92       	push	r11
     1ec:	cf 92       	push	r12
     1ee:	df 92       	push	r13
     1f0:	ef 92       	push	r14
     1f2:	ff 92       	push	r15
     1f4:	0f 93       	push	r16
     1f6:	1f 93       	push	r17
     1f8:	cf 93       	push	r28
     1fa:	df 93       	push	r29
     1fc:	00 d0       	rcall	.+0      	; 0x1fe <_Z13is_known_cardPc+0x20>
     1fe:	00 d0       	rcall	.+0      	; 0x200 <_Z13is_known_cardPc+0x22>
     200:	1f 92       	push	r1
     202:	cd b7       	in	r28, 0x3d	; 61
     204:	de b7       	in	r29, 0x3e	; 62
     206:	5c 01       	movw	r10, r24
  struct card_block card;
  bool finish = false;
  int pos = 0;
  char ret_val = 0;
     208:	51 2c       	mov	r5, r1
 * it returns the card_number value, it returns 0 for unknown cards
 */
char is_known_card(char *card_id) {
  struct card_block card;
  bool finish = false;
  int pos = 0;
     20a:	00 e0       	ldi	r16, 0x00	; 0
     20c:	10 e0       	ldi	r17, 0x00	; 0
     20e:	ce 01       	movw	r24, r28
     210:	01 96       	adiw	r24, 0x01	; 1
     212:	6c 01       	movw	r12, r24
     214:	3e 01       	movw	r6, r28
     216:	96 e0       	ldi	r25, 0x06	; 6
     218:	69 0e       	add	r6, r25
     21a:	71 1c       	adc	r7, r1
     21c:	76 01       	movw	r14, r12

    EERef( const int index )
        : index( index )                 {}
    
    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
     21e:	48 01       	movw	r8, r16
     220:	8c 18       	sub	r8, r12
     222:	9d 08       	sbc	r9, r13
     224:	c4 01       	movw	r24, r8
     226:	8e 0d       	add	r24, r14
     228:	9f 1d       	adc	r25, r15
     22a:	0e 94 15 25 	call	0x4a2a	; 0x4a2a <eeprom_read_byte>
template <class T> int EEPROM_readBlock(int ee, T& value)
{
    char* p = (char*)(void*)&value;
    unsigned int i;
    for (i = 0; i < sizeof(value); i++)
          *p++ = EEPROM.read(ee++);
     22e:	f7 01       	movw	r30, r14
     230:	81 93       	st	Z+, r24
     232:	7f 01       	movw	r14, r30

template <class T> int EEPROM_readBlock(int ee, T& value)
{
    char* p = (char*)(void*)&value;
    unsigned int i;
    for (i = 0; i < sizeof(value); i++)
     234:	e6 15       	cp	r30, r6
     236:	f7 05       	cpc	r31, r7
     238:	a9 f7       	brne	.-22     	; 0x224 <_Z13is_known_cardPc+0x46>
  char ret_val = 0;
  while(!finish) {
    EEPROM_readBlock(pos, card);
    if (compare_card(card_id, card.card_uid)) {
     23a:	b6 01       	movw	r22, r12
     23c:	c5 01       	movw	r24, r10
     23e:	0e 94 a8 00 	call	0x150	; 0x150 <_Z12compare_cardPcS_>
     242:	88 23       	and	r24, r24
     244:	19 f0       	breq	.+6      	; 0x24c <_Z13is_known_cardPc+0x6e>
      finish = true;
      ret_val = card.card_number;
     246:	5d 80       	ldd	r5, Y+5	; 0x05
  int pos = 0;
  char ret_val = 0;
  while(!finish) {
    EEPROM_readBlock(pos, card);
    if (compare_card(card_id, card.card_uid)) {
      finish = true;
     248:	81 e0       	ldi	r24, 0x01	; 1
     24a:	01 c0       	rjmp	.+2      	; 0x24e <_Z13is_known_cardPc+0x70>
     24c:	80 e0       	ldi	r24, 0x00	; 0
      ret_val = card.card_number;
    }
    if (pos > MAX_EEPROM_POSITION && finish == false) {
     24e:	09 3e       	cpi	r16, 0xE9	; 233
     250:	f3 e0       	ldi	r31, 0x03	; 3
     252:	1f 07       	cpc	r17, r31
     254:	20 f0       	brcs	.+8      	; 0x25e <_Z13is_known_cardPc+0x80>
     256:	81 11       	cpse	r24, r1
     258:	02 c0       	rjmp	.+4      	; 0x25e <_Z13is_known_cardPc+0x80>
      finish = true;
      ret_val = 0;
     25a:	51 2c       	mov	r5, r1
    if (compare_card(card_id, card.card_uid)) {
      finish = true;
      ret_val = card.card_number;
    }
    if (pos > MAX_EEPROM_POSITION && finish == false) {
      finish = true;
     25c:	81 e0       	ldi	r24, 0x01	; 1
     25e:	0b 5f       	subi	r16, 0xFB	; 251
     260:	1f 4f       	sbci	r17, 0xFF	; 255
char is_known_card(char *card_id) {
  struct card_block card;
  bool finish = false;
  int pos = 0;
  char ret_val = 0;
  while(!finish) {
     262:	88 23       	and	r24, r24
     264:	d9 f2       	breq	.-74     	; 0x21c <_Z13is_known_cardPc+0x3e>
      ret_val = 0;
    }
    pos += sizeof(card);
  }
  return ret_val;
}
     266:	85 2d       	mov	r24, r5
     268:	0f 90       	pop	r0
     26a:	0f 90       	pop	r0
     26c:	0f 90       	pop	r0
     26e:	0f 90       	pop	r0
     270:	0f 90       	pop	r0
     272:	df 91       	pop	r29
     274:	cf 91       	pop	r28
     276:	1f 91       	pop	r17
     278:	0f 91       	pop	r16
     27a:	ff 90       	pop	r15
     27c:	ef 90       	pop	r14
     27e:	df 90       	pop	r13
     280:	cf 90       	pop	r12
     282:	bf 90       	pop	r11
     284:	af 90       	pop	r10
     286:	9f 90       	pop	r9
     288:	8f 90       	pop	r8
     28a:	7f 90       	pop	r7
     28c:	6f 90       	pop	r6
     28e:	5f 90       	pop	r5
     290:	08 95       	ret

00000292 <_Z10store_card10card_blockc>:

/**
 * Stores the card uid and card_number at the position indicated
 * positions are from 0 to 199
 */
bool store_card(struct card_block card, char position) {
     292:	cf 92       	push	r12
     294:	df 92       	push	r13
     296:	ef 92       	push	r14
     298:	ff 92       	push	r15
     29a:	0f 93       	push	r16
     29c:	1f 93       	push	r17
     29e:	cf 93       	push	r28
     2a0:	df 93       	push	r29
     2a2:	00 d0       	rcall	.+0      	; 0x2a4 <_Z10store_card10card_blockc+0x12>
     2a4:	00 d0       	rcall	.+0      	; 0x2a6 <_Z10store_card10card_blockc+0x14>
     2a6:	1f 92       	push	r1
     2a8:	cd b7       	in	r28, 0x3d	; 61
     2aa:	de b7       	in	r29, 0x3e	; 62
     2ac:	49 83       	std	Y+1, r20	; 0x01
     2ae:	5a 83       	std	Y+2, r21	; 0x02
     2b0:	6b 83       	std	Y+3, r22	; 0x03
     2b2:	7c 83       	std	Y+4, r23	; 0x04
     2b4:	8d 83       	std	Y+5, r24	; 0x05
  int pos = (5 * position);
  if ( position < 200) {  //if we are not full capacity
     2b6:	28 3c       	cpi	r18, 0xC8	; 200
     2b8:	d0 f4       	brcc	.+52     	; 0x2ee <_Z10store_card10card_blockc+0x5c>
/**
 * Stores the card uid and card_number at the position indicated
 * positions are from 0 to 199
 */
bool store_card(struct card_block card, char position) {
  int pos = (5 * position);
     2ba:	85 e0       	ldi	r24, 0x05	; 5
     2bc:	28 9f       	mul	r18, r24
     2be:	80 01       	movw	r16, r0
     2c0:	11 24       	eor	r1, r1
     2c2:	fe 01       	movw	r30, r28
     2c4:	31 96       	adiw	r30, 0x01	; 1
     2c6:	6f 01       	movw	r12, r30
     2c8:	e1 2c       	mov	r14, r1
     2ca:	f1 2c       	mov	r15, r1
template <class T> int EEPROM_writeBlock(int ee, const T& value)
{
    const char* p = (const char*)(const void*)&value;
    unsigned int i;
    for (i = 0; i < sizeof(value); i++)
          EEPROM.write(ee++, *p++);
     2cc:	f6 01       	movw	r30, r12
     2ce:	61 91       	ld	r22, Z+
     2d0:	6f 01       	movw	r12, r30
    operator uint8_t() const             { return **this; }
    
    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
     2d2:	c8 01       	movw	r24, r16
     2d4:	8e 0d       	add	r24, r14
     2d6:	9f 1d       	adc	r25, r15
     2d8:	0e 94 1d 25 	call	0x4a3a	; 0x4a3a <eeprom_write_byte>
#ifndef __EEWB_
template <class T> int EEPROM_writeBlock(int ee, const T& value)
{
    const char* p = (const char*)(const void*)&value;
    unsigned int i;
    for (i = 0; i < sizeof(value); i++)
     2dc:	ff ef       	ldi	r31, 0xFF	; 255
     2de:	ef 1a       	sub	r14, r31
     2e0:	ff 0a       	sbc	r15, r31
     2e2:	85 e0       	ldi	r24, 0x05	; 5
     2e4:	e8 16       	cp	r14, r24
     2e6:	f1 04       	cpc	r15, r1
     2e8:	89 f7       	brne	.-30     	; 0x2cc <_Z10store_card10card_blockc+0x3a>
  if ( position < 200) {  //if we are not full capacity
    EEPROM_writeBlock(pos, card); //store the card
  } else {
    return false;
  }
  return true;
     2ea:	81 e0       	ldi	r24, 0x01	; 1
     2ec:	01 c0       	rjmp	.+2      	; 0x2f0 <_Z10store_card10card_blockc+0x5e>
bool store_card(struct card_block card, char position) {
  int pos = (5 * position);
  if ( position < 200) {  //if we are not full capacity
    EEPROM_writeBlock(pos, card); //store the card
  } else {
    return false;
     2ee:	80 e0       	ldi	r24, 0x00	; 0
  }
  return true;
}
     2f0:	0f 90       	pop	r0
     2f2:	0f 90       	pop	r0
     2f4:	0f 90       	pop	r0
     2f6:	0f 90       	pop	r0
     2f8:	0f 90       	pop	r0
     2fa:	df 91       	pop	r29
     2fc:	cf 91       	pop	r28
     2fe:	1f 91       	pop	r17
     300:	0f 91       	pop	r16
     302:	ff 90       	pop	r15
     304:	ef 90       	pop	r14
     306:	df 90       	pop	r13
     308:	cf 90       	pop	r12
     30a:	08 95       	ret

0000030c <_Z10erase_cardc>:

/**
 * Erases the data for a card_block in EEPROM
 * @params pos with the position to erase
 */
void erase_card(char pos) {
     30c:	0f 93       	push	r16
     30e:	1f 93       	push	r17
     310:	cf 93       	push	r28
     312:	df 93       	push	r29
  if (pos > 200) //always inside the position limit.
     314:	89 3c       	cpi	r24, 0xC9	; 201
     316:	a8 f4       	brcc	.+42     	; 0x342 <_Z10erase_cardc+0x36>
    return;
  int ppos = (pos * sizeof(struct card_block));
     318:	95 e0       	ldi	r25, 0x05	; 5
     31a:	89 9f       	mul	r24, r25
     31c:	e0 01       	movw	r28, r0
     31e:	11 24       	eor	r1, r1
     320:	8e 01       	movw	r16, r28
     322:	0b 5f       	subi	r16, 0xFB	; 251
     324:	1f 4f       	sbci	r17, 0xFF	; 255
     326:	6f ef       	ldi	r22, 0xFF	; 255
     328:	ce 01       	movw	r24, r28
     32a:	0e 94 1d 25 	call	0x4a3a	; 0x4a3a <eeprom_write_byte>
  for (char i=0; i<sizeof(struct card_block); i++) {
    EEPROM.write(ppos+i, 0xff);
    delay(5); // 5mS between byte writes, to allow the data to be written
     32e:	65 e0       	ldi	r22, 0x05	; 5
     330:	70 e0       	ldi	r23, 0x00	; 0
     332:	80 e0       	ldi	r24, 0x00	; 0
     334:	90 e0       	ldi	r25, 0x00	; 0
     336:	0e 94 bd 12 	call	0x257a	; 0x257a <delay>
     33a:	21 96       	adiw	r28, 0x01	; 1
 */
void erase_card(char pos) {
  if (pos > 200) //always inside the position limit.
    return;
  int ppos = (pos * sizeof(struct card_block));
  for (char i=0; i<sizeof(struct card_block); i++) {
     33c:	c0 17       	cp	r28, r16
     33e:	d1 07       	cpc	r29, r17
     340:	91 f7       	brne	.-28     	; 0x326 <_Z10erase_cardc+0x1a>
    EEPROM.write(ppos+i, 0xff);
    delay(5); // 5mS between byte writes, to allow the data to be written
  }
     342:	df 91       	pop	r29
     344:	cf 91       	pop	r28
     346:	1f 91       	pop	r17
     348:	0f 91       	pop	r16
     34a:	08 95       	ret

0000034c <_Z24hex_string_to_byte_arrayPcS_cc>:
void hex_string_to_byte_array(char *src, char *out_array, char start, char end) {
     34c:	cf 93       	push	r28
     34e:	df 93       	push	r29
     350:	ec 01       	movw	r28, r24
  char pos = 0;
     352:	30 e0       	ldi	r19, 0x00	; 0
  char tmp;
  for (char c = start; c < end; c += 2) {
     354:	42 17       	cp	r20, r18
     356:	d0 f4       	brcc	.+52     	; 0x38c <_Z24hex_string_to_byte_arrayPcS_cc+0x40>
    tmp = src[c] > 0x39 ? ((src[c] - 'A') + 10) * 16 : (src[c] - '0') * 16;
     358:	de 01       	movw	r26, r28
     35a:	a4 0f       	add	r26, r20
     35c:	b1 1d       	adc	r27, r1
     35e:	9c 91       	ld	r25, X
     360:	e9 2f       	mov	r30, r25
     362:	f0 e0       	ldi	r31, 0x00	; 0
     364:	9a 33       	cpi	r25, 0x3A	; 58
     366:	08 f0       	brcs	.+2      	; 0x36a <_Z24hex_string_to_byte_arrayPcS_cc+0x1e>
     368:	f7 97       	sbiw	r30, 0x37	; 55
     36a:	e2 95       	swap	r30
     36c:	e0 7f       	andi	r30, 0xF0	; 240
    tmp += src[c+1] > 0x39 ? ((src[c+1] - 'A') + 10) : (src[c+1] - '0');
     36e:	11 96       	adiw	r26, 0x01	; 1
     370:	9c 91       	ld	r25, X
     372:	9a 33       	cpi	r25, 0x3A	; 58
     374:	10 f0       	brcs	.+4      	; 0x37a <_Z24hex_string_to_byte_arrayPcS_cc+0x2e>
     376:	97 53       	subi	r25, 0x37	; 55
     378:	01 c0       	rjmp	.+2      	; 0x37c <_Z24hex_string_to_byte_arrayPcS_cc+0x30>
     37a:	90 53       	subi	r25, 0x30	; 48
    out_array[pos] = tmp;
     37c:	db 01       	movw	r26, r22
     37e:	a3 0f       	add	r26, r19
     380:	b1 1d       	adc	r27, r1
     382:	9e 0f       	add	r25, r30
     384:	9c 93       	st	X, r25
    pos ++;
     386:	3f 5f       	subi	r19, 0xFF	; 255
void hex_string_to_byte_array(char *src, char *out_array, char start, char end) {
  char pos = 0;
  char tmp;
  for (char c = start; c < end; c += 2) {
     388:	4e 5f       	subi	r20, 0xFE	; 254
     38a:	e4 cf       	rjmp	.-56     	; 0x354 <_Z24hex_string_to_byte_arrayPcS_cc+0x8>
    tmp = src[c] > 0x39 ? ((src[c] - 'A') + 10) * 16 : (src[c] - '0') * 16;
    tmp += src[c+1] > 0x39 ? ((src[c+1] - 'A') + 10) : (src[c+1] - '0');
    out_array[pos] = tmp;
    pos ++;
  }
}
     38c:	df 91       	pop	r29
     38e:	cf 91       	pop	r28
     390:	08 95       	ret

00000392 <_ZN15ElcanLCDManagerC1Eccc>:
﻿#include "elcan_lcd.h"
#include <Arduino.h>
ElcanLCDManager::ElcanLCDManager(char addr, char cols, char rows) {
     392:	df 92       	push	r13
     394:	ef 92       	push	r14
     396:	ff 92       	push	r15
     398:	0f 93       	push	r16
     39a:	1f 93       	push	r17
     39c:	cf 93       	push	r28
     39e:	df 93       	push	r29
     3a0:	cd b7       	in	r28, 0x3d	; 61
     3a2:	de b7       	in	r29, 0x3e	; 62
     3a4:	2c 97       	sbiw	r28, 0x0c	; 12
     3a6:	0f b6       	in	r0, 0x3f	; 63
     3a8:	f8 94       	cli
     3aa:	de bf       	out	0x3e, r29	; 62
     3ac:	0f be       	out	0x3f, r0	; 63
     3ae:	cd bf       	out	0x3d, r28	; 61
     3b0:	8c 01       	movw	r16, r24
     3b2:	f6 2e       	mov	r15, r22
     3b4:	e4 2e       	mov	r14, r20
     3b6:	d2 2e       	mov	r13, r18
     3b8:	0e 94 fc 13 	call	0x27f8	; 0x27f8 <_ZN17LiquidCrystal_I2CC1Ev>
  this->lcd = LiquidCrystal_I2C();  // set the LCD address to 0x27 for a 16 chars and 2 line display
     3bc:	ce 01       	movw	r24, r28
     3be:	01 96       	adiw	r24, 0x01	; 1
     3c0:	0e 94 fc 13 	call	0x27f8	; 0x27f8 <_ZN17LiquidCrystal_I2CC1Ev>
#ifdef BIN // Prevent warnings if BIN is previously defined in "iotnx4.h" or similar
#undef BIN
#endif
#define BIN 2

class Print
     3c4:	8b 81       	ldd	r24, Y+3	; 0x03
     3c6:	9c 81       	ldd	r25, Y+4	; 0x04
     3c8:	f8 01       	movw	r30, r16
     3ca:	93 83       	std	Z+3, r25	; 0x03
     3cc:	82 83       	std	Z+2, r24	; 0x02

#define En B00000100  // Enable bit
#define Rw B00000010  // Read/Write bit
#define Rs B00000001  // Register select bit

class LiquidCrystal_I2C : public Print {
     3ce:	8d 81       	ldd	r24, Y+5	; 0x05
     3d0:	84 83       	std	Z+4, r24	; 0x04
     3d2:	8e 81       	ldd	r24, Y+6	; 0x06
     3d4:	85 83       	std	Z+5, r24	; 0x05
     3d6:	8f 81       	ldd	r24, Y+7	; 0x07
     3d8:	86 83       	std	Z+6, r24	; 0x06
     3da:	88 85       	ldd	r24, Y+8	; 0x08
     3dc:	87 83       	std	Z+7, r24	; 0x07
     3de:	89 85       	ldd	r24, Y+9	; 0x09
     3e0:	80 87       	std	Z+8, r24	; 0x08
     3e2:	8a 85       	ldd	r24, Y+10	; 0x0a
     3e4:	81 87       	std	Z+9, r24	; 0x09
     3e6:	8b 85       	ldd	r24, Y+11	; 0x0b
     3e8:	82 87       	std	Z+10, r24	; 0x0a
     3ea:	8c 85       	ldd	r24, Y+12	; 0x0c
     3ec:	83 87       	std	Z+11, r24	; 0x0b
  this->lcd.init(addr, cols, rows);
     3ee:	2d 2d       	mov	r18, r13
     3f0:	4e 2d       	mov	r20, r14
     3f2:	6f 2d       	mov	r22, r15
     3f4:	c8 01       	movw	r24, r16
     3f6:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <_ZN17LiquidCrystal_I2C4initEhhh>
}
     3fa:	2c 96       	adiw	r28, 0x0c	; 12
     3fc:	0f b6       	in	r0, 0x3f	; 63
     3fe:	f8 94       	cli
     400:	de bf       	out	0x3e, r29	; 62
     402:	0f be       	out	0x3f, r0	; 63
     404:	cd bf       	out	0x3d, r28	; 61
     406:	df 91       	pop	r29
     408:	cf 91       	pop	r28
     40a:	1f 91       	pop	r17
     40c:	0f 91       	pop	r16
     40e:	ff 90       	pop	r15
     410:	ef 90       	pop	r14
     412:	df 90       	pop	r13
     414:	08 95       	ret

00000416 <_ZN15ElcanLCDManager5beginEcc>:

void ElcanLCDManager::begin(char cols, char rows) {
  this->lcd.begin(cols, rows);
     416:	20 e0       	ldi	r18, 0x00	; 0
     418:	0c 94 b1 14 	jmp	0x2962	; 0x2962 <_ZN17LiquidCrystal_I2C5beginEhhh>

0000041c <_ZN15ElcanLCDManager10show_errorEc>:
}

void ElcanLCDManager::show_error(char error_code) {
     41c:	1f 93       	push	r17
     41e:	cf 93       	push	r28
     420:	df 93       	push	r29
     422:	ec 01       	movw	r28, r24
     424:	16 2f       	mov	r17, r22
	char blinks;
	this->lcd.clear();
     426:	0e 94 67 14 	call	0x28ce	; 0x28ce <_ZN17LiquidCrystal_I2C5clearEv>
	switch(error_code) {
     42a:	14 30       	cpi	r17, 0x04	; 4
     42c:	29 f0       	breq	.+10     	; 0x438 <_ZN15ElcanLCDManager10show_errorEc+0x1c>
     42e:	15 30       	cpi	r17, 0x05	; 5
     430:	51 f0       	breq	.+20     	; 0x446 <_ZN15ElcanLCDManager10show_errorEc+0x2a>
     432:	12 30       	cpi	r17, 0x02	; 2
     434:	a1 f4       	brne	.+40     	; 0x45e <_ZN15ElcanLCDManager10show_errorEc+0x42>
     436:	0c c0       	rjmp	.+24     	; 0x450 <_ZN15ElcanLCDManager10show_errorEc+0x34>
		case ERROR_RFID:
		blinks = 2;
		this->lcd.print(FS("Error 502"));
     438:	6d e0       	ldi	r22, 0x0D	; 13
     43a:	71 e0       	ldi	r23, 0x01	; 1
     43c:	ce 01       	movw	r24, r28
     43e:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <_ZN5Print5printEPK19__FlashStringHelper>
void ElcanLCDManager::show_error(char error_code) {
	char blinks;
	this->lcd.clear();
	switch(error_code) {
		case ERROR_RFID:
		blinks = 2;
     442:	d2 e0       	ldi	r29, 0x02	; 2
		this->lcd.print(FS("Error 502"));
		break;
     444:	21 c0       	rjmp	.+66     	; 0x488 <_ZN15ElcanLCDManager10show_errorEc+0x6c>
		case ERROR_RTC:
		blinks = 3;
		this->lcd.print(FS("Error 501"));
     446:	67 e1       	ldi	r22, 0x17	; 23
     448:	71 e0       	ldi	r23, 0x01	; 1
     44a:	ce 01       	movw	r24, r28
     44c:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <_ZN5Print5printEPK19__FlashStringHelper>
		case ERROR_WIFI:
		blinks = 4;
		this->lcd.print(FS("Error 503"));
     450:	61 e2       	ldi	r22, 0x21	; 33
     452:	71 e0       	ldi	r23, 0x01	; 1
     454:	ce 01       	movw	r24, r28
     456:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <_ZN5Print5printEPK19__FlashStringHelper>
		break;
		case ERROR_RTC:
		blinks = 3;
		this->lcd.print(FS("Error 501"));
		case ERROR_WIFI:
		blinks = 4;
     45a:	d4 e0       	ldi	r29, 0x04	; 4
		this->lcd.print(FS("Error 503"));
		break;
     45c:	15 c0       	rjmp	.+42     	; 0x488 <_ZN15ElcanLCDManager10show_errorEc+0x6c>
		default:
		this->lcd.print(FS("Error 500"));
     45e:	6b e2       	ldi	r22, 0x2B	; 43
     460:	71 e0       	ldi	r23, 0x01	; 1
     462:	ce 01       	movw	r24, r28
     464:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <_ZN5Print5printEPK19__FlashStringHelper>
		blinks = 1;
		break;
	}
	for (char i=0; i < blinks; i++) {
		tone(BUZZER, 1400, 300);
     468:	2c e2       	ldi	r18, 0x2C	; 44
     46a:	31 e0       	ldi	r19, 0x01	; 1
     46c:	40 e0       	ldi	r20, 0x00	; 0
     46e:	50 e0       	ldi	r21, 0x00	; 0
     470:	68 e7       	ldi	r22, 0x78	; 120
     472:	75 e0       	ldi	r23, 0x05	; 5
     474:	83 e0       	ldi	r24, 0x03	; 3
     476:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <_Z4tonehjm>
		delay(200);
     47a:	68 ec       	ldi	r22, 0xC8	; 200
     47c:	70 e0       	ldi	r23, 0x00	; 0
     47e:	80 e0       	ldi	r24, 0x00	; 0
     480:	90 e0       	ldi	r25, 0x00	; 0
     482:	0e 94 bd 12 	call	0x257a	; 0x257a <delay>
     486:	13 c0       	rjmp	.+38     	; 0x4ae <_ZN15ElcanLCDManager10show_errorEc+0x92>
		default:
		this->lcd.print(FS("Error 500"));
		blinks = 1;
		break;
	}
	for (char i=0; i < blinks; i++) {
     488:	c0 e0       	ldi	r28, 0x00	; 0
		tone(BUZZER, 1400, 300);
     48a:	2c e2       	ldi	r18, 0x2C	; 44
     48c:	31 e0       	ldi	r19, 0x01	; 1
     48e:	40 e0       	ldi	r20, 0x00	; 0
     490:	50 e0       	ldi	r21, 0x00	; 0
     492:	68 e7       	ldi	r22, 0x78	; 120
     494:	75 e0       	ldi	r23, 0x05	; 5
     496:	83 e0       	ldi	r24, 0x03	; 3
     498:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <_Z4tonehjm>
		delay(200);
     49c:	68 ec       	ldi	r22, 0xC8	; 200
     49e:	70 e0       	ldi	r23, 0x00	; 0
     4a0:	80 e0       	ldi	r24, 0x00	; 0
     4a2:	90 e0       	ldi	r25, 0x00	; 0
     4a4:	0e 94 bd 12 	call	0x257a	; 0x257a <delay>
		default:
		this->lcd.print(FS("Error 500"));
		blinks = 1;
		break;
	}
	for (char i=0; i < blinks; i++) {
     4a8:	cf 5f       	subi	r28, 0xFF	; 255
     4aa:	dc 13       	cpse	r29, r28
     4ac:	ee cf       	rjmp	.-36     	; 0x48a <_ZN15ElcanLCDManager10show_errorEc+0x6e>
		tone(BUZZER, 1400, 300);
		delay(200);
	}
	delay(500); //wait 1/2 second between displays at least;
     4ae:	64 ef       	ldi	r22, 0xF4	; 244
     4b0:	71 e0       	ldi	r23, 0x01	; 1
     4b2:	80 e0       	ldi	r24, 0x00	; 0
     4b4:	90 e0       	ldi	r25, 0x00	; 0
}
     4b6:	df 91       	pop	r29
     4b8:	cf 91       	pop	r28
     4ba:	1f 91       	pop	r17
	}
	for (char i=0; i < blinks; i++) {
		tone(BUZZER, 1400, 300);
		delay(200);
	}
	delay(500); //wait 1/2 second between displays at least;
     4bc:	0c 94 bd 12 	jmp	0x257a	; 0x257a <delay>

000004c0 <_ZN15ElcanLCDManager10show_readyEPc>:
	this->show_message(text);
	delay(2500); //2 1/2 seconds delay to read the ip
	this->lcd.clear();
}

void ElcanLCDManager::show_ready(char *dateString) {
     4c0:	0f 93       	push	r16
     4c2:	1f 93       	push	r17
     4c4:	cf 93       	push	r28
     4c6:	df 93       	push	r29
     4c8:	ec 01       	movw	r28, r24
     4ca:	8b 01       	movw	r16, r22
	this->lcd.setCursor(0,0);
     4cc:	40 e0       	ldi	r20, 0x00	; 0
     4ce:	60 e0       	ldi	r22, 0x00	; 0
     4d0:	0e 94 75 14 	call	0x28ea	; 0x28ea <_ZN17LiquidCrystal_I2C9setCursorEhh>
	this->lcd.print(dateString);
     4d4:	b8 01       	movw	r22, r16
     4d6:	ce 01       	movw	r24, r28
     4d8:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <_ZN5Print5printEPKc>
	this->lcd.setCursor(0,1);
     4dc:	41 e0       	ldi	r20, 0x01	; 1
     4de:	60 e0       	ldi	r22, 0x00	; 0
     4e0:	ce 01       	movw	r24, r28
     4e2:	0e 94 75 14 	call	0x28ea	; 0x28ea <_ZN17LiquidCrystal_I2C9setCursorEhh>
	this->lcd.print(FS("Esperando..."));
     4e6:	65 e3       	ldi	r22, 0x35	; 53
     4e8:	71 e0       	ldi	r23, 0x01	; 1
     4ea:	ce 01       	movw	r24, r28
}
     4ec:	df 91       	pop	r29
     4ee:	cf 91       	pop	r28
     4f0:	1f 91       	pop	r17
     4f2:	0f 91       	pop	r16

void ElcanLCDManager::show_ready(char *dateString) {
	this->lcd.setCursor(0,0);
	this->lcd.print(dateString);
	this->lcd.setCursor(0,1);
	this->lcd.print(FS("Esperando..."));
     4f4:	0c 94 a0 0d 	jmp	0x1b40	; 0x1b40 <_ZN5Print5printEPK19__FlashStringHelper>

000004f8 <_ZN15ElcanLCDManager12show_messageEPc>:
}

void ElcanLCDManager::show_message(char *msg) {
     4f8:	af 92       	push	r10
     4fa:	bf 92       	push	r11
     4fc:	cf 92       	push	r12
     4fe:	df 92       	push	r13
     500:	ef 92       	push	r14
     502:	ff 92       	push	r15
     504:	0f 93       	push	r16
     506:	1f 93       	push	r17
     508:	cf 93       	push	r28
     50a:	df 93       	push	r29
     50c:	cd b7       	in	r28, 0x3d	; 61
     50e:	de b7       	in	r29, 0x3e	; 62
     510:	61 97       	sbiw	r28, 0x11	; 17
     512:	0f b6       	in	r0, 0x3f	; 63
     514:	f8 94       	cli
     516:	de bf       	out	0x3e, r29	; 62
     518:	0f be       	out	0x3f, r0	; 63
     51a:	cd bf       	out	0x3d, r28	; 61
     51c:	8c 01       	movw	r16, r24
     51e:	6b 01       	movw	r12, r22
	char tmp[17];
	char len;
	lcd.clear();
     520:	0e 94 67 14 	call	0x28ce	; 0x28ce <_ZN17LiquidCrystal_I2C5clearEv>
	lcd.backlight();
     524:	c8 01       	movw	r24, r16
     526:	0e 94 21 14 	call	0x2842	; 0x2842 <_ZN17LiquidCrystal_I2C9backlightEv>
	this->backlightStart = millis();
     52a:	0e 94 8c 12 	call	0x2518	; 0x2518 <millis>
     52e:	f8 01       	movw	r30, r16
     530:	64 87       	std	Z+12, r22	; 0x0c
     532:	75 87       	std	Z+13, r23	; 0x0d
     534:	86 87       	std	Z+14, r24	; 0x0e
     536:	97 87       	std	Z+15, r25	; 0x0f
	len = strlen(msg);
     538:	f6 01       	movw	r30, r12
     53a:	01 90       	ld	r0, Z+
     53c:	00 20       	and	r0, r0
     53e:	e9 f7       	brne	.-6      	; 0x53a <_ZN15ElcanLCDManager12show_messageEPc+0x42>
     540:	31 97       	sbiw	r30, 0x01	; 1
     542:	7f 01       	movw	r14, r30
     544:	ec 18       	sub	r14, r12
     546:	fd 08       	sbc	r15, r13
	if (len > 16) {
     548:	f0 e1       	ldi	r31, 0x10	; 16
     54a:	fe 15       	cp	r31, r14
     54c:	40 f5       	brcc	.+80     	; 0x59e <_ZN15ElcanLCDManager12show_messageEPc+0xa6>
		this->lcd.setCursor(0,0);
     54e:	40 e0       	ldi	r20, 0x00	; 0
     550:	60 e0       	ldi	r22, 0x00	; 0
     552:	c8 01       	movw	r24, r16
     554:	0e 94 75 14 	call	0x28ea	; 0x28ea <_ZN17LiquidCrystal_I2C9setCursorEhh>
		substring(msg, tmp, 0, 15);
     558:	2f e0       	ldi	r18, 0x0F	; 15
     55a:	30 e0       	ldi	r19, 0x00	; 0
     55c:	40 e0       	ldi	r20, 0x00	; 0
     55e:	50 e0       	ldi	r21, 0x00	; 0
     560:	ce 01       	movw	r24, r28
     562:	01 96       	adiw	r24, 0x01	; 1
     564:	5c 01       	movw	r10, r24
     566:	bc 01       	movw	r22, r24
     568:	c6 01       	movw	r24, r12
     56a:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <_Z9substringPcS_ii>
		this->lcd.print(tmp);
     56e:	b5 01       	movw	r22, r10
     570:	c8 01       	movw	r24, r16
     572:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <_ZN5Print5printEPKc>
		memset(tmp, 0, sizeof(tmp));
     576:	81 e1       	ldi	r24, 0x11	; 17
     578:	f5 01       	movw	r30, r10
     57a:	11 92       	st	Z+, r1
     57c:	8a 95       	dec	r24
     57e:	e9 f7       	brne	.-6      	; 0x57a <_ZN15ElcanLCDManager12show_messageEPc+0x82>
		this->lcd.setCursor(0,1);
     580:	41 e0       	ldi	r20, 0x01	; 1
     582:	60 e0       	ldi	r22, 0x00	; 0
     584:	c8 01       	movw	r24, r16
     586:	0e 94 75 14 	call	0x28ea	; 0x28ea <_ZN17LiquidCrystal_I2C9setCursorEhh>
		substring(msg, tmp, 16, len);
     58a:	97 01       	movw	r18, r14
     58c:	33 27       	eor	r19, r19
     58e:	40 e1       	ldi	r20, 0x10	; 16
     590:	50 e0       	ldi	r21, 0x00	; 0
     592:	b5 01       	movw	r22, r10
     594:	c6 01       	movw	r24, r12
     596:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <_Z9substringPcS_ii>
		this->lcd.print(tmp);
     59a:	b5 01       	movw	r22, r10
     59c:	01 c0       	rjmp	.+2      	; 0x5a0 <_ZN15ElcanLCDManager12show_messageEPc+0xa8>
	} else {
		this->lcd.print(msg);
     59e:	b6 01       	movw	r22, r12
     5a0:	c8 01       	movw	r24, r16
     5a2:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <_ZN5Print5printEPKc>
	}
}
     5a6:	61 96       	adiw	r28, 0x11	; 17
     5a8:	0f b6       	in	r0, 0x3f	; 63
     5aa:	f8 94       	cli
     5ac:	de bf       	out	0x3e, r29	; 62
     5ae:	0f be       	out	0x3f, r0	; 63
     5b0:	cd bf       	out	0x3d, r28	; 61
     5b2:	df 91       	pop	r29
     5b4:	cf 91       	pop	r28
     5b6:	1f 91       	pop	r17
     5b8:	0f 91       	pop	r16
     5ba:	ff 90       	pop	r15
     5bc:	ef 90       	pop	r14
     5be:	df 90       	pop	r13
     5c0:	cf 90       	pop	r12
     5c2:	bf 90       	pop	r11
     5c4:	af 90       	pop	r10
     5c6:	08 95       	ret

000005c8 <_ZN15ElcanLCDManager7show_ipEPc>:
		delay(200);
	}
	delay(500); //wait 1/2 second between displays at least;
}

void ElcanLCDManager::show_ip(char *ipaddr) {
     5c8:	cf 92       	push	r12
     5ca:	df 92       	push	r13
     5cc:	ef 92       	push	r14
     5ce:	ff 92       	push	r15
     5d0:	0f 93       	push	r16
     5d2:	1f 93       	push	r17
     5d4:	cf 93       	push	r28
     5d6:	df 93       	push	r29
     5d8:	cd b7       	in	r28, 0x3d	; 61
     5da:	de b7       	in	r29, 0x3e	; 62
     5dc:	a0 97       	sbiw	r28, 0x20	; 32
     5de:	0f b6       	in	r0, 0x3f	; 63
     5e0:	f8 94       	cli
     5e2:	de bf       	out	0x3e, r29	; 62
     5e4:	0f be       	out	0x3f, r0	; 63
     5e6:	cd bf       	out	0x3d, r28	; 61
     5e8:	7c 01       	movw	r14, r24
     5ea:	6b 01       	movw	r12, r22
	char text[32];
	memset(text, 0x00, sizeof(text));
     5ec:	8e 01       	movw	r16, r28
     5ee:	0f 5f       	subi	r16, 0xFF	; 255
     5f0:	1f 4f       	sbci	r17, 0xFF	; 255
     5f2:	80 e2       	ldi	r24, 0x20	; 32
     5f4:	f8 01       	movw	r30, r16
     5f6:	11 92       	st	Z+, r1
     5f8:	8a 95       	dec	r24
     5fa:	e9 f7       	brne	.-6      	; 0x5f6 <_ZN15ElcanLCDManager7show_ipEPc+0x2e>
	strcat(text, "Station IP......");
     5fc:	62 e4       	ldi	r22, 0x42	; 66
     5fe:	71 e0       	ldi	r23, 0x01	; 1
     600:	c8 01       	movw	r24, r16
     602:	0e 94 0f 22 	call	0x441e	; 0x441e <strcat>
	strcat(text, ipaddr);
     606:	b6 01       	movw	r22, r12
     608:	c8 01       	movw	r24, r16
     60a:	0e 94 0f 22 	call	0x441e	; 0x441e <strcat>
	this->show_message(text);
     60e:	b8 01       	movw	r22, r16
     610:	c7 01       	movw	r24, r14
     612:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <_ZN15ElcanLCDManager12show_messageEPc>
	delay(2500); //2 1/2 seconds delay to read the ip
     616:	64 ec       	ldi	r22, 0xC4	; 196
     618:	79 e0       	ldi	r23, 0x09	; 9
     61a:	80 e0       	ldi	r24, 0x00	; 0
     61c:	90 e0       	ldi	r25, 0x00	; 0
     61e:	0e 94 bd 12 	call	0x257a	; 0x257a <delay>
	this->lcd.clear();
     622:	c7 01       	movw	r24, r14
     624:	0e 94 67 14 	call	0x28ce	; 0x28ce <_ZN17LiquidCrystal_I2C5clearEv>
}
     628:	a0 96       	adiw	r28, 0x20	; 32
     62a:	0f b6       	in	r0, 0x3f	; 63
     62c:	f8 94       	cli
     62e:	de bf       	out	0x3e, r29	; 62
     630:	0f be       	out	0x3f, r0	; 63
     632:	cd bf       	out	0x3d, r28	; 61
     634:	df 91       	pop	r29
     636:	cf 91       	pop	r28
     638:	1f 91       	pop	r17
     63a:	0f 91       	pop	r16
     63c:	ff 90       	pop	r15
     63e:	ef 90       	pop	r14
     640:	df 90       	pop	r13
     642:	cf 90       	pop	r12
     644:	08 95       	ret

00000646 <_ZN15ElcanLCDManager11check_lightEv>:
	} else {
		this->lcd.print(msg);
	}
}

void ElcanLCDManager::check_light() {
     646:	0f 93       	push	r16
     648:	1f 93       	push	r17
     64a:	cf 93       	push	r28
     64c:	df 93       	push	r29
	if (this->backlightStart > 0) {
     64e:	fc 01       	movw	r30, r24
     650:	44 85       	ldd	r20, Z+12	; 0x0c
     652:	55 85       	ldd	r21, Z+13	; 0x0d
     654:	66 85       	ldd	r22, Z+14	; 0x0e
     656:	77 85       	ldd	r23, Z+15	; 0x0f
     658:	14 16       	cp	r1, r20
     65a:	15 06       	cpc	r1, r21
     65c:	16 06       	cpc	r1, r22
     65e:	17 06       	cpc	r1, r23
     660:	cc f4       	brge	.+50     	; 0x694 <_ZN15ElcanLCDManager11check_lightEv+0x4e>
     662:	ec 01       	movw	r28, r24
		if (millis() - backlightStart > LIGHT_DURATION) {
     664:	0e 94 8c 12 	call	0x2518	; 0x2518 <millis>
     668:	0c 85       	ldd	r16, Y+12	; 0x0c
     66a:	1d 85       	ldd	r17, Y+13	; 0x0d
     66c:	2e 85       	ldd	r18, Y+14	; 0x0e
     66e:	3f 85       	ldd	r19, Y+15	; 0x0f
     670:	dc 01       	movw	r26, r24
     672:	cb 01       	movw	r24, r22
     674:	80 1b       	sub	r24, r16
     676:	91 0b       	sbc	r25, r17
     678:	a2 0b       	sbc	r26, r18
     67a:	b3 0b       	sbc	r27, r19
     67c:	81 3a       	cpi	r24, 0xA1	; 161
     67e:	9f 40       	sbci	r25, 0x0F	; 15
     680:	a1 05       	cpc	r26, r1
     682:	b1 05       	cpc	r27, r1
     684:	38 f0       	brcs	.+14     	; 0x694 <_ZN15ElcanLCDManager11check_lightEv+0x4e>
			this->lcd.noBacklight();
     686:	ce 01       	movw	r24, r28
     688:	0e 94 1c 14 	call	0x2838	; 0x2838 <_ZN17LiquidCrystal_I2C11noBacklightEv>
			this->backlightStart = 0;
     68c:	1c 86       	std	Y+12, r1	; 0x0c
     68e:	1d 86       	std	Y+13, r1	; 0x0d
     690:	1e 86       	std	Y+14, r1	; 0x0e
     692:	1f 86       	std	Y+15, r1	; 0x0f
		}
	}
}
     694:	df 91       	pop	r29
     696:	cf 91       	pop	r28
     698:	1f 91       	pop	r17
     69a:	0f 91       	pop	r16
     69c:	08 95       	ret

0000069e <_ZN15ElcanLCDManager8light_onEv>:

void ElcanLCDManager::light_on() {
     69e:	cf 93       	push	r28
     6a0:	df 93       	push	r29
     6a2:	ec 01       	movw	r28, r24
	this->lcd.backlight();
     6a4:	0e 94 21 14 	call	0x2842	; 0x2842 <_ZN17LiquidCrystal_I2C9backlightEv>
	this->backlightStart = millis();
     6a8:	0e 94 8c 12 	call	0x2518	; 0x2518 <millis>
     6ac:	6c 87       	std	Y+12, r22	; 0x0c
     6ae:	7d 87       	std	Y+13, r23	; 0x0d
     6b0:	8e 87       	std	Y+14, r24	; 0x0e
     6b2:	9f 87       	std	Y+15, r25	; 0x0f
}
     6b4:	df 91       	pop	r29
     6b6:	cf 91       	pop	r28
     6b8:	08 95       	ret

000006ba <_ZN5Print5writeEPKc>:
  Serial.flush();
  return pos;
}

int ElcanWifi::available() {
  return Serial.available();
     6ba:	61 15       	cp	r22, r1
     6bc:	71 05       	cpc	r23, r1
     6be:	79 f0       	breq	.+30     	; 0x6de <_ZN5Print5writeEPKc+0x24>
     6c0:	fb 01       	movw	r30, r22
     6c2:	01 90       	ld	r0, Z+
     6c4:	00 20       	and	r0, r0
     6c6:	e9 f7       	brne	.-6      	; 0x6c2 <_ZN5Print5writeEPKc+0x8>
     6c8:	31 97       	sbiw	r30, 0x01	; 1
     6ca:	af 01       	movw	r20, r30
     6cc:	46 1b       	sub	r20, r22
     6ce:	57 0b       	sbc	r21, r23
     6d0:	dc 01       	movw	r26, r24
     6d2:	ed 91       	ld	r30, X+
     6d4:	fc 91       	ld	r31, X
     6d6:	02 80       	ldd	r0, Z+2	; 0x02
     6d8:	f3 81       	ldd	r31, Z+3	; 0x03
     6da:	e0 2d       	mov	r30, r0
     6dc:	09 94       	ijmp
     6de:	80 e0       	ldi	r24, 0x00	; 0
     6e0:	90 e0       	ldi	r25, 0x00	; 0
     6e2:	08 95       	ret

000006e4 <_ZN9ElcanWifiC1Ev>:
     6e4:	fc 01       	movw	r30, r24
     6e6:	11 82       	std	Z+1, r1	; 0x01
     6e8:	08 95       	ret

000006ea <_ZN9ElcanWifi19empty_serial_bufferEv>:
  result[pos] = 0x00;
}

void ElcanWifi::empty_serial_buffer() {
  char t;
  while(Serial.available()) {
     6ea:	84 ed       	ldi	r24, 0xD4	; 212
     6ec:	92 e0       	ldi	r25, 0x02	; 2
     6ee:	0e 94 92 0b 	call	0x1724	; 0x1724 <_ZN14HardwareSerial9availableEv>
     6f2:	89 2b       	or	r24, r25
     6f4:	29 f0       	breq	.+10     	; 0x700 <_ZN9ElcanWifi19empty_serial_bufferEv+0x16>
    t = Serial.read();
     6f6:	84 ed       	ldi	r24, 0xD4	; 212
     6f8:	92 e0       	ldi	r25, 0x02	; 2
     6fa:	0e 94 ac 0b 	call	0x1758	; 0x1758 <_ZN14HardwareSerial4readEv>
  result[pos] = 0x00;
}

void ElcanWifi::empty_serial_buffer() {
  char t;
  while(Serial.available()) {
     6fe:	f5 cf       	rjmp	.-22     	; 0x6ea <_ZN9ElcanWifi19empty_serial_bufferEv>
     700:	08 95       	ret

00000702 <_ZN9ElcanWifi5beginEv>:
ElcanWifi::ElcanWifi() {
  _error = 0;
  _error = false;
}

bool ElcanWifi::begin() {
     702:	0f 93       	push	r16
     704:	1f 93       	push	r17
     706:	cf 93       	push	r28
     708:	df 93       	push	r29
     70a:	cd b7       	in	r28, 0x3d	; 61
     70c:	de b7       	in	r29, 0x3e	; 62
     70e:	64 97       	sbiw	r28, 0x14	; 20
     710:	0f b6       	in	r0, 0x3f	; 63
     712:	f8 94       	cli
     714:	de bf       	out	0x3e, r29	; 62
     716:	0f be       	out	0x3f, r0	; 63
     718:	cd bf       	out	0x3d, r28	; 61
     71a:	8c 01       	movw	r16, r24
  char received[20];
  char count;
  empty_serial_buffer();
     71c:	0e 94 75 03 	call	0x6ea	; 0x6ea <_ZN9ElcanWifi19empty_serial_bufferEv>
  Serial.write("Q");
     720:	63 e5       	ldi	r22, 0x53	; 83
     722:	71 e0       	ldi	r23, 0x01	; 1
     724:	84 ed       	ldi	r24, 0xD4	; 212
     726:	92 e0       	ldi	r25, 0x02	; 2
     728:	0e 94 5d 03 	call	0x6ba	; 0x6ba <_ZN5Print5writeEPKc>
  Serial.flush();
     72c:	84 ed       	ldi	r24, 0xD4	; 212
     72e:	92 e0       	ldi	r25, 0x02	; 2
     730:	0e 94 4c 0c 	call	0x1898	; 0x1898 <_ZN14HardwareSerial5flushEv>
  count = Serial.readBytesUntil('\r', received, INITIALIZATION_STR_LEN);
     734:	25 e0       	ldi	r18, 0x05	; 5
     736:	30 e0       	ldi	r19, 0x00	; 0
     738:	ae 01       	movw	r20, r28
     73a:	4f 5f       	subi	r20, 0xFF	; 255
     73c:	5f 4f       	sbci	r21, 0xFF	; 255
     73e:	6d e0       	ldi	r22, 0x0D	; 13
     740:	84 ed       	ldi	r24, 0xD4	; 212
     742:	92 e0       	ldi	r25, 0x02	; 2
     744:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <_ZN6Stream14readBytesUntilEcPcj>
  empty_serial_buffer();
     748:	c8 01       	movw	r24, r16
     74a:	0e 94 75 03 	call	0x6ea	; 0x6ea <_ZN9ElcanWifi19empty_serial_bufferEv>
  received[INITIALIZATION_STR_LEN] = 0x00;
     74e:	1e 82       	std	Y+6, r1	; 0x06
  if (strcmp(received, "INIOK") != 0) {
     750:	65 e5       	ldi	r22, 0x55	; 85
     752:	71 e0       	ldi	r23, 0x01	; 1
     754:	ce 01       	movw	r24, r28
     756:	01 96       	adiw	r24, 0x01	; 1
     758:	0e 94 1a 22 	call	0x4434	; 0x4434 <strcmp>
     75c:	89 2b       	or	r24, r25
     75e:	19 f0       	breq	.+6      	; 0x766 <_ZN9ElcanWifi5beginEv+0x64>
    _error = 100;
     760:	84 e6       	ldi	r24, 0x64	; 100
     762:	f8 01       	movw	r30, r16
     764:	81 83       	std	Z+1, r24	; 0x01
  }
  delay(1);
     766:	61 e0       	ldi	r22, 0x01	; 1
     768:	70 e0       	ldi	r23, 0x00	; 0
     76a:	80 e0       	ldi	r24, 0x00	; 0
     76c:	90 e0       	ldi	r25, 0x00	; 0
     76e:	0e 94 bd 12 	call	0x257a	; 0x257a <delay>
  empty_serial_buffer();
     772:	c8 01       	movw	r24, r16
     774:	0e 94 75 03 	call	0x6ea	; 0x6ea <_ZN9ElcanWifi19empty_serial_bufferEv>
  return (_error == 0);
     778:	81 e0       	ldi	r24, 0x01	; 1
     77a:	f8 01       	movw	r30, r16
     77c:	91 81       	ldd	r25, Z+1	; 0x01
     77e:	91 11       	cpse	r25, r1
     780:	80 e0       	ldi	r24, 0x00	; 0
}
     782:	64 96       	adiw	r28, 0x14	; 20
     784:	0f b6       	in	r0, 0x3f	; 63
     786:	f8 94       	cli
     788:	de bf       	out	0x3e, r29	; 62
     78a:	0f be       	out	0x3f, r0	; 63
     78c:	cd bf       	out	0x3d, r28	; 61
     78e:	df 91       	pop	r29
     790:	cf 91       	pop	r28
     792:	1f 91       	pop	r17
     794:	0f 91       	pop	r16
     796:	08 95       	ret

00000798 <_ZN9ElcanWifi6get_ipEPc>:

void ElcanWifi::get_ip(char *result) {
     798:	cf 93       	push	r28
     79a:	df 93       	push	r29
     79c:	eb 01       	movw	r28, r22
  char pos = 0;
  char tmp;
  empty_serial_buffer();
     79e:	0e 94 75 03 	call	0x6ea	; 0x6ea <_ZN9ElcanWifi19empty_serial_bufferEv>
  Serial.write("I");
     7a2:	6b e5       	ldi	r22, 0x5B	; 91
     7a4:	71 e0       	ldi	r23, 0x01	; 1
     7a6:	84 ed       	ldi	r24, 0xD4	; 212
     7a8:	92 e0       	ldi	r25, 0x02	; 2
     7aa:	0e 94 5d 03 	call	0x6ba	; 0x6ba <_ZN5Print5writeEPKc>
  Serial.flush();
     7ae:	84 ed       	ldi	r24, 0xD4	; 212
     7b0:	92 e0       	ldi	r25, 0x02	; 2
     7b2:	0e 94 4c 0c 	call	0x1898	; 0x1898 <_ZN14HardwareSerial5flushEv>
  pos = Serial.readBytesUntil('\r', result, IP_ADDRESS_LEN);
     7b6:	2f e0       	ldi	r18, 0x0F	; 15
     7b8:	30 e0       	ldi	r19, 0x00	; 0
     7ba:	ae 01       	movw	r20, r28
     7bc:	6d e0       	ldi	r22, 0x0D	; 13
     7be:	84 ed       	ldi	r24, 0xD4	; 212
     7c0:	92 e0       	ldi	r25, 0x02	; 2
     7c2:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <_ZN6Stream14readBytesUntilEcPcj>
  result[pos] = 0x00;
     7c6:	c8 0f       	add	r28, r24
     7c8:	d1 1d       	adc	r29, r1
     7ca:	18 82       	st	Y, r1
}
     7cc:	df 91       	pop	r29
     7ce:	cf 91       	pop	r28
     7d0:	08 95       	ret

000007d2 <_ZN9ElcanWifi12readCardDataEPcc>:
  while(!Serial.available() && count++ < 255);
  tmp = Serial.read();
  return tmp;
}

void ElcanWifi::readCardData(char *result, char maxLen) {
     7d2:	ef 92       	push	r14
     7d4:	ff 92       	push	r15
     7d6:	0f 93       	push	r16
     7d8:	1f 93       	push	r17
     7da:	cf 93       	push	r28
     7dc:	df 93       	push	r29
     7de:	7c 01       	movw	r14, r24
     7e0:	eb 01       	movw	r28, r22
  char pos;
  memset(result, 0, maxLen);
     7e2:	04 2f       	mov	r16, r20
     7e4:	10 e0       	ldi	r17, 0x00	; 0
     7e6:	a8 01       	movw	r20, r16
     7e8:	60 e0       	ldi	r22, 0x00	; 0
     7ea:	70 e0       	ldi	r23, 0x00	; 0
     7ec:	ce 01       	movw	r24, r28
     7ee:	0e 94 08 22 	call	0x4410	; 0x4410 <memset>
  Serial.write("T");
     7f2:	6d e5       	ldi	r22, 0x5D	; 93
     7f4:	71 e0       	ldi	r23, 0x01	; 1
     7f6:	84 ed       	ldi	r24, 0xD4	; 212
     7f8:	92 e0       	ldi	r25, 0x02	; 2
     7fa:	0e 94 5d 03 	call	0x6ba	; 0x6ba <_ZN5Print5writeEPKc>
  Serial.flush();
     7fe:	84 ed       	ldi	r24, 0xD4	; 212
     800:	92 e0       	ldi	r25, 0x02	; 2
     802:	0e 94 4c 0c 	call	0x1898	; 0x1898 <_ZN14HardwareSerial5flushEv>
  delay(1);
     806:	61 e0       	ldi	r22, 0x01	; 1
     808:	70 e0       	ldi	r23, 0x00	; 0
     80a:	80 e0       	ldi	r24, 0x00	; 0
     80c:	90 e0       	ldi	r25, 0x00	; 0
     80e:	0e 94 bd 12 	call	0x257a	; 0x257a <delay>
  pos = Serial.readBytesUntil('\r', result, maxLen);
     812:	98 01       	movw	r18, r16
     814:	ae 01       	movw	r20, r28
     816:	6d e0       	ldi	r22, 0x0D	; 13
     818:	84 ed       	ldi	r24, 0xD4	; 212
     81a:	92 e0       	ldi	r25, 0x02	; 2
     81c:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <_ZN6Stream14readBytesUntilEcPcj>
     820:	18 2f       	mov	r17, r24
  empty_serial_buffer();
     822:	c7 01       	movw	r24, r14
     824:	0e 94 75 03 	call	0x6ea	; 0x6ea <_ZN9ElcanWifi19empty_serial_bufferEv>
  result[pos] = 0x00;
     828:	c1 0f       	add	r28, r17
     82a:	d1 1d       	adc	r29, r1
     82c:	18 82       	st	Y, r1
}
     82e:	df 91       	pop	r29
     830:	cf 91       	pop	r28
     832:	1f 91       	pop	r17
     834:	0f 91       	pop	r16
     836:	ff 90       	pop	r15
     838:	ef 90       	pop	r14
     83a:	08 95       	ret

0000083c <_ZN9ElcanWifi4pollEv>:

int ElcanWifi::available() {
  return Serial.available();
}

char ElcanWifi::poll() {
     83c:	cf 93       	push	r28
  char tmp;
  char count = 0;
  empty_serial_buffer();
     83e:	0e 94 75 03 	call	0x6ea	; 0x6ea <_ZN9ElcanWifi19empty_serial_bufferEv>
  Serial.write("P");
     842:	6f e5       	ldi	r22, 0x5F	; 95
     844:	71 e0       	ldi	r23, 0x01	; 1
     846:	84 ed       	ldi	r24, 0xD4	; 212
     848:	92 e0       	ldi	r25, 0x02	; 2
     84a:	0e 94 5d 03 	call	0x6ba	; 0x6ba <_ZN5Print5writeEPKc>
  Serial.flush();
     84e:	84 ed       	ldi	r24, 0xD4	; 212
     850:	92 e0       	ldi	r25, 0x02	; 2
     852:	0e 94 4c 0c 	call	0x1898	; 0x1898 <_ZN14HardwareSerial5flushEv>
     856:	c0 e0       	ldi	r28, 0x00	; 0
  while(!Serial.available() && count++ < 255);
     858:	84 ed       	ldi	r24, 0xD4	; 212
     85a:	92 e0       	ldi	r25, 0x02	; 2
     85c:	0e 94 92 0b 	call	0x1724	; 0x1724 <_ZN14HardwareSerial9availableEv>
     860:	89 2b       	or	r24, r25
     862:	11 f4       	brne	.+4      	; 0x868 <_ZN9ElcanWifi4pollEv+0x2c>
     864:	c1 50       	subi	r28, 0x01	; 1
     866:	c1 f7       	brne	.-16     	; 0x858 <_ZN9ElcanWifi4pollEv+0x1c>
  tmp = Serial.read();
     868:	84 ed       	ldi	r24, 0xD4	; 212
     86a:	92 e0       	ldi	r25, 0x02	; 2
     86c:	0e 94 ac 0b 	call	0x1758	; 0x1758 <_ZN14HardwareSerial4readEv>
  return tmp;
}
     870:	cf 91       	pop	r28
     872:	08 95       	ret

00000874 <_ZN9ElcanWifi20sendIntrussionAttempEPc>:
  while(Serial.available()) {
    t = Serial.read();
  }
}

void ElcanWifi::sendIntrussionAttemp(char *data) {
     874:	df 92       	push	r13
     876:	ef 92       	push	r14
     878:	ff 92       	push	r15
     87a:	0f 93       	push	r16
     87c:	1f 93       	push	r17
     87e:	cf 93       	push	r28
     880:	df 93       	push	r29
     882:	cd b7       	in	r28, 0x3d	; 61
     884:	de b7       	in	r29, 0x3e	; 62
     886:	a0 97       	sbiw	r28, 0x20	; 32
     888:	0f b6       	in	r0, 0x3f	; 63
     88a:	f8 94       	cli
     88c:	de bf       	out	0x3e, r29	; 62
     88e:	0f be       	out	0x3f, r0	; 63
     890:	cd bf       	out	0x3d, r28	; 61
  char text[32];
  char len = strlen(data);
     892:	fb 01       	movw	r30, r22
     894:	01 90       	ld	r0, Z+
     896:	00 20       	and	r0, r0
     898:	e9 f7       	brne	.-6      	; 0x894 <_ZN9ElcanWifi20sendIntrussionAttempEPc+0x20>
     89a:	31 97       	sbiw	r30, 0x01	; 1
     89c:	e6 1b       	sub	r30, r22
     89e:	f7 0b       	sbc	r31, r23
     8a0:	de 2e       	mov	r13, r30
  memset(text,0,sizeof(text));
     8a2:	ce 01       	movw	r24, r28
     8a4:	01 96       	adiw	r24, 0x01	; 1
     8a6:	7c 01       	movw	r14, r24
     8a8:	80 e2       	ldi	r24, 0x20	; 32
     8aa:	d7 01       	movw	r26, r14
     8ac:	1d 92       	st	X+, r1
     8ae:	8a 95       	dec	r24
     8b0:	e9 f7       	brne	.-6      	; 0x8ac <_ZN9ElcanWifi20sendIntrussionAttempEPc+0x38>
  text[0]='N';
     8b2:	8e e4       	ldi	r24, 0x4E	; 78
     8b4:	89 83       	std	Y+1, r24	; 0x01
  memcpy(text+1, data, len); // 8 bytes: 4 cardID, 4 timestamp
     8b6:	af 01       	movw	r20, r30
     8b8:	55 27       	eor	r21, r21
     8ba:	ce 01       	movw	r24, r28
     8bc:	02 96       	adiw	r24, 0x02	; 2
     8be:	0e 94 ff 21 	call	0x43fe	; 0x43fe <memcpy>
     8c2:	87 01       	movw	r16, r14
  for (char b=0; b < len; b++) {
     8c4:	80 2f       	mov	r24, r16
     8c6:	8e 19       	sub	r24, r14
     8c8:	8d 15       	cp	r24, r13
     8ca:	40 f4       	brcc	.+16     	; 0x8dc <_ZN9ElcanWifi20sendIntrussionAttempEPc+0x68>
    Serial.write(text[b]);
     8cc:	f8 01       	movw	r30, r16
     8ce:	61 91       	ld	r22, Z+
     8d0:	8f 01       	movw	r16, r30
    virtual void flush(void);
    virtual size_t write(uint8_t);
    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
     8d2:	84 ed       	ldi	r24, 0xD4	; 212
     8d4:	92 e0       	ldi	r25, 0x02	; 2
     8d6:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <_ZN14HardwareSerial5writeEh>
  char text[32];
  char len = strlen(data);
  memset(text,0,sizeof(text));
  text[0]='N';
  memcpy(text+1, data, len); // 8 bytes: 4 cardID, 4 timestamp
  for (char b=0; b < len; b++) {
     8da:	f4 cf       	rjmp	.-24     	; 0x8c4 <_ZN9ElcanWifi20sendIntrussionAttempEPc+0x50>
    Serial.write(text[b]);
  }
  Serial.write(EOL);
     8dc:	61 e6       	ldi	r22, 0x61	; 97
     8de:	71 e0       	ldi	r23, 0x01	; 1
     8e0:	84 ed       	ldi	r24, 0xD4	; 212
     8e2:	92 e0       	ldi	r25, 0x02	; 2
     8e4:	0e 94 5d 03 	call	0x6ba	; 0x6ba <_ZN5Print5writeEPKc>
  Serial.flush();
     8e8:	84 ed       	ldi	r24, 0xD4	; 212
     8ea:	92 e0       	ldi	r25, 0x02	; 2
     8ec:	0e 94 4c 0c 	call	0x1898	; 0x1898 <_ZN14HardwareSerial5flushEv>
}
     8f0:	a0 96       	adiw	r28, 0x20	; 32
     8f2:	0f b6       	in	r0, 0x3f	; 63
     8f4:	f8 94       	cli
     8f6:	de bf       	out	0x3e, r29	; 62
     8f8:	0f be       	out	0x3f, r0	; 63
     8fa:	cd bf       	out	0x3d, r28	; 61
     8fc:	df 91       	pop	r29
     8fe:	cf 91       	pop	r28
     900:	1f 91       	pop	r17
     902:	0f 91       	pop	r16
     904:	ff 90       	pop	r15
     906:	ef 90       	pop	r14
     908:	df 90       	pop	r13
     90a:	08 95       	ret

0000090c <_ZN9ElcanWifi9sendEntryEPc>:

bool ElcanWifi::is_error() {
  return (_error > 0);
}

char ElcanWifi::sendEntry(char *data) {
     90c:	ef 92       	push	r14
     90e:	ff 92       	push	r15
     910:	0f 93       	push	r16
     912:	1f 93       	push	r17
     914:	cf 93       	push	r28
     916:	df 93       	push	r29
     918:	7b 01       	movw	r14, r22
  char pos = 0;
  char len = 0;
  Serial.write("S");
     91a:	64 e6       	ldi	r22, 0x64	; 100
     91c:	71 e0       	ldi	r23, 0x01	; 1
     91e:	84 ed       	ldi	r24, 0xD4	; 212
     920:	92 e0       	ldi	r25, 0x02	; 2
     922:	0e 94 5d 03 	call	0x6ba	; 0x6ba <_ZN5Print5writeEPKc>
  len = strlen(data);
     926:	f7 01       	movw	r30, r14
     928:	01 90       	ld	r0, Z+
     92a:	00 20       	and	r0, r0
     92c:	e9 f7       	brne	.-6      	; 0x928 <_ZN9ElcanWifi9sendEntryEPc+0x1c>
     92e:	31 97       	sbiw	r30, 0x01	; 1
     930:	1e 2f       	mov	r17, r30
     932:	1e 19       	sub	r17, r14
     934:	0e 2d       	mov	r16, r14
     936:	ce 2d       	mov	r28, r14
     938:	df 2d       	mov	r29, r15
  for (char pos = 0; pos < len; pos++) {
     93a:	8c 2f       	mov	r24, r28
     93c:	80 1b       	sub	r24, r16
     93e:	81 17       	cp	r24, r17
     940:	30 f4       	brcc	.+12     	; 0x94e <_ZN9ElcanWifi9sendEntryEPc+0x42>
    Serial.write(data[pos]);
     942:	69 91       	ld	r22, Y+
     944:	84 ed       	ldi	r24, 0xD4	; 212
     946:	92 e0       	ldi	r25, 0x02	; 2
     948:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <_ZN14HardwareSerial5writeEh>
char ElcanWifi::sendEntry(char *data) {
  char pos = 0;
  char len = 0;
  Serial.write("S");
  len = strlen(data);
  for (char pos = 0; pos < len; pos++) {
     94c:	f6 cf       	rjmp	.-20     	; 0x93a <_ZN9ElcanWifi9sendEntryEPc+0x2e>
    Serial.write(data[pos]);
  }
  Serial.write(EOL);
     94e:	61 e6       	ldi	r22, 0x61	; 97
     950:	71 e0       	ldi	r23, 0x01	; 1
     952:	84 ed       	ldi	r24, 0xD4	; 212
     954:	92 e0       	ldi	r25, 0x02	; 2
     956:	0e 94 5d 03 	call	0x6ba	; 0x6ba <_ZN5Print5writeEPKc>
  Serial.flush();
     95a:	84 ed       	ldi	r24, 0xD4	; 212
     95c:	92 e0       	ldi	r25, 0x02	; 2
     95e:	0e 94 4c 0c 	call	0x1898	; 0x1898 <_ZN14HardwareSerial5flushEv>
  return pos;
}
     962:	80 e0       	ldi	r24, 0x00	; 0
     964:	df 91       	pop	r29
     966:	cf 91       	pop	r28
     968:	1f 91       	pop	r17
     96a:	0f 91       	pop	r16
     96c:	ff 90       	pop	r15
     96e:	ef 90       	pop	r14
     970:	08 95       	ret

00000972 <_ZN11RfidManagerC1Ev>:
// Initialization code for the parts.
#include "rfid.h"

RfidManager::RfidManager() {
     972:	0f 93       	push	r16
     974:	1f 93       	push	r17
     976:	cf 93       	push	r28
     978:	df 93       	push	r29
     97a:	cd b7       	in	r28, 0x3d	; 61
     97c:	de b7       	in	r29, 0x3e	; 62
     97e:	60 97       	sbiw	r28, 0x10	; 16
     980:	0f b6       	in	r0, 0x3f	; 63
     982:	f8 94       	cli
     984:	de bf       	out	0x3e, r29	; 62
     986:	0f be       	out	0x3f, r0	; 63
     988:	cd bf       	out	0x3d, r28	; 61
     98a:	8c 01       	movw	r16, r24
     98c:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <_ZN7MFRC522C1Ev>
  memset(this->readCard, 0, sizeof(this->readCard));
     990:	f8 01       	movw	r30, r16
     992:	70 96       	adiw	r30, 0x10	; 16
     994:	84 e0       	ldi	r24, 0x04	; 4
     996:	df 01       	movw	r26, r30
     998:	1d 92       	st	X+, r1
     99a:	8a 95       	dec	r24
     99c:	e9 f7       	brne	.-6      	; 0x998 <_ZN11RfidManagerC1Ev+0x26>
  this->mfrc522 = MFRC522(RFID_SS, RFID_RST);
     99e:	49 e0       	ldi	r20, 0x09	; 9
     9a0:	6a e0       	ldi	r22, 0x0A	; 10
     9a2:	ce 01       	movw	r24, r28
     9a4:	01 96       	adiw	r24, 0x01	; 1
     9a6:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <_ZN7MFRC522C1Ehh>
	0xC1, 0x5B, 0x00, 0x2A, 0xD0, 0x75, 0xDE, 0x9E,
	0x51, 0x64, 0xAB, 0x3E, 0xE9, 0x15, 0xB5, 0xAB,
	0x56, 0x9A, 0x98, 0x82, 0x26, 0xEA, 0x2A, 0x62
};

class MFRC522 {
     9aa:	8c e0       	ldi	r24, 0x0C	; 12
     9ac:	fe 01       	movw	r30, r28
     9ae:	33 96       	adiw	r30, 0x03	; 3
     9b0:	d8 01       	movw	r26, r16
     9b2:	12 96       	adiw	r26, 0x02	; 2
     9b4:	01 90       	ld	r0, Z+
     9b6:	0d 92       	st	X+, r0
     9b8:	8a 95       	dec	r24
     9ba:	e1 f7       	brne	.-8      	; 0x9b4 <_ZN11RfidManagerC1Ev+0x42>
     9bc:	8f 85       	ldd	r24, Y+15	; 0x0f
     9be:	f8 01       	movw	r30, r16
     9c0:	86 87       	std	Z+14, r24	; 0x0e
     9c2:	88 89       	ldd	r24, Y+16	; 0x10
     9c4:	87 87       	std	Z+15, r24	; 0x0f
}
     9c6:	60 96       	adiw	r28, 0x10	; 16
     9c8:	0f b6       	in	r0, 0x3f	; 63
     9ca:	f8 94       	cli
     9cc:	de bf       	out	0x3e, r29	; 62
     9ce:	0f be       	out	0x3f, r0	; 63
     9d0:	cd bf       	out	0x3d, r28	; 61
     9d2:	df 91       	pop	r29
     9d4:	cf 91       	pop	r28
     9d6:	1f 91       	pop	r17
     9d8:	0f 91       	pop	r16
     9da:	08 95       	ret

000009dc <_ZN11RfidManager5beginEv>:

void RfidManager::begin() {
     9dc:	cf 93       	push	r28
     9de:	df 93       	push	r29
     9e0:	ec 01       	movw	r28, r24
  this->mfrc522.PCD_Init();    // Initialize MFRC522 Hardware
     9e2:	0e 94 e0 16 	call	0x2dc0	; 0x2dc0 <_ZN7MFRC5228PCD_InitEv>
  this->mfrc522.PCD_SetAntennaGain(this->mfrc522.RxGain_max); // Max reading distance
     9e6:	60 e7       	ldi	r22, 0x70	; 112
     9e8:	ce 01       	movw	r24, r28
}
     9ea:	df 91       	pop	r29
     9ec:	cf 91       	pop	r28
  this->mfrc522 = MFRC522(RFID_SS, RFID_RST);
}

void RfidManager::begin() {
  this->mfrc522.PCD_Init();    // Initialize MFRC522 Hardware
  this->mfrc522.PCD_SetAntennaGain(this->mfrc522.RxGain_max); // Max reading distance
     9ee:	0c 94 49 17 	jmp	0x2e92	; 0x2e92 <_ZN7MFRC52218PCD_SetAntennaGainEh>

000009f2 <_ZN11RfidManager5getIDEv>:
}

unsigned char RfidManager::getID() {
     9f2:	ef 92       	push	r14
     9f4:	ff 92       	push	r15
     9f6:	0f 93       	push	r16
     9f8:	1f 93       	push	r17
     9fa:	cf 93       	push	r28
     9fc:	df 93       	push	r29
     9fe:	ec 01       	movw	r28, r24
  if ( ! this->mfrc522.PICC_IsNewCardPresent()) { //If a new PICC placed to RFID reader continue
     a00:	0e 94 30 1a 	call	0x3460	; 0x3460 <_ZN7MFRC52221PICC_IsNewCardPresentEv>
     a04:	81 11       	cpse	r24, r1
     a06:	02 c0       	rjmp	.+4      	; 0xa0c <_ZN11RfidManager5getIDEv+0x1a>
    return 0;
     a08:	80 e0       	ldi	r24, 0x00	; 0
     a0a:	30 c0       	rjmp	.+96     	; 0xa6c <_ZN11RfidManager5getIDEv+0x7a>
  }
  if ( ! this->mfrc522.PICC_ReadCardSerial()) {   //Since a PICC placed get Serial and continue
     a0c:	ce 01       	movw	r24, r28
     a0e:	0e 94 1b 15 	call	0x2a36	; 0x2a36 <_ZN7MFRC52219PICC_ReadCardSerialEv>
     a12:	88 23       	and	r24, r24
     a14:	c9 f3       	breq	.-14     	; 0xa08 <_ZN11RfidManager5getIDEv+0x16>
    return 0;
  }
  // every PICC as they have 4 byte UID
#ifdef DEBUG
  Serial.print("#");
     a16:	69 e0       	ldi	r22, 0x09	; 9
     a18:	71 e0       	ldi	r23, 0x01	; 1
     a1a:	84 ed       	ldi	r24, 0xD4	; 212
     a1c:	92 e0       	ldi	r25, 0x02	; 2
     a1e:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <_ZN5Print5printEPKc>
     a22:	8e 01       	movw	r16, r28
     a24:	0d 5f       	subi	r16, 0xFD	; 253
     a26:	1f 4f       	sbci	r17, 0xFF	; 255
     a28:	7e 01       	movw	r14, r28
     a2a:	87 e0       	ldi	r24, 0x07	; 7
     a2c:	e8 0e       	add	r14, r24
     a2e:	f1 1c       	adc	r15, r1
#endif
  for ( uint8_t i = 0; i < 4; i++) {  //
    this->readCard[i] = this->mfrc522.uid.uidByte[i];
     a30:	f8 01       	movw	r30, r16
     a32:	61 91       	ld	r22, Z+
     a34:	8f 01       	movw	r16, r30
     a36:	64 87       	std	Z+12, r22	; 0x0c
#ifdef DEBUG
    Serial.print(readCard[i], HEX);
     a38:	70 e0       	ldi	r23, 0x00	; 0
     a3a:	40 e1       	ldi	r20, 0x10	; 16
     a3c:	50 e0       	ldi	r21, 0x00	; 0
     a3e:	84 ed       	ldi	r24, 0xD4	; 212
     a40:	92 e0       	ldi	r25, 0x02	; 2
     a42:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <_ZN5Print5printEii>
    Serial.print("-");
     a46:	6b e0       	ldi	r22, 0x0B	; 11
     a48:	71 e0       	ldi	r23, 0x01	; 1
     a4a:	84 ed       	ldi	r24, 0xD4	; 212
     a4c:	92 e0       	ldi	r25, 0x02	; 2
     a4e:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <_ZN5Print5printEPKc>
  }
  // every PICC as they have 4 byte UID
#ifdef DEBUG
  Serial.print("#");
#endif
  for ( uint8_t i = 0; i < 4; i++) {  //
     a52:	0e 15       	cp	r16, r14
     a54:	1f 05       	cpc	r17, r15
     a56:	61 f7       	brne	.-40     	; 0xa30 <_ZN11RfidManager5getIDEv+0x3e>
    Serial.print(readCard[i], HEX);
    Serial.print("-");
#endif
  }
#ifdef DEBUG
    Serial.println(" ");
     a58:	60 e9       	ldi	r22, 0x90	; 144
     a5a:	71 e0       	ldi	r23, 0x01	; 1
     a5c:	84 ed       	ldi	r24, 0xD4	; 212
     a5e:	92 e0       	ldi	r25, 0x02	; 2
     a60:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <_ZN5Print7printlnEPKc>
#endif
  this->mfrc522.PICC_HaltA(); // Stop reading
     a64:	ce 01       	movw	r24, r28
     a66:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <_ZN7MFRC52210PICC_HaltAEv>
  return 1;
     a6a:	81 e0       	ldi	r24, 0x01	; 1
}
     a6c:	df 91       	pop	r29
     a6e:	cf 91       	pop	r28
     a70:	1f 91       	pop	r17
     a72:	0f 91       	pop	r16
     a74:	ff 90       	pop	r15
     a76:	ef 90       	pop	r14
     a78:	08 95       	ret

00000a7a <_ZN8ElcanRtcC1Ev>:
#include <Arduino.h>
#include "rtc.h"
#include "definitions.h"

ElcanRtc::ElcanRtc() {
     a7a:	08 95       	ret

00000a7c <_ZN8ElcanRtc10initializeEv>:
}

void ElcanRtc::initialize() {
     a7c:	0f 93       	push	r16
     a7e:	1f 93       	push	r17
     a80:	cf 93       	push	r28
     a82:	df 93       	push	r29
     a84:	00 d0       	rcall	.+0      	; 0xa86 <_ZN8ElcanRtc10initializeEv+0xa>
     a86:	00 d0       	rcall	.+0      	; 0xa88 <_ZN8ElcanRtc10initializeEv+0xc>
     a88:	00 d0       	rcall	.+0      	; 0xa8a <_ZN8ElcanRtc10initializeEv+0xe>
     a8a:	cd b7       	in	r28, 0x3d	; 61
     a8c:	de b7       	in	r29, 0x3e	; 62
     a8e:	8c 01       	movw	r16, r24
  bool exit_init = false;
  unsigned char init_return;
  char attemps = 0;
  for (attemps = 0 ; attemps < 2; attemps++) {
    init_return = this->rtc.begin();
     a90:	0e 94 4c 1c 	call	0x3898	; 0x3898 <_ZN10RTC_DS32315beginEv>
    if (init_return) {
     a94:	88 23       	and	r24, r24
     a96:	91 f0       	breq	.+36     	; 0xabc <_ZN8ElcanRtc10initializeEv+0x40>
      if (this->rtc.lostPower()) {
     a98:	c8 01       	movw	r24, r16
     a9a:	0e 94 8d 1d 	call	0x3b1a	; 0x3b1a <_ZN10RTC_DS32319lostPowerEv>
     a9e:	88 23       	and	r24, r24
     aa0:	91 f0       	breq	.+36     	; 0xac6 <_ZN8ElcanRtc10initializeEv+0x4a>
      // Fijar a fecha y hora de compilacion
        this->rtc.adjust(DateTime(FS(__DATE__), FS(__TIME__)));
     aa2:	46 e6       	ldi	r20, 0x66	; 102
     aa4:	51 e0       	ldi	r21, 0x01	; 1
     aa6:	6f e6       	ldi	r22, 0x6F	; 111
     aa8:	71 e0       	ldi	r23, 0x01	; 1
     aaa:	ce 01       	movw	r24, r28
     aac:	01 96       	adiw	r24, 0x01	; 1
     aae:	0e 94 70 1b 	call	0x36e0	; 0x36e0 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_>
     ab2:	ce 01       	movw	r24, r28
     ab4:	01 96       	adiw	r24, 0x01	; 1
     ab6:	0e 94 f9 1c 	call	0x39f2	; 0x39f2 <_ZN10RTC_DS32316adjustERK8DateTime>
      }
      break;
    }
  }
}
     aba:	05 c0       	rjmp	.+10     	; 0xac6 <_ZN8ElcanRtc10initializeEv+0x4a>
void ElcanRtc::initialize() {
  bool exit_init = false;
  unsigned char init_return;
  char attemps = 0;
  for (attemps = 0 ; attemps < 2; attemps++) {
    init_return = this->rtc.begin();
     abc:	c8 01       	movw	r24, r16
     abe:	0e 94 4c 1c 	call	0x3898	; 0x3898 <_ZN10RTC_DS32315beginEv>
    if (init_return) {
     ac2:	81 11       	cpse	r24, r1
     ac4:	e9 cf       	rjmp	.-46     	; 0xa98 <_ZN8ElcanRtc10initializeEv+0x1c>
        this->rtc.adjust(DateTime(FS(__DATE__), FS(__TIME__)));
      }
      break;
    }
  }
}
     ac6:	26 96       	adiw	r28, 0x06	; 6
     ac8:	0f b6       	in	r0, 0x3f	; 63
     aca:	f8 94       	cli
     acc:	de bf       	out	0x3e, r29	; 62
     ace:	0f be       	out	0x3f, r0	; 63
     ad0:	cd bf       	out	0x3d, r28	; 61
     ad2:	df 91       	pop	r29
     ad4:	cf 91       	pop	r28
     ad6:	1f 91       	pop	r17
     ad8:	0f 91       	pop	r16
     ada:	08 95       	ret

00000adc <_ZN8ElcanRtc3nowEv>:

DateTime ElcanRtc::now() {
     adc:	cf 93       	push	r28
     ade:	df 93       	push	r29
     ae0:	ec 01       	movw	r28, r24
  return this->rtc.now();
     ae2:	0e 94 52 1c 	call	0x38a4	; 0x38a4 <_ZN10RTC_DS32313nowEv>
}
     ae6:	ce 01       	movw	r24, r28
     ae8:	df 91       	pop	r29
     aea:	cf 91       	pop	r28
     aec:	08 95       	ret

00000aee <_ZN8ElcanRtc15split_date_timeEPc>:
    this->rtc.adjust(stamp);
  }
  CLEAR_SERIAL
}

DateTime ElcanRtc::split_date_time(char *stamp) {
     aee:	8f 92       	push	r8
     af0:	9f 92       	push	r9
     af2:	af 92       	push	r10
     af4:	bf 92       	push	r11
     af6:	cf 92       	push	r12
     af8:	ef 92       	push	r14
     afa:	ff 92       	push	r15
     afc:	0f 93       	push	r16
     afe:	1f 93       	push	r17
     b00:	cf 93       	push	r28
     b02:	df 93       	push	r29
     b04:	00 d0       	rcall	.+0      	; 0xb06 <_ZN8ElcanRtc15split_date_timeEPc+0x18>
     b06:	cd b7       	in	r28, 0x3d	; 61
     b08:	de b7       	in	r29, 0x3e	; 62
     b0a:	5c 01       	movw	r10, r24
     b0c:	ca 01       	movw	r24, r20
  const char chp[2] = "-";
     b0e:	2d e2       	ldi	r18, 0x2D	; 45
     b10:	30 e0       	ldi	r19, 0x00	; 0
     b12:	3a 83       	std	Y+2, r19	; 0x02
     b14:	29 83       	std	Y+1, r18	; 0x01
  uint8_t day;
  uint8_t hour;
  uint8_t min;
  uint8_t sec;
  char *section;
  section = strtok(stamp, chp);
     b16:	be 01       	movw	r22, r28
     b18:	6f 5f       	subi	r22, 0xFF	; 255
     b1a:	7f 4f       	sbci	r23, 0xFF	; 255
     b1c:	0e 94 fa 21 	call	0x43f4	; 0x43f4 <strtok>
  year = atoi(section);
     b20:	0e 94 d3 21 	call	0x43a6	; 0x43a6 <atoi>
     b24:	4c 01       	movw	r8, r24
  section = strtok(NULL, chp);
     b26:	be 01       	movw	r22, r28
     b28:	6f 5f       	subi	r22, 0xFF	; 255
     b2a:	7f 4f       	sbci	r23, 0xFF	; 255
     b2c:	80 e0       	ldi	r24, 0x00	; 0
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	0e 94 fa 21 	call	0x43f4	; 0x43f4 <strtok>
  month = atoi(section);
     b34:	0e 94 d3 21 	call	0x43a6	; 0x43a6 <atoi>
     b38:	18 2f       	mov	r17, r24
  section = strtok(NULL, chp);
     b3a:	be 01       	movw	r22, r28
     b3c:	6f 5f       	subi	r22, 0xFF	; 255
     b3e:	7f 4f       	sbci	r23, 0xFF	; 255
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	90 e0       	ldi	r25, 0x00	; 0
     b44:	0e 94 fa 21 	call	0x43f4	; 0x43f4 <strtok>
  day = atoi(section);
     b48:	0e 94 d3 21 	call	0x43a6	; 0x43a6 <atoi>
     b4c:	f8 2e       	mov	r15, r24
  section = strtok(NULL, chp);
     b4e:	be 01       	movw	r22, r28
     b50:	6f 5f       	subi	r22, 0xFF	; 255
     b52:	7f 4f       	sbci	r23, 0xFF	; 255
     b54:	80 e0       	ldi	r24, 0x00	; 0
     b56:	90 e0       	ldi	r25, 0x00	; 0
     b58:	0e 94 fa 21 	call	0x43f4	; 0x43f4 <strtok>
  hour = atoi(section);
     b5c:	0e 94 d3 21 	call	0x43a6	; 0x43a6 <atoi>
     b60:	08 2f       	mov	r16, r24
  section = strtok(NULL, chp);
     b62:	be 01       	movw	r22, r28
     b64:	6f 5f       	subi	r22, 0xFF	; 255
     b66:	7f 4f       	sbci	r23, 0xFF	; 255
     b68:	80 e0       	ldi	r24, 0x00	; 0
     b6a:	90 e0       	ldi	r25, 0x00	; 0
     b6c:	0e 94 fa 21 	call	0x43f4	; 0x43f4 <strtok>
  min = atoi(section);
     b70:	0e 94 d3 21 	call	0x43a6	; 0x43a6 <atoi>
     b74:	e8 2e       	mov	r14, r24
  section = strtok(NULL, chp);
     b76:	be 01       	movw	r22, r28
     b78:	6f 5f       	subi	r22, 0xFF	; 255
     b7a:	7f 4f       	sbci	r23, 0xFF	; 255
     b7c:	80 e0       	ldi	r24, 0x00	; 0
     b7e:	90 e0       	ldi	r25, 0x00	; 0
     b80:	0e 94 fa 21 	call	0x43f4	; 0x43f4 <strtok>
  sec = atoi(section);
     b84:	0e 94 d3 21 	call	0x43a6	; 0x43a6 <atoi>
     b88:	c8 2e       	mov	r12, r24
#ifdef DEBUG
  Serial.print("#");
     b8a:	69 e0       	ldi	r22, 0x09	; 9
     b8c:	71 e0       	ldi	r23, 0x01	; 1
     b8e:	84 ed       	ldi	r24, 0xD4	; 212
     b90:	92 e0       	ldi	r25, 0x02	; 2
     b92:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <_ZN5Print5printEPKc>
  Serial.print(year);
     b96:	4a e0       	ldi	r20, 0x0A	; 10
     b98:	50 e0       	ldi	r21, 0x00	; 0
     b9a:	b4 01       	movw	r22, r8
     b9c:	84 ed       	ldi	r24, 0xD4	; 212
     b9e:	92 e0       	ldi	r25, 0x02	; 2
     ba0:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <_ZN5Print5printEji>
  Serial.print("-");
     ba4:	6b e0       	ldi	r22, 0x0B	; 11
     ba6:	71 e0       	ldi	r23, 0x01	; 1
     ba8:	84 ed       	ldi	r24, 0xD4	; 212
     baa:	92 e0       	ldi	r25, 0x02	; 2
     bac:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <_ZN5Print5printEPKc>
  Serial.print(month);
     bb0:	4a e0       	ldi	r20, 0x0A	; 10
     bb2:	50 e0       	ldi	r21, 0x00	; 0
     bb4:	61 2f       	mov	r22, r17
     bb6:	84 ed       	ldi	r24, 0xD4	; 212
     bb8:	92 e0       	ldi	r25, 0x02	; 2
     bba:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <_ZN5Print5printEhi>
  Serial.print("-");
     bbe:	6b e0       	ldi	r22, 0x0B	; 11
     bc0:	71 e0       	ldi	r23, 0x01	; 1
     bc2:	84 ed       	ldi	r24, 0xD4	; 212
     bc4:	92 e0       	ldi	r25, 0x02	; 2
     bc6:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <_ZN5Print5printEPKc>
  Serial.print(day);
     bca:	4a e0       	ldi	r20, 0x0A	; 10
     bcc:	50 e0       	ldi	r21, 0x00	; 0
     bce:	6f 2d       	mov	r22, r15
     bd0:	84 ed       	ldi	r24, 0xD4	; 212
     bd2:	92 e0       	ldi	r25, 0x02	; 2
     bd4:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <_ZN5Print5printEhi>
  Serial.print("#");
     bd8:	69 e0       	ldi	r22, 0x09	; 9
     bda:	71 e0       	ldi	r23, 0x01	; 1
     bdc:	84 ed       	ldi	r24, 0xD4	; 212
     bde:	92 e0       	ldi	r25, 0x02	; 2
     be0:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <_ZN5Print5printEPKc>
  Serial.print(hour);
     be4:	4a e0       	ldi	r20, 0x0A	; 10
     be6:	50 e0       	ldi	r21, 0x00	; 0
     be8:	60 2f       	mov	r22, r16
     bea:	84 ed       	ldi	r24, 0xD4	; 212
     bec:	92 e0       	ldi	r25, 0x02	; 2
     bee:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <_ZN5Print5printEhi>
  Serial.print(":");
     bf2:	6b e7       	ldi	r22, 0x7B	; 123
     bf4:	71 e0       	ldi	r23, 0x01	; 1
     bf6:	84 ed       	ldi	r24, 0xD4	; 212
     bf8:	92 e0       	ldi	r25, 0x02	; 2
     bfa:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <_ZN5Print5printEPKc>
  Serial.print(min);
     bfe:	4a e0       	ldi	r20, 0x0A	; 10
     c00:	50 e0       	ldi	r21, 0x00	; 0
     c02:	6e 2d       	mov	r22, r14
     c04:	84 ed       	ldi	r24, 0xD4	; 212
     c06:	92 e0       	ldi	r25, 0x02	; 2
     c08:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <_ZN5Print5printEhi>
  Serial.print(":");
     c0c:	6b e7       	ldi	r22, 0x7B	; 123
     c0e:	71 e0       	ldi	r23, 0x01	; 1
     c10:	84 ed       	ldi	r24, 0xD4	; 212
     c12:	92 e0       	ldi	r25, 0x02	; 2
     c14:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <_ZN5Print5printEPKc>
  Serial.println(sec);
     c18:	4a e0       	ldi	r20, 0x0A	; 10
     c1a:	50 e0       	ldi	r21, 0x00	; 0
     c1c:	6c 2d       	mov	r22, r12
     c1e:	84 ed       	ldi	r24, 0xD4	; 212
     c20:	92 e0       	ldi	r25, 0x02	; 2
     c22:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <_ZN5Print7printlnEhi>
#endif
  return DateTime(year, month, day, hour, min, sec);
     c26:	2f 2d       	mov	r18, r15
     c28:	41 2f       	mov	r20, r17
     c2a:	b4 01       	movw	r22, r8
     c2c:	c5 01       	movw	r24, r10
     c2e:	0e 94 5c 1b 	call	0x36b8	; 0x36b8 <_ZN8DateTimeC1Ejhhhhh>
     c32:	c5 01       	movw	r24, r10
     c34:	0f 90       	pop	r0
     c36:	0f 90       	pop	r0
     c38:	df 91       	pop	r29
     c3a:	cf 91       	pop	r28
     c3c:	1f 91       	pop	r17
     c3e:	0f 91       	pop	r16
     c40:	ff 90       	pop	r15
     c42:	ef 90       	pop	r14
     c44:	cf 90       	pop	r12
     c46:	bf 90       	pop	r11
     c48:	af 90       	pop	r10
     c4a:	9f 90       	pop	r9
     c4c:	8f 90       	pop	r8
     c4e:	08 95       	ret

00000c50 <_ZN8ElcanRtc18adjust_from_serialEv>:

DateTime ElcanRtc::now() {
  return this->rtc.now();
}

void ElcanRtc::adjust_from_serial() {
     c50:	ef 92       	push	r14
     c52:	ff 92       	push	r15
     c54:	0f 93       	push	r16
     c56:	1f 93       	push	r17
     c58:	cf 93       	push	r28
     c5a:	df 93       	push	r29
     c5c:	cd b7       	in	r28, 0x3d	; 61
     c5e:	de b7       	in	r29, 0x3e	; 62
     c60:	c0 54       	subi	r28, 0x40	; 64
     c62:	d1 09       	sbc	r29, r1
     c64:	0f b6       	in	r0, 0x3f	; 63
     c66:	f8 94       	cli
     c68:	de bf       	out	0x3e, r29	; 62
     c6a:	0f be       	out	0x3f, r0	; 63
     c6c:	cd bf       	out	0x3d, r28	; 61
     c6e:	7c 01       	movw	r14, r24
  char dateString[32];
  char date[11];
  char time[9];
  char pos = 0;
  DateTime stamp;
     c70:	40 e0       	ldi	r20, 0x00	; 0
     c72:	50 e0       	ldi	r21, 0x00	; 0
     c74:	ba 01       	movw	r22, r20
     c76:	ce 01       	movw	r24, r28
     c78:	cb 96       	adiw	r24, 0x3b	; 59
     c7a:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <_ZN8DateTimeC1Em>
  memset(dateString, 0, sizeof(dateString));
     c7e:	8e 01       	movw	r16, r28
     c80:	0f 5f       	subi	r16, 0xFF	; 255
     c82:	1f 4f       	sbci	r17, 0xFF	; 255
     c84:	80 e2       	ldi	r24, 0x20	; 32
     c86:	d8 01       	movw	r26, r16
     c88:	1d 92       	st	X+, r1
     c8a:	8a 95       	dec	r24
     c8c:	e9 f7       	brne	.-6      	; 0xc88 <_ZN8ElcanRtc18adjust_from_serialEv+0x38>
  memset(date, 0, sizeof(date));
     c8e:	fe 01       	movw	r30, r28
     c90:	b1 96       	adiw	r30, 0x21	; 33
     c92:	8b e0       	ldi	r24, 0x0B	; 11
     c94:	df 01       	movw	r26, r30
     c96:	1d 92       	st	X+, r1
     c98:	8a 95       	dec	r24
     c9a:	e9 f7       	brne	.-6      	; 0xc96 <_ZN8ElcanRtc18adjust_from_serialEv+0x46>
  memset(time, 0, sizeof(time));
     c9c:	3b 96       	adiw	r30, 0x0b	; 11
     c9e:	89 e0       	ldi	r24, 0x09	; 9
     ca0:	df 01       	movw	r26, r30
     ca2:	1d 92       	st	X+, r1
     ca4:	8a 95       	dec	r24
     ca6:	e9 f7       	brne	.-6      	; 0xca2 <_ZN8ElcanRtc18adjust_from_serialEv+0x52>
     ca8:	6d e4       	ldi	r22, 0x4D	; 77
     caa:	84 ed       	ldi	r24, 0xD4	; 212
     cac:	92 e0       	ldi	r25, 0x02	; 2
     cae:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <_ZN14HardwareSerial5writeEh>
  Serial.write('M');
  Serial.flush();
     cb2:	84 ed       	ldi	r24, 0xD4	; 212
     cb4:	92 e0       	ldi	r25, 0x02	; 2
     cb6:	0e 94 4c 0c 	call	0x1898	; 0x1898 <_ZN14HardwareSerial5flushEv>
  delay(1);
     cba:	61 e0       	ldi	r22, 0x01	; 1
     cbc:	70 e0       	ldi	r23, 0x00	; 0
     cbe:	80 e0       	ldi	r24, 0x00	; 0
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	0e 94 bd 12 	call	0x257a	; 0x257a <delay>
  pos = Serial.readBytesUntil('\r', dateString, sizeof(dateString));
     cc6:	20 e2       	ldi	r18, 0x20	; 32
     cc8:	30 e0       	ldi	r19, 0x00	; 0
     cca:	a8 01       	movw	r20, r16
     ccc:	6d e0       	ldi	r22, 0x0D	; 13
     cce:	84 ed       	ldi	r24, 0xD4	; 212
     cd0:	92 e0       	ldi	r25, 0x02	; 2
     cd2:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <_ZN6Stream14readBytesUntilEcPcj>
  if (pos > 10) {
     cd6:	8b 30       	cpi	r24, 0x0B	; 11
     cd8:	20 f1       	brcs	.+72     	; 0xd22 <_ZN8ElcanRtc18adjust_from_serialEv+0xd2>
    stamp = split_date_time(dateString);
     cda:	a8 01       	movw	r20, r16
     cdc:	b7 01       	movw	r22, r14
     cde:	ce 01       	movw	r24, r28
     ce0:	c5 96       	adiw	r24, 0x35	; 53
     ce2:	0e 94 77 05 	call	0xaee	; 0xaee <_ZN8ElcanRtc15split_date_timeEPc>
     ce6:	86 e0       	ldi	r24, 0x06	; 6
     ce8:	fe 01       	movw	r30, r28
     cea:	f5 96       	adiw	r30, 0x35	; 53
     cec:	de 01       	movw	r26, r28
     cee:	db 96       	adiw	r26, 0x3b	; 59
     cf0:	01 90       	ld	r0, Z+
     cf2:	0d 92       	st	X+, r0
     cf4:	8a 95       	dec	r24
     cf6:	e1 f7       	brne	.-8      	; 0xcf0 <_ZN8ElcanRtc18adjust_from_serialEv+0xa0>
     cf8:	63 e2       	ldi	r22, 0x23	; 35
     cfa:	84 ed       	ldi	r24, 0xD4	; 212
     cfc:	92 e0       	ldi	r25, 0x02	; 2
     cfe:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <_ZN14HardwareSerial5writeEh>
#ifdef DEBUG
    Serial.write('#');
    Serial.println(stamp.unixtime());
     d02:	ce 01       	movw	r24, r28
     d04:	cb 96       	adiw	r24, 0x3b	; 59
     d06:	0e 94 ea 1b 	call	0x37d4	; 0x37d4 <_ZNK8DateTime8unixtimeEv>
     d0a:	ab 01       	movw	r20, r22
     d0c:	bc 01       	movw	r22, r24
     d0e:	2a e0       	ldi	r18, 0x0A	; 10
     d10:	30 e0       	ldi	r19, 0x00	; 0
     d12:	84 ed       	ldi	r24, 0xD4	; 212
     d14:	92 e0       	ldi	r25, 0x02	; 2
     d16:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <_ZN5Print7printlnEmi>
#endif
    this->rtc.adjust(stamp);
     d1a:	ce 01       	movw	r24, r28
     d1c:	cb 96       	adiw	r24, 0x3b	; 59
     d1e:	0e 94 f9 1c 	call	0x39f2	; 0x39f2 <_ZN10RTC_DS32316adjustERK8DateTime>
  }
  CLEAR_SERIAL
     d22:	84 ed       	ldi	r24, 0xD4	; 212
     d24:	92 e0       	ldi	r25, 0x02	; 2
     d26:	0e 94 92 0b 	call	0x1724	; 0x1724 <_ZN14HardwareSerial9availableEv>
     d2a:	89 2b       	or	r24, r25
     d2c:	29 f0       	breq	.+10     	; 0xd38 <_ZN8ElcanRtc18adjust_from_serialEv+0xe8>
     d2e:	84 ed       	ldi	r24, 0xD4	; 212
     d30:	92 e0       	ldi	r25, 0x02	; 2
     d32:	0e 94 ac 0b 	call	0x1758	; 0x1758 <_ZN14HardwareSerial4readEv>
     d36:	f5 cf       	rjmp	.-22     	; 0xd22 <_ZN8ElcanRtc18adjust_from_serialEv+0xd2>
}
     d38:	c0 5c       	subi	r28, 0xC0	; 192
     d3a:	df 4f       	sbci	r29, 0xFF	; 255
     d3c:	0f b6       	in	r0, 0x3f	; 63
     d3e:	f8 94       	cli
     d40:	de bf       	out	0x3e, r29	; 62
     d42:	0f be       	out	0x3f, r0	; 63
     d44:	cd bf       	out	0x3d, r28	; 61
     d46:	df 91       	pop	r29
     d48:	cf 91       	pop	r28
     d4a:	1f 91       	pop	r17
     d4c:	0f 91       	pop	r16
     d4e:	ff 90       	pop	r15
     d50:	ef 90       	pop	r14
     d52:	08 95       	ret

00000d54 <_ZN10ElcanScaleC1Ev>:
  memcpy(dest, tmp, pos);
}

bool ElcanScale::is_error() {
  return (_error != 0);
}
     d54:	fc 01       	movw	r30, r24
     d56:	11 82       	std	Z+1, r1	; 0x01
     d58:	12 82       	std	Z+2, r1	; 0x02
     d5a:	08 95       	ret

00000d5c <_ZN10ElcanScale10get_weightEPc>:
    _error = 100;
  }
  return (_error == 0);
}

void ElcanScale::get_weight(char *dest) {
     d5c:	ef 92       	push	r14
     d5e:	ff 92       	push	r15
     d60:	0f 93       	push	r16
     d62:	1f 93       	push	r17
     d64:	cf 93       	push	r28
     d66:	df 93       	push	r29
     d68:	cd b7       	in	r28, 0x3d	; 61
     d6a:	de b7       	in	r29, 0x3e	; 62
     d6c:	28 97       	sbiw	r28, 0x08	; 8
     d6e:	0f b6       	in	r0, 0x3f	; 63
     d70:	f8 94       	cli
     d72:	de bf       	out	0x3e, r29	; 62
     d74:	0f be       	out	0x3f, r0	; 63
     d76:	cd bf       	out	0x3d, r28	; 61
     d78:	8c 01       	movw	r16, r24
     d7a:	7b 01       	movw	r14, r22
  char tmp[8];
  char pos = 0;
  Wire.beginTransmission(_i2c_address);
     d7c:	fc 01       	movw	r30, r24
     d7e:	62 81       	ldd	r22, Z+2	; 0x02
     d80:	83 e9       	ldi	r24, 0x93	; 147
     d82:	93 e0       	ldi	r25, 0x03	; 3
     d84:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <_ZN7TwoWire17beginTransmissionEh>
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
     d88:	41 e0       	ldi	r20, 0x01	; 1
     d8a:	50 e0       	ldi	r21, 0x00	; 0
     d8c:	6d e7       	ldi	r22, 0x7D	; 125
     d8e:	71 e0       	ldi	r23, 0x01	; 1
     d90:	83 e9       	ldi	r24, 0x93	; 147
     d92:	93 e0       	ldi	r25, 0x03	; 3
     d94:	0e 94 2c 1e 	call	0x3c58	; 0x3c58 <_ZN7TwoWire5writeEPKhj>
  Wire.write("W"); //send INIT
  Wire.endTransmission();
     d98:	83 e9       	ldi	r24, 0x93	; 147
     d9a:	93 e0       	ldi	r25, 0x03	; 3
     d9c:	0e 94 33 1f 	call	0x3e66	; 0x3e66 <_ZN7TwoWire15endTransmissionEv>
  Wire.requestFrom(_i2c_address, 7u);
     da0:	47 e0       	ldi	r20, 0x07	; 7
     da2:	f8 01       	movw	r30, r16
     da4:	62 81       	ldd	r22, Z+2	; 0x02
     da6:	83 e9       	ldi	r24, 0x93	; 147
     da8:	93 e0       	ldi	r25, 0x03	; 3
     daa:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <_ZN7TwoWire11requestFromEhh>
  return (_error == 0);
}

void ElcanScale::get_weight(char *dest) {
  char tmp[8];
  char pos = 0;
     dae:	10 e0       	ldi	r17, 0x00	; 0
  Wire.beginTransmission(_i2c_address);
  Wire.write("W"); //send INIT
  Wire.endTransmission();
  Wire.requestFrom(_i2c_address, 7u);
  while (Wire.available()) {
     db0:	83 e9       	ldi	r24, 0x93	; 147
     db2:	93 e0       	ldi	r25, 0x03	; 3
     db4:	0e 94 ca 1d 	call	0x3b94	; 0x3b94 <_ZN7TwoWire9availableEv>
     db8:	89 2b       	or	r24, r25
     dba:	79 f0       	breq	.+30     	; 0xdda <_ZN10ElcanScale10get_weightEPc+0x7e>
    char b = Wire.read();
     dbc:	83 e9       	ldi	r24, 0x93	; 147
     dbe:	93 e0       	ldi	r25, 0x03	; 3
     dc0:	0e 94 d2 1d 	call	0x3ba4	; 0x3ba4 <_ZN7TwoWire4readEv>
    if (b != 0xFF) {
     dc4:	8f 3f       	cpi	r24, 0xFF	; 255
     dc6:	a1 f3       	breq	.-24     	; 0xdb0 <_ZN10ElcanScale10get_weightEPc+0x54>
      tmp[pos] = b;
     dc8:	e1 e0       	ldi	r30, 0x01	; 1
     dca:	f0 e0       	ldi	r31, 0x00	; 0
     dcc:	ec 0f       	add	r30, r28
     dce:	fd 1f       	adc	r31, r29
     dd0:	e1 0f       	add	r30, r17
     dd2:	f1 1d       	adc	r31, r1
     dd4:	80 83       	st	Z, r24
      pos ++;
     dd6:	1f 5f       	subi	r17, 0xFF	; 255
     dd8:	eb cf       	rjmp	.-42     	; 0xdb0 <_ZN10ElcanScale10get_weightEPc+0x54>
    }
  }
  tmp[pos+1] = 0x00;
     dda:	41 2f       	mov	r20, r17
     ddc:	50 e0       	ldi	r21, 0x00	; 0
     dde:	fe 01       	movw	r30, r28
     de0:	e4 0f       	add	r30, r20
     de2:	f5 1f       	adc	r31, r21
     de4:	12 82       	std	Z+2, r1	; 0x02
  memcpy(dest, tmp, pos);
     de6:	be 01       	movw	r22, r28
     de8:	6f 5f       	subi	r22, 0xFF	; 255
     dea:	7f 4f       	sbci	r23, 0xFF	; 255
     dec:	c7 01       	movw	r24, r14
     dee:	0e 94 ff 21 	call	0x43fe	; 0x43fe <memcpy>
}
     df2:	28 96       	adiw	r28, 0x08	; 8
     df4:	0f b6       	in	r0, 0x3f	; 63
     df6:	f8 94       	cli
     df8:	de bf       	out	0x3e, r29	; 62
     dfa:	0f be       	out	0x3f, r0	; 63
     dfc:	cd bf       	out	0x3d, r28	; 61
     dfe:	df 91       	pop	r29
     e00:	cf 91       	pop	r28
     e02:	1f 91       	pop	r17
     e04:	0f 91       	pop	r16
     e06:	ff 90       	pop	r15
     e08:	ef 90       	pop	r14
     e0a:	08 95       	ret

00000e0c <_ZN10ElcanScale5beginEh>:
ElcanScale::ElcanScale() {
  _error = 0;
  _i2c_address = 0;
}

bool ElcanScale::begin(byte addr) {
     e0c:	cf 92       	push	r12
     e0e:	df 92       	push	r13
     e10:	ff 92       	push	r15
     e12:	0f 93       	push	r16
     e14:	1f 93       	push	r17
     e16:	cf 93       	push	r28
     e18:	df 93       	push	r29
     e1a:	cd b7       	in	r28, 0x3d	; 61
     e1c:	de b7       	in	r29, 0x3e	; 62
     e1e:	28 97       	sbiw	r28, 0x08	; 8
     e20:	0f b6       	in	r0, 0x3f	; 63
     e22:	f8 94       	cli
     e24:	de bf       	out	0x3e, r29	; 62
     e26:	0f be       	out	0x3f, r0	; 63
     e28:	cd bf       	out	0x3d, r28	; 61
     e2a:	8c 01       	movw	r16, r24
  char tmp[8];
  char pos = 0;
  memset(tmp, 0, sizeof(tmp));
     e2c:	ce 01       	movw	r24, r28
     e2e:	01 96       	adiw	r24, 0x01	; 1
     e30:	6c 01       	movw	r12, r24
     e32:	88 e0       	ldi	r24, 0x08	; 8
     e34:	f6 01       	movw	r30, r12
     e36:	11 92       	st	Z+, r1
     e38:	8a 95       	dec	r24
     e3a:	e9 f7       	brne	.-6      	; 0xe36 <_ZN10ElcanScale5beginEh+0x2a>
  _i2c_address = addr;
     e3c:	f8 01       	movw	r30, r16
     e3e:	62 83       	std	Z+2, r22	; 0x02
  Wire.beginTransmission(_i2c_address);
     e40:	83 e9       	ldi	r24, 0x93	; 147
     e42:	93 e0       	ldi	r25, 0x03	; 3
     e44:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <_ZN7TwoWire17beginTransmissionEh>
     e48:	41 e0       	ldi	r20, 0x01	; 1
     e4a:	50 e0       	ldi	r21, 0x00	; 0
     e4c:	6b e5       	ldi	r22, 0x5B	; 91
     e4e:	71 e0       	ldi	r23, 0x01	; 1
     e50:	83 e9       	ldi	r24, 0x93	; 147
     e52:	93 e0       	ldi	r25, 0x03	; 3
     e54:	0e 94 2c 1e 	call	0x3c58	; 0x3c58 <_ZN7TwoWire5writeEPKhj>
  Wire.write("I"); //send INIT
  Wire.endTransmission();
     e58:	83 e9       	ldi	r24, 0x93	; 147
     e5a:	93 e0       	ldi	r25, 0x03	; 3
     e5c:	0e 94 33 1f 	call	0x3e66	; 0x3e66 <_ZN7TwoWire15endTransmissionEv>
  Wire.requestFrom(_i2c_address, 6u);
     e60:	46 e0       	ldi	r20, 0x06	; 6
     e62:	f8 01       	movw	r30, r16
     e64:	62 81       	ldd	r22, Z+2	; 0x02
     e66:	83 e9       	ldi	r24, 0x93	; 147
     e68:	93 e0       	ldi	r25, 0x03	; 3
     e6a:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <_ZN7TwoWire11requestFromEhh>
  _i2c_address = 0;
}

bool ElcanScale::begin(byte addr) {
  char tmp[8];
  char pos = 0;
     e6e:	f1 2c       	mov	r15, r1
  _i2c_address = addr;
  Wire.beginTransmission(_i2c_address);
  Wire.write("I"); //send INIT
  Wire.endTransmission();
  Wire.requestFrom(_i2c_address, 6u);
  while (Wire.available()) {
     e70:	83 e9       	ldi	r24, 0x93	; 147
     e72:	93 e0       	ldi	r25, 0x03	; 3
     e74:	0e 94 ca 1d 	call	0x3b94	; 0x3b94 <_ZN7TwoWire9availableEv>
     e78:	89 2b       	or	r24, r25
     e7a:	61 f0       	breq	.+24     	; 0xe94 <_ZN10ElcanScale5beginEh+0x88>
    char b = Wire.read();
     e7c:	83 e9       	ldi	r24, 0x93	; 147
     e7e:	93 e0       	ldi	r25, 0x03	; 3
     e80:	0e 94 d2 1d 	call	0x3ba4	; 0x3ba4 <_ZN7TwoWire4readEv>
    if (b != 0xFF) {
     e84:	8f 3f       	cpi	r24, 0xFF	; 255
     e86:	a1 f3       	breq	.-24     	; 0xe70 <_ZN10ElcanScale5beginEh+0x64>
      tmp[pos] = b;
     e88:	f6 01       	movw	r30, r12
     e8a:	ef 0d       	add	r30, r15
     e8c:	f1 1d       	adc	r31, r1
     e8e:	80 83       	st	Z, r24
      pos ++;
     e90:	f3 94       	inc	r15
     e92:	ee cf       	rjmp	.-36     	; 0xe70 <_ZN10ElcanScale5beginEh+0x64>
    }
  }
  tmp[pos+1] = 0x00;
     e94:	fe 01       	movw	r30, r28
     e96:	ef 0d       	add	r30, r15
     e98:	f1 1d       	adc	r31, r1
     e9a:	12 82       	std	Z+2, r1	; 0x02
  if (strcmp(tmp, "SCALEK") != 0) {
     e9c:	6f e7       	ldi	r22, 0x7F	; 127
     e9e:	71 e0       	ldi	r23, 0x01	; 1
     ea0:	c6 01       	movw	r24, r12
     ea2:	0e 94 1a 22 	call	0x4434	; 0x4434 <strcmp>
     ea6:	89 2b       	or	r24, r25
     ea8:	19 f0       	breq	.+6      	; 0xeb0 <_ZN10ElcanScale5beginEh+0xa4>
    _error = 100;
     eaa:	84 e6       	ldi	r24, 0x64	; 100
     eac:	f8 01       	movw	r30, r16
     eae:	81 83       	std	Z+1, r24	; 0x01
  }
  return (_error == 0);
     eb0:	81 e0       	ldi	r24, 0x01	; 1
     eb2:	f8 01       	movw	r30, r16
     eb4:	91 81       	ldd	r25, Z+1	; 0x01
     eb6:	91 11       	cpse	r25, r1
     eb8:	80 e0       	ldi	r24, 0x00	; 0
}
     eba:	28 96       	adiw	r28, 0x08	; 8
     ebc:	0f b6       	in	r0, 0x3f	; 63
     ebe:	f8 94       	cli
     ec0:	de bf       	out	0x3e, r29	; 62
     ec2:	0f be       	out	0x3f, r0	; 63
     ec4:	cd bf       	out	0x3d, r28	; 61
     ec6:	df 91       	pop	r29
     ec8:	cf 91       	pop	r28
     eca:	1f 91       	pop	r17
     ecc:	0f 91       	pop	r16
     ece:	ff 90       	pop	r15
     ed0:	df 90       	pop	r13
     ed2:	cf 90       	pop	r12
     ed4:	08 95       	ret

00000ed6 <setup>:
#include "main.h"

/**
 * System setup
 */
void setup() {
     ed6:	0f 93       	push	r16
     ed8:	1f 93       	push	r17
     eda:	cf 93       	push	r28
     edc:	df 93       	push	r29
     ede:	cd b7       	in	r28, 0x3d	; 61
     ee0:	de b7       	in	r29, 0x3e	; 62
     ee2:	6e 97       	sbiw	r28, 0x1e	; 30
     ee4:	0f b6       	in	r0, 0x3f	; 63
     ee6:	f8 94       	cli
     ee8:	de bf       	out	0x3e, r29	; 62
     eea:	0f be       	out	0x3f, r0	; 63
     eec:	cd bf       	out	0x3d, r28	; 61
  char ipaddr[30];
  memset(ipaddr, 0, sizeof(ipaddr));
     eee:	8e 01       	movw	r16, r28
     ef0:	0f 5f       	subi	r16, 0xFF	; 255
     ef2:	1f 4f       	sbci	r17, 0xFF	; 255
     ef4:	8e e1       	ldi	r24, 0x1E	; 30
     ef6:	f8 01       	movw	r30, r16
     ef8:	11 92       	st	Z+, r1
     efa:	8a 95       	dec	r24
     efc:	e9 f7       	brne	.-6      	; 0xef8 <setup+0x22>
  pinMode(WIFI_RX, INPUT);
     efe:	60 e0       	ldi	r22, 0x00	; 0
     f00:	85 e0       	ldi	r24, 0x05	; 5
     f02:	0e 94 68 13 	call	0x26d0	; 0x26d0 <pinMode>
  pinMode(WIFI_TX, OUTPUT);
     f06:	61 e0       	ldi	r22, 0x01	; 1
     f08:	86 e0       	ldi	r24, 0x06	; 6
     f0a:	0e 94 68 13 	call	0x26d0	; 0x26d0 <pinMode>
  pinMode(BARRERA, OUTPUT);
     f0e:	61 e0       	ldi	r22, 0x01	; 1
     f10:	84 e0       	ldi	r24, 0x04	; 4
     f12:	0e 94 68 13 	call	0x26d0	; 0x26d0 <pinMode>
  pinMode(BUZZER, OUTPUT);
     f16:	61 e0       	ldi	r22, 0x01	; 1
     f18:	83 e0       	ldi	r24, 0x03	; 3
     f1a:	0e 94 68 13 	call	0x26d0	; 0x26d0 <pinMode>
  pinMode(RFID_SS, OUTPUT);
     f1e:	61 e0       	ldi	r22, 0x01	; 1
     f20:	8a e0       	ldi	r24, 0x0A	; 10
     f22:	0e 94 68 13 	call	0x26d0	; 0x26d0 <pinMode>
  pinMode(RFID_RST, OUTPUT);
     f26:	61 e0       	ldi	r22, 0x01	; 1
     f28:	89 e0       	ldi	r24, 0x09	; 9
     f2a:	0e 94 68 13 	call	0x26d0	; 0x26d0 <pinMode>
  digitalWrite(BARRERA, LOW);
     f2e:	60 e0       	ldi	r22, 0x00	; 0
     f30:	84 e0       	ldi	r24, 0x04	; 4
     f32:	0e 94 a4 13 	call	0x2748	; 0x2748 <digitalWrite>
  digitalWrite(BUZZER, LOW);
     f36:	60 e0       	ldi	r22, 0x00	; 0
     f38:	83 e0       	ldi	r24, 0x03	; 3
     f3a:	0e 94 a4 13 	call	0x2748	; 0x2748 <digitalWrite>
#ifdef WITH_WEIGHT
  scale.begin(SCALE_I2C_ADDR); // according to wheight measurement device
     f3e:	62 e4       	ldi	r22, 0x42	; 66
     f40:	8e e8       	ldi	r24, 0x8E	; 142
     f42:	92 e0       	ldi	r25, 0x02	; 2
     f44:	0e 94 06 07 	call	0xe0c	; 0xe0c <_ZN10ElcanScale5beginEh>
#endif
  Wire.begin();
     f48:	83 e9       	ldi	r24, 0x93	; 147
     f4a:	93 e0       	ldi	r25, 0x03	; 3
     f4c:	0e 94 98 1e 	call	0x3d30	; 0x3d30 <_ZN7TwoWire5beginEv>
  SPI.begin();           // MFRC522 Hardware uses SPI protocol
     f50:	0e 94 94 1d 	call	0x3b28	; 0x3b28 <_ZN8SPIClass5beginEv>
  ElcanLcd.begin(16, 2);
     f54:	42 e0       	ldi	r20, 0x02	; 2
     f56:	60 e1       	ldi	r22, 0x10	; 16
     f58:	88 ea       	ldi	r24, 0xA8	; 168
     f5a:	92 e0       	ldi	r25, 0x02	; 2
     f5c:	0e 94 0b 02 	call	0x416	; 0x416 <_ZN15ElcanLCDManager5beginEcc>
  rtc.initialize();
     f60:	85 ea       	ldi	r24, 0xA5	; 165
     f62:	92 e0       	ldi	r25, 0x02	; 2
     f64:	0e 94 3e 05 	call	0xa7c	; 0xa7c <_ZN8ElcanRtc10initializeEv>
  rfid.begin();
     f68:	81 e9       	ldi	r24, 0x91	; 145
     f6a:	92 e0       	ldi	r25, 0x02	; 2
     f6c:	0e 94 ee 04 	call	0x9dc	; 0x9dc <_ZN11RfidManager5beginEv>
  sys_state = READY;
     f70:	81 e0       	ldi	r24, 0x01	; 1
     f72:	80 93 d3 02 	sts	0x02D3, r24	; 0x8002d3 <sys_state>
  backlightStart = 0;
     f76:	10 92 bc 02 	sts	0x02BC, r1	; 0x8002bc <backlightStart>
     f7a:	10 92 bd 02 	sts	0x02BD, r1	; 0x8002bd <backlightStart+0x1>
     f7e:	10 92 be 02 	sts	0x02BE, r1	; 0x8002be <backlightStart+0x2>
     f82:	10 92 bf 02 	sts	0x02BF, r1	; 0x8002bf <backlightStart+0x3>
  lastPoll = 0;
     f86:	10 92 b8 02 	sts	0x02B8, r1	; 0x8002b8 <lastPoll>
     f8a:	10 92 b9 02 	sts	0x02B9, r1	; 0x8002b9 <lastPoll+0x1>
     f8e:	10 92 ba 02 	sts	0x02BA, r1	; 0x8002ba <lastPoll+0x2>
     f92:	10 92 bb 02 	sts	0x02BB, r1	; 0x8002bb <lastPoll+0x3>
#ifdef WITH_WIFI
  delay(9000);
     f96:	68 e2       	ldi	r22, 0x28	; 40
     f98:	73 e2       	ldi	r23, 0x23	; 35
     f9a:	80 e0       	ldi	r24, 0x00	; 0
     f9c:	90 e0       	ldi	r25, 0x00	; 0
     f9e:	0e 94 bd 12 	call	0x257a	; 0x257a <delay>
  Serial.begin(115200, SERIAL_8N1);
     fa2:	26 e0       	ldi	r18, 0x06	; 6
     fa4:	40 e0       	ldi	r20, 0x00	; 0
     fa6:	52 ec       	ldi	r21, 0xC2	; 194
     fa8:	61 e0       	ldi	r22, 0x01	; 1
     faa:	70 e0       	ldi	r23, 0x00	; 0
     fac:	84 ed       	ldi	r24, 0xD4	; 212
     fae:	92 e0       	ldi	r25, 0x02	; 2
     fb0:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <_ZN14HardwareSerial5beginEmh>
  if (wifi.begin()) {
     fb4:	86 ea       	ldi	r24, 0xA6	; 166
     fb6:	92 e0       	ldi	r25, 0x02	; 2
     fb8:	0e 94 81 03 	call	0x702	; 0x702 <_ZN9ElcanWifi5beginEv>
     fbc:	88 23       	and	r24, r24
     fbe:	59 f0       	breq	.+22     	; 0xfd6 <setup+0x100>
    wifi.get_ip(ipaddr);
     fc0:	b8 01       	movw	r22, r16
     fc2:	86 ea       	ldi	r24, 0xA6	; 166
     fc4:	92 e0       	ldi	r25, 0x02	; 2
     fc6:	0e 94 cc 03 	call	0x798	; 0x798 <_ZN9ElcanWifi6get_ipEPc>
    ElcanLcd.show_ip(ipaddr);
     fca:	b8 01       	movw	r22, r16
     fcc:	88 ea       	ldi	r24, 0xA8	; 168
     fce:	92 e0       	ldi	r25, 0x02	; 2
     fd0:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <_ZN15ElcanLCDManager7show_ipEPc>
     fd4:	03 c0       	rjmp	.+6      	; 0xfdc <setup+0x106>
  } else {
    sys_state = ERROR_WIFI;
     fd6:	82 e0       	ldi	r24, 0x02	; 2
     fd8:	80 93 d3 02 	sts	0x02D3, r24	; 0x8002d3 <sys_state>
  }
#else
  ElcanLcd.show_message("Initialized...");
#endif
}
     fdc:	6e 96       	adiw	r28, 0x1e	; 30
     fde:	0f b6       	in	r0, 0x3f	; 63
     fe0:	f8 94       	cli
     fe2:	de bf       	out	0x3e, r29	; 62
     fe4:	0f be       	out	0x3f, r0	; 63
     fe6:	cd bf       	out	0x3d, r28	; 61
     fe8:	df 91       	pop	r29
     fea:	cf 91       	pop	r28
     fec:	1f 91       	pop	r17
     fee:	0f 91       	pop	r16
     ff0:	08 95       	ret

00000ff2 <_Z18check_card_and_actv>:
}

/**
 * Read card must be checked against the known ones
 */
bool check_card_and_act() {
     ff2:	cf 93       	push	r28
  char ret;
  ret = is_known_card(rfid.readCard);
     ff4:	81 ea       	ldi	r24, 0xA1	; 161
     ff6:	92 e0       	ldi	r25, 0x02	; 2
     ff8:	0e 94 ef 00 	call	0x1de	; 0x1de <_Z13is_known_cardPc>
     ffc:	c8 2f       	mov	r28, r24
  if (ret > 0) {
     ffe:	88 23       	and	r24, r24
    1000:	11 f1       	breq	.+68     	; 0x1046 <_Z18check_card_and_actv+0x54>
    sys_state = READ_RTC;
    1002:	80 e1       	ldi	r24, 0x10	; 16
    1004:	80 93 d3 02 	sts	0x02D3, r24	; 0x8002d3 <sys_state>
    DO_KNOWN_BEEPS;
    1008:	24 e6       	ldi	r18, 0x64	; 100
    100a:	30 e0       	ldi	r19, 0x00	; 0
    100c:	40 e0       	ldi	r20, 0x00	; 0
    100e:	50 e0       	ldi	r21, 0x00	; 0
    1010:	60 e2       	ldi	r22, 0x20	; 32
    1012:	73 e0       	ldi	r23, 0x03	; 3
    1014:	83 e0       	ldi	r24, 0x03	; 3
    1016:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <_Z4tonehjm>
    101a:	64 e6       	ldi	r22, 0x64	; 100
    101c:	70 e0       	ldi	r23, 0x00	; 0
    101e:	80 e0       	ldi	r24, 0x00	; 0
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	0e 94 bd 12 	call	0x257a	; 0x257a <delay>
    1026:	24 e6       	ldi	r18, 0x64	; 100
    1028:	30 e0       	ldi	r19, 0x00	; 0
    102a:	40 e0       	ldi	r20, 0x00	; 0
    102c:	50 e0       	ldi	r21, 0x00	; 0
    102e:	60 e2       	ldi	r22, 0x20	; 32
    1030:	73 e0       	ldi	r23, 0x03	; 3
    1032:	83 e0       	ldi	r24, 0x03	; 3
    1034:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <_Z4tonehjm>
    1038:	64 e6       	ldi	r22, 0x64	; 100
    103a:	70 e0       	ldi	r23, 0x00	; 0
    103c:	80 e0       	ldi	r24, 0x00	; 0
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	0e 94 bd 12 	call	0x257a	; 0x257a <delay>
    1044:	03 c0       	rjmp	.+6      	; 0x104c <_Z18check_card_and_actv+0x5a>
  } else {
    sys_state = UNKNOWN_CARD;
    1046:	89 e8       	ldi	r24, 0x89	; 137
    1048:	80 93 d3 02 	sts	0x02D3, r24	; 0x8002d3 <sys_state>
  }
  return ret;
    104c:	81 e0       	ldi	r24, 0x01	; 1
    104e:	c1 11       	cpse	r28, r1
    1050:	01 c0       	rjmp	.+2      	; 0x1054 <_Z18check_card_and_actv+0x62>
    1052:	80 e0       	ldi	r24, 0x00	; 0
}
    1054:	cf 91       	pop	r28
    1056:	08 95       	ret

00001058 <_Z12open_barrierv>:

void open_barrier() {
  digitalWrite(BARRERA, 1);
    1058:	61 e0       	ldi	r22, 0x01	; 1
    105a:	84 e0       	ldi	r24, 0x04	; 4
    105c:	0e 94 a4 13 	call	0x2748	; 0x2748 <digitalWrite>
  delay(8000); //wait until the barrier acknowledges the open command
    1060:	60 e4       	ldi	r22, 0x40	; 64
    1062:	7f e1       	ldi	r23, 0x1F	; 31
    1064:	80 e0       	ldi	r24, 0x00	; 0
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	0e 94 bd 12 	call	0x257a	; 0x257a <delay>
  digitalWrite(BARRERA, 0); //release Barrier switch
    106c:	60 e0       	ldi	r22, 0x00	; 0
    106e:	84 e0       	ldi	r24, 0x04	; 4
    1070:	0c 94 a4 13 	jmp	0x2748	; 0x2748 <digitalWrite>

00001074 <_Z18check_elapsed_timev>:
}

bool check_elapsed_time() {
    1074:	cf 93       	push	r28
    1076:	df 93       	push	r29
    1078:	cd b7       	in	r28, 0x3d	; 61
    107a:	de b7       	in	r29, 0x3e	; 62
    107c:	2a 97       	sbiw	r28, 0x0a	; 10
    107e:	0f b6       	in	r0, 0x3f	; 63
    1080:	f8 94       	cli
    1082:	de bf       	out	0x3e, r29	; 62
    1084:	0f be       	out	0x3f, r0	; 63
    1086:	cd bf       	out	0x3d, r28	; 61
  DateTime current = rtc.now();
    1088:	65 ea       	ldi	r22, 0xA5	; 165
    108a:	72 e0       	ldi	r23, 0x02	; 2
    108c:	ce 01       	movw	r24, r28
    108e:	01 96       	adiw	r24, 0x01	; 1
    1090:	0e 94 6e 05 	call	0xadc	; 0xadc <_ZN8ElcanRtc3nowEv>
  TimeSpan diff_time = (current - timerStarted);
    1094:	40 ec       	ldi	r20, 0xC0	; 192
    1096:	52 e0       	ldi	r21, 0x02	; 2
    1098:	be 01       	movw	r22, r28
    109a:	6f 5f       	subi	r22, 0xFF	; 255
    109c:	7f 4f       	sbci	r23, 0xFF	; 255
    109e:	ce 01       	movw	r24, r28
    10a0:	07 96       	adiw	r24, 0x07	; 7
    10a2:	0e 94 28 1c 	call	0x3850	; 0x3850 <_ZN8DateTimemiERKS_>
  if (diff_time.totalseconds() >= WAITING_TIME) {
    10a6:	81 e0       	ldi	r24, 0x01	; 1
    10a8:	4f 81       	ldd	r20, Y+7	; 0x07
    10aa:	58 85       	ldd	r21, Y+8	; 0x08
    10ac:	69 85       	ldd	r22, Y+9	; 0x09
    10ae:	7a 85       	ldd	r23, Y+10	; 0x0a
    10b0:	4a 30       	cpi	r20, 0x0A	; 10
    10b2:	51 05       	cpc	r21, r1
    10b4:	61 05       	cpc	r22, r1
    10b6:	71 05       	cpc	r23, r1
    10b8:	0c f4       	brge	.+2      	; 0x10bc <_Z18check_elapsed_timev+0x48>
    10ba:	80 e0       	ldi	r24, 0x00	; 0
    return true;
  }
  return false;
}
    10bc:	2a 96       	adiw	r28, 0x0a	; 10
    10be:	0f b6       	in	r0, 0x3f	; 63
    10c0:	f8 94       	cli
    10c2:	de bf       	out	0x3e, r29	; 62
    10c4:	0f be       	out	0x3f, r0	; 63
    10c6:	cd bf       	out	0x3d, r28	; 61
    10c8:	df 91       	pop	r29
    10ca:	cf 91       	pop	r28
    10cc:	08 95       	ret

000010ce <_Z10check_wifiv>:
#endif
    erase_card(pos);
  }
}

void check_wifi() {
    10ce:	0f 93       	push	r16
    10d0:	1f 93       	push	r17
  byte polled;
  if (millis() - lastPoll > POLLING_INTERVAL) {
    10d2:	0e 94 8c 12 	call	0x2518	; 0x2518 <millis>
    10d6:	00 91 b8 02 	lds	r16, 0x02B8	; 0x8002b8 <lastPoll>
    10da:	10 91 b9 02 	lds	r17, 0x02B9	; 0x8002b9 <lastPoll+0x1>
    10de:	20 91 ba 02 	lds	r18, 0x02BA	; 0x8002ba <lastPoll+0x2>
    10e2:	30 91 bb 02 	lds	r19, 0x02BB	; 0x8002bb <lastPoll+0x3>
    10e6:	dc 01       	movw	r26, r24
    10e8:	cb 01       	movw	r24, r22
    10ea:	80 1b       	sub	r24, r16
    10ec:	91 0b       	sbc	r25, r17
    10ee:	a2 0b       	sbc	r26, r18
    10f0:	b3 0b       	sbc	r27, r19
    10f2:	89 3e       	cpi	r24, 0xE9	; 233
    10f4:	93 40       	sbci	r25, 0x03	; 3
    10f6:	a1 05       	cpc	r26, r1
    10f8:	b1 05       	cpc	r27, r1
    10fa:	b8 f0       	brcs	.+46     	; 0x112a <_Z10check_wifiv+0x5c>
    polled = wifi.poll();
    10fc:	86 ea       	ldi	r24, 0xA6	; 166
    10fe:	92 e0       	ldi	r25, 0x02	; 2
    1100:	0e 94 1e 04 	call	0x83c	; 0x83c <_ZN9ElcanWifi4pollEv>
    switch(polled) {
    1104:	82 35       	cpi	r24, 0x52	; 82
    1106:	21 f0       	breq	.+8      	; 0x1110 <_Z10check_wifiv+0x42>
    1108:	84 35       	cpi	r24, 0x54	; 84
    110a:	29 f4       	brne	.+10     	; 0x1116 <_Z10check_wifiv+0x48>
      case 'T':
        sys_state = GET_TAG_DATA;
    110c:	8b ea       	ldi	r24, 0xAB	; 171
    110e:	01 c0       	rjmp	.+2      	; 0x1112 <_Z10check_wifiv+0x44>
        break;
      case 'R':
        sys_state = ADJUST_TIME;
    1110:	81 ec       	ldi	r24, 0xC1	; 193
    1112:	80 93 d3 02 	sts	0x02D3, r24	; 0x8002d3 <sys_state>
        break;
    }
    lastPoll = millis();
    1116:	0e 94 8c 12 	call	0x2518	; 0x2518 <millis>
    111a:	60 93 b8 02 	sts	0x02B8, r22	; 0x8002b8 <lastPoll>
    111e:	70 93 b9 02 	sts	0x02B9, r23	; 0x8002b9 <lastPoll+0x1>
    1122:	80 93 ba 02 	sts	0x02BA, r24	; 0x8002ba <lastPoll+0x2>
    1126:	90 93 bb 02 	sts	0x02BB, r25	; 0x8002bb <lastPoll+0x3>
  }
}
    112a:	1f 91       	pop	r17
    112c:	0f 91       	pop	r16
    112e:	08 95       	ret

00001130 <_Z19tag_string_to_bytesPcPhS0_>:

char tag_string_to_bytes(char *tagstring, byte *tag_uid, byte *remove) {
    1130:	af 92       	push	r10
    1132:	bf 92       	push	r11
    1134:	cf 92       	push	r12
    1136:	df 92       	push	r13
    1138:	ef 92       	push	r14
    113a:	ff 92       	push	r15
    113c:	0f 93       	push	r16
    113e:	1f 93       	push	r17
    1140:	cf 93       	push	r28
    1142:	df 93       	push	r29
    1144:	00 d0       	rcall	.+0      	; 0x1146 <_Z19tag_string_to_bytesPcPhS0_+0x16>
    1146:	00 d0       	rcall	.+0      	; 0x1148 <_Z19tag_string_to_bytesPcPhS0_+0x18>
    1148:	cd b7       	in	r28, 0x3d	; 61
    114a:	de b7       	in	r29, 0x3e	; 62
    114c:	8c 01       	movw	r16, r24
    114e:	5b 01       	movw	r10, r22
    1150:	6a 01       	movw	r12, r20
  char posBuf[4];
  char tmp;
  memset(posBuf,0,sizeof(posBuf));
    1152:	ce 01       	movw	r24, r28
    1154:	01 96       	adiw	r24, 0x01	; 1
    1156:	7c 01       	movw	r14, r24
    1158:	84 e0       	ldi	r24, 0x04	; 4
    115a:	f7 01       	movw	r30, r14
    115c:	11 92       	st	Z+, r1
    115e:	8a 95       	dec	r24
    1160:	e9 f7       	brne	.-6      	; 0x115c <_Z19tag_string_to_bytesPcPhS0_+0x2c>
  hex_string_to_byte_array(tagstring, posBuf, TAG_UID_START, TAG_UID_END);
    1162:	28 e0       	ldi	r18, 0x08	; 8
    1164:	40 e0       	ldi	r20, 0x00	; 0
    1166:	b7 01       	movw	r22, r14
    1168:	c8 01       	movw	r24, r16
    116a:	0e 94 a6 01 	call	0x34c	; 0x34c <_Z24hex_string_to_byte_arrayPcS_cc>
  memcpy(tag_uid, posBuf, sizeof(posBuf));
    116e:	89 81       	ldd	r24, Y+1	; 0x01
    1170:	9a 81       	ldd	r25, Y+2	; 0x02
    1172:	ab 81       	ldd	r26, Y+3	; 0x03
    1174:	bc 81       	ldd	r27, Y+4	; 0x04
    1176:	f5 01       	movw	r30, r10
    1178:	80 83       	st	Z, r24
    117a:	91 83       	std	Z+1, r25	; 0x01
    117c:	a2 83       	std	Z+2, r26	; 0x02
    117e:	b3 83       	std	Z+3, r27	; 0x03
  hex_string_to_byte_array(tagstring, posBuf, TAG_POS_START, TAG_POS_END);
    1180:	2a e0       	ldi	r18, 0x0A	; 10
    1182:	48 e0       	ldi	r20, 0x08	; 8
    1184:	b7 01       	movw	r22, r14
    1186:	c8 01       	movw	r24, r16
    1188:	0e 94 a6 01 	call	0x34c	; 0x34c <_Z24hex_string_to_byte_arrayPcS_cc>
  tmp = posBuf[0]; //after converting the pos HEX to bin, it'll use 1 byte only.
    118c:	89 81       	ldd	r24, Y+1	; 0x01
  remove[0] = tagstring[TAG_REM_START];
    118e:	f8 01       	movw	r30, r16
    1190:	92 85       	ldd	r25, Z+10	; 0x0a
    1192:	f6 01       	movw	r30, r12
    1194:	90 83       	st	Z, r25
  return tmp;
}
    1196:	0f 90       	pop	r0
    1198:	0f 90       	pop	r0
    119a:	0f 90       	pop	r0
    119c:	0f 90       	pop	r0
    119e:	df 91       	pop	r29
    11a0:	cf 91       	pop	r28
    11a2:	1f 91       	pop	r17
    11a4:	0f 91       	pop	r16
    11a6:	ff 90       	pop	r15
    11a8:	ef 90       	pop	r14
    11aa:	df 90       	pop	r13
    11ac:	cf 90       	pop	r12
    11ae:	bf 90       	pop	r11
    11b0:	af 90       	pop	r10
    11b2:	08 95       	ret

000011b4 <_Z12get_tag_datav>:
  ElcanLcd.show_message("Acceso negado,  Informando...");
  send_intrussion_attemp_to_server();
  DO_INTRUSSION_BEEPS;
}

void get_tag_data() {
    11b4:	0f 93       	push	r16
    11b6:	1f 93       	push	r17
    11b8:	cf 93       	push	r28
    11ba:	df 93       	push	r29
    11bc:	cd b7       	in	r28, 0x3d	; 61
    11be:	de b7       	in	r29, 0x3e	; 62
    11c0:	65 97       	sbiw	r28, 0x15	; 21
    11c2:	0f b6       	in	r0, 0x3f	; 63
    11c4:	f8 94       	cli
    11c6:	de bf       	out	0x3e, r29	; 62
    11c8:	0f be       	out	0x3f, r0	; 63
    11ca:	cd bf       	out	0x3d, r28	; 61
  char tagPacket[TAG_PACKET_SIZE];
  byte pos;
  byte result[4];
  byte remov;

  memset(tagPacket, 0, sizeof(tagPacket));
    11cc:	8e 01       	movw	r16, r28
    11ce:	0f 5f       	subi	r16, 0xFF	; 255
    11d0:	1f 4f       	sbci	r17, 0xFF	; 255
    11d2:	8b e0       	ldi	r24, 0x0B	; 11
    11d4:	f8 01       	movw	r30, r16
    11d6:	11 92       	st	Z+, r1
    11d8:	8a 95       	dec	r24
    11da:	e9 f7       	brne	.-6      	; 0x11d6 <_Z12get_tag_datav+0x22>
  wifi.readCardData(tagPacket, sizeof(tagPacket));
    11dc:	4b e0       	ldi	r20, 0x0B	; 11
    11de:	b8 01       	movw	r22, r16
    11e0:	86 ea       	ldi	r24, 0xA6	; 166
    11e2:	92 e0       	ldi	r25, 0x02	; 2
    11e4:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <_ZN9ElcanWifi12readCardDataEPcc>
  struct card_block card;
  pos = tag_string_to_bytes(tagPacket, result, &remov);
    11e8:	ae 01       	movw	r20, r28
    11ea:	4b 5e       	subi	r20, 0xEB	; 235
    11ec:	5f 4f       	sbci	r21, 0xFF	; 255
    11ee:	be 01       	movw	r22, r28
    11f0:	6f 5e       	subi	r22, 0xEF	; 239
    11f2:	7f 4f       	sbci	r23, 0xFF	; 255
    11f4:	c8 01       	movw	r24, r16
    11f6:	0e 94 98 08 	call	0x1130	; 0x1130 <_Z19tag_string_to_bytesPcPhS0_>
    11fa:	18 2f       	mov	r17, r24
  memcpy(card.card_uid, result, sizeof(result));
    11fc:	89 89       	ldd	r24, Y+17	; 0x11
    11fe:	9a 89       	ldd	r25, Y+18	; 0x12
    1200:	ab 89       	ldd	r26, Y+19	; 0x13
    1202:	bc 89       	ldd	r27, Y+20	; 0x14
    1204:	8c 87       	std	Y+12, r24	; 0x0c
    1206:	9d 87       	std	Y+13, r25	; 0x0d
    1208:	ae 87       	std	Y+14, r26	; 0x0e
    120a:	bf 87       	std	Y+15, r27	; 0x0f
  card.card_number = pos;
    120c:	18 8b       	std	Y+16, r17	; 0x10
  if (remov == '0') {
    120e:	8d 89       	ldd	r24, Y+21	; 0x15
    1210:	80 33       	cpi	r24, 0x30	; 48
    1212:	09 f5       	brne	.+66     	; 0x1256 <_Z12get_tag_datav+0xa2>
#ifdef DEBUG
    Serial.print("#Storing @ ");
    1214:	66 e8       	ldi	r22, 0x86	; 134
    1216:	71 e0       	ldi	r23, 0x01	; 1
    1218:	84 ed       	ldi	r24, 0xD4	; 212
    121a:	92 e0       	ldi	r25, 0x02	; 2
    121c:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <_ZN5Print5printEPKc>
    Serial.println(pos);
    1220:	4a e0       	ldi	r20, 0x0A	; 10
    1222:	50 e0       	ldi	r21, 0x00	; 0
    1224:	61 2f       	mov	r22, r17
    1226:	84 ed       	ldi	r24, 0xD4	; 212
    1228:	92 e0       	ldi	r25, 0x02	; 2
    122a:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <_ZN5Print7printlnEhi>
#endif
    delay(400);
    122e:	60 e9       	ldi	r22, 0x90	; 144
    1230:	71 e0       	ldi	r23, 0x01	; 1
    1232:	80 e0       	ldi	r24, 0x00	; 0
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	0e 94 bd 12 	call	0x257a	; 0x257a <delay>
    if (!store_card(card, pos)) {
    123a:	21 2f       	mov	r18, r17
    123c:	4c 85       	ldd	r20, Y+12	; 0x0c
    123e:	5d 85       	ldd	r21, Y+13	; 0x0d
    1240:	6e 85       	ldd	r22, Y+14	; 0x0e
    1242:	7f 85       	ldd	r23, Y+15	; 0x0f
    1244:	88 89       	ldd	r24, Y+16	; 0x10
    1246:	0e 94 49 01 	call	0x292	; 0x292 <_Z10store_card10card_blockc>
    124a:	81 11       	cpse	r24, r1
    124c:	14 c0       	rjmp	.+40     	; 0x1276 <_Z12get_tag_datav+0xc2>
      sys_state = ERROR_INVALID;
    124e:	87 e0       	ldi	r24, 0x07	; 7
    1250:	80 93 d3 02 	sts	0x02D3, r24	; 0x8002d3 <sys_state>
    1254:	10 c0       	rjmp	.+32     	; 0x1276 <_Z12get_tag_datav+0xc2>
    }
  } else {
#ifdef DEBUG
    Serial.println("#Erasing @ ");
    1256:	62 e9       	ldi	r22, 0x92	; 146
    1258:	71 e0       	ldi	r23, 0x01	; 1
    125a:	84 ed       	ldi	r24, 0xD4	; 212
    125c:	92 e0       	ldi	r25, 0x02	; 2
    125e:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <_ZN5Print7printlnEPKc>
    Serial.println(pos);
    1262:	4a e0       	ldi	r20, 0x0A	; 10
    1264:	50 e0       	ldi	r21, 0x00	; 0
    1266:	61 2f       	mov	r22, r17
    1268:	84 ed       	ldi	r24, 0xD4	; 212
    126a:	92 e0       	ldi	r25, 0x02	; 2
    126c:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <_ZN5Print7printlnEhi>
#endif
    erase_card(pos);
    1270:	81 2f       	mov	r24, r17
    1272:	0e 94 86 01 	call	0x30c	; 0x30c <_Z10erase_cardc>
  }
}
    1276:	65 96       	adiw	r28, 0x15	; 21
    1278:	0f b6       	in	r0, 0x3f	; 63
    127a:	f8 94       	cli
    127c:	de bf       	out	0x3e, r29	; 62
    127e:	0f be       	out	0x3f, r0	; 63
    1280:	cd bf       	out	0x3d, r28	; 61
    1282:	df 91       	pop	r29
    1284:	cf 91       	pop	r28
    1286:	1f 91       	pop	r17
    1288:	0f 91       	pop	r16
    128a:	08 95       	ret

0000128c <_GLOBAL__sub_I_sys_state>:
#include "eepromblock.h"
#include "definitions.h"

char sys_state;
char measuredWeight[7]; // Stores weight in ram
DateTime enteringTime;  //last time readed on the RTC
    128c:	40 e0       	ldi	r20, 0x00	; 0
    128e:	50 e0       	ldi	r21, 0x00	; 0
    1290:	ba 01       	movw	r22, r20
    1292:	86 ec       	ldi	r24, 0xC6	; 198
    1294:	92 e0       	ldi	r25, 0x02	; 2
    1296:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <_ZN8DateTimeC1Em>
DateTime timerStarted;
    129a:	40 e0       	ldi	r20, 0x00	; 0
    129c:	50 e0       	ldi	r21, 0x00	; 0
    129e:	ba 01       	movw	r22, r20
    12a0:	80 ec       	ldi	r24, 0xC0	; 192
    12a2:	92 e0       	ldi	r25, 0x02	; 2
    12a4:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <_ZN8DateTimeC1Em>
long backlightStart;
long lastPoll;
ElcanLCDManager ElcanLcd(LCD_ADDRESS, 16, 2);
    12a8:	22 e0       	ldi	r18, 0x02	; 2
    12aa:	40 e1       	ldi	r20, 0x10	; 16
    12ac:	67 e2       	ldi	r22, 0x27	; 39
    12ae:	88 ea       	ldi	r24, 0xA8	; 168
    12b0:	92 e0       	ldi	r25, 0x02	; 2
    12b2:	0e 94 c9 01 	call	0x392	; 0x392 <_ZN15ElcanLCDManagerC1Eccc>
ElcanWifi wifi;
    12b6:	86 ea       	ldi	r24, 0xA6	; 166
    12b8:	92 e0       	ldi	r25, 0x02	; 2
    12ba:	0e 94 72 03 	call	0x6e4	; 0x6e4 <_ZN9ElcanWifiC1Ev>
ElcanRtc rtc;
    12be:	85 ea       	ldi	r24, 0xA5	; 165
    12c0:	92 e0       	ldi	r25, 0x02	; 2
    12c2:	0e 94 3d 05 	call	0xa7a	; 0xa7a <_ZN8ElcanRtcC1Ev>
RfidManager rfid;
    12c6:	81 e9       	ldi	r24, 0x91	; 145
    12c8:	92 e0       	ldi	r25, 0x02	; 2
    12ca:	0e 94 b9 04 	call	0x972	; 0x972 <_ZN11RfidManagerC1Ev>
#ifdef WITH_WEIGHT
ElcanScale scale;
    12ce:	8e e8       	ldi	r24, 0x8E	; 142
    12d0:	92 e0       	ldi	r25, 0x02	; 2
    12d2:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <_ZN10ElcanScaleC1Ev>

000012d6 <_Z32send_intrussion_attemp_to_serverv>:
  Serial.println(tmp);
#endif
  wifi.sendEntry(tmp);
}

void send_intrussion_attemp_to_server(){
    12d6:	ef 92       	push	r14
    12d8:	ff 92       	push	r15
    12da:	0f 93       	push	r16
    12dc:	1f 93       	push	r17
    12de:	cf 93       	push	r28
    12e0:	df 93       	push	r29
    12e2:	cd b7       	in	r28, 0x3d	; 61
    12e4:	de b7       	in	r29, 0x3e	; 62
    12e6:	cb 54       	subi	r28, 0x4B	; 75
    12e8:	d1 09       	sbc	r29, r1
    12ea:	0f b6       	in	r0, 0x3f	; 63
    12ec:	f8 94       	cli
    12ee:	de bf       	out	0x3e, r29	; 62
    12f0:	0f be       	out	0x3f, r0	; 63
    12f2:	cd bf       	out	0x3d, r28	; 61
  char tmp[48];
  char timestr[21];
  DateTime stamp = rtc.now();
    12f4:	65 ea       	ldi	r22, 0xA5	; 165
    12f6:	72 e0       	ldi	r23, 0x02	; 2
    12f8:	ce 01       	movw	r24, r28
    12fa:	8a 5b       	subi	r24, 0xBA	; 186
    12fc:	9f 4f       	sbci	r25, 0xFF	; 255
    12fe:	0e 94 6e 05 	call	0xadc	; 0xadc <_ZN8ElcanRtc3nowEv>
  sprintf(tmp, "%02x%02x%02x%02x", rfid.readCard[0], rfid.readCard[1], rfid.readCard[2], rfid.readCard[3]);
    1302:	e1 e9       	ldi	r30, 0x91	; 145
    1304:	f2 e0       	ldi	r31, 0x02	; 2
    1306:	83 89       	ldd	r24, Z+19	; 0x13
    1308:	1f 92       	push	r1
    130a:	8f 93       	push	r24
    130c:	82 89       	ldd	r24, Z+18	; 0x12
    130e:	1f 92       	push	r1
    1310:	8f 93       	push	r24
    1312:	81 89       	ldd	r24, Z+17	; 0x11
    1314:	1f 92       	push	r1
    1316:	8f 93       	push	r24
    1318:	80 89       	ldd	r24, Z+16	; 0x10
    131a:	1f 92       	push	r1
    131c:	8f 93       	push	r24
    131e:	8e e9       	ldi	r24, 0x9E	; 158
    1320:	91 e0       	ldi	r25, 0x01	; 1
    1322:	9f 93       	push	r25
    1324:	8f 93       	push	r24
    1326:	8e 01       	movw	r16, r28
    1328:	0f 5f       	subi	r16, 0xFF	; 255
    132a:	1f 4f       	sbci	r17, 0xFF	; 255
    132c:	1f 93       	push	r17
    132e:	0f 93       	push	r16
    1330:	0e 94 62 22 	call	0x44c4	; 0x44c4 <sprintf>
  strcat(tmp, "*");
    1334:	6b ef       	ldi	r22, 0xFB	; 251
    1336:	71 e0       	ldi	r23, 0x01	; 1
    1338:	c8 01       	movw	r24, r16
    133a:	0e 94 0f 22 	call	0x441e	; 0x441e <strcat>
  sprintf(timestr, "%04d-%02d-%02d %02d:%02d:%02d", stamp.year(), stamp.month(),
    stamp.day(), stamp.hour(), stamp.minute(), stamp.second());
    133e:	2c 96       	adiw	r28, 0x0c	; 12
    1340:	8f ad       	ldd	r24, Y+63	; 0x3f
    1342:	2c 97       	sbiw	r28, 0x0c	; 12
    1344:	1f 92       	push	r1
    1346:	8f 93       	push	r24
    1348:	2b 96       	adiw	r28, 0x0b	; 11
    134a:	8f ad       	ldd	r24, Y+63	; 0x3f
    134c:	2b 97       	sbiw	r28, 0x0b	; 11
    134e:	1f 92       	push	r1
    1350:	8f 93       	push	r24
    1352:	2a 96       	adiw	r28, 0x0a	; 10
    1354:	8f ad       	ldd	r24, Y+63	; 0x3f
    1356:	2a 97       	sbiw	r28, 0x0a	; 10
    1358:	1f 92       	push	r1
    135a:	8f 93       	push	r24
    135c:	29 96       	adiw	r28, 0x09	; 9
    135e:	8f ad       	ldd	r24, Y+63	; 0x3f
    1360:	29 97       	sbiw	r28, 0x09	; 9
    1362:	1f 92       	push	r1
    1364:	8f 93       	push	r24
    1366:	28 96       	adiw	r28, 0x08	; 8
    1368:	8f ad       	ldd	r24, Y+63	; 0x3f
    136a:	28 97       	sbiw	r28, 0x08	; 8
    136c:	1f 92       	push	r1
    136e:	8f 93       	push	r24
    1370:	27 96       	adiw	r28, 0x07	; 7
    1372:	8f ad       	ldd	r24, Y+63	; 0x3f
    1374:	27 97       	sbiw	r28, 0x07	; 7
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	80 53       	subi	r24, 0x30	; 48
    137a:	98 4f       	sbci	r25, 0xF8	; 248
    137c:	9f 93       	push	r25
    137e:	8f 93       	push	r24
    1380:	8f ea       	ldi	r24, 0xAF	; 175
    1382:	91 e0       	ldi	r25, 0x01	; 1
    1384:	9f 93       	push	r25
    1386:	8f 93       	push	r24
    1388:	7e 01       	movw	r14, r28
    138a:	81 e3       	ldi	r24, 0x31	; 49
    138c:	e8 0e       	add	r14, r24
    138e:	f1 1c       	adc	r15, r1
    1390:	ff 92       	push	r15
    1392:	ef 92       	push	r14
    1394:	0e 94 62 22 	call	0x44c4	; 0x44c4 <sprintf>
  strcat(tmp, timestr);
    1398:	b7 01       	movw	r22, r14
    139a:	c8 01       	movw	r24, r16
    139c:	0e 94 0f 22 	call	0x441e	; 0x441e <strcat>
    13a0:	41 e0       	ldi	r20, 0x01	; 1
    13a2:	50 e0       	ldi	r21, 0x00	; 0
    13a4:	69 e0       	ldi	r22, 0x09	; 9
    13a6:	71 e0       	ldi	r23, 0x01	; 1
    13a8:	84 ed       	ldi	r24, 0xD4	; 212
    13aa:	92 e0       	ldi	r25, 0x02	; 2
    13ac:	0e 94 76 0d 	call	0x1aec	; 0x1aec <_ZN5Print5writeEPKhj>
#ifdef DEBUG
  Serial.write("#");
  Serial.println(tmp);
    13b0:	b8 01       	movw	r22, r16
    13b2:	84 ed       	ldi	r24, 0xD4	; 212
    13b4:	92 e0       	ldi	r25, 0x02	; 2
    13b6:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <_ZN5Print7printlnEPKc>
#endif
  wifi.sendIntrussionAttemp(tmp);
    13ba:	b8 01       	movw	r22, r16
    13bc:	86 ea       	ldi	r24, 0xA6	; 166
    13be:	92 e0       	ldi	r25, 0x02	; 2
    13c0:	0e 94 3a 04 	call	0x874	; 0x874 <_ZN9ElcanWifi20sendIntrussionAttempEPc>
}
    13c4:	0f b6       	in	r0, 0x3f	; 63
    13c6:	f8 94       	cli
    13c8:	de bf       	out	0x3e, r29	; 62
    13ca:	0f be       	out	0x3f, r0	; 63
    13cc:	cd bf       	out	0x3d, r28	; 61
    13ce:	c5 5b       	subi	r28, 0xB5	; 181
    13d0:	df 4f       	sbci	r29, 0xFF	; 255
    13d2:	0f b6       	in	r0, 0x3f	; 63
    13d4:	f8 94       	cli
    13d6:	de bf       	out	0x3e, r29	; 62
    13d8:	0f be       	out	0x3f, r0	; 63
    13da:	cd bf       	out	0x3d, r28	; 61
    13dc:	df 91       	pop	r29
    13de:	cf 91       	pop	r28
    13e0:	1f 91       	pop	r17
    13e2:	0f 91       	pop	r16
    13e4:	ff 90       	pop	r15
    13e6:	ef 90       	pop	r14
    13e8:	08 95       	ret

000013ea <_Z12alertUnknownv>:

void alertUnknown() {
    13ea:	cf 93       	push	r28
  ElcanLcd.show_message("Acceso negado,  Informando...");
    13ec:	6d ec       	ldi	r22, 0xCD	; 205
    13ee:	71 e0       	ldi	r23, 0x01	; 1
    13f0:	88 ea       	ldi	r24, 0xA8	; 168
    13f2:	92 e0       	ldi	r25, 0x02	; 2
    13f4:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <_ZN15ElcanLCDManager12show_messageEPc>
  send_intrussion_attemp_to_server();
    13f8:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <_Z32send_intrussion_attemp_to_serverv>
    13fc:	c3 e0       	ldi	r28, 0x03	; 3
  DO_INTRUSSION_BEEPS;
    13fe:	28 ec       	ldi	r18, 0xC8	; 200
    1400:	30 e0       	ldi	r19, 0x00	; 0
    1402:	40 e0       	ldi	r20, 0x00	; 0
    1404:	50 e0       	ldi	r21, 0x00	; 0
    1406:	6c ed       	ldi	r22, 0xDC	; 220
    1408:	75 e0       	ldi	r23, 0x05	; 5
    140a:	83 e0       	ldi	r24, 0x03	; 3
    140c:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <_Z4tonehjm>
    1410:	66 e9       	ldi	r22, 0x96	; 150
    1412:	70 e0       	ldi	r23, 0x00	; 0
    1414:	80 e0       	ldi	r24, 0x00	; 0
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	0e 94 bd 12 	call	0x257a	; 0x257a <delay>
    141c:	c1 50       	subi	r28, 0x01	; 1
    141e:	79 f7       	brne	.-34     	; 0x13fe <_Z12alertUnknownv+0x14>
}
    1420:	cf 91       	pop	r28
    1422:	08 95       	ret

00001424 <_Z14send_to_serverv>:
    return true;
  }
  return false;
}

void send_to_server() {
    1424:	ef 92       	push	r14
    1426:	ff 92       	push	r15
    1428:	0f 93       	push	r16
    142a:	1f 93       	push	r17
    142c:	cf 93       	push	r28
    142e:	df 93       	push	r29
    1430:	cd b7       	in	r28, 0x3d	; 61
    1432:	de b7       	in	r29, 0x3e	; 62
    1434:	c5 54       	subi	r28, 0x45	; 69
    1436:	d1 09       	sbc	r29, r1
    1438:	0f b6       	in	r0, 0x3f	; 63
    143a:	f8 94       	cli
    143c:	de bf       	out	0x3e, r29	; 62
    143e:	0f be       	out	0x3f, r0	; 63
    1440:	cd bf       	out	0x3d, r28	; 61
  char tmp[48];
  char timestr[21];
  memset(tmp, 0, sizeof(tmp));
    1442:	8e 01       	movw	r16, r28
    1444:	0f 5f       	subi	r16, 0xFF	; 255
    1446:	1f 4f       	sbci	r17, 0xFF	; 255
    1448:	80 e3       	ldi	r24, 0x30	; 48
    144a:	f8 01       	movw	r30, r16
    144c:	11 92       	st	Z+, r1
    144e:	8a 95       	dec	r24
    1450:	e9 f7       	brne	.-6      	; 0x144c <_Z14send_to_serverv+0x28>
  memset(timestr, 0, sizeof(timestr));
    1452:	7e 01       	movw	r14, r28
    1454:	f1 e3       	ldi	r31, 0x31	; 49
    1456:	ef 0e       	add	r14, r31
    1458:	f1 1c       	adc	r15, r1
    145a:	85 e1       	ldi	r24, 0x15	; 21
    145c:	f7 01       	movw	r30, r14
    145e:	11 92       	st	Z+, r1
    1460:	8a 95       	dec	r24
    1462:	e9 f7       	brne	.-6      	; 0x145e <_Z14send_to_serverv+0x3a>
  sprintf(tmp, "%02x%02x%02x%02x*", rfid.readCard[0], rfid.readCard[1], rfid.readCard[2], rfid.readCard[3]);
    1464:	e1 e9       	ldi	r30, 0x91	; 145
    1466:	f2 e0       	ldi	r31, 0x02	; 2
    1468:	83 89       	ldd	r24, Z+19	; 0x13
    146a:	1f 92       	push	r1
    146c:	8f 93       	push	r24
    146e:	82 89       	ldd	r24, Z+18	; 0x12
    1470:	1f 92       	push	r1
    1472:	8f 93       	push	r24
    1474:	81 89       	ldd	r24, Z+17	; 0x11
    1476:	1f 92       	push	r1
    1478:	8f 93       	push	r24
    147a:	80 89       	ldd	r24, Z+16	; 0x10
    147c:	1f 92       	push	r1
    147e:	8f 93       	push	r24
    1480:	8b ee       	ldi	r24, 0xEB	; 235
    1482:	91 e0       	ldi	r25, 0x01	; 1
    1484:	9f 93       	push	r25
    1486:	8f 93       	push	r24
    1488:	1f 93       	push	r17
    148a:	0f 93       	push	r16
    148c:	0e 94 62 22 	call	0x44c4	; 0x44c4 <sprintf>
    1490:	e6 ec       	ldi	r30, 0xC6	; 198
    1492:	f2 e0       	ldi	r31, 0x02	; 2
  sprintf(timestr, "%04d-%02d-%02d %02d:%02d:%02d", enteringTime.year(), enteringTime.month(),
    enteringTime.day(), enteringTime.hour(), enteringTime.minute(), enteringTime.second());
    1494:	85 81       	ldd	r24, Z+5	; 0x05
    1496:	1f 92       	push	r1
    1498:	8f 93       	push	r24
    149a:	84 81       	ldd	r24, Z+4	; 0x04
    149c:	1f 92       	push	r1
    149e:	8f 93       	push	r24
    14a0:	83 81       	ldd	r24, Z+3	; 0x03
    14a2:	1f 92       	push	r1
    14a4:	8f 93       	push	r24
    14a6:	82 81       	ldd	r24, Z+2	; 0x02
    14a8:	1f 92       	push	r1
    14aa:	8f 93       	push	r24
    14ac:	81 81       	ldd	r24, Z+1	; 0x01
    14ae:	1f 92       	push	r1
    14b0:	8f 93       	push	r24
    14b2:	80 81       	ld	r24, Z
    14b4:	90 e0       	ldi	r25, 0x00	; 0
    14b6:	80 53       	subi	r24, 0x30	; 48
    14b8:	98 4f       	sbci	r25, 0xF8	; 248
    14ba:	9f 93       	push	r25
    14bc:	8f 93       	push	r24
    14be:	8f ea       	ldi	r24, 0xAF	; 175
    14c0:	91 e0       	ldi	r25, 0x01	; 1
    14c2:	9f 93       	push	r25
    14c4:	8f 93       	push	r24
    14c6:	ff 92       	push	r15
    14c8:	ef 92       	push	r14
    14ca:	0e 94 62 22 	call	0x44c4	; 0x44c4 <sprintf>
  strcat(tmp, timestr);
    14ce:	b7 01       	movw	r22, r14
    14d0:	c8 01       	movw	r24, r16
    14d2:	0e 94 0f 22 	call	0x441e	; 0x441e <strcat>
  strcat(tmp, "*");
    14d6:	6b ef       	ldi	r22, 0xFB	; 251
    14d8:	71 e0       	ldi	r23, 0x01	; 1
    14da:	c8 01       	movw	r24, r16
    14dc:	0e 94 0f 22 	call	0x441e	; 0x441e <strcat>
  strncat(tmp, (char *)measuredWeight, 6);
    14e0:	46 e0       	ldi	r20, 0x06	; 6
    14e2:	50 e0       	ldi	r21, 0x00	; 0
    14e4:	6c ec       	ldi	r22, 0xCC	; 204
    14e6:	72 e0       	ldi	r23, 0x02	; 2
    14e8:	c8 01       	movw	r24, r16
    14ea:	0e 94 23 22 	call	0x4446	; 0x4446 <strncat>
    14ee:	41 e0       	ldi	r20, 0x01	; 1
    14f0:	50 e0       	ldi	r21, 0x00	; 0
    14f2:	69 e0       	ldi	r22, 0x09	; 9
    14f4:	71 e0       	ldi	r23, 0x01	; 1
    14f6:	84 ed       	ldi	r24, 0xD4	; 212
    14f8:	92 e0       	ldi	r25, 0x02	; 2
    14fa:	0e 94 76 0d 	call	0x1aec	; 0x1aec <_ZN5Print5writeEPKhj>
#ifdef DEBUG
  Serial.write("#");
  Serial.println(tmp);
    14fe:	b8 01       	movw	r22, r16
    1500:	84 ed       	ldi	r24, 0xD4	; 212
    1502:	92 e0       	ldi	r25, 0x02	; 2
    1504:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <_ZN5Print7printlnEPKc>
#endif
  wifi.sendEntry(tmp);
    1508:	b8 01       	movw	r22, r16
    150a:	86 ea       	ldi	r24, 0xA6	; 166
    150c:	92 e0       	ldi	r25, 0x02	; 2
    150e:	0e 94 86 04 	call	0x90c	; 0x90c <_ZN9ElcanWifi9sendEntryEPc>
}
    1512:	0f b6       	in	r0, 0x3f	; 63
    1514:	f8 94       	cli
    1516:	de bf       	out	0x3e, r29	; 62
    1518:	0f be       	out	0x3f, r0	; 63
    151a:	cd bf       	out	0x3d, r28	; 61
    151c:	cb 5b       	subi	r28, 0xBB	; 187
    151e:	df 4f       	sbci	r29, 0xFF	; 255
    1520:	0f b6       	in	r0, 0x3f	; 63
    1522:	f8 94       	cli
    1524:	de bf       	out	0x3e, r29	; 62
    1526:	0f be       	out	0x3f, r0	; 63
    1528:	cd bf       	out	0x3d, r28	; 61
    152a:	df 91       	pop	r29
    152c:	cf 91       	pop	r28
    152e:	1f 91       	pop	r17
    1530:	0f 91       	pop	r16
    1532:	ff 90       	pop	r15
    1534:	ef 90       	pop	r14
    1536:	08 95       	ret

00001538 <loop>:
#else
  ElcanLcd.show_message("Initialized...");
#endif
}

void loop() {
    1538:	0f 93       	push	r16
    153a:	1f 93       	push	r17
    153c:	cf 93       	push	r28
    153e:	df 93       	push	r29
    1540:	cd b7       	in	r28, 0x3d	; 61
    1542:	de b7       	in	r29, 0x3e	; 62
    1544:	6c 97       	sbiw	r28, 0x1c	; 28
    1546:	0f b6       	in	r0, 0x3f	; 63
    1548:	f8 94       	cli
    154a:	de bf       	out	0x3e, r29	; 62
    154c:	0f be       	out	0x3f, r0	; 63
    154e:	cd bf       	out	0x3d, r28	; 61
  char dateString[22];
  DateTime tstamp;
    1550:	40 e0       	ldi	r20, 0x00	; 0
    1552:	50 e0       	ldi	r21, 0x00	; 0
    1554:	ba 01       	movw	r22, r20
    1556:	ce 01       	movw	r24, r28
    1558:	47 96       	adiw	r24, 0x17	; 23
    155a:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <_ZN8DateTimeC1Em>
  bool tmp;
  ElcanLcd.check_light();
    155e:	88 ea       	ldi	r24, 0xA8	; 168
    1560:	92 e0       	ldi	r25, 0x02	; 2
    1562:	0e 94 23 03 	call	0x646	; 0x646 <_ZN15ElcanLCDManager11check_lightEv>
  switch(sys_state) {
    1566:	60 91 d3 02 	lds	r22, 0x02D3	; 0x8002d3 <sys_state>
    156a:	60 31       	cpi	r22, 0x10	; 16
    156c:	09 f4       	brne	.+2      	; 0x1570 <loop+0x38>
    156e:	70 c0       	rjmp	.+224    	; 0x1650 <loop+0x118>
    1570:	88 f4       	brcc	.+34     	; 0x1594 <loop+0x5c>
    1572:	66 30       	cpi	r22, 0x06	; 6
    1574:	38 f4       	brcc	.+14     	; 0x1584 <loop+0x4c>
    1576:	64 30       	cpi	r22, 0x04	; 4
    1578:	a0 f5       	brcc	.+104    	; 0x15e2 <loop+0xaa>
    157a:	61 30       	cpi	r22, 0x01	; 1
    157c:	b9 f1       	breq	.+110    	; 0x15ec <loop+0xb4>
    157e:	62 30       	cpi	r22, 0x02	; 2
    1580:	81 f1       	breq	.+96     	; 0x15e2 <loop+0xaa>
    1582:	ad c0       	rjmp	.+346    	; 0x16de <loop+0x1a6>
    1584:	67 30       	cpi	r22, 0x07	; 7
    1586:	69 f1       	breq	.+90     	; 0x15e2 <loop+0xaa>
    1588:	68 30       	cpi	r22, 0x08	; 8
    158a:	09 f0       	breq	.+2      	; 0x158e <loop+0x56>
    158c:	a8 c0       	rjmp	.+336    	; 0x16de <loop+0x1a6>
      } else {
        check_wifi();
      }
      break;
    case READ_RFID:
      check_card_and_act(); //checks the card and if its valid, it starts the sequence
    158e:	0e 94 f9 07 	call	0xff2	; 0xff2 <_Z18check_card_and_actv>
      break;
    1592:	a5 c0       	rjmp	.+330    	; 0x16de <loop+0x1a6>
void loop() {
  char dateString[22];
  DateTime tstamp;
  bool tmp;
  ElcanLcd.check_light();
  switch(sys_state) {
    1594:	69 38       	cpi	r22, 0x89	; 137
    1596:	09 f4       	brne	.+2      	; 0x159a <loop+0x62>
    1598:	98 c0       	rjmp	.+304    	; 0x16ca <loop+0x192>
    159a:	b8 f4       	brcc	.+46     	; 0x15ca <loop+0x92>
    159c:	60 34       	cpi	r22, 0x40	; 64
    159e:	09 f4       	brne	.+2      	; 0x15a2 <loop+0x6a>
    15a0:	87 c0       	rjmp	.+270    	; 0x16b0 <loop+0x178>
    15a2:	60 38       	cpi	r22, 0x80	; 128
    15a4:	09 f4       	brne	.+2      	; 0x15a8 <loop+0x70>
    15a6:	6b c0       	rjmp	.+214    	; 0x167e <loop+0x146>
    15a8:	60 32       	cpi	r22, 0x20	; 32
    15aa:	09 f0       	breq	.+2      	; 0x15ae <loop+0x76>
    15ac:	98 c0       	rjmp	.+304    	; 0x16de <loop+0x1a6>
      ElcanLcd.show_message("Acceso permitido");
      enteringTime = rtc.now();
      sys_state = READ_WEIGHT;
      break;
    case READ_WEIGHT:
      ElcanLcd.show_message("Espere por favor...");
    15ae:	67 e2       	ldi	r22, 0x27	; 39
    15b0:	72 e0       	ldi	r23, 0x02	; 2
    15b2:	88 ea       	ldi	r24, 0xA8	; 168
    15b4:	92 e0       	ldi	r25, 0x02	; 2
    15b6:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <_ZN15ElcanLCDManager12show_messageEPc>
 #ifdef WITH_WEIGHT
      scale.get_weight(measuredWeight);
    15ba:	6c ec       	ldi	r22, 0xCC	; 204
    15bc:	72 e0       	ldi	r23, 0x02	; 2
    15be:	8e e8       	ldi	r24, 0x8E	; 142
    15c0:	92 e0       	ldi	r25, 0x02	; 2
    15c2:	0e 94 ae 06 	call	0xd5c	; 0xd5c <_ZN10ElcanScale10get_weightEPc>
 #endif
      sys_state = WRITE_RECORD;
    15c6:	80 e8       	ldi	r24, 0x80	; 128
    15c8:	88 c0       	rjmp	.+272    	; 0x16da <loop+0x1a2>
void loop() {
  char dateString[22];
  DateTime tstamp;
  bool tmp;
  ElcanLcd.check_light();
  switch(sys_state) {
    15ca:	61 3c       	cpi	r22, 0xC1	; 193
    15cc:	09 f4       	brne	.+2      	; 0x15d0 <loop+0x98>
    15ce:	80 c0       	rjmp	.+256    	; 0x16d0 <loop+0x198>
    15d0:	6a 3f       	cpi	r22, 0xFA	; 250
    15d2:	09 f4       	brne	.+2      	; 0x15d6 <loop+0x9e>
    15d4:	67 c0       	rjmp	.+206    	; 0x16a4 <loop+0x16c>
    15d6:	6b 3a       	cpi	r22, 0xAB	; 171
    15d8:	09 f0       	breq	.+2      	; 0x15dc <loop+0xa4>
    15da:	81 c0       	rjmp	.+258    	; 0x16de <loop+0x1a6>
    case UNKNOWN_CARD:
      alertUnknown();
      sys_state = READY;
      break;
    case GET_TAG_DATA:
      get_tag_data();
    15dc:	0e 94 da 08 	call	0x11b4	; 0x11b4 <_Z12get_tag_datav>
    15e0:	7b c0       	rjmp	.+246    	; 0x16d8 <loop+0x1a0>
  switch(sys_state) {
    case ERROR_WIFI:
    case ERROR_RFID:
    case ERROR_RTC:
    case ERROR_INVALID:
      ElcanLcd.show_error(sys_state);
    15e2:	88 ea       	ldi	r24, 0xA8	; 168
    15e4:	92 e0       	ldi	r25, 0x02	; 2
    15e6:	0e 94 0e 02 	call	0x41c	; 0x41c <_ZN15ElcanLCDManager10show_errorEc>
      break;
    15ea:	79 c0       	rjmp	.+242    	; 0x16de <loop+0x1a6>
    case READY:
      sprintf(dateString, "%02d/%02d/%04d %02d:%02d", tstamp.day(), tstamp.month(),
      tstamp.year(), tstamp.hour(), tstamp.minute());
    15ec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15ee:	1f 92       	push	r1
    15f0:	8f 93       	push	r24
    15f2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    15f4:	1f 92       	push	r1
    15f6:	8f 93       	push	r24
    15f8:	8f 89       	ldd	r24, Y+23	; 0x17
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	80 53       	subi	r24, 0x30	; 48
    15fe:	98 4f       	sbci	r25, 0xF8	; 248
    1600:	9f 93       	push	r25
    1602:	8f 93       	push	r24
    1604:	88 8d       	ldd	r24, Y+24	; 0x18
    1606:	1f 92       	push	r1
    1608:	8f 93       	push	r24
    160a:	89 8d       	ldd	r24, Y+25	; 0x19
    160c:	1f 92       	push	r1
    160e:	8f 93       	push	r24
    1610:	8d ef       	ldi	r24, 0xFD	; 253
    1612:	91 e0       	ldi	r25, 0x01	; 1
    1614:	9f 93       	push	r25
    1616:	8f 93       	push	r24
    1618:	8e 01       	movw	r16, r28
    161a:	0f 5f       	subi	r16, 0xFF	; 255
    161c:	1f 4f       	sbci	r17, 0xFF	; 255
    161e:	1f 93       	push	r17
    1620:	0f 93       	push	r16
    1622:	0e 94 62 22 	call	0x44c4	; 0x44c4 <sprintf>
      ElcanLcd.show_ready(dateString);
    1626:	b8 01       	movw	r22, r16
    1628:	88 ea       	ldi	r24, 0xA8	; 168
    162a:	92 e0       	ldi	r25, 0x02	; 2
    162c:	0e 94 60 02 	call	0x4c0	; 0x4c0 <_ZN15ElcanLCDManager10show_readyEPc>
      if (rfid.getID()) {
    1630:	81 e9       	ldi	r24, 0x91	; 145
    1632:	92 e0       	ldi	r25, 0x02	; 2
    1634:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <_ZN11RfidManager5getIDEv>
    1638:	0f b6       	in	r0, 0x3f	; 63
    163a:	f8 94       	cli
    163c:	de bf       	out	0x3e, r29	; 62
    163e:	0f be       	out	0x3f, r0	; 63
    1640:	cd bf       	out	0x3d, r28	; 61
    1642:	88 23       	and	r24, r24
    1644:	11 f0       	breq	.+4      	; 0x164a <loop+0x112>
        sys_state = READ_RFID;
    1646:	88 e0       	ldi	r24, 0x08	; 8
    1648:	48 c0       	rjmp	.+144    	; 0x16da <loop+0x1a2>
      } else {
        check_wifi();
    164a:	0e 94 67 08 	call	0x10ce	; 0x10ce <_Z10check_wifiv>
    164e:	47 c0       	rjmp	.+142    	; 0x16de <loop+0x1a6>
      break;
    case READ_RFID:
      check_card_and_act(); //checks the card and if its valid, it starts the sequence
      break;
    case READ_RTC:
      ElcanLcd.show_message("Acceso permitido");
    1650:	66 e1       	ldi	r22, 0x16	; 22
    1652:	72 e0       	ldi	r23, 0x02	; 2
    1654:	88 ea       	ldi	r24, 0xA8	; 168
    1656:	92 e0       	ldi	r25, 0x02	; 2
    1658:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <_ZN15ElcanLCDManager12show_messageEPc>
      enteringTime = rtc.now();
    165c:	65 ea       	ldi	r22, 0xA5	; 165
    165e:	72 e0       	ldi	r23, 0x02	; 2
    1660:	ce 01       	movw	r24, r28
    1662:	01 96       	adiw	r24, 0x01	; 1
    1664:	0e 94 6e 05 	call	0xadc	; 0xadc <_ZN8ElcanRtc3nowEv>
    1668:	86 e0       	ldi	r24, 0x06	; 6
    166a:	fe 01       	movw	r30, r28
    166c:	31 96       	adiw	r30, 0x01	; 1
    166e:	a6 ec       	ldi	r26, 0xC6	; 198
    1670:	b2 e0       	ldi	r27, 0x02	; 2
    1672:	01 90       	ld	r0, Z+
    1674:	0d 92       	st	X+, r0
    1676:	8a 95       	dec	r24
    1678:	e1 f7       	brne	.-8      	; 0x1672 <loop+0x13a>
      sys_state = READ_WEIGHT;
    167a:	80 e2       	ldi	r24, 0x20	; 32
    167c:	2e c0       	rjmp	.+92     	; 0x16da <loop+0x1a2>
 #endif
      sys_state = WRITE_RECORD;
      break;
    case WRITE_RECORD:
#ifdef WITH_WIFI    
      send_to_server();
    167e:	0e 94 12 0a 	call	0x1424	; 0x1424 <_Z14send_to_serverv>
#endif
      timerStarted = rtc.now();
    1682:	65 ea       	ldi	r22, 0xA5	; 165
    1684:	72 e0       	ldi	r23, 0x02	; 2
    1686:	ce 01       	movw	r24, r28
    1688:	01 96       	adiw	r24, 0x01	; 1
    168a:	0e 94 6e 05 	call	0xadc	; 0xadc <_ZN8ElcanRtc3nowEv>
    168e:	86 e0       	ldi	r24, 0x06	; 6
    1690:	fe 01       	movw	r30, r28
    1692:	31 96       	adiw	r30, 0x01	; 1
    1694:	a0 ec       	ldi	r26, 0xC0	; 192
    1696:	b2 e0       	ldi	r27, 0x02	; 2
    1698:	01 90       	ld	r0, Z+
    169a:	0d 92       	st	X+, r0
    169c:	8a 95       	dec	r24
    169e:	e1 f7       	brne	.-8      	; 0x1698 <loop+0x160>
      sys_state = TIMED_WAIT;
    16a0:	8a ef       	ldi	r24, 0xFA	; 250
    16a2:	1b c0       	rjmp	.+54     	; 0x16da <loop+0x1a2>
      break;
    case TIMED_WAIT:
      if (check_elapsed_time()) {
    16a4:	0e 94 3a 08 	call	0x1074	; 0x1074 <_Z18check_elapsed_timev>
    16a8:	88 23       	and	r24, r24
    16aa:	c9 f0       	breq	.+50     	; 0x16de <loop+0x1a6>
        sys_state = OPEN_BARRIER;
    16ac:	80 e4       	ldi	r24, 0x40	; 64
    16ae:	15 c0       	rjmp	.+42     	; 0x16da <loop+0x1a2>
      }
      break;
    case OPEN_BARRIER:
      ElcanLcd.show_message("Avance...");
    16b0:	6b e3       	ldi	r22, 0x3B	; 59
    16b2:	72 e0       	ldi	r23, 0x02	; 2
    16b4:	88 ea       	ldi	r24, 0xA8	; 168
    16b6:	92 e0       	ldi	r25, 0x02	; 2
    16b8:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <_ZN15ElcanLCDManager12show_messageEPc>
      open_barrier();
    16bc:	0e 94 2c 08 	call	0x1058	; 0x1058 <_Z12open_barrierv>
      ElcanLcd.light_on();
    16c0:	88 ea       	ldi	r24, 0xA8	; 168
    16c2:	92 e0       	ldi	r25, 0x02	; 2
    16c4:	0e 94 4f 03 	call	0x69e	; 0x69e <_ZN15ElcanLCDManager8light_onEv>
    16c8:	07 c0       	rjmp	.+14     	; 0x16d8 <loop+0x1a0>
      sys_state = READY;
      break;
    case UNKNOWN_CARD:
      alertUnknown();
    16ca:	0e 94 f5 09 	call	0x13ea	; 0x13ea <_Z12alertUnknownv>
    16ce:	04 c0       	rjmp	.+8      	; 0x16d8 <loop+0x1a0>
    case GET_TAG_DATA:
      get_tag_data();
      sys_state = READY;
      break;
    case ADJUST_TIME:
      rtc.adjust_from_serial();
    16d0:	85 ea       	ldi	r24, 0xA5	; 165
    16d2:	92 e0       	ldi	r25, 0x02	; 2
    16d4:	0e 94 28 06 	call	0xc50	; 0xc50 <_ZN8ElcanRtc18adjust_from_serialEv>
      sys_state = READY;
    16d8:	81 e0       	ldi	r24, 0x01	; 1
    16da:	80 93 d3 02 	sts	0x02D3, r24	; 0x8002d3 <sys_state>
      break;
  }
}
    16de:	6c 96       	adiw	r28, 0x1c	; 28
    16e0:	0f b6       	in	r0, 0x3f	; 63
    16e2:	f8 94       	cli
    16e4:	de bf       	out	0x3e, r29	; 62
    16e6:	0f be       	out	0x3f, r0	; 63
    16e8:	cd bf       	out	0x3d, r28	; 61
    16ea:	df 91       	pop	r29
    16ec:	cf 91       	pop	r28
    16ee:	1f 91       	pop	r17
    16f0:	0f 91       	pop	r16
    16f2:	08 95       	ret

000016f4 <_Z9substringPcS_ii>:
﻿void substring(char src[], char dst[], int p, int l) {
    16f4:	41 50       	subi	r20, 0x01	; 1
    16f6:	51 09       	sbc	r21, r1
    16f8:	fc 01       	movw	r30, r24
    16fa:	e4 0f       	add	r30, r20
    16fc:	f5 1f       	adc	r31, r21
    16fe:	db 01       	movw	r26, r22
	int c = 0;	
	while (c < l) {
    1700:	ad 01       	movw	r20, r26
    1702:	46 1b       	sub	r20, r22
    1704:	57 0b       	sbc	r21, r23
    1706:	42 17       	cp	r20, r18
    1708:	53 07       	cpc	r21, r19
    170a:	1c f4       	brge	.+6      	; 0x1712 <_Z9substringPcS_ii+0x1e>
		dst[c] = src[p+c-1];
    170c:	41 91       	ld	r20, Z+
    170e:	4d 93       	st	X+, r20
﻿void substring(char src[], char dst[], int p, int l) {
	int c = 0;	
	while (c < l) {
    1710:	f7 cf       	rjmp	.-18     	; 0x1700 <_Z9substringPcS_ii+0xc>
		dst[c] = src[p+c-1];
		c++;
	}
	src[c] = '\0';
    1712:	37 ff       	sbrs	r19, 7
    1714:	02 c0       	rjmp	.+4      	; 0x171a <_Z9substringPcS_ii+0x26>
    1716:	20 e0       	ldi	r18, 0x00	; 0
    1718:	30 e0       	ldi	r19, 0x00	; 0
    171a:	fc 01       	movw	r30, r24
    171c:	e2 0f       	add	r30, r18
    171e:	f3 1f       	adc	r31, r19
    1720:	10 82       	st	Z, r1
    1722:	08 95       	ret

00001724 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    1724:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    1726:	91 8d       	ldd	r25, Z+25	; 0x19
    1728:	22 8d       	ldd	r18, Z+26	; 0x1a
    172a:	89 2f       	mov	r24, r25
    172c:	90 e0       	ldi	r25, 0x00	; 0
    172e:	80 5c       	subi	r24, 0xC0	; 192
    1730:	9f 4f       	sbci	r25, 0xFF	; 255
    1732:	82 1b       	sub	r24, r18
    1734:	91 09       	sbc	r25, r1
}
    1736:	8f 73       	andi	r24, 0x3F	; 63
    1738:	99 27       	eor	r25, r25
    173a:	08 95       	ret

0000173c <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    173c:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    173e:	91 8d       	ldd	r25, Z+25	; 0x19
    1740:	82 8d       	ldd	r24, Z+26	; 0x1a
    1742:	98 17       	cp	r25, r24
    1744:	31 f0       	breq	.+12     	; 0x1752 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    1746:	82 8d       	ldd	r24, Z+26	; 0x1a
    1748:	e8 0f       	add	r30, r24
    174a:	f1 1d       	adc	r31, r1
    174c:	85 8d       	ldd	r24, Z+29	; 0x1d
    174e:	90 e0       	ldi	r25, 0x00	; 0
    1750:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1752:	8f ef       	ldi	r24, 0xFF	; 255
    1754:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    1756:	08 95       	ret

00001758 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    1758:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    175a:	91 8d       	ldd	r25, Z+25	; 0x19
    175c:	82 8d       	ldd	r24, Z+26	; 0x1a
    175e:	98 17       	cp	r25, r24
    1760:	61 f0       	breq	.+24     	; 0x177a <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    1762:	82 8d       	ldd	r24, Z+26	; 0x1a
    1764:	df 01       	movw	r26, r30
    1766:	a8 0f       	add	r26, r24
    1768:	b1 1d       	adc	r27, r1
    176a:	5d 96       	adiw	r26, 0x1d	; 29
    176c:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    176e:	92 8d       	ldd	r25, Z+26	; 0x1a
    1770:	9f 5f       	subi	r25, 0xFF	; 255
    1772:	9f 73       	andi	r25, 0x3F	; 63
    1774:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    1776:	90 e0       	ldi	r25, 0x00	; 0
    1778:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    177a:	8f ef       	ldi	r24, 0xFF	; 255
    177c:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    177e:	08 95       	ret

00001780 <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    1780:	fc 01       	movw	r30, r24
    1782:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
    1784:	44 8d       	ldd	r20, Z+28	; 0x1c
    1786:	25 2f       	mov	r18, r21
    1788:	30 e0       	ldi	r19, 0x00	; 0
    178a:	84 2f       	mov	r24, r20
    178c:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    178e:	82 1b       	sub	r24, r18
    1790:	93 0b       	sbc	r25, r19
    1792:	54 17       	cp	r21, r20
    1794:	10 f0       	brcs	.+4      	; 0x179a <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    1796:	cf 96       	adiw	r24, 0x3f	; 63
    1798:	08 95       	ret
  return tail - head - 1;
    179a:	01 97       	sbiw	r24, 0x01	; 1
}
    179c:	08 95       	ret

0000179e <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    179e:	8f e2       	ldi	r24, 0x2F	; 47
    17a0:	9d e0       	ldi	r25, 0x0D	; 13
    17a2:	89 2b       	or	r24, r25
    17a4:	49 f0       	breq	.+18     	; 0x17b8 <_Z14serialEventRunv+0x1a>
    17a6:	80 e0       	ldi	r24, 0x00	; 0
    17a8:	90 e0       	ldi	r25, 0x00	; 0
    17aa:	89 2b       	or	r24, r25
    17ac:	29 f0       	breq	.+10     	; 0x17b8 <_Z14serialEventRunv+0x1a>
    17ae:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <_Z17Serial0_availablev>
    17b2:	81 11       	cpse	r24, r1
    17b4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    17b8:	08 95       	ret

000017ba <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    17ba:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    17bc:	84 8d       	ldd	r24, Z+28	; 0x1c
    17be:	df 01       	movw	r26, r30
    17c0:	a8 0f       	add	r26, r24
    17c2:	b1 1d       	adc	r27, r1
    17c4:	a3 5a       	subi	r26, 0xA3	; 163
    17c6:	bf 4f       	sbci	r27, 0xFF	; 255
    17c8:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    17ca:	84 8d       	ldd	r24, Z+28	; 0x1c
    17cc:	90 e0       	ldi	r25, 0x00	; 0
    17ce:	01 96       	adiw	r24, 0x01	; 1
    17d0:	8f 73       	andi	r24, 0x3F	; 63
    17d2:	99 27       	eor	r25, r25
    17d4:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    17d6:	a6 89       	ldd	r26, Z+22	; 0x16
    17d8:	b7 89       	ldd	r27, Z+23	; 0x17
    17da:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    17dc:	a0 89       	ldd	r26, Z+16	; 0x10
    17de:	b1 89       	ldd	r27, Z+17	; 0x11
    17e0:	8c 91       	ld	r24, X
    17e2:	83 70       	andi	r24, 0x03	; 3
    17e4:	80 64       	ori	r24, 0x40	; 64
    17e6:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    17e8:	93 8d       	ldd	r25, Z+27	; 0x1b
    17ea:	84 8d       	ldd	r24, Z+28	; 0x1c
    17ec:	98 13       	cpse	r25, r24
    17ee:	06 c0       	rjmp	.+12     	; 0x17fc <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    17f0:	02 88       	ldd	r0, Z+18	; 0x12
    17f2:	f3 89       	ldd	r31, Z+19	; 0x13
    17f4:	e0 2d       	mov	r30, r0
    17f6:	80 81       	ld	r24, Z
    17f8:	8f 7d       	andi	r24, 0xDF	; 223
    17fa:	80 83       	st	Z, r24
    17fc:	08 95       	ret

000017fe <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    17fe:	ef 92       	push	r14
    1800:	ff 92       	push	r15
    1802:	0f 93       	push	r16
    1804:	1f 93       	push	r17
    1806:	cf 93       	push	r28
    1808:	df 93       	push	r29
    180a:	ec 01       	movw	r28, r24
  _written = true;
    180c:	81 e0       	ldi	r24, 0x01	; 1
    180e:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    1810:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1812:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1814:	98 13       	cpse	r25, r24
    1816:	05 c0       	rjmp	.+10     	; 0x1822 <_ZN14HardwareSerial5writeEh+0x24>
    1818:	e8 89       	ldd	r30, Y+16	; 0x10
    181a:	f9 89       	ldd	r31, Y+17	; 0x11
    181c:	80 81       	ld	r24, Z
    181e:	85 fd       	sbrc	r24, 5
    1820:	26 c0       	rjmp	.+76     	; 0x186e <_ZN14HardwareSerial5writeEh+0x70>
    1822:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    1824:	0b 8d       	ldd	r16, Y+27	; 0x1b
    1826:	10 e0       	ldi	r17, 0x00	; 0
    1828:	0f 5f       	subi	r16, 0xFF	; 255
    182a:	1f 4f       	sbci	r17, 0xFF	; 255
    182c:	0f 73       	andi	r16, 0x3F	; 63
    182e:	11 27       	eor	r17, r17
    1830:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    1832:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1834:	e8 12       	cpse	r14, r24
    1836:	0c c0       	rjmp	.+24     	; 0x1850 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    1838:	0f b6       	in	r0, 0x3f	; 63
    183a:	07 fc       	sbrc	r0, 7
    183c:	fa cf       	rjmp	.-12     	; 0x1832 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    183e:	e8 89       	ldd	r30, Y+16	; 0x10
    1840:	f9 89       	ldd	r31, Y+17	; 0x11
    1842:	80 81       	ld	r24, Z
    1844:	85 ff       	sbrs	r24, 5
    1846:	f5 cf       	rjmp	.-22     	; 0x1832 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    1848:	ce 01       	movw	r24, r28
    184a:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    184e:	f1 cf       	rjmp	.-30     	; 0x1832 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    1850:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1852:	fe 01       	movw	r30, r28
    1854:	e8 0f       	add	r30, r24
    1856:	f1 1d       	adc	r31, r1
    1858:	e3 5a       	subi	r30, 0xA3	; 163
    185a:	ff 4f       	sbci	r31, 0xFF	; 255
    185c:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    185e:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1860:	f8 94       	cli
    _tx_buffer_head = i;
    1862:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    1864:	ea 89       	ldd	r30, Y+18	; 0x12
    1866:	fb 89       	ldd	r31, Y+19	; 0x13
    1868:	80 81       	ld	r24, Z
    186a:	80 62       	ori	r24, 0x20	; 32
    186c:	0a c0       	rjmp	.+20     	; 0x1882 <_ZN14HardwareSerial5writeEh+0x84>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    186e:	9f b7       	in	r25, 0x3f	; 63
    1870:	f8 94       	cli
      *_udr = c;
    1872:	ee 89       	ldd	r30, Y+22	; 0x16
    1874:	ff 89       	ldd	r31, Y+23	; 0x17
    1876:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    1878:	e8 89       	ldd	r30, Y+16	; 0x10
    187a:	f9 89       	ldd	r31, Y+17	; 0x11
    187c:	80 81       	ld	r24, Z
    187e:	83 70       	andi	r24, 0x03	; 3
    1880:	80 64       	ori	r24, 0x40	; 64
    1882:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1884:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
    1886:	81 e0       	ldi	r24, 0x01	; 1
    1888:	90 e0       	ldi	r25, 0x00	; 0
    188a:	df 91       	pop	r29
    188c:	cf 91       	pop	r28
    188e:	1f 91       	pop	r17
    1890:	0f 91       	pop	r16
    1892:	ff 90       	pop	r15
    1894:	ef 90       	pop	r14
    1896:	08 95       	ret

00001898 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    1898:	cf 93       	push	r28
    189a:	df 93       	push	r29
    189c:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    189e:	88 8d       	ldd	r24, Y+24	; 0x18
    18a0:	88 23       	and	r24, r24
    18a2:	c9 f0       	breq	.+50     	; 0x18d6 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    18a4:	ea 89       	ldd	r30, Y+18	; 0x12
    18a6:	fb 89       	ldd	r31, Y+19	; 0x13
    18a8:	80 81       	ld	r24, Z
    18aa:	85 fd       	sbrc	r24, 5
    18ac:	05 c0       	rjmp	.+10     	; 0x18b8 <_ZN14HardwareSerial5flushEv+0x20>
    18ae:	a8 89       	ldd	r26, Y+16	; 0x10
    18b0:	b9 89       	ldd	r27, Y+17	; 0x11
    18b2:	8c 91       	ld	r24, X
    18b4:	86 fd       	sbrc	r24, 6
    18b6:	0f c0       	rjmp	.+30     	; 0x18d6 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    18b8:	0f b6       	in	r0, 0x3f	; 63
    18ba:	07 fc       	sbrc	r0, 7
    18bc:	f5 cf       	rjmp	.-22     	; 0x18a8 <_ZN14HardwareSerial5flushEv+0x10>
    18be:	80 81       	ld	r24, Z
    18c0:	85 ff       	sbrs	r24, 5
    18c2:	f2 cf       	rjmp	.-28     	; 0x18a8 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    18c4:	a8 89       	ldd	r26, Y+16	; 0x10
    18c6:	b9 89       	ldd	r27, Y+17	; 0x11
    18c8:	8c 91       	ld	r24, X
    18ca:	85 ff       	sbrs	r24, 5
    18cc:	ed cf       	rjmp	.-38     	; 0x18a8 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    18ce:	ce 01       	movw	r24, r28
    18d0:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    18d4:	e7 cf       	rjmp	.-50     	; 0x18a4 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    18d6:	df 91       	pop	r29
    18d8:	cf 91       	pop	r28
    18da:	08 95       	ret

000018dc <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    18dc:	cf 92       	push	r12
    18de:	df 92       	push	r13
    18e0:	ef 92       	push	r14
    18e2:	ff 92       	push	r15
    18e4:	1f 93       	push	r17
    18e6:	cf 93       	push	r28
    18e8:	df 93       	push	r29
    18ea:	ec 01       	movw	r28, r24
    18ec:	6a 01       	movw	r12, r20
    18ee:	7b 01       	movw	r14, r22
    18f0:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    18f2:	e8 89       	ldd	r30, Y+16	; 0x10
    18f4:	f9 89       	ldd	r31, Y+17	; 0x11
    18f6:	82 e0       	ldi	r24, 0x02	; 2
    18f8:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    18fa:	41 15       	cp	r20, r1
    18fc:	51 4e       	sbci	r21, 0xE1	; 225
    18fe:	61 05       	cpc	r22, r1
    1900:	71 05       	cpc	r23, r1
    1902:	b1 f0       	breq	.+44     	; 0x1930 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    1904:	60 e0       	ldi	r22, 0x00	; 0
    1906:	79 e0       	ldi	r23, 0x09	; 9
    1908:	8d e3       	ldi	r24, 0x3D	; 61
    190a:	90 e0       	ldi	r25, 0x00	; 0
    190c:	a7 01       	movw	r20, r14
    190e:	96 01       	movw	r18, r12
    1910:	0e 94 72 21 	call	0x42e4	; 0x42e4 <__udivmodsi4>
    1914:	da 01       	movw	r26, r20
    1916:	c9 01       	movw	r24, r18
    1918:	01 97       	sbiw	r24, 0x01	; 1
    191a:	a1 09       	sbc	r26, r1
    191c:	b1 09       	sbc	r27, r1
    191e:	b6 95       	lsr	r27
    1920:	a7 95       	ror	r26
    1922:	97 95       	ror	r25
    1924:	87 95       	ror	r24
    1926:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1928:	21 15       	cp	r18, r1
    192a:	80 e1       	ldi	r24, 0x10	; 16
    192c:	38 07       	cpc	r19, r24
    192e:	a8 f0       	brcs	.+42     	; 0x195a <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    1930:	e8 89       	ldd	r30, Y+16	; 0x10
    1932:	f9 89       	ldd	r31, Y+17	; 0x11
    1934:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    1936:	60 e8       	ldi	r22, 0x80	; 128
    1938:	74 e8       	ldi	r23, 0x84	; 132
    193a:	8e e1       	ldi	r24, 0x1E	; 30
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	a7 01       	movw	r20, r14
    1940:	96 01       	movw	r18, r12
    1942:	0e 94 72 21 	call	0x42e4	; 0x42e4 <__udivmodsi4>
    1946:	da 01       	movw	r26, r20
    1948:	c9 01       	movw	r24, r18
    194a:	01 97       	sbiw	r24, 0x01	; 1
    194c:	a1 09       	sbc	r26, r1
    194e:	b1 09       	sbc	r27, r1
    1950:	b6 95       	lsr	r27
    1952:	a7 95       	ror	r26
    1954:	97 95       	ror	r25
    1956:	87 95       	ror	r24
    1958:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    195a:	ec 85       	ldd	r30, Y+12	; 0x0c
    195c:	fd 85       	ldd	r31, Y+13	; 0x0d
    195e:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    1960:	ee 85       	ldd	r30, Y+14	; 0x0e
    1962:	ff 85       	ldd	r31, Y+15	; 0x0f
    1964:	20 83       	st	Z, r18

  _written = false;
    1966:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    1968:	ec 89       	ldd	r30, Y+20	; 0x14
    196a:	fd 89       	ldd	r31, Y+21	; 0x15
    196c:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    196e:	ea 89       	ldd	r30, Y+18	; 0x12
    1970:	fb 89       	ldd	r31, Y+19	; 0x13
    1972:	80 81       	ld	r24, Z
    1974:	80 61       	ori	r24, 0x10	; 16
    1976:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    1978:	ea 89       	ldd	r30, Y+18	; 0x12
    197a:	fb 89       	ldd	r31, Y+19	; 0x13
    197c:	80 81       	ld	r24, Z
    197e:	88 60       	ori	r24, 0x08	; 8
    1980:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    1982:	ea 89       	ldd	r30, Y+18	; 0x12
    1984:	fb 89       	ldd	r31, Y+19	; 0x13
    1986:	80 81       	ld	r24, Z
    1988:	80 68       	ori	r24, 0x80	; 128
    198a:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    198c:	ea 89       	ldd	r30, Y+18	; 0x12
    198e:	fb 89       	ldd	r31, Y+19	; 0x13
    1990:	80 81       	ld	r24, Z
    1992:	8f 7d       	andi	r24, 0xDF	; 223
    1994:	80 83       	st	Z, r24
}
    1996:	df 91       	pop	r29
    1998:	cf 91       	pop	r28
    199a:	1f 91       	pop	r17
    199c:	ff 90       	pop	r15
    199e:	ef 90       	pop	r14
    19a0:	df 90       	pop	r13
    19a2:	cf 90       	pop	r12
    19a4:	08 95       	ret

000019a6 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    19a6:	80 e0       	ldi	r24, 0x00	; 0
    19a8:	90 e0       	ldi	r25, 0x00	; 0
    19aa:	08 95       	ret

000019ac <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    19ac:	08 95       	ret

000019ae <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    19ae:	1f 92       	push	r1
    19b0:	0f 92       	push	r0
    19b2:	0f b6       	in	r0, 0x3f	; 63
    19b4:	0f 92       	push	r0
    19b6:	11 24       	eor	r1, r1
    19b8:	2f 93       	push	r18
    19ba:	8f 93       	push	r24
    19bc:	9f 93       	push	r25
    19be:	ef 93       	push	r30
    19c0:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    19c2:	e0 91 e4 02 	lds	r30, 0x02E4	; 0x8002e4 <Serial+0x10>
    19c6:	f0 91 e5 02 	lds	r31, 0x02E5	; 0x8002e5 <Serial+0x11>
    19ca:	80 81       	ld	r24, Z
    19cc:	e0 91 ea 02 	lds	r30, 0x02EA	; 0x8002ea <Serial+0x16>
    19d0:	f0 91 eb 02 	lds	r31, 0x02EB	; 0x8002eb <Serial+0x17>
    19d4:	82 fd       	sbrc	r24, 2
    19d6:	12 c0       	rjmp	.+36     	; 0x19fc <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    19d8:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    19da:	80 91 ed 02 	lds	r24, 0x02ED	; 0x8002ed <Serial+0x19>
    19de:	8f 5f       	subi	r24, 0xFF	; 255
    19e0:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    19e2:	20 91 ee 02 	lds	r18, 0x02EE	; 0x8002ee <Serial+0x1a>
    19e6:	82 17       	cp	r24, r18
    19e8:	51 f0       	breq	.+20     	; 0x19fe <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    19ea:	e0 91 ed 02 	lds	r30, 0x02ED	; 0x8002ed <Serial+0x19>
    19ee:	f0 e0       	ldi	r31, 0x00	; 0
    19f0:	ec 52       	subi	r30, 0x2C	; 44
    19f2:	fd 4f       	sbci	r31, 0xFD	; 253
    19f4:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    19f6:	80 93 ed 02 	sts	0x02ED, r24	; 0x8002ed <Serial+0x19>
    19fa:	01 c0       	rjmp	.+2      	; 0x19fe <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    19fc:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    19fe:	ff 91       	pop	r31
    1a00:	ef 91       	pop	r30
    1a02:	9f 91       	pop	r25
    1a04:	8f 91       	pop	r24
    1a06:	2f 91       	pop	r18
    1a08:	0f 90       	pop	r0
    1a0a:	0f be       	out	0x3f, r0	; 63
    1a0c:	0f 90       	pop	r0
    1a0e:	1f 90       	pop	r1
    1a10:	18 95       	reti

00001a12 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    1a12:	1f 92       	push	r1
    1a14:	0f 92       	push	r0
    1a16:	0f b6       	in	r0, 0x3f	; 63
    1a18:	0f 92       	push	r0
    1a1a:	11 24       	eor	r1, r1
    1a1c:	2f 93       	push	r18
    1a1e:	3f 93       	push	r19
    1a20:	4f 93       	push	r20
    1a22:	5f 93       	push	r21
    1a24:	6f 93       	push	r22
    1a26:	7f 93       	push	r23
    1a28:	8f 93       	push	r24
    1a2a:	9f 93       	push	r25
    1a2c:	af 93       	push	r26
    1a2e:	bf 93       	push	r27
    1a30:	ef 93       	push	r30
    1a32:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    1a34:	84 ed       	ldi	r24, 0xD4	; 212
    1a36:	92 e0       	ldi	r25, 0x02	; 2
    1a38:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    1a3c:	ff 91       	pop	r31
    1a3e:	ef 91       	pop	r30
    1a40:	bf 91       	pop	r27
    1a42:	af 91       	pop	r26
    1a44:	9f 91       	pop	r25
    1a46:	8f 91       	pop	r24
    1a48:	7f 91       	pop	r23
    1a4a:	6f 91       	pop	r22
    1a4c:	5f 91       	pop	r21
    1a4e:	4f 91       	pop	r20
    1a50:	3f 91       	pop	r19
    1a52:	2f 91       	pop	r18
    1a54:	0f 90       	pop	r0
    1a56:	0f be       	out	0x3f, r0	; 63
    1a58:	0f 90       	pop	r0
    1a5a:	1f 90       	pop	r1
    1a5c:	18 95       	reti

00001a5e <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    1a5e:	84 ed       	ldi	r24, 0xD4	; 212
    1a60:	92 e0       	ldi	r25, 0x02	; 2
    1a62:	0e 94 92 0b 	call	0x1724	; 0x1724 <_ZN14HardwareSerial9availableEv>
    1a66:	21 e0       	ldi	r18, 0x01	; 1
    1a68:	89 2b       	or	r24, r25
    1a6a:	09 f4       	brne	.+2      	; 0x1a6e <_Z17Serial0_availablev+0x10>
    1a6c:	20 e0       	ldi	r18, 0x00	; 0
}
    1a6e:	82 2f       	mov	r24, r18
    1a70:	08 95       	ret

00001a72 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    1a72:	e4 ed       	ldi	r30, 0xD4	; 212
    1a74:	f2 e0       	ldi	r31, 0x02	; 2
    1a76:	13 82       	std	Z+3, r1	; 0x03
    1a78:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    1a7a:	88 ee       	ldi	r24, 0xE8	; 232
    1a7c:	93 e0       	ldi	r25, 0x03	; 3
    1a7e:	a0 e0       	ldi	r26, 0x00	; 0
    1a80:	b0 e0       	ldi	r27, 0x00	; 0
    1a82:	84 83       	std	Z+4, r24	; 0x04
    1a84:	95 83       	std	Z+5, r25	; 0x05
    1a86:	a6 83       	std	Z+6, r26	; 0x06
    1a88:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    1a8a:	89 e4       	ldi	r24, 0x49	; 73
    1a8c:	92 e0       	ldi	r25, 0x02	; 2
    1a8e:	91 83       	std	Z+1, r25	; 0x01
    1a90:	80 83       	st	Z, r24
    1a92:	85 ec       	ldi	r24, 0xC5	; 197
    1a94:	90 e0       	ldi	r25, 0x00	; 0
    1a96:	95 87       	std	Z+13, r25	; 0x0d
    1a98:	84 87       	std	Z+12, r24	; 0x0c
    1a9a:	84 ec       	ldi	r24, 0xC4	; 196
    1a9c:	90 e0       	ldi	r25, 0x00	; 0
    1a9e:	97 87       	std	Z+15, r25	; 0x0f
    1aa0:	86 87       	std	Z+14, r24	; 0x0e
    1aa2:	80 ec       	ldi	r24, 0xC0	; 192
    1aa4:	90 e0       	ldi	r25, 0x00	; 0
    1aa6:	91 8b       	std	Z+17, r25	; 0x11
    1aa8:	80 8b       	std	Z+16, r24	; 0x10
    1aaa:	81 ec       	ldi	r24, 0xC1	; 193
    1aac:	90 e0       	ldi	r25, 0x00	; 0
    1aae:	93 8b       	std	Z+19, r25	; 0x13
    1ab0:	82 8b       	std	Z+18, r24	; 0x12
    1ab2:	82 ec       	ldi	r24, 0xC2	; 194
    1ab4:	90 e0       	ldi	r25, 0x00	; 0
    1ab6:	95 8b       	std	Z+21, r25	; 0x15
    1ab8:	84 8b       	std	Z+20, r24	; 0x14
    1aba:	86 ec       	ldi	r24, 0xC6	; 198
    1abc:	90 e0       	ldi	r25, 0x00	; 0
    1abe:	97 8b       	std	Z+23, r25	; 0x17
    1ac0:	86 8b       	std	Z+22, r24	; 0x16
    1ac2:	11 8e       	std	Z+25, r1	; 0x19
    1ac4:	12 8e       	std	Z+26, r1	; 0x1a
    1ac6:	13 8e       	std	Z+27, r1	; 0x1b
    1ac8:	14 8e       	std	Z+28, r1	; 0x1c
    1aca:	08 95       	ret

00001acc <initVariant>:
    1acc:	08 95       	ret

00001ace <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    1ace:	0e 94 04 13 	call	0x2608	; 0x2608 <init>

	initVariant();
    1ad2:	0e 94 66 0d 	call	0x1acc	; 0x1acc <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    1ad6:	0e 94 6b 07 	call	0xed6	; 0xed6 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    1ada:	cf ec       	ldi	r28, 0xCF	; 207
    1adc:	db e0       	ldi	r29, 0x0B	; 11
#endif
	
	setup();
    
	for (;;) {
		loop();
    1ade:	0e 94 9c 0a 	call	0x1538	; 0x1538 <loop>
		if (serialEventRun) serialEventRun();
    1ae2:	20 97       	sbiw	r28, 0x00	; 0
    1ae4:	e1 f3       	breq	.-8      	; 0x1ade <main+0x10>
    1ae6:	0e 94 cf 0b 	call	0x179e	; 0x179e <_Z14serialEventRunv>
    1aea:	f9 cf       	rjmp	.-14     	; 0x1ade <main+0x10>

00001aec <_ZN5Print5writeEPKhj>:
size_t Print::println(unsigned int num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    1aec:	cf 92       	push	r12
    1aee:	df 92       	push	r13
    1af0:	ef 92       	push	r14
    1af2:	ff 92       	push	r15
    1af4:	0f 93       	push	r16
    1af6:	1f 93       	push	r17
    1af8:	cf 93       	push	r28
    1afa:	df 93       	push	r29
    1afc:	6c 01       	movw	r12, r24
    1afe:	7a 01       	movw	r14, r20
    1b00:	8b 01       	movw	r16, r22
    1b02:	c0 e0       	ldi	r28, 0x00	; 0
    1b04:	d0 e0       	ldi	r29, 0x00	; 0
    1b06:	ce 15       	cp	r28, r14
    1b08:	df 05       	cpc	r29, r15
    1b0a:	81 f0       	breq	.+32     	; 0x1b2c <_ZN5Print5writeEPKhj+0x40>
    1b0c:	d8 01       	movw	r26, r16
    1b0e:	6d 91       	ld	r22, X+
    1b10:	8d 01       	movw	r16, r26
    1b12:	d6 01       	movw	r26, r12
    1b14:	ed 91       	ld	r30, X+
    1b16:	fc 91       	ld	r31, X
    1b18:	01 90       	ld	r0, Z+
    1b1a:	f0 81       	ld	r31, Z
    1b1c:	e0 2d       	mov	r30, r0
    1b1e:	c6 01       	movw	r24, r12
    1b20:	09 95       	icall
    1b22:	89 2b       	or	r24, r25
    1b24:	11 f0       	breq	.+4      	; 0x1b2a <_ZN5Print5writeEPKhj+0x3e>
    1b26:	21 96       	adiw	r28, 0x01	; 1
    1b28:	ee cf       	rjmp	.-36     	; 0x1b06 <_ZN5Print5writeEPKhj+0x1a>
    1b2a:	7e 01       	movw	r14, r28
    1b2c:	c7 01       	movw	r24, r14
    1b2e:	df 91       	pop	r29
    1b30:	cf 91       	pop	r28
    1b32:	1f 91       	pop	r17
    1b34:	0f 91       	pop	r16
    1b36:	ff 90       	pop	r15
    1b38:	ef 90       	pop	r14
    1b3a:	df 90       	pop	r13
    1b3c:	cf 90       	pop	r12
    1b3e:	08 95       	ret

00001b40 <_ZN5Print5printEPK19__FlashStringHelper>:
    1b40:	ef 92       	push	r14
    1b42:	ff 92       	push	r15
    1b44:	0f 93       	push	r16
    1b46:	1f 93       	push	r17
    1b48:	cf 93       	push	r28
    1b4a:	df 93       	push	r29
    1b4c:	8c 01       	movw	r16, r24
    1b4e:	7b 01       	movw	r14, r22
    1b50:	c0 e0       	ldi	r28, 0x00	; 0
    1b52:	d0 e0       	ldi	r29, 0x00	; 0
    1b54:	f7 01       	movw	r30, r14
    1b56:	ec 0f       	add	r30, r28
    1b58:	fd 1f       	adc	r31, r29
    1b5a:	64 91       	lpm	r22, Z
    1b5c:	66 23       	and	r22, r22
    1b5e:	61 f0       	breq	.+24     	; 0x1b78 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    1b60:	d8 01       	movw	r26, r16
    1b62:	ed 91       	ld	r30, X+
    1b64:	fc 91       	ld	r31, X
    1b66:	01 90       	ld	r0, Z+
    1b68:	f0 81       	ld	r31, Z
    1b6a:	e0 2d       	mov	r30, r0
    1b6c:	c8 01       	movw	r24, r16
    1b6e:	09 95       	icall
    1b70:	89 2b       	or	r24, r25
    1b72:	11 f0       	breq	.+4      	; 0x1b78 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    1b74:	21 96       	adiw	r28, 0x01	; 1
    1b76:	ee cf       	rjmp	.-36     	; 0x1b54 <_ZN5Print5printEPK19__FlashStringHelper+0x14>
    1b78:	ce 01       	movw	r24, r28
    1b7a:	df 91       	pop	r29
    1b7c:	cf 91       	pop	r28
    1b7e:	1f 91       	pop	r17
    1b80:	0f 91       	pop	r16
    1b82:	ff 90       	pop	r15
    1b84:	ef 90       	pop	r14
    1b86:	08 95       	ret

00001b88 <_ZN5Print5printEPKc>:
    1b88:	0c 94 5d 03 	jmp	0x6ba	; 0x6ba <_ZN5Print5writeEPKc>

00001b8c <_ZN5Print5printEc>:
    1b8c:	dc 01       	movw	r26, r24
    1b8e:	ed 91       	ld	r30, X+
    1b90:	fc 91       	ld	r31, X
    1b92:	01 90       	ld	r0, Z+
    1b94:	f0 81       	ld	r31, Z
    1b96:	e0 2d       	mov	r30, r0
    1b98:	09 94       	ijmp

00001b9a <_ZN5Print7printlnEv>:
    1b9a:	61 e6       	ldi	r22, 0x61	; 97
    1b9c:	71 e0       	ldi	r23, 0x01	; 1
    1b9e:	0c 94 5d 03 	jmp	0x6ba	; 0x6ba <_ZN5Print5writeEPKc>

00001ba2 <_ZN5Print7printlnEPKc>:
    1ba2:	0f 93       	push	r16
    1ba4:	1f 93       	push	r17
    1ba6:	cf 93       	push	r28
    1ba8:	df 93       	push	r29
    1baa:	ec 01       	movw	r28, r24
    1bac:	0e 94 5d 03 	call	0x6ba	; 0x6ba <_ZN5Print5writeEPKc>
    1bb0:	8c 01       	movw	r16, r24
    1bb2:	ce 01       	movw	r24, r28
    1bb4:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <_ZN5Print7printlnEv>
    1bb8:	80 0f       	add	r24, r16
    1bba:	91 1f       	adc	r25, r17
    1bbc:	df 91       	pop	r29
    1bbe:	cf 91       	pop	r28
    1bc0:	1f 91       	pop	r17
    1bc2:	0f 91       	pop	r16
    1bc4:	08 95       	ret

00001bc6 <_ZN5Print11printNumberEmh>:
    1bc6:	8f 92       	push	r8
    1bc8:	9f 92       	push	r9
    1bca:	af 92       	push	r10
    1bcc:	bf 92       	push	r11
    1bce:	ef 92       	push	r14
    1bd0:	ff 92       	push	r15
    1bd2:	0f 93       	push	r16
    1bd4:	1f 93       	push	r17
    1bd6:	cf 93       	push	r28
    1bd8:	df 93       	push	r29
    1bda:	cd b7       	in	r28, 0x3d	; 61
    1bdc:	de b7       	in	r29, 0x3e	; 62
    1bde:	a1 97       	sbiw	r28, 0x21	; 33
    1be0:	0f b6       	in	r0, 0x3f	; 63
    1be2:	f8 94       	cli
    1be4:	de bf       	out	0x3e, r29	; 62
    1be6:	0f be       	out	0x3f, r0	; 63
    1be8:	cd bf       	out	0x3d, r28	; 61
    1bea:	7c 01       	movw	r14, r24
    1bec:	fa 01       	movw	r30, r20
    1bee:	cb 01       	movw	r24, r22
    1bf0:	19 a2       	std	Y+33, r1	; 0x21
    1bf2:	22 30       	cpi	r18, 0x02	; 2
    1bf4:	08 f4       	brcc	.+2      	; 0x1bf8 <_ZN5Print11printNumberEmh+0x32>
    1bf6:	2a e0       	ldi	r18, 0x0A	; 10
    1bf8:	8e 01       	movw	r16, r28
    1bfa:	0f 5d       	subi	r16, 0xDF	; 223
    1bfc:	1f 4f       	sbci	r17, 0xFF	; 255
    1bfe:	82 2e       	mov	r8, r18
    1c00:	91 2c       	mov	r9, r1
    1c02:	a1 2c       	mov	r10, r1
    1c04:	b1 2c       	mov	r11, r1
    1c06:	bf 01       	movw	r22, r30
    1c08:	a5 01       	movw	r20, r10
    1c0a:	94 01       	movw	r18, r8
    1c0c:	0e 94 72 21 	call	0x42e4	; 0x42e4 <__udivmodsi4>
    1c10:	f9 01       	movw	r30, r18
    1c12:	ca 01       	movw	r24, r20
    1c14:	01 50       	subi	r16, 0x01	; 1
    1c16:	11 09       	sbc	r17, r1
    1c18:	6a 30       	cpi	r22, 0x0A	; 10
    1c1a:	10 f4       	brcc	.+4      	; 0x1c20 <_ZN5Print11printNumberEmh+0x5a>
    1c1c:	60 5d       	subi	r22, 0xD0	; 208
    1c1e:	01 c0       	rjmp	.+2      	; 0x1c22 <_ZN5Print11printNumberEmh+0x5c>
    1c20:	69 5c       	subi	r22, 0xC9	; 201
    1c22:	d8 01       	movw	r26, r16
    1c24:	6c 93       	st	X, r22
    1c26:	23 2b       	or	r18, r19
    1c28:	24 2b       	or	r18, r20
    1c2a:	25 2b       	or	r18, r21
    1c2c:	61 f7       	brne	.-40     	; 0x1c06 <_ZN5Print11printNumberEmh+0x40>
    1c2e:	b8 01       	movw	r22, r16
    1c30:	c7 01       	movw	r24, r14
    1c32:	0e 94 5d 03 	call	0x6ba	; 0x6ba <_ZN5Print5writeEPKc>
    1c36:	a1 96       	adiw	r28, 0x21	; 33
    1c38:	0f b6       	in	r0, 0x3f	; 63
    1c3a:	f8 94       	cli
    1c3c:	de bf       	out	0x3e, r29	; 62
    1c3e:	0f be       	out	0x3f, r0	; 63
    1c40:	cd bf       	out	0x3d, r28	; 61
    1c42:	df 91       	pop	r29
    1c44:	cf 91       	pop	r28
    1c46:	1f 91       	pop	r17
    1c48:	0f 91       	pop	r16
    1c4a:	ff 90       	pop	r15
    1c4c:	ef 90       	pop	r14
    1c4e:	bf 90       	pop	r11
    1c50:	af 90       	pop	r10
    1c52:	9f 90       	pop	r9
    1c54:	8f 90       	pop	r8
    1c56:	08 95       	ret

00001c58 <_ZN5Print5printEmi>:
    1c58:	21 15       	cp	r18, r1
    1c5a:	31 05       	cpc	r19, r1
    1c5c:	41 f4       	brne	.+16     	; 0x1c6e <_ZN5Print5printEmi+0x16>
    1c5e:	dc 01       	movw	r26, r24
    1c60:	ed 91       	ld	r30, X+
    1c62:	fc 91       	ld	r31, X
    1c64:	01 90       	ld	r0, Z+
    1c66:	f0 81       	ld	r31, Z
    1c68:	e0 2d       	mov	r30, r0
    1c6a:	64 2f       	mov	r22, r20
    1c6c:	09 94       	ijmp
    1c6e:	0c 94 e3 0d 	jmp	0x1bc6	; 0x1bc6 <_ZN5Print11printNumberEmh>

00001c72 <_ZN5Print5printEhi>:
    1c72:	9a 01       	movw	r18, r20
    1c74:	46 2f       	mov	r20, r22
    1c76:	50 e0       	ldi	r21, 0x00	; 0
    1c78:	60 e0       	ldi	r22, 0x00	; 0
    1c7a:	70 e0       	ldi	r23, 0x00	; 0
    1c7c:	0c 94 2c 0e 	jmp	0x1c58	; 0x1c58 <_ZN5Print5printEmi>

00001c80 <_ZN5Print7printlnEhi>:
    1c80:	0f 93       	push	r16
    1c82:	1f 93       	push	r17
    1c84:	cf 93       	push	r28
    1c86:	df 93       	push	r29
    1c88:	ec 01       	movw	r28, r24
    1c8a:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <_ZN5Print5printEhi>
    1c8e:	8c 01       	movw	r16, r24
    1c90:	ce 01       	movw	r24, r28
    1c92:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <_ZN5Print7printlnEv>
    1c96:	80 0f       	add	r24, r16
    1c98:	91 1f       	adc	r25, r17
    1c9a:	df 91       	pop	r29
    1c9c:	cf 91       	pop	r28
    1c9e:	1f 91       	pop	r17
    1ca0:	0f 91       	pop	r16
    1ca2:	08 95       	ret

00001ca4 <_ZN5Print5printEji>:
    1ca4:	9a 01       	movw	r18, r20
    1ca6:	ab 01       	movw	r20, r22
    1ca8:	60 e0       	ldi	r22, 0x00	; 0
    1caa:	70 e0       	ldi	r23, 0x00	; 0
    1cac:	0c 94 2c 0e 	jmp	0x1c58	; 0x1c58 <_ZN5Print5printEmi>

00001cb0 <_ZN5Print7printlnEmi>:
  n += println();
  return n;
}

size_t Print::println(unsigned long num, int base)
{
    1cb0:	0f 93       	push	r16
    1cb2:	1f 93       	push	r17
    1cb4:	cf 93       	push	r28
    1cb6:	df 93       	push	r29
    1cb8:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    1cba:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <_ZN5Print5printEmi>
    1cbe:	8c 01       	movw	r16, r24
  n += println();
    1cc0:	ce 01       	movw	r24, r28
    1cc2:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <_ZN5Print7printlnEv>
  return n;
}
    1cc6:	80 0f       	add	r24, r16
    1cc8:	91 1f       	adc	r25, r17
    1cca:	df 91       	pop	r29
    1ccc:	cf 91       	pop	r28
    1cce:	1f 91       	pop	r17
    1cd0:	0f 91       	pop	r16
    1cd2:	08 95       	ret

00001cd4 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
    1cd4:	cf 92       	push	r12
    1cd6:	df 92       	push	r13
    1cd8:	ef 92       	push	r14
    1cda:	ff 92       	push	r15
    1cdc:	0f 93       	push	r16
    1cde:	1f 93       	push	r17
    1ce0:	cf 93       	push	r28
    1ce2:	df 93       	push	r29
  if (base == 0) {
    1ce4:	21 15       	cp	r18, r1
    1ce6:	31 05       	cpc	r19, r1
    1ce8:	81 f4       	brne	.+32     	; 0x1d0a <_ZN5Print5printEli+0x36>
    return write(n);
    1cea:	dc 01       	movw	r26, r24
    1cec:	ed 91       	ld	r30, X+
    1cee:	fc 91       	ld	r31, X
    1cf0:	01 90       	ld	r0, Z+
    1cf2:	f0 81       	ld	r31, Z
    1cf4:	e0 2d       	mov	r30, r0
    1cf6:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    1cf8:	df 91       	pop	r29
    1cfa:	cf 91       	pop	r28
    1cfc:	1f 91       	pop	r17
    1cfe:	0f 91       	pop	r16
    1d00:	ff 90       	pop	r15
    1d02:	ef 90       	pop	r14
    1d04:	df 90       	pop	r13
    1d06:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
    1d08:	09 94       	ijmp
  } else if (base == 10) {
    1d0a:	2a 30       	cpi	r18, 0x0A	; 10
    1d0c:	31 05       	cpc	r19, r1
    1d0e:	01 f5       	brne	.+64     	; 0x1d50 <_ZN5Print5printEli+0x7c>
    if (n < 0) {
    1d10:	77 ff       	sbrs	r23, 7
    1d12:	1d c0       	rjmp	.+58     	; 0x1d4e <_ZN5Print5printEli+0x7a>
    1d14:	6a 01       	movw	r12, r20
    1d16:	7b 01       	movw	r14, r22
    1d18:	ec 01       	movw	r28, r24
      int t = print('-');
    1d1a:	6d e2       	ldi	r22, 0x2D	; 45
    1d1c:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <_ZN5Print5printEc>
    1d20:	8c 01       	movw	r16, r24
      n = -n;
      return printNumber(n, 10) + t;
    1d22:	44 27       	eor	r20, r20
    1d24:	55 27       	eor	r21, r21
    1d26:	ba 01       	movw	r22, r20
    1d28:	4c 19       	sub	r20, r12
    1d2a:	5d 09       	sbc	r21, r13
    1d2c:	6e 09       	sbc	r22, r14
    1d2e:	7f 09       	sbc	r23, r15
    1d30:	2a e0       	ldi	r18, 0x0A	; 10
    1d32:	ce 01       	movw	r24, r28
    1d34:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <_ZN5Print11printNumberEmh>
    1d38:	80 0f       	add	r24, r16
    1d3a:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    1d3c:	df 91       	pop	r29
    1d3e:	cf 91       	pop	r28
    1d40:	1f 91       	pop	r17
    1d42:	0f 91       	pop	r16
    1d44:	ff 90       	pop	r15
    1d46:	ef 90       	pop	r14
    1d48:	df 90       	pop	r13
    1d4a:	cf 90       	pop	r12
    1d4c:	08 95       	ret
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
    1d4e:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
  }
}
    1d50:	df 91       	pop	r29
    1d52:	cf 91       	pop	r28
    1d54:	1f 91       	pop	r17
    1d56:	0f 91       	pop	r16
    1d58:	ff 90       	pop	r15
    1d5a:	ef 90       	pop	r14
    1d5c:	df 90       	pop	r13
    1d5e:	cf 90       	pop	r12
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
    1d60:	0c 94 e3 0d 	jmp	0x1bc6	; 0x1bc6 <_ZN5Print11printNumberEmh>

00001d64 <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
    1d64:	9a 01       	movw	r18, r20
  return print((long) n, base);
    1d66:	ab 01       	movw	r20, r22
    1d68:	77 0f       	add	r23, r23
    1d6a:	66 0b       	sbc	r22, r22
    1d6c:	77 0b       	sbc	r23, r23
    1d6e:	0c 94 6a 0e 	jmp	0x1cd4	; 0x1cd4 <_ZN5Print5printEli>

00001d72 <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
    1d72:	0f 93       	push	r16
    1d74:	1f 93       	push	r17
    1d76:	cf 93       	push	r28
    1d78:	df 93       	push	r29
    1d7a:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    1d7c:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <_ZN5Print5printEii>
    1d80:	8c 01       	movw	r16, r24
  n += println();
    1d82:	ce 01       	movw	r24, r28
    1d84:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <_ZN5Print7printlnEv>
  return n;
}
    1d88:	80 0f       	add	r24, r16
    1d8a:	91 1f       	adc	r25, r17
    1d8c:	df 91       	pop	r29
    1d8e:	cf 91       	pop	r28
    1d90:	1f 91       	pop	r17
    1d92:	0f 91       	pop	r16
    1d94:	08 95       	ret

00001d96 <_ZN6Stream9timedReadEv>:
    if (c < 0) break;
    *buffer++ = (char)c;
    count++;
  }
  return count;
}
    1d96:	0f 93       	push	r16
    1d98:	1f 93       	push	r17
    1d9a:	cf 93       	push	r28
    1d9c:	df 93       	push	r29
    1d9e:	ec 01       	movw	r28, r24
    1da0:	0e 94 8c 12 	call	0x2518	; 0x2518 <millis>
    1da4:	68 87       	std	Y+8, r22	; 0x08
    1da6:	79 87       	std	Y+9, r23	; 0x09
    1da8:	8a 87       	std	Y+10, r24	; 0x0a
    1daa:	9b 87       	std	Y+11, r25	; 0x0b
    1dac:	e8 81       	ld	r30, Y
    1dae:	f9 81       	ldd	r31, Y+1	; 0x01
    1db0:	02 84       	ldd	r0, Z+10	; 0x0a
    1db2:	f3 85       	ldd	r31, Z+11	; 0x0b
    1db4:	e0 2d       	mov	r30, r0
    1db6:	ce 01       	movw	r24, r28
    1db8:	09 95       	icall
    1dba:	97 ff       	sbrs	r25, 7
    1dbc:	17 c0       	rjmp	.+46     	; 0x1dec <_ZN6Stream9timedReadEv+0x56>
    1dbe:	0e 94 8c 12 	call	0x2518	; 0x2518 <millis>
    1dc2:	08 85       	ldd	r16, Y+8	; 0x08
    1dc4:	19 85       	ldd	r17, Y+9	; 0x09
    1dc6:	2a 85       	ldd	r18, Y+10	; 0x0a
    1dc8:	3b 85       	ldd	r19, Y+11	; 0x0b
    1dca:	dc 01       	movw	r26, r24
    1dcc:	cb 01       	movw	r24, r22
    1dce:	80 1b       	sub	r24, r16
    1dd0:	91 0b       	sbc	r25, r17
    1dd2:	a2 0b       	sbc	r26, r18
    1dd4:	b3 0b       	sbc	r27, r19
    1dd6:	0c 81       	ldd	r16, Y+4	; 0x04
    1dd8:	1d 81       	ldd	r17, Y+5	; 0x05
    1dda:	2e 81       	ldd	r18, Y+6	; 0x06
    1ddc:	3f 81       	ldd	r19, Y+7	; 0x07
    1dde:	80 17       	cp	r24, r16
    1de0:	91 07       	cpc	r25, r17
    1de2:	a2 07       	cpc	r26, r18
    1de4:	b3 07       	cpc	r27, r19
    1de6:	10 f3       	brcs	.-60     	; 0x1dac <_ZN6Stream9timedReadEv+0x16>
    1de8:	8f ef       	ldi	r24, 0xFF	; 255
    1dea:	9f ef       	ldi	r25, 0xFF	; 255
    1dec:	df 91       	pop	r29
    1dee:	cf 91       	pop	r28
    1df0:	1f 91       	pop	r17
    1df2:	0f 91       	pop	r16
    1df4:	08 95       	ret

00001df6 <_ZN6Stream14readBytesUntilEcPcj>:
// as readBytes with terminator character
// terminates if length characters have been read, timeout, or if the terminator character  detected
// returns the number of characters placed in the buffer (0 means no valid data found)

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
    1df6:	af 92       	push	r10
    1df8:	bf 92       	push	r11
    1dfa:	cf 92       	push	r12
    1dfc:	df 92       	push	r13
    1dfe:	ef 92       	push	r14
    1e00:	ff 92       	push	r15
    1e02:	0f 93       	push	r16
    1e04:	1f 93       	push	r17
    1e06:	cf 93       	push	r28
    1e08:	df 93       	push	r29
  if (length < 1) return 0;
    1e0a:	21 15       	cp	r18, r1
    1e0c:	31 05       	cpc	r19, r1
    1e0e:	c1 f0       	breq	.+48     	; 0x1e40 <_ZN6Stream14readBytesUntilEcPcj+0x4a>
    1e10:	89 01       	movw	r16, r18
    1e12:	5c 01       	movw	r10, r24
    1e14:	6a 01       	movw	r12, r20
    1e16:	c0 e0       	ldi	r28, 0x00	; 0
    1e18:	d0 e0       	ldi	r29, 0x00	; 0
  size_t index = 0;
  while (index < length) {
    int c = timedRead();
    if (c < 0 || c == terminator) break;
    1e1a:	e6 2e       	mov	r14, r22
    1e1c:	f1 2c       	mov	r15, r1
size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
  if (length < 1) return 0;
  size_t index = 0;
  while (index < length) {
    int c = timedRead();
    1e1e:	c5 01       	movw	r24, r10
    1e20:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <_ZN6Stream9timedReadEv>
    if (c < 0 || c == terminator) break;
    1e24:	97 fd       	sbrc	r25, 7
    1e26:	0f c0       	rjmp	.+30     	; 0x1e46 <_ZN6Stream14readBytesUntilEcPcj+0x50>
    1e28:	8e 15       	cp	r24, r14
    1e2a:	9f 05       	cpc	r25, r15
    1e2c:	61 f0       	breq	.+24     	; 0x1e46 <_ZN6Stream14readBytesUntilEcPcj+0x50>
    *buffer++ = (char)c;
    1e2e:	f6 01       	movw	r30, r12
    1e30:	81 93       	st	Z+, r24
    1e32:	6f 01       	movw	r12, r30
    index++;
    1e34:	21 96       	adiw	r28, 0x01	; 1

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
  if (length < 1) return 0;
  size_t index = 0;
  while (index < length) {
    1e36:	0c 17       	cp	r16, r28
    1e38:	1d 07       	cpc	r17, r29
    1e3a:	89 f7       	brne	.-30     	; 0x1e1e <_ZN6Stream14readBytesUntilEcPcj+0x28>
    1e3c:	c8 01       	movw	r24, r16
    1e3e:	04 c0       	rjmp	.+8      	; 0x1e48 <_ZN6Stream14readBytesUntilEcPcj+0x52>
// terminates if length characters have been read, timeout, or if the terminator character  detected
// returns the number of characters placed in the buffer (0 means no valid data found)

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
  if (length < 1) return 0;
    1e40:	80 e0       	ldi	r24, 0x00	; 0
    1e42:	90 e0       	ldi	r25, 0x00	; 0
    1e44:	01 c0       	rjmp	.+2      	; 0x1e48 <_ZN6Stream14readBytesUntilEcPcj+0x52>
    1e46:	ce 01       	movw	r24, r28
    if (c < 0 || c == terminator) break;
    *buffer++ = (char)c;
    index++;
  }
  return index; // return number of characters, not including null terminator
}
    1e48:	df 91       	pop	r29
    1e4a:	cf 91       	pop	r28
    1e4c:	1f 91       	pop	r17
    1e4e:	0f 91       	pop	r16
    1e50:	ff 90       	pop	r15
    1e52:	ef 90       	pop	r14
    1e54:	df 90       	pop	r13
    1e56:	cf 90       	pop	r12
    1e58:	bf 90       	pop	r11
    1e5a:	af 90       	pop	r10
    1e5c:	08 95       	ret

00001e5e <_Z4tonehjm>:


// frequency (in hertz) and duration (in milliseconds).

void tone(uint8_t _pin, unsigned int frequency, unsigned long duration)
{
    1e5e:	4f 92       	push	r4
    1e60:	5f 92       	push	r5
    1e62:	6f 92       	push	r6
    1e64:	7f 92       	push	r7
    1e66:	8f 92       	push	r8
    1e68:	9f 92       	push	r9
    1e6a:	af 92       	push	r10
    1e6c:	bf 92       	push	r11
    1e6e:	cf 92       	push	r12
    1e70:	df 92       	push	r13
    1e72:	ef 92       	push	r14
    1e74:	ff 92       	push	r15
    1e76:	0f 93       	push	r16
    1e78:	1f 93       	push	r17
    1e7a:	cf 93       	push	r28
    1e7c:	df 93       	push	r29
    1e7e:	00 d0       	rcall	.+0      	; 0x1e80 <_Z4tonehjm+0x22>
    1e80:	00 d0       	rcall	.+0      	; 0x1e82 <_Z4tonehjm+0x24>
    1e82:	1f 92       	push	r1
    1e84:	cd b7       	in	r28, 0x3d	; 61
    1e86:	de b7       	in	r29, 0x3e	; 62
    1e88:	8b 01       	movw	r16, r22
    1e8a:	29 01       	movw	r4, r18
    1e8c:	3a 01       	movw	r6, r20
{
  int8_t _timer = -1;

  // if we're already using the pin, the timer should be configured.  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == _pin) {
    1e8e:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
    1e92:	89 17       	cp	r24, r25
    1e94:	21 f0       	breq	.+8      	; 0x1e9e <_Z4tonehjm+0x40>
    }
  }
  
  // search for an unused timer.
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == 255) {
    1e96:	9f 3f       	cpi	r25, 0xFF	; 255
    1e98:	09 f0       	breq	.+2      	; 0x1e9c <_Z4tonehjm+0x3e>
    1e9a:	4d c2       	rjmp	.+1178   	; 0x2336 <_Z4tonehjm+0x4d8>
    1e9c:	05 c0       	rjmp	.+10     	; 0x1ea8 <_Z4tonehjm+0x4a>
  int8_t _timer = -1;

  // if we're already using the pin, the timer should be configured.  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == _pin) {
      return pgm_read_byte(tone_pin_to_timer_PGM + i);
    1e9e:	ee e8       	ldi	r30, 0x8E	; 142
    1ea0:	f0 e0       	ldi	r31, 0x00	; 0
    1ea2:	24 91       	lpm	r18, Z
    1ea4:	2d 83       	std	Y+5, r18	; 0x05
    1ea6:	84 c0       	rjmp	.+264    	; 0x1fb0 <_Z4tonehjm+0x152>
  }
  
  // search for an unused timer.
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == 255) {
      tone_pins[i] = _pin;
    1ea8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
    1eac:	ee e8       	ldi	r30, 0x8E	; 142
    1eae:	f0 e0       	ldi	r31, 0x00	; 0
    1eb0:	94 91       	lpm	r25, Z
    1eb2:	9d 83       	std	Y+5, r25	; 0x05
      break;
    }
  }
  
  if (_timer != -1)
    1eb4:	9f 3f       	cpi	r25, 0xFF	; 255
    1eb6:	09 f4       	brne	.+2      	; 0x1eba <_Z4tonehjm+0x5c>
    1eb8:	3e c2       	rjmp	.+1148   	; 0x2336 <_Z4tonehjm+0x4d8>
  {
    // Set timer specific stuff
    // All timers in CTC mode
    // 8 bit timers will require changing prescalar values,
    // whereas 16 bit timers are set to either ck/1 or ck/64 prescalar
    switch (_timer)
    1eba:	91 30       	cpi	r25, 0x01	; 1
    1ebc:	09 f4       	brne	.+2      	; 0x1ec0 <_Z4tonehjm+0x62>
    1ebe:	4d c0       	rjmp	.+154    	; 0x1f5a <_Z4tonehjm+0xfc>
    1ec0:	58 f1       	brcs	.+86     	; 0x1f18 <_Z4tonehjm+0xba>
    1ec2:	92 30       	cpi	r25, 0x02	; 2
    1ec4:	09 f0       	breq	.+2      	; 0x1ec8 <_Z4tonehjm+0x6a>
    1ec6:	74 c0       	rjmp	.+232    	; 0x1fb0 <_Z4tonehjm+0x152>
      #endif

      #if defined(TCCR2A) && defined(TCCR2B)
      case 2:
        // 8 bit timer
        TCCR2A = 0;
    1ec8:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
        TCCR2B = 0;
    1ecc:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
        bitWrite(TCCR2A, WGM21, 1);
    1ed0:	90 91 b0 00 	lds	r25, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1ed4:	92 60       	ori	r25, 0x02	; 2
    1ed6:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
        bitWrite(TCCR2B, CS20, 1);
    1eda:	90 91 b1 00 	lds	r25, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    1ede:	91 60       	ori	r25, 0x01	; 1
    1ee0:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
        timer2_pin_port = portOutputRegister(digitalPinToPort(_pin));
    1ee4:	28 2f       	mov	r18, r24
    1ee6:	30 e0       	ldi	r19, 0x00	; 0
    1ee8:	f9 01       	movw	r30, r18
    1eea:	e9 54       	subi	r30, 0x49	; 73
    1eec:	ff 4f       	sbci	r31, 0xFF	; 255
    1eee:	e4 91       	lpm	r30, Z
    1ef0:	f0 e0       	ldi	r31, 0x00	; 0
    1ef2:	ee 0f       	add	r30, r30
    1ef4:	ff 1f       	adc	r31, r31
    1ef6:	eb 52       	subi	r30, 0x2B	; 43
    1ef8:	ff 4f       	sbci	r31, 0xFF	; 255
    1efa:	45 91       	lpm	r20, Z+
    1efc:	54 91       	lpm	r21, Z
    1efe:	50 93 73 03 	sts	0x0373, r21	; 0x800373 <timer2_pin_port+0x1>
    1f02:	40 93 72 03 	sts	0x0372, r20	; 0x800372 <timer2_pin_port>
        timer2_pin_mask = digitalPinToBitMask(_pin);
    1f06:	f9 01       	movw	r30, r18
    1f08:	ed 55       	subi	r30, 0x5D	; 93
    1f0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f0c:	e4 91       	lpm	r30, Z
    1f0e:	e0 93 71 03 	sts	0x0371, r30	; 0x800371 <timer2_pin_mask>
    1f12:	92 e0       	ldi	r25, 0x02	; 2
    1f14:	9d 83       	std	Y+5, r25	; 0x05
    1f16:	0b c2       	rjmp	.+1046   	; 0x232e <_Z4tonehjm+0x4d0>
    switch (_timer)
    {
      #if defined(TCCR0A) && defined(TCCR0B) && defined(WGM01)
      case 0:
        // 8 bit timer
        TCCR0A = 0;
    1f18:	14 bc       	out	0x24, r1	; 36
        TCCR0B = 0;
    1f1a:	15 bc       	out	0x25, r1	; 37
        bitWrite(TCCR0A, WGM01, 1);
    1f1c:	94 b5       	in	r25, 0x24	; 36
    1f1e:	92 60       	ori	r25, 0x02	; 2
    1f20:	94 bd       	out	0x24, r25	; 36
        bitWrite(TCCR0B, CS00, 1);
    1f22:	95 b5       	in	r25, 0x25	; 37
    1f24:	91 60       	ori	r25, 0x01	; 1
    1f26:	95 bd       	out	0x25, r25	; 37
        timer0_pin_port = portOutputRegister(digitalPinToPort(_pin));
    1f28:	28 2f       	mov	r18, r24
    1f2a:	30 e0       	ldi	r19, 0x00	; 0
    1f2c:	f9 01       	movw	r30, r18
    1f2e:	e9 54       	subi	r30, 0x49	; 73
    1f30:	ff 4f       	sbci	r31, 0xFF	; 255
    1f32:	e4 91       	lpm	r30, Z
    1f34:	f0 e0       	ldi	r31, 0x00	; 0
    1f36:	ee 0f       	add	r30, r30
    1f38:	ff 1f       	adc	r31, r31
    1f3a:	eb 52       	subi	r30, 0x2B	; 43
    1f3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f3e:	45 91       	lpm	r20, Z+
    1f40:	54 91       	lpm	r21, Z
    1f42:	50 93 81 03 	sts	0x0381, r21	; 0x800381 <timer0_pin_port+0x1>
    1f46:	40 93 80 03 	sts	0x0380, r20	; 0x800380 <timer0_pin_port>
        timer0_pin_mask = digitalPinToBitMask(_pin);
    1f4a:	f9 01       	movw	r30, r18
    1f4c:	ed 55       	subi	r30, 0x5D	; 93
    1f4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f50:	e4 91       	lpm	r30, Z
    1f52:	e0 93 7f 03 	sts	0x037F, r30	; 0x80037f <timer0_pin_mask>
    1f56:	1d 82       	std	Y+5, r1	; 0x05
    1f58:	ea c1       	rjmp	.+980    	; 0x232e <_Z4tonehjm+0x4d0>
      #endif

      #if defined(TCCR1A) && defined(TCCR1B) && defined(WGM12)
      case 1:
        // 16 bit timer
        TCCR1A = 0;
    1f5a:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
        TCCR1B = 0;
    1f5e:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
        bitWrite(TCCR1B, WGM12, 1);
    1f62:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1f66:	98 60       	ori	r25, 0x08	; 8
    1f68:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
        bitWrite(TCCR1B, CS10, 1);
    1f6c:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1f70:	91 60       	ori	r25, 0x01	; 1
    1f72:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
        timer1_pin_port = portOutputRegister(digitalPinToPort(_pin));
    1f76:	28 2f       	mov	r18, r24
    1f78:	30 e0       	ldi	r19, 0x00	; 0
    1f7a:	f9 01       	movw	r30, r18
    1f7c:	e9 54       	subi	r30, 0x49	; 73
    1f7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f80:	e4 91       	lpm	r30, Z
    1f82:	f0 e0       	ldi	r31, 0x00	; 0
    1f84:	ee 0f       	add	r30, r30
    1f86:	ff 1f       	adc	r31, r31
    1f88:	eb 52       	subi	r30, 0x2B	; 43
    1f8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f8c:	45 91       	lpm	r20, Z+
    1f8e:	54 91       	lpm	r21, Z
    1f90:	50 93 7a 03 	sts	0x037A, r21	; 0x80037a <timer1_pin_port+0x1>
    1f94:	40 93 79 03 	sts	0x0379, r20	; 0x800379 <timer1_pin_port>
        timer1_pin_mask = digitalPinToBitMask(_pin);
    1f98:	f9 01       	movw	r30, r18
    1f9a:	ed 55       	subi	r30, 0x5D	; 93
    1f9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f9e:	e4 91       	lpm	r30, Z
    1fa0:	e0 93 78 03 	sts	0x0378, r30	; 0x800378 <timer1_pin_mask>
  _timer = toneBegin(_pin);

  if (_timer >= 0)
  {
    // Set the pinMode as OUTPUT
    pinMode(_pin, OUTPUT);
    1fa4:	61 e0       	ldi	r22, 0x01	; 1
    1fa6:	0e 94 68 13 	call	0x26d0	; 0x26d0 <pinMode>
    1faa:	21 e0       	ldi	r18, 0x01	; 1
    1fac:	2d 83       	std	Y+5, r18	; 0x05
    1fae:	89 c0       	rjmp	.+274    	; 0x20c2 <_Z4tonehjm+0x264>
  uint32_t ocr = 0;
  int8_t _timer;

  _timer = toneBegin(_pin);

  if (_timer >= 0)
    1fb0:	2d 81       	ldd	r18, Y+5	; 0x05
    1fb2:	27 fd       	sbrc	r18, 7
    1fb4:	c0 c1       	rjmp	.+896    	; 0x2336 <_Z4tonehjm+0x4d8>
  {
    // Set the pinMode as OUTPUT
    pinMode(_pin, OUTPUT);
    1fb6:	61 e0       	ldi	r22, 0x01	; 1
    1fb8:	0e 94 68 13 	call	0x26d0	; 0x26d0 <pinMode>
    
    // if we are using an 8 bit timer, scan through prescalars to find the best fit
    if (_timer == 0 || _timer == 2)
    1fbc:	8d 81       	ldd	r24, Y+5	; 0x05
    1fbe:	8d 7f       	andi	r24, 0xFD	; 253
    1fc0:	09 f0       	breq	.+2      	; 0x1fc4 <_Z4tonehjm+0x166>
    1fc2:	7f c0       	rjmp	.+254    	; 0x20c2 <_Z4tonehjm+0x264>
    {
      ocr = F_CPU / frequency / 2 - 1;
    1fc4:	48 01       	movw	r8, r16
    1fc6:	a1 2c       	mov	r10, r1
    1fc8:	b1 2c       	mov	r11, r1
    1fca:	60 e0       	ldi	r22, 0x00	; 0
    1fcc:	72 e1       	ldi	r23, 0x12	; 18
    1fce:	8a e7       	ldi	r24, 0x7A	; 122
    1fd0:	90 e0       	ldi	r25, 0x00	; 0
    1fd2:	a5 01       	movw	r20, r10
    1fd4:	94 01       	movw	r18, r8
    1fd6:	0e 94 94 21 	call	0x4328	; 0x4328 <__divmodsi4>
    1fda:	29 83       	std	Y+1, r18	; 0x01
    1fdc:	3a 83       	std	Y+2, r19	; 0x02
    1fde:	4b 83       	std	Y+3, r20	; 0x03
    1fe0:	5c 83       	std	Y+4, r21	; 0x04
    1fe2:	69 01       	movw	r12, r18
    1fe4:	7a 01       	movw	r14, r20
    1fe6:	81 e0       	ldi	r24, 0x01	; 1
    1fe8:	c8 1a       	sub	r12, r24
    1fea:	d1 08       	sbc	r13, r1
    1fec:	e1 08       	sbc	r14, r1
    1fee:	f1 08       	sbc	r15, r1
      prescalarbits = 0b001;  // ck/1: same for both timers
      if (ocr > 255)
    1ff0:	9f ef       	ldi	r25, 0xFF	; 255
    1ff2:	c9 16       	cp	r12, r25
    1ff4:	d1 04       	cpc	r13, r1
    1ff6:	e1 04       	cpc	r14, r1
    1ff8:	f1 04       	cpc	r15, r1
    1ffa:	09 f0       	breq	.+2      	; 0x1ffe <_Z4tonehjm+0x1a0>
    1ffc:	08 f4       	brcc	.+2      	; 0x2000 <_Z4tonehjm+0x1a2>
    1ffe:	4e c0       	rjmp	.+156    	; 0x209c <_Z4tonehjm+0x23e>
      {
        ocr = F_CPU / frequency / 2 / 8 - 1;
    2000:	60 e4       	ldi	r22, 0x40	; 64
    2002:	72 e4       	ldi	r23, 0x42	; 66
    2004:	8f e0       	ldi	r24, 0x0F	; 15
    2006:	90 e0       	ldi	r25, 0x00	; 0
    2008:	a5 01       	movw	r20, r10
    200a:	94 01       	movw	r18, r8
    200c:	0e 94 94 21 	call	0x4328	; 0x4328 <__divmodsi4>
    2010:	69 01       	movw	r12, r18
    2012:	7a 01       	movw	r14, r20
    2014:	81 e0       	ldi	r24, 0x01	; 1
    2016:	c8 1a       	sub	r12, r24
    2018:	d1 08       	sbc	r13, r1
    201a:	e1 08       	sbc	r14, r1
    201c:	f1 08       	sbc	r15, r1
        prescalarbits = 0b010;  // ck/8: same for both timers

        if (_timer == 2 && ocr > 255)
    201e:	9d 81       	ldd	r25, Y+5	; 0x05
    2020:	92 30       	cpi	r25, 0x02	; 2
    2022:	09 f5       	brne	.+66     	; 0x2066 <_Z4tonehjm+0x208>
    2024:	2f ef       	ldi	r18, 0xFF	; 255
    2026:	c2 16       	cp	r12, r18
    2028:	d1 04       	cpc	r13, r1
    202a:	e1 04       	cpc	r14, r1
    202c:	f1 04       	cpc	r15, r1
    202e:	09 f0       	breq	.+2      	; 0x2032 <_Z4tonehjm+0x1d4>
    2030:	08 f4       	brcc	.+2      	; 0x2034 <_Z4tonehjm+0x1d6>
    2032:	44 c1       	rjmp	.+648    	; 0x22bc <_Z4tonehjm+0x45e>
        {
          ocr = F_CPU / frequency / 2 / 32 - 1;
    2034:	60 e9       	ldi	r22, 0x90	; 144
    2036:	70 ed       	ldi	r23, 0xD0	; 208
    2038:	83 e0       	ldi	r24, 0x03	; 3
    203a:	90 e0       	ldi	r25, 0x00	; 0
    203c:	a5 01       	movw	r20, r10
    203e:	94 01       	movw	r18, r8
    2040:	0e 94 94 21 	call	0x4328	; 0x4328 <__divmodsi4>
    2044:	69 01       	movw	r12, r18
    2046:	7a 01       	movw	r14, r20
    2048:	81 e0       	ldi	r24, 0x01	; 1
    204a:	c8 1a       	sub	r12, r24
    204c:	d1 08       	sbc	r13, r1
    204e:	e1 08       	sbc	r14, r1
    2050:	f1 08       	sbc	r15, r1
          prescalarbits = 0b011;
        }

        if (ocr > 255)
    2052:	9f ef       	ldi	r25, 0xFF	; 255
    2054:	c9 16       	cp	r12, r25
    2056:	d1 04       	cpc	r13, r1
    2058:	e1 04       	cpc	r14, r1
    205a:	f1 04       	cpc	r15, r1
    205c:	11 f0       	breq	.+4      	; 0x2062 <_Z4tonehjm+0x204>
    205e:	08 f0       	brcs	.+2      	; 0x2062 <_Z4tonehjm+0x204>
    2060:	ba c0       	rjmp	.+372    	; 0x21d6 <_Z4tonehjm+0x378>
        prescalarbits = 0b010;  // ck/8: same for both timers

        if (_timer == 2 && ocr > 255)
        {
          ocr = F_CPU / frequency / 2 / 32 - 1;
          prescalarbits = 0b011;
    2062:	83 e0       	ldi	r24, 0x03	; 3
    2064:	27 c0       	rjmp	.+78     	; 0x20b4 <_Z4tonehjm+0x256>
        }

        if (ocr > 255)
    2066:	2f ef       	ldi	r18, 0xFF	; 255
    2068:	c2 16       	cp	r12, r18
    206a:	d1 04       	cpc	r13, r1
    206c:	e1 04       	cpc	r14, r1
    206e:	f1 04       	cpc	r15, r1
    2070:	b9 f0       	breq	.+46     	; 0x20a0 <_Z4tonehjm+0x242>
    2072:	b0 f0       	brcs	.+44     	; 0x20a0 <_Z4tonehjm+0x242>
        {
          ocr = F_CPU / frequency / 2 / 64 - 1;
    2074:	68 e4       	ldi	r22, 0x48	; 72
    2076:	78 ee       	ldi	r23, 0xE8	; 232
    2078:	81 e0       	ldi	r24, 0x01	; 1
    207a:	90 e0       	ldi	r25, 0x00	; 0
    207c:	a5 01       	movw	r20, r10
    207e:	94 01       	movw	r18, r8
    2080:	0e 94 94 21 	call	0x4328	; 0x4328 <__divmodsi4>
    2084:	69 01       	movw	r12, r18
    2086:	7a 01       	movw	r14, r20
    2088:	81 e0       	ldi	r24, 0x01	; 1
    208a:	c8 1a       	sub	r12, r24
    208c:	d1 08       	sbc	r13, r1
    208e:	e1 08       	sbc	r14, r1
    2090:	f1 08       	sbc	r15, r1
          prescalarbits = _timer == 0 ? 0b011 : 0b100;
    2092:	9d 81       	ldd	r25, Y+5	; 0x05
    2094:	99 23       	and	r25, r25
    2096:	09 f4       	brne	.+2      	; 0x209a <_Z4tonehjm+0x23c>
    2098:	13 c1       	rjmp	.+550    	; 0x22c0 <_Z4tonehjm+0x462>
    209a:	dc c0       	rjmp	.+440    	; 0x2254 <_Z4tonehjm+0x3f6>
    
    // if we are using an 8 bit timer, scan through prescalars to find the best fit
    if (_timer == 0 || _timer == 2)
    {
      ocr = F_CPU / frequency / 2 - 1;
      prescalarbits = 0b001;  // ck/1: same for both timers
    209c:	81 e0       	ldi	r24, 0x01	; 1
    209e:	01 c0       	rjmp	.+2      	; 0x20a2 <_Z4tonehjm+0x244>
      if (ocr > 255)
      {
        ocr = F_CPU / frequency / 2 / 8 - 1;
        prescalarbits = 0b010;  // ck/8: same for both timers
    20a0:	82 e0       	ldi	r24, 0x02	; 2
          }
        }
      }

#if defined(TCCR0B)
      if (_timer == 0)
    20a2:	9d 81       	ldd	r25, Y+5	; 0x05
    20a4:	91 11       	cpse	r25, r1
    20a6:	06 c0       	rjmp	.+12     	; 0x20b4 <_Z4tonehjm+0x256>
      {
        TCCR0B = (TCCR0B & 0b11111000) | prescalarbits;
    20a8:	95 b5       	in	r25, 0x25	; 37
    20aa:	98 7f       	andi	r25, 0xF8	; 248
    20ac:	89 2b       	or	r24, r25
    20ae:	85 bd       	out	0x25, r24	; 37
    20b0:	44 c0       	rjmp	.+136    	; 0x213a <_Z4tonehjm+0x2dc>
          prescalarbits = _timer == 0 ? 0b011 : 0b100;

          if (_timer == 2 && ocr > 255)
          {
            ocr = F_CPU / frequency / 2 / 128 - 1;
            prescalarbits = 0b101;
    20b2:	85 e0       	ldi	r24, 0x05	; 5
      }
      else
#endif
#if defined(TCCR2B)
      {
        TCCR2B = (TCCR2B & 0b11111000) | prescalarbits;
    20b4:	90 91 b1 00 	lds	r25, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    20b8:	98 7f       	andi	r25, 0xF8	; 248
    20ba:	89 2b       	or	r24, r25
    20bc:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    20c0:	3c c0       	rjmp	.+120    	; 0x213a <_Z4tonehjm+0x2dc>
#endif
    }
    else
    {
      // two choices for the 16 bit timers: ck/1 or ck/64
      ocr = F_CPU / frequency / 2 - 1;
    20c2:	48 01       	movw	r8, r16
    20c4:	a1 2c       	mov	r10, r1
    20c6:	b1 2c       	mov	r11, r1
    20c8:	60 e0       	ldi	r22, 0x00	; 0
    20ca:	72 e1       	ldi	r23, 0x12	; 18
    20cc:	8a e7       	ldi	r24, 0x7A	; 122
    20ce:	90 e0       	ldi	r25, 0x00	; 0
    20d0:	a5 01       	movw	r20, r10
    20d2:	94 01       	movw	r18, r8
    20d4:	0e 94 94 21 	call	0x4328	; 0x4328 <__divmodsi4>
    20d8:	69 01       	movw	r12, r18
    20da:	7a 01       	movw	r14, r20
    20dc:	81 e0       	ldi	r24, 0x01	; 1
    20de:	c8 1a       	sub	r12, r24
    20e0:	d1 08       	sbc	r13, r1
    20e2:	e1 08       	sbc	r14, r1
    20e4:	f1 08       	sbc	r15, r1

      prescalarbits = 0b001;
      if (ocr > 0xffff)
    20e6:	c1 14       	cp	r12, r1
    20e8:	d1 04       	cpc	r13, r1
    20ea:	91 e0       	ldi	r25, 0x01	; 1
    20ec:	e9 06       	cpc	r14, r25
    20ee:	f1 04       	cpc	r15, r1
    20f0:	88 f0       	brcs	.+34     	; 0x2114 <_Z4tonehjm+0x2b6>
      {
        ocr = F_CPU / frequency / 2 / 64 - 1;
    20f2:	68 e4       	ldi	r22, 0x48	; 72
    20f4:	78 ee       	ldi	r23, 0xE8	; 232
    20f6:	81 e0       	ldi	r24, 0x01	; 1
    20f8:	90 e0       	ldi	r25, 0x00	; 0
    20fa:	a5 01       	movw	r20, r10
    20fc:	94 01       	movw	r18, r8
    20fe:	0e 94 94 21 	call	0x4328	; 0x4328 <__divmodsi4>
    2102:	69 01       	movw	r12, r18
    2104:	7a 01       	movw	r14, r20
    2106:	81 e0       	ldi	r24, 0x01	; 1
    2108:	c8 1a       	sub	r12, r24
    210a:	d1 08       	sbc	r13, r1
    210c:	e1 08       	sbc	r14, r1
    210e:	f1 08       	sbc	r15, r1
        prescalarbits = 0b011;
    2110:	83 e0       	ldi	r24, 0x03	; 3
    2112:	01 c0       	rjmp	.+2      	; 0x2116 <_Z4tonehjm+0x2b8>
    else
    {
      // two choices for the 16 bit timers: ck/1 or ck/64
      ocr = F_CPU / frequency / 2 - 1;

      prescalarbits = 0b001;
    2114:	81 e0       	ldi	r24, 0x01	; 1
      {
        ocr = F_CPU / frequency / 2 / 64 - 1;
        prescalarbits = 0b011;
      }

      if (_timer == 1)
    2116:	9d 81       	ldd	r25, Y+5	; 0x05
    2118:	91 30       	cpi	r25, 0x01	; 1
    211a:	79 f4       	brne	.+30     	; 0x213a <_Z4tonehjm+0x2dc>
      {
#if defined(TCCR1B)
        TCCR1B = (TCCR1B & 0b11111000) | prescalarbits;
    211c:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    2120:	98 7f       	andi	r25, 0xF8	; 248
    2122:	89 2b       	or	r24, r25
    2124:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>

    }
    

    // Calculate the toggle count
    if (duration > 0)
    2128:	41 14       	cp	r4, r1
    212a:	51 04       	cpc	r5, r1
    212c:	61 04       	cpc	r6, r1
    212e:	71 04       	cpc	r7, r1
    2130:	49 f4       	brne	.+18     	; 0x2144 <_Z4tonehjm+0x2e6>
    {
      toggle_count = 2 * frequency * duration / 1000;
    }
    else
    {
      toggle_count = -1;
    2132:	2f ef       	ldi	r18, 0xFF	; 255
    2134:	3f ef       	ldi	r19, 0xFF	; 255
    2136:	a9 01       	movw	r20, r18
    2138:	2c c0       	rjmp	.+88     	; 0x2192 <_Z4tonehjm+0x334>

    }
    

    // Calculate the toggle count
    if (duration > 0)
    213a:	41 14       	cp	r4, r1
    213c:	51 04       	cpc	r5, r1
    213e:	61 04       	cpc	r6, r1
    2140:	71 04       	cpc	r7, r1
    2142:	71 f0       	breq	.+28     	; 0x2160 <_Z4tonehjm+0x302>
    {
      toggle_count = 2 * frequency * duration / 1000;
    2144:	d8 01       	movw	r26, r16
    2146:	aa 0f       	add	r26, r26
    2148:	bb 1f       	adc	r27, r27
    214a:	a3 01       	movw	r20, r6
    214c:	92 01       	movw	r18, r4
    214e:	0e 94 c8 21 	call	0x4390	; 0x4390 <__muluhisi3>
    2152:	28 ee       	ldi	r18, 0xE8	; 232
    2154:	33 e0       	ldi	r19, 0x03	; 3
    2156:	40 e0       	ldi	r20, 0x00	; 0
    2158:	50 e0       	ldi	r21, 0x00	; 0
    215a:	0e 94 72 21 	call	0x42e4	; 0x42e4 <__udivmodsi4>
    215e:	03 c0       	rjmp	.+6      	; 0x2166 <_Z4tonehjm+0x308>
    }
    else
    {
      toggle_count = -1;
    2160:	2f ef       	ldi	r18, 0xFF	; 255
    2162:	3f ef       	ldi	r19, 0xFF	; 255
    2164:	a9 01       	movw	r20, r18
    }

    // Set the OCR for the given timer,
    // set the toggle count,
    // then turn on the interrupts
    switch (_timer)
    2166:	8d 81       	ldd	r24, Y+5	; 0x05
    2168:	81 30       	cpi	r24, 0x01	; 1
    216a:	99 f0       	breq	.+38     	; 0x2192 <_Z4tonehjm+0x334>
    216c:	82 30       	cpi	r24, 0x02	; 2
    216e:	19 f1       	breq	.+70     	; 0x21b6 <_Z4tonehjm+0x358>
    2170:	81 11       	cpse	r24, r1
    2172:	e1 c0       	rjmp	.+450    	; 0x2336 <_Z4tonehjm+0x4d8>
    {

#if defined(OCR0A) && defined(TIMSK0) && defined(OCIE0A)
      case 0:
        OCR0A = ocr;
    2174:	c7 bc       	out	0x27, r12	; 39
        timer0_toggle_count = toggle_count;
    2176:	20 93 82 03 	sts	0x0382, r18	; 0x800382 <timer0_toggle_count>
    217a:	30 93 83 03 	sts	0x0383, r19	; 0x800383 <timer0_toggle_count+0x1>
    217e:	40 93 84 03 	sts	0x0384, r20	; 0x800384 <timer0_toggle_count+0x2>
    2182:	50 93 85 03 	sts	0x0385, r21	; 0x800385 <timer0_toggle_count+0x3>
        bitWrite(TIMSK0, OCIE0A, 1);
    2186:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
    218a:	82 60       	ori	r24, 0x02	; 2
    218c:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
        break;
    2190:	d2 c0       	rjmp	.+420    	; 0x2336 <_Z4tonehjm+0x4d8>
#endif

      case 1:
#if defined(OCR1A) && defined(TIMSK1) && defined(OCIE1A)
        OCR1A = ocr;
    2192:	d0 92 89 00 	sts	0x0089, r13	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    2196:	c0 92 88 00 	sts	0x0088, r12	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
        timer1_toggle_count = toggle_count;
    219a:	20 93 7b 03 	sts	0x037B, r18	; 0x80037b <timer1_toggle_count>
    219e:	30 93 7c 03 	sts	0x037C, r19	; 0x80037c <timer1_toggle_count+0x1>
    21a2:	40 93 7d 03 	sts	0x037D, r20	; 0x80037d <timer1_toggle_count+0x2>
    21a6:	50 93 7e 03 	sts	0x037E, r21	; 0x80037e <timer1_toggle_count+0x3>
        bitWrite(TIMSK1, OCIE1A, 1);
    21aa:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    21ae:	82 60       	ori	r24, 0x02	; 2
    21b0:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
        // this combination is for at least the ATmega32
        OCR1A = ocr;
        timer1_toggle_count = toggle_count;
        bitWrite(TIMSK, OCIE1A, 1);
#endif
        break;
    21b4:	c0 c0       	rjmp	.+384    	; 0x2336 <_Z4tonehjm+0x4d8>

#if defined(OCR2A) && defined(TIMSK2) && defined(OCIE2A)
      case 2:
        OCR2A = ocr;
    21b6:	c0 92 b3 00 	sts	0x00B3, r12	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
        timer2_toggle_count = toggle_count;
    21ba:	20 93 74 03 	sts	0x0374, r18	; 0x800374 <timer2_toggle_count>
    21be:	30 93 75 03 	sts	0x0375, r19	; 0x800375 <timer2_toggle_count+0x1>
    21c2:	40 93 76 03 	sts	0x0376, r20	; 0x800376 <timer2_toggle_count+0x2>
    21c6:	50 93 77 03 	sts	0x0377, r21	; 0x800377 <timer2_toggle_count+0x3>
        bitWrite(TIMSK2, OCIE2A, 1);
    21ca:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
    21ce:	82 60       	ori	r24, 0x02	; 2
    21d0:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
        break;
#endif

    }
  }
}
    21d4:	b0 c0       	rjmp	.+352    	; 0x2336 <_Z4tonehjm+0x4d8>
          prescalarbits = 0b011;
        }

        if (ocr > 255)
        {
          ocr = F_CPU / frequency / 2 / 64 - 1;
    21d6:	68 e4       	ldi	r22, 0x48	; 72
    21d8:	78 ee       	ldi	r23, 0xE8	; 232
    21da:	81 e0       	ldi	r24, 0x01	; 1
    21dc:	90 e0       	ldi	r25, 0x00	; 0
    21de:	a5 01       	movw	r20, r10
    21e0:	94 01       	movw	r18, r8
    21e2:	0e 94 94 21 	call	0x4328	; 0x4328 <__divmodsi4>
    21e6:	69 01       	movw	r12, r18
    21e8:	7a 01       	movw	r14, r20
    21ea:	91 e0       	ldi	r25, 0x01	; 1
    21ec:	c9 1a       	sub	r12, r25
    21ee:	d1 08       	sbc	r13, r1
    21f0:	e1 08       	sbc	r14, r1
    21f2:	f1 08       	sbc	r15, r1
          prescalarbits = _timer == 0 ? 0b011 : 0b100;

          if (_timer == 2 && ocr > 255)
    21f4:	2f ef       	ldi	r18, 0xFF	; 255
    21f6:	c2 16       	cp	r12, r18
    21f8:	d1 04       	cpc	r13, r1
    21fa:	e1 04       	cpc	r14, r1
    21fc:	f1 04       	cpc	r15, r1
    21fe:	41 f1       	breq	.+80     	; 0x2250 <_Z4tonehjm+0x3f2>
    2200:	38 f1       	brcs	.+78     	; 0x2250 <_Z4tonehjm+0x3f2>
          {
            ocr = F_CPU / frequency / 2 / 128 - 1;
    2202:	64 e2       	ldi	r22, 0x24	; 36
    2204:	74 ef       	ldi	r23, 0xF4	; 244
    2206:	80 e0       	ldi	r24, 0x00	; 0
    2208:	90 e0       	ldi	r25, 0x00	; 0
    220a:	a5 01       	movw	r20, r10
    220c:	94 01       	movw	r18, r8
    220e:	0e 94 94 21 	call	0x4328	; 0x4328 <__divmodsi4>
    2212:	69 01       	movw	r12, r18
    2214:	7a 01       	movw	r14, r20
    2216:	81 e0       	ldi	r24, 0x01	; 1
    2218:	c8 1a       	sub	r12, r24
    221a:	d1 08       	sbc	r13, r1
    221c:	e1 08       	sbc	r14, r1
    221e:	f1 08       	sbc	r15, r1
            prescalarbits = 0b101;
          }

          if (ocr > 255)
    2220:	9f ef       	ldi	r25, 0xFF	; 255
    2222:	c9 16       	cp	r12, r25
    2224:	d1 04       	cpc	r13, r1
    2226:	e1 04       	cpc	r14, r1
    2228:	f1 04       	cpc	r15, r1
    222a:	09 f0       	breq	.+2      	; 0x222e <_Z4tonehjm+0x3d0>
    222c:	08 f4       	brcc	.+2      	; 0x2230 <_Z4tonehjm+0x3d2>
    222e:	41 cf       	rjmp	.-382    	; 0x20b2 <_Z4tonehjm+0x254>
          {
            ocr = F_CPU / frequency / 2 / 256 - 1;
    2230:	62 e1       	ldi	r22, 0x12	; 18
    2232:	7a e7       	ldi	r23, 0x7A	; 122
    2234:	80 e0       	ldi	r24, 0x00	; 0
    2236:	90 e0       	ldi	r25, 0x00	; 0
    2238:	a5 01       	movw	r20, r10
    223a:	94 01       	movw	r18, r8
    223c:	0e 94 94 21 	call	0x4328	; 0x4328 <__divmodsi4>
    2240:	69 01       	movw	r12, r18
    2242:	7a 01       	movw	r14, r20
    2244:	81 e0       	ldi	r24, 0x01	; 1
    2246:	c8 1a       	sub	r12, r24
    2248:	d1 08       	sbc	r13, r1
    224a:	e1 08       	sbc	r14, r1
    224c:	f1 08       	sbc	r15, r1
    224e:	19 c0       	rjmp	.+50     	; 0x2282 <_Z4tonehjm+0x424>
        }

        if (ocr > 255)
        {
          ocr = F_CPU / frequency / 2 / 64 - 1;
          prescalarbits = _timer == 0 ? 0b011 : 0b100;
    2250:	84 e0       	ldi	r24, 0x04	; 4
    2252:	30 cf       	rjmp	.-416    	; 0x20b4 <_Z4tonehjm+0x256>
          {
            ocr = F_CPU / frequency / 2 / 128 - 1;
            prescalarbits = 0b101;
          }

          if (ocr > 255)
    2254:	2f ef       	ldi	r18, 0xFF	; 255
    2256:	c2 16       	cp	r12, r18
    2258:	d1 04       	cpc	r13, r1
    225a:	e1 04       	cpc	r14, r1
    225c:	f1 04       	cpc	r15, r1
    225e:	09 f0       	breq	.+2      	; 0x2262 <_Z4tonehjm+0x404>
    2260:	08 f4       	brcc	.+2      	; 0x2264 <_Z4tonehjm+0x406>
    2262:	63 c0       	rjmp	.+198    	; 0x232a <_Z4tonehjm+0x4cc>
          {
            ocr = F_CPU / frequency / 2 / 256 - 1;
    2264:	62 e1       	ldi	r22, 0x12	; 18
    2266:	7a e7       	ldi	r23, 0x7A	; 122
    2268:	80 e0       	ldi	r24, 0x00	; 0
    226a:	90 e0       	ldi	r25, 0x00	; 0
    226c:	a5 01       	movw	r20, r10
    226e:	94 01       	movw	r18, r8
    2270:	0e 94 94 21 	call	0x4328	; 0x4328 <__divmodsi4>
    2274:	69 01       	movw	r12, r18
    2276:	7a 01       	movw	r14, r20
    2278:	91 e0       	ldi	r25, 0x01	; 1
    227a:	c9 1a       	sub	r12, r25
    227c:	d1 08       	sbc	r13, r1
    227e:	e1 08       	sbc	r14, r1
    2280:	f1 08       	sbc	r15, r1
            prescalarbits = _timer == 0 ? 0b100 : 0b110;
            if (ocr > 255)
    2282:	8f ef       	ldi	r24, 0xFF	; 255
    2284:	c8 16       	cp	r12, r24
    2286:	d1 04       	cpc	r13, r1
    2288:	e1 04       	cpc	r14, r1
    228a:	f1 04       	cpc	r15, r1
    228c:	a9 f0       	breq	.+42     	; 0x22b8 <_Z4tonehjm+0x45a>
    228e:	a0 f0       	brcs	.+40     	; 0x22b8 <_Z4tonehjm+0x45a>
            {
              // can't do any better than /1024
              ocr = F_CPU / frequency / 2 / 1024 - 1;
    2290:	89 81       	ldd	r24, Y+1	; 0x01
    2292:	9a 81       	ldd	r25, Y+2	; 0x02
    2294:	ab 81       	ldd	r26, Y+3	; 0x03
    2296:	bc 81       	ldd	r27, Y+4	; 0x04
    2298:	2a e0       	ldi	r18, 0x0A	; 10
    229a:	b5 95       	asr	r27
    229c:	a7 95       	ror	r26
    229e:	97 95       	ror	r25
    22a0:	87 95       	ror	r24
    22a2:	2a 95       	dec	r18
    22a4:	d1 f7       	brne	.-12     	; 0x229a <_Z4tonehjm+0x43c>
    22a6:	6c 01       	movw	r12, r24
    22a8:	7d 01       	movw	r14, r26
    22aa:	21 e0       	ldi	r18, 0x01	; 1
    22ac:	c2 1a       	sub	r12, r18
    22ae:	d1 08       	sbc	r13, r1
    22b0:	e1 08       	sbc	r14, r1
    22b2:	f1 08       	sbc	r15, r1
              prescalarbits = _timer == 0 ? 0b101 : 0b111;
    22b4:	87 e0       	ldi	r24, 0x07	; 7
    22b6:	fe ce       	rjmp	.-516    	; 0x20b4 <_Z4tonehjm+0x256>
          }

          if (ocr > 255)
          {
            ocr = F_CPU / frequency / 2 / 256 - 1;
            prescalarbits = _timer == 0 ? 0b100 : 0b110;
    22b8:	86 e0       	ldi	r24, 0x06	; 6
    22ba:	fc ce       	rjmp	.-520    	; 0x20b4 <_Z4tonehjm+0x256>
      ocr = F_CPU / frequency / 2 - 1;
      prescalarbits = 0b001;  // ck/1: same for both timers
      if (ocr > 255)
      {
        ocr = F_CPU / frequency / 2 / 8 - 1;
        prescalarbits = 0b010;  // ck/8: same for both timers
    22bc:	82 e0       	ldi	r24, 0x02	; 2
    22be:	fa ce       	rjmp	.-524    	; 0x20b4 <_Z4tonehjm+0x256>
          {
            ocr = F_CPU / frequency / 2 / 128 - 1;
            prescalarbits = 0b101;
          }

          if (ocr > 255)
    22c0:	8f ef       	ldi	r24, 0xFF	; 255
    22c2:	c8 16       	cp	r12, r24
    22c4:	d1 04       	cpc	r13, r1
    22c6:	e1 04       	cpc	r14, r1
    22c8:	f1 04       	cpc	r15, r1
    22ca:	69 f1       	breq	.+90     	; 0x2326 <_Z4tonehjm+0x4c8>
    22cc:	60 f1       	brcs	.+88     	; 0x2326 <_Z4tonehjm+0x4c8>
          {
            ocr = F_CPU / frequency / 2 / 256 - 1;
    22ce:	62 e1       	ldi	r22, 0x12	; 18
    22d0:	7a e7       	ldi	r23, 0x7A	; 122
    22d2:	80 e0       	ldi	r24, 0x00	; 0
    22d4:	90 e0       	ldi	r25, 0x00	; 0
    22d6:	a5 01       	movw	r20, r10
    22d8:	94 01       	movw	r18, r8
    22da:	0e 94 94 21 	call	0x4328	; 0x4328 <__divmodsi4>
    22de:	69 01       	movw	r12, r18
    22e0:	7a 01       	movw	r14, r20
    22e2:	91 e0       	ldi	r25, 0x01	; 1
    22e4:	c9 1a       	sub	r12, r25
    22e6:	d1 08       	sbc	r13, r1
    22e8:	e1 08       	sbc	r14, r1
    22ea:	f1 08       	sbc	r15, r1
            prescalarbits = _timer == 0 ? 0b100 : 0b110;
            if (ocr > 255)
    22ec:	2f ef       	ldi	r18, 0xFF	; 255
    22ee:	c2 16       	cp	r12, r18
    22f0:	d1 04       	cpc	r13, r1
    22f2:	e1 04       	cpc	r14, r1
    22f4:	f1 04       	cpc	r15, r1
    22f6:	a9 f0       	breq	.+42     	; 0x2322 <_Z4tonehjm+0x4c4>
    22f8:	a0 f0       	brcs	.+40     	; 0x2322 <_Z4tonehjm+0x4c4>
            {
              // can't do any better than /1024
              ocr = F_CPU / frequency / 2 / 1024 - 1;
    22fa:	89 81       	ldd	r24, Y+1	; 0x01
    22fc:	9a 81       	ldd	r25, Y+2	; 0x02
    22fe:	ab 81       	ldd	r26, Y+3	; 0x03
    2300:	bc 81       	ldd	r27, Y+4	; 0x04
    2302:	3a e0       	ldi	r19, 0x0A	; 10
    2304:	b5 95       	asr	r27
    2306:	a7 95       	ror	r26
    2308:	97 95       	ror	r25
    230a:	87 95       	ror	r24
    230c:	3a 95       	dec	r19
    230e:	d1 f7       	brne	.-12     	; 0x2304 <_Z4tonehjm+0x4a6>
    2310:	6c 01       	movw	r12, r24
    2312:	7d 01       	movw	r14, r26
    2314:	21 e0       	ldi	r18, 0x01	; 1
    2316:	c2 1a       	sub	r12, r18
    2318:	d1 08       	sbc	r13, r1
    231a:	e1 08       	sbc	r14, r1
    231c:	f1 08       	sbc	r15, r1
              prescalarbits = _timer == 0 ? 0b101 : 0b111;
    231e:	85 e0       	ldi	r24, 0x05	; 5
    2320:	c3 ce       	rjmp	.-634    	; 0x20a8 <_Z4tonehjm+0x24a>
          }

          if (ocr > 255)
          {
            ocr = F_CPU / frequency / 2 / 256 - 1;
            prescalarbits = _timer == 0 ? 0b100 : 0b110;
    2322:	84 e0       	ldi	r24, 0x04	; 4
    2324:	c1 ce       	rjmp	.-638    	; 0x20a8 <_Z4tonehjm+0x24a>
        }

        if (ocr > 255)
        {
          ocr = F_CPU / frequency / 2 / 64 - 1;
          prescalarbits = _timer == 0 ? 0b011 : 0b100;
    2326:	83 e0       	ldi	r24, 0x03	; 3
    2328:	bf ce       	rjmp	.-642    	; 0x20a8 <_Z4tonehjm+0x24a>
    232a:	84 e0       	ldi	r24, 0x04	; 4
    232c:	ba ce       	rjmp	.-652    	; 0x20a2 <_Z4tonehjm+0x244>
  _timer = toneBegin(_pin);

  if (_timer >= 0)
  {
    // Set the pinMode as OUTPUT
    pinMode(_pin, OUTPUT);
    232e:	61 e0       	ldi	r22, 0x01	; 1
    2330:	0e 94 68 13 	call	0x26d0	; 0x26d0 <pinMode>
    2334:	47 ce       	rjmp	.-882    	; 0x1fc4 <_Z4tonehjm+0x166>
        break;
#endif

    }
  }
}
    2336:	0f 90       	pop	r0
    2338:	0f 90       	pop	r0
    233a:	0f 90       	pop	r0
    233c:	0f 90       	pop	r0
    233e:	0f 90       	pop	r0
    2340:	df 91       	pop	r29
    2342:	cf 91       	pop	r28
    2344:	1f 91       	pop	r17
    2346:	0f 91       	pop	r16
    2348:	ff 90       	pop	r15
    234a:	ef 90       	pop	r14
    234c:	df 90       	pop	r13
    234e:	cf 90       	pop	r12
    2350:	bf 90       	pop	r11
    2352:	af 90       	pop	r10
    2354:	9f 90       	pop	r9
    2356:	8f 90       	pop	r8
    2358:	7f 90       	pop	r7
    235a:	6f 90       	pop	r6
    235c:	5f 90       	pop	r5
    235e:	4f 90       	pop	r4
    2360:	08 95       	ret

00002362 <_Z12disableTimerh>:
// XXX: this function only works properly for timer 2 (the only one we use
// currently).  for the others, it should end the tone, but won't restore
// proper PWM functionality for the timer.
void disableTimer(uint8_t _timer)
{
  switch (_timer)
    2362:	81 30       	cpi	r24, 0x01	; 1
    2364:	39 f0       	breq	.+14     	; 0x2374 <_Z12disableTimerh+0x12>
    2366:	18 f0       	brcs	.+6      	; 0x236e <_Z12disableTimerh+0xc>
    2368:	82 30       	cpi	r24, 0x02	; 2
    236a:	51 f0       	breq	.+20     	; 0x2380 <_Z12disableTimerh+0x1e>
    236c:	08 95       	ret
  {
    case 0:
      #if defined(TIMSK0)
        TIMSK0 = 0;
    236e:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
      #elif defined(TIMSK)
        TIMSK = 0; // atmega32
      #endif
      break;
    2372:	08 95       	ret

#if defined(TIMSK1) && defined(OCIE1A)
    case 1:
      bitWrite(TIMSK1, OCIE1A, 0);
    2374:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    2378:	8d 7f       	andi	r24, 0xFD	; 253
    237a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
      break;
    237e:	08 95       	ret
#endif

    case 2:
      #if defined(TIMSK2) && defined(OCIE2A)
        bitWrite(TIMSK2, OCIE2A, 0); // disable interrupt
    2380:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
    2384:	8d 7f       	andi	r24, 0xFD	; 253
    2386:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
      #endif
      #if defined(TCCR2A) && defined(WGM20)
        TCCR2A = (1 << WGM20);
    238a:	81 e0       	ldi	r24, 0x01	; 1
    238c:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
      #endif
      #if defined(TCCR2B) && defined(CS22)
        TCCR2B = (TCCR2B & 0b11111000) | (1 << CS22);
    2390:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    2394:	88 7f       	andi	r24, 0xF8	; 248
    2396:	84 60       	ori	r24, 0x04	; 4
    2398:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
      #endif
      #if defined(OCR2A)
        OCR2A = 0;
    239c:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    23a0:	08 95       	ret

000023a2 <_Z6noToneh>:
  }
}


void noTone(uint8_t _pin)
{
    23a2:	cf 93       	push	r28
    23a4:	c8 2f       	mov	r28, r24
  int8_t _timer = -1;
  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == _pin) {
    23a6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    23aa:	c8 13       	cpse	r28, r24
    23ac:	07 c0       	rjmp	.+14     	; 0x23bc <_Z6noToneh+0x1a>
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
    23ae:	ee e8       	ldi	r30, 0x8E	; 142
    23b0:	f0 e0       	ldi	r31, 0x00	; 0
    23b2:	84 91       	lpm	r24, Z
      tone_pins[i] = 255;
    23b4:	9f ef       	ldi	r25, 0xFF	; 255
    23b6:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <__data_start>
      break;
    23ba:	01 c0       	rjmp	.+2      	; 0x23be <_Z6noToneh+0x1c>
}


void noTone(uint8_t _pin)
{
  int8_t _timer = -1;
    23bc:	8f ef       	ldi	r24, 0xFF	; 255
      tone_pins[i] = 255;
      break;
    }
  }
  
  disableTimer(_timer);
    23be:	0e 94 b1 11 	call	0x2362	; 0x2362 <_Z12disableTimerh>

  digitalWrite(_pin, 0);
    23c2:	60 e0       	ldi	r22, 0x00	; 0
    23c4:	8c 2f       	mov	r24, r28
}
    23c6:	cf 91       	pop	r28
    }
  }
  
  disableTimer(_timer);

  digitalWrite(_pin, 0);
    23c8:	0c 94 a4 13 	jmp	0x2748	; 0x2748 <digitalWrite>

000023cc <__vector_7>:
#endif


#ifdef USE_TIMER2
ISR(TIMER2_COMPA_vect)
{
    23cc:	1f 92       	push	r1
    23ce:	0f 92       	push	r0
    23d0:	0f b6       	in	r0, 0x3f	; 63
    23d2:	0f 92       	push	r0
    23d4:	11 24       	eor	r1, r1
    23d6:	2f 93       	push	r18
    23d8:	3f 93       	push	r19
    23da:	4f 93       	push	r20
    23dc:	5f 93       	push	r21
    23de:	6f 93       	push	r22
    23e0:	7f 93       	push	r23
    23e2:	8f 93       	push	r24
    23e4:	9f 93       	push	r25
    23e6:	af 93       	push	r26
    23e8:	bf 93       	push	r27
    23ea:	ef 93       	push	r30
    23ec:	ff 93       	push	r31

  if (timer2_toggle_count != 0)
    23ee:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <timer2_toggle_count>
    23f2:	90 91 75 03 	lds	r25, 0x0375	; 0x800375 <timer2_toggle_count+0x1>
    23f6:	a0 91 76 03 	lds	r26, 0x0376	; 0x800376 <timer2_toggle_count+0x2>
    23fa:	b0 91 77 03 	lds	r27, 0x0377	; 0x800377 <timer2_toggle_count+0x3>
    23fe:	89 2b       	or	r24, r25
    2400:	8a 2b       	or	r24, r26
    2402:	8b 2b       	or	r24, r27
    2404:	51 f1       	breq	.+84     	; 0x245a <__vector_7+0x8e>
  {
    // toggle the pin
    *timer2_pin_port ^= timer2_pin_mask;
    2406:	90 91 71 03 	lds	r25, 0x0371	; 0x800371 <timer2_pin_mask>
    240a:	e0 91 72 03 	lds	r30, 0x0372	; 0x800372 <timer2_pin_port>
    240e:	f0 91 73 03 	lds	r31, 0x0373	; 0x800373 <timer2_pin_port+0x1>
    2412:	80 81       	ld	r24, Z
    2414:	89 27       	eor	r24, r25
    2416:	80 83       	st	Z, r24

    if (timer2_toggle_count > 0)
    2418:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <timer2_toggle_count>
    241c:	90 91 75 03 	lds	r25, 0x0375	; 0x800375 <timer2_toggle_count+0x1>
    2420:	a0 91 76 03 	lds	r26, 0x0376	; 0x800376 <timer2_toggle_count+0x2>
    2424:	b0 91 77 03 	lds	r27, 0x0377	; 0x800377 <timer2_toggle_count+0x3>
    2428:	18 16       	cp	r1, r24
    242a:	19 06       	cpc	r1, r25
    242c:	1a 06       	cpc	r1, r26
    242e:	1b 06       	cpc	r1, r27
    2430:	c4 f4       	brge	.+48     	; 0x2462 <__vector_7+0x96>
      timer2_toggle_count--;
    2432:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <timer2_toggle_count>
    2436:	90 91 75 03 	lds	r25, 0x0375	; 0x800375 <timer2_toggle_count+0x1>
    243a:	a0 91 76 03 	lds	r26, 0x0376	; 0x800376 <timer2_toggle_count+0x2>
    243e:	b0 91 77 03 	lds	r27, 0x0377	; 0x800377 <timer2_toggle_count+0x3>
    2442:	01 97       	sbiw	r24, 0x01	; 1
    2444:	a1 09       	sbc	r26, r1
    2446:	b1 09       	sbc	r27, r1
    2448:	80 93 74 03 	sts	0x0374, r24	; 0x800374 <timer2_toggle_count>
    244c:	90 93 75 03 	sts	0x0375, r25	; 0x800375 <timer2_toggle_count+0x1>
    2450:	a0 93 76 03 	sts	0x0376, r26	; 0x800376 <timer2_toggle_count+0x2>
    2454:	b0 93 77 03 	sts	0x0377, r27	; 0x800377 <timer2_toggle_count+0x3>
    2458:	04 c0       	rjmp	.+8      	; 0x2462 <__vector_7+0x96>
  else
  {
    // need to call noTone() so that the tone_pins[] entry is reset, so the
    // timer gets initialized next time we call tone().
    // XXX: this assumes timer 2 is always the first one used.
    noTone(tone_pins[0]);
    245a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    245e:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <_Z6noToneh>
//    disableTimer(2);
//    *timer2_pin_port &= ~(timer2_pin_mask);  // keep pin low after stop
  }
}
    2462:	ff 91       	pop	r31
    2464:	ef 91       	pop	r30
    2466:	bf 91       	pop	r27
    2468:	af 91       	pop	r26
    246a:	9f 91       	pop	r25
    246c:	8f 91       	pop	r24
    246e:	7f 91       	pop	r23
    2470:	6f 91       	pop	r22
    2472:	5f 91       	pop	r21
    2474:	4f 91       	pop	r20
    2476:	3f 91       	pop	r19
    2478:	2f 91       	pop	r18
    247a:	0f 90       	pop	r0
    247c:	0f be       	out	0x3f, r0	; 63
    247e:	0f 90       	pop	r0
    2480:	1f 90       	pop	r1
    2482:	18 95       	reti

00002484 <__vector_16>:
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    2484:	1f 92       	push	r1
    2486:	0f 92       	push	r0
    2488:	0f b6       	in	r0, 0x3f	; 63
    248a:	0f 92       	push	r0
    248c:	11 24       	eor	r1, r1
    248e:	2f 93       	push	r18
    2490:	3f 93       	push	r19
    2492:	8f 93       	push	r24
    2494:	9f 93       	push	r25
    2496:	af 93       	push	r26
    2498:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    249a:	80 91 87 03 	lds	r24, 0x0387	; 0x800387 <timer0_millis>
    249e:	90 91 88 03 	lds	r25, 0x0388	; 0x800388 <timer0_millis+0x1>
    24a2:	a0 91 89 03 	lds	r26, 0x0389	; 0x800389 <timer0_millis+0x2>
    24a6:	b0 91 8a 03 	lds	r27, 0x038A	; 0x80038a <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    24aa:	30 91 86 03 	lds	r19, 0x0386	; 0x800386 <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    24ae:	23 e0       	ldi	r18, 0x03	; 3
    24b0:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    24b2:	2d 37       	cpi	r18, 0x7D	; 125
    24b4:	20 f4       	brcc	.+8      	; 0x24be <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    24b6:	01 96       	adiw	r24, 0x01	; 1
    24b8:	a1 1d       	adc	r26, r1
    24ba:	b1 1d       	adc	r27, r1
    24bc:	05 c0       	rjmp	.+10     	; 0x24c8 <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    24be:	26 e8       	ldi	r18, 0x86	; 134
    24c0:	23 0f       	add	r18, r19
		m += 1;
    24c2:	02 96       	adiw	r24, 0x02	; 2
    24c4:	a1 1d       	adc	r26, r1
    24c6:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    24c8:	20 93 86 03 	sts	0x0386, r18	; 0x800386 <timer0_fract>
	timer0_millis = m;
    24cc:	80 93 87 03 	sts	0x0387, r24	; 0x800387 <timer0_millis>
    24d0:	90 93 88 03 	sts	0x0388, r25	; 0x800388 <timer0_millis+0x1>
    24d4:	a0 93 89 03 	sts	0x0389, r26	; 0x800389 <timer0_millis+0x2>
    24d8:	b0 93 8a 03 	sts	0x038A, r27	; 0x80038a <timer0_millis+0x3>
	timer0_overflow_count++;
    24dc:	80 91 8b 03 	lds	r24, 0x038B	; 0x80038b <timer0_overflow_count>
    24e0:	90 91 8c 03 	lds	r25, 0x038C	; 0x80038c <timer0_overflow_count+0x1>
    24e4:	a0 91 8d 03 	lds	r26, 0x038D	; 0x80038d <timer0_overflow_count+0x2>
    24e8:	b0 91 8e 03 	lds	r27, 0x038E	; 0x80038e <timer0_overflow_count+0x3>
    24ec:	01 96       	adiw	r24, 0x01	; 1
    24ee:	a1 1d       	adc	r26, r1
    24f0:	b1 1d       	adc	r27, r1
    24f2:	80 93 8b 03 	sts	0x038B, r24	; 0x80038b <timer0_overflow_count>
    24f6:	90 93 8c 03 	sts	0x038C, r25	; 0x80038c <timer0_overflow_count+0x1>
    24fa:	a0 93 8d 03 	sts	0x038D, r26	; 0x80038d <timer0_overflow_count+0x2>
    24fe:	b0 93 8e 03 	sts	0x038E, r27	; 0x80038e <timer0_overflow_count+0x3>
}
    2502:	bf 91       	pop	r27
    2504:	af 91       	pop	r26
    2506:	9f 91       	pop	r25
    2508:	8f 91       	pop	r24
    250a:	3f 91       	pop	r19
    250c:	2f 91       	pop	r18
    250e:	0f 90       	pop	r0
    2510:	0f be       	out	0x3f, r0	; 63
    2512:	0f 90       	pop	r0
    2514:	1f 90       	pop	r1
    2516:	18 95       	reti

00002518 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    2518:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    251a:	f8 94       	cli
	m = timer0_millis;
    251c:	60 91 87 03 	lds	r22, 0x0387	; 0x800387 <timer0_millis>
    2520:	70 91 88 03 	lds	r23, 0x0388	; 0x800388 <timer0_millis+0x1>
    2524:	80 91 89 03 	lds	r24, 0x0389	; 0x800389 <timer0_millis+0x2>
    2528:	90 91 8a 03 	lds	r25, 0x038A	; 0x80038a <timer0_millis+0x3>
	SREG = oldSREG;
    252c:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    252e:	08 95       	ret

00002530 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    2530:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    2532:	f8 94       	cli
	m = timer0_overflow_count;
    2534:	80 91 8b 03 	lds	r24, 0x038B	; 0x80038b <timer0_overflow_count>
    2538:	90 91 8c 03 	lds	r25, 0x038C	; 0x80038c <timer0_overflow_count+0x1>
    253c:	a0 91 8d 03 	lds	r26, 0x038D	; 0x80038d <timer0_overflow_count+0x2>
    2540:	b0 91 8e 03 	lds	r27, 0x038E	; 0x80038e <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    2544:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    2546:	a8 9b       	sbis	0x15, 0	; 21
    2548:	05 c0       	rjmp	.+10     	; 0x2554 <micros+0x24>
    254a:	2f 3f       	cpi	r18, 0xFF	; 255
    254c:	19 f0       	breq	.+6      	; 0x2554 <micros+0x24>
		m++;
    254e:	01 96       	adiw	r24, 0x01	; 1
    2550:	a1 1d       	adc	r26, r1
    2552:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    2554:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    2556:	ba 2f       	mov	r27, r26
    2558:	a9 2f       	mov	r26, r25
    255a:	98 2f       	mov	r25, r24
    255c:	88 27       	eor	r24, r24
    255e:	82 0f       	add	r24, r18
    2560:	91 1d       	adc	r25, r1
    2562:	a1 1d       	adc	r26, r1
    2564:	b1 1d       	adc	r27, r1
    2566:	bc 01       	movw	r22, r24
    2568:	cd 01       	movw	r24, r26
    256a:	42 e0       	ldi	r20, 0x02	; 2
    256c:	66 0f       	add	r22, r22
    256e:	77 1f       	adc	r23, r23
    2570:	88 1f       	adc	r24, r24
    2572:	99 1f       	adc	r25, r25
    2574:	4a 95       	dec	r20
    2576:	d1 f7       	brne	.-12     	; 0x256c <micros+0x3c>
}
    2578:	08 95       	ret

0000257a <delay>:

void delay(unsigned long ms)
{
    257a:	8f 92       	push	r8
    257c:	9f 92       	push	r9
    257e:	af 92       	push	r10
    2580:	bf 92       	push	r11
    2582:	cf 92       	push	r12
    2584:	df 92       	push	r13
    2586:	ef 92       	push	r14
    2588:	ff 92       	push	r15
    258a:	6b 01       	movw	r12, r22
    258c:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    258e:	0e 94 98 12 	call	0x2530	; 0x2530 <micros>
    2592:	4b 01       	movw	r8, r22
    2594:	5c 01       	movw	r10, r24

	while (ms > 0) {
    2596:	c1 14       	cp	r12, r1
    2598:	d1 04       	cpc	r13, r1
    259a:	e1 04       	cpc	r14, r1
    259c:	f1 04       	cpc	r15, r1
    259e:	01 f1       	breq	.+64     	; 0x25e0 <delay+0x66>
		yield();
    25a0:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
    25a4:	0e 94 98 12 	call	0x2530	; 0x2530 <micros>
    25a8:	dc 01       	movw	r26, r24
    25aa:	cb 01       	movw	r24, r22
    25ac:	88 19       	sub	r24, r8
    25ae:	99 09       	sbc	r25, r9
    25b0:	aa 09       	sbc	r26, r10
    25b2:	bb 09       	sbc	r27, r11
    25b4:	88 3e       	cpi	r24, 0xE8	; 232
    25b6:	93 40       	sbci	r25, 0x03	; 3
    25b8:	a1 05       	cpc	r26, r1
    25ba:	b1 05       	cpc	r27, r1
    25bc:	60 f3       	brcs	.-40     	; 0x2596 <delay+0x1c>
			ms--;
    25be:	21 e0       	ldi	r18, 0x01	; 1
    25c0:	c2 1a       	sub	r12, r18
    25c2:	d1 08       	sbc	r13, r1
    25c4:	e1 08       	sbc	r14, r1
    25c6:	f1 08       	sbc	r15, r1
			start += 1000;
    25c8:	88 ee       	ldi	r24, 0xE8	; 232
    25ca:	88 0e       	add	r8, r24
    25cc:	83 e0       	ldi	r24, 0x03	; 3
    25ce:	98 1e       	adc	r9, r24
    25d0:	a1 1c       	adc	r10, r1
    25d2:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    25d4:	c1 14       	cp	r12, r1
    25d6:	d1 04       	cpc	r13, r1
    25d8:	e1 04       	cpc	r14, r1
    25da:	f1 04       	cpc	r15, r1
    25dc:	19 f7       	brne	.-58     	; 0x25a4 <delay+0x2a>
    25de:	db cf       	rjmp	.-74     	; 0x2596 <delay+0x1c>
			ms--;
			start += 1000;
		}
	}
}
    25e0:	ff 90       	pop	r15
    25e2:	ef 90       	pop	r14
    25e4:	df 90       	pop	r13
    25e6:	cf 90       	pop	r12
    25e8:	bf 90       	pop	r11
    25ea:	af 90       	pop	r10
    25ec:	9f 90       	pop	r9
    25ee:	8f 90       	pop	r8
    25f0:	08 95       	ret

000025f2 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    25f2:	82 30       	cpi	r24, 0x02	; 2
    25f4:	91 05       	cpc	r25, r1
    25f6:	38 f0       	brcs	.+14     	; 0x2606 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    25f8:	88 0f       	add	r24, r24
    25fa:	99 1f       	adc	r25, r25
    25fc:	88 0f       	add	r24, r24
    25fe:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    2600:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    2602:	01 97       	sbiw	r24, 0x01	; 1
    2604:	f1 f7       	brne	.-4      	; 0x2602 <delayMicroseconds+0x10>
    2606:	08 95       	ret

00002608 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    2608:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    260a:	84 b5       	in	r24, 0x24	; 36
    260c:	82 60       	ori	r24, 0x02	; 2
    260e:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    2610:	84 b5       	in	r24, 0x24	; 36
    2612:	81 60       	ori	r24, 0x01	; 1
    2614:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    2616:	85 b5       	in	r24, 0x25	; 37
    2618:	82 60       	ori	r24, 0x02	; 2
    261a:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    261c:	85 b5       	in	r24, 0x25	; 37
    261e:	81 60       	ori	r24, 0x01	; 1
    2620:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    2622:	ee e6       	ldi	r30, 0x6E	; 110
    2624:	f0 e0       	ldi	r31, 0x00	; 0
    2626:	80 81       	ld	r24, Z
    2628:	81 60       	ori	r24, 0x01	; 1
    262a:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    262c:	e1 e8       	ldi	r30, 0x81	; 129
    262e:	f0 e0       	ldi	r31, 0x00	; 0
    2630:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    2632:	80 81       	ld	r24, Z
    2634:	82 60       	ori	r24, 0x02	; 2
    2636:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    2638:	80 81       	ld	r24, Z
    263a:	81 60       	ori	r24, 0x01	; 1
    263c:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    263e:	e0 e8       	ldi	r30, 0x80	; 128
    2640:	f0 e0       	ldi	r31, 0x00	; 0
    2642:	80 81       	ld	r24, Z
    2644:	81 60       	ori	r24, 0x01	; 1
    2646:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    2648:	e1 eb       	ldi	r30, 0xB1	; 177
    264a:	f0 e0       	ldi	r31, 0x00	; 0
    264c:	80 81       	ld	r24, Z
    264e:	84 60       	ori	r24, 0x04	; 4
    2650:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    2652:	e0 eb       	ldi	r30, 0xB0	; 176
    2654:	f0 e0       	ldi	r31, 0x00	; 0
    2656:	80 81       	ld	r24, Z
    2658:	81 60       	ori	r24, 0x01	; 1
    265a:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    265c:	ea e7       	ldi	r30, 0x7A	; 122
    265e:	f0 e0       	ldi	r31, 0x00	; 0
    2660:	80 81       	ld	r24, Z
    2662:	84 60       	ori	r24, 0x04	; 4
    2664:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    2666:	80 81       	ld	r24, Z
    2668:	82 60       	ori	r24, 0x02	; 2
    266a:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    266c:	80 81       	ld	r24, Z
    266e:	81 60       	ori	r24, 0x01	; 1
    2670:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    2672:	80 81       	ld	r24, Z
    2674:	80 68       	ori	r24, 0x80	; 128
    2676:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    2678:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    267c:	08 95       	ret

0000267e <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    267e:	83 30       	cpi	r24, 0x03	; 3
    2680:	81 f0       	breq	.+32     	; 0x26a2 <turnOffPWM+0x24>
    2682:	28 f4       	brcc	.+10     	; 0x268e <turnOffPWM+0x10>
    2684:	81 30       	cpi	r24, 0x01	; 1
    2686:	99 f0       	breq	.+38     	; 0x26ae <turnOffPWM+0x30>
    2688:	82 30       	cpi	r24, 0x02	; 2
    268a:	a1 f0       	breq	.+40     	; 0x26b4 <turnOffPWM+0x36>
    268c:	08 95       	ret
    268e:	87 30       	cpi	r24, 0x07	; 7
    2690:	a9 f0       	breq	.+42     	; 0x26bc <turnOffPWM+0x3e>
    2692:	88 30       	cpi	r24, 0x08	; 8
    2694:	b9 f0       	breq	.+46     	; 0x26c4 <turnOffPWM+0x46>
    2696:	84 30       	cpi	r24, 0x04	; 4
    2698:	d1 f4       	brne	.+52     	; 0x26ce <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    269a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    269e:	8f 7d       	andi	r24, 0xDF	; 223
    26a0:	03 c0       	rjmp	.+6      	; 0x26a8 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    26a2:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    26a6:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    26a8:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    26ac:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    26ae:	84 b5       	in	r24, 0x24	; 36
    26b0:	8f 77       	andi	r24, 0x7F	; 127
    26b2:	02 c0       	rjmp	.+4      	; 0x26b8 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    26b4:	84 b5       	in	r24, 0x24	; 36
    26b6:	8f 7d       	andi	r24, 0xDF	; 223
    26b8:	84 bd       	out	0x24, r24	; 36
    26ba:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    26bc:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    26c0:	8f 77       	andi	r24, 0x7F	; 127
    26c2:	03 c0       	rjmp	.+6      	; 0x26ca <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    26c4:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    26c8:	8f 7d       	andi	r24, 0xDF	; 223
    26ca:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    26ce:	08 95       	ret

000026d0 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    26d0:	cf 93       	push	r28
    26d2:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    26d4:	90 e0       	ldi	r25, 0x00	; 0
    26d6:	fc 01       	movw	r30, r24
    26d8:	ed 55       	subi	r30, 0x5D	; 93
    26da:	ff 4f       	sbci	r31, 0xFF	; 255
    26dc:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    26de:	fc 01       	movw	r30, r24
    26e0:	e9 54       	subi	r30, 0x49	; 73
    26e2:	ff 4f       	sbci	r31, 0xFF	; 255
    26e4:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    26e6:	88 23       	and	r24, r24
    26e8:	61 f1       	breq	.+88     	; 0x2742 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    26ea:	90 e0       	ldi	r25, 0x00	; 0
    26ec:	88 0f       	add	r24, r24
    26ee:	99 1f       	adc	r25, r25
    26f0:	fc 01       	movw	r30, r24
    26f2:	e1 52       	subi	r30, 0x21	; 33
    26f4:	ff 4f       	sbci	r31, 0xFF	; 255
    26f6:	c5 91       	lpm	r28, Z+
    26f8:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    26fa:	fc 01       	movw	r30, r24
    26fc:	eb 52       	subi	r30, 0x2B	; 43
    26fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2700:	a5 91       	lpm	r26, Z+
    2702:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    2704:	61 11       	cpse	r22, r1
    2706:	09 c0       	rjmp	.+18     	; 0x271a <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    2708:	9f b7       	in	r25, 0x3f	; 63
                cli();
    270a:	f8 94       	cli
		*reg &= ~bit;
    270c:	88 81       	ld	r24, Y
    270e:	20 95       	com	r18
    2710:	82 23       	and	r24, r18
    2712:	88 83       	st	Y, r24
		*out &= ~bit;
    2714:	ec 91       	ld	r30, X
    2716:	2e 23       	and	r18, r30
    2718:	0b c0       	rjmp	.+22     	; 0x2730 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    271a:	62 30       	cpi	r22, 0x02	; 2
    271c:	61 f4       	brne	.+24     	; 0x2736 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    271e:	9f b7       	in	r25, 0x3f	; 63
                cli();
    2720:	f8 94       	cli
		*reg &= ~bit;
    2722:	88 81       	ld	r24, Y
    2724:	32 2f       	mov	r19, r18
    2726:	30 95       	com	r19
    2728:	83 23       	and	r24, r19
    272a:	88 83       	st	Y, r24
		*out |= bit;
    272c:	ec 91       	ld	r30, X
    272e:	2e 2b       	or	r18, r30
    2730:	2c 93       	st	X, r18
		SREG = oldSREG;
    2732:	9f bf       	out	0x3f, r25	; 63
    2734:	06 c0       	rjmp	.+12     	; 0x2742 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    2736:	8f b7       	in	r24, 0x3f	; 63
                cli();
    2738:	f8 94       	cli
		*reg |= bit;
    273a:	e8 81       	ld	r30, Y
    273c:	2e 2b       	or	r18, r30
    273e:	28 83       	st	Y, r18
		SREG = oldSREG;
    2740:	8f bf       	out	0x3f, r24	; 63
	}
}
    2742:	df 91       	pop	r29
    2744:	cf 91       	pop	r28
    2746:	08 95       	ret

00002748 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    2748:	1f 93       	push	r17
    274a:	cf 93       	push	r28
    274c:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    274e:	28 2f       	mov	r18, r24
    2750:	30 e0       	ldi	r19, 0x00	; 0
    2752:	f9 01       	movw	r30, r18
    2754:	e1 57       	subi	r30, 0x71	; 113
    2756:	ff 4f       	sbci	r31, 0xFF	; 255
    2758:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    275a:	f9 01       	movw	r30, r18
    275c:	ed 55       	subi	r30, 0x5D	; 93
    275e:	ff 4f       	sbci	r31, 0xFF	; 255
    2760:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    2762:	f9 01       	movw	r30, r18
    2764:	e9 54       	subi	r30, 0x49	; 73
    2766:	ff 4f       	sbci	r31, 0xFF	; 255
    2768:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    276a:	cc 23       	and	r28, r28
    276c:	c1 f0       	breq	.+48     	; 0x279e <digitalWrite+0x56>
    276e:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    2770:	81 11       	cpse	r24, r1
    2772:	0e 94 3f 13 	call	0x267e	; 0x267e <turnOffPWM>

	out = portOutputRegister(port);
    2776:	ec 2f       	mov	r30, r28
    2778:	f0 e0       	ldi	r31, 0x00	; 0
    277a:	ee 0f       	add	r30, r30
    277c:	ff 1f       	adc	r31, r31
    277e:	eb 52       	subi	r30, 0x2B	; 43
    2780:	ff 4f       	sbci	r31, 0xFF	; 255
    2782:	a5 91       	lpm	r26, Z+
    2784:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    2786:	9f b7       	in	r25, 0x3f	; 63
	cli();
    2788:	f8 94       	cli

	if (val == LOW) {
    278a:	11 11       	cpse	r17, r1
    278c:	04 c0       	rjmp	.+8      	; 0x2796 <digitalWrite+0x4e>
		*out &= ~bit;
    278e:	8c 91       	ld	r24, X
    2790:	d0 95       	com	r29
    2792:	d8 23       	and	r29, r24
    2794:	02 c0       	rjmp	.+4      	; 0x279a <digitalWrite+0x52>
	} else {
		*out |= bit;
    2796:	ec 91       	ld	r30, X
    2798:	de 2b       	or	r29, r30
    279a:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    279c:	9f bf       	out	0x3f, r25	; 63
}
    279e:	df 91       	pop	r29
    27a0:	cf 91       	pop	r28
    27a2:	1f 91       	pop	r17
    27a4:	08 95       	ret

000027a6 <digitalRead>:

int digitalRead(uint8_t pin)
{
    27a6:	cf 93       	push	r28
    27a8:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    27aa:	28 2f       	mov	r18, r24
    27ac:	30 e0       	ldi	r19, 0x00	; 0
    27ae:	f9 01       	movw	r30, r18
    27b0:	e1 57       	subi	r30, 0x71	; 113
    27b2:	ff 4f       	sbci	r31, 0xFF	; 255
    27b4:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    27b6:	f9 01       	movw	r30, r18
    27b8:	ed 55       	subi	r30, 0x5D	; 93
    27ba:	ff 4f       	sbci	r31, 0xFF	; 255
    27bc:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    27be:	f9 01       	movw	r30, r18
    27c0:	e9 54       	subi	r30, 0x49	; 73
    27c2:	ff 4f       	sbci	r31, 0xFF	; 255
    27c4:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    27c6:	cc 23       	and	r28, r28
    27c8:	91 f0       	breq	.+36     	; 0x27ee <digitalRead+0x48>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    27ca:	81 11       	cpse	r24, r1
    27cc:	0e 94 3f 13 	call	0x267e	; 0x267e <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    27d0:	ec 2f       	mov	r30, r28
    27d2:	f0 e0       	ldi	r31, 0x00	; 0
    27d4:	ee 0f       	add	r30, r30
    27d6:	ff 1f       	adc	r31, r31
    27d8:	e5 53       	subi	r30, 0x35	; 53
    27da:	ff 4f       	sbci	r31, 0xFF	; 255
    27dc:	a5 91       	lpm	r26, Z+
    27de:	b4 91       	lpm	r27, Z
    27e0:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    27e2:	ed 23       	and	r30, r29
    27e4:	81 e0       	ldi	r24, 0x01	; 1
    27e6:	90 e0       	ldi	r25, 0x00	; 0
    27e8:	21 f4       	brne	.+8      	; 0x27f2 <digitalRead+0x4c>
    27ea:	80 e0       	ldi	r24, 0x00	; 0
    27ec:	02 c0       	rjmp	.+4      	; 0x27f2 <digitalRead+0x4c>
    27ee:	80 e0       	ldi	r24, 0x00	; 0
    27f0:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    27f2:	df 91       	pop	r29
    27f4:	cf 91       	pop	r28
    27f6:	08 95       	ret

000027f8 <_ZN17LiquidCrystal_I2CC1Ev>:
void LiquidCrystal_I2C::blink_off(){
	noBlink();
}

void LiquidCrystal_I2C::load_custom_character(uint8_t char_num, uint8_t *rows){
		createChar(char_num, rows);
    27f8:	fc 01       	movw	r30, r24
    27fa:	13 82       	std	Z+3, r1	; 0x03
    27fc:	12 82       	std	Z+2, r1	; 0x02
    27fe:	87 e6       	ldi	r24, 0x67	; 103
    2800:	92 e0       	ldi	r25, 0x02	; 2
    2802:	91 83       	std	Z+1, r25	; 0x01
    2804:	80 83       	st	Z, r24
    2806:	13 86       	std	Z+11, r1	; 0x0b
    2808:	08 95       	ret

0000280a <_ZN17LiquidCrystal_I2C13expanderWriteEh>:
    280a:	1f 93       	push	r17
    280c:	cf 93       	push	r28
    280e:	df 93       	push	r29
    2810:	ec 01       	movw	r28, r24
    2812:	16 2f       	mov	r17, r22
    2814:	6c 81       	ldd	r22, Y+4	; 0x04
    2816:	83 e9       	ldi	r24, 0x93	; 147
    2818:	93 e0       	ldi	r25, 0x03	; 3
    281a:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <_ZN7TwoWire17beginTransmissionEh>
    281e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2820:	61 2b       	or	r22, r17
    2822:	83 e9       	ldi	r24, 0x93	; 147
    2824:	93 e0       	ldi	r25, 0x03	; 3
    2826:	0e 94 59 1e 	call	0x3cb2	; 0x3cb2 <_ZN7TwoWire5writeEh>
    282a:	83 e9       	ldi	r24, 0x93	; 147
    282c:	93 e0       	ldi	r25, 0x03	; 3
    282e:	df 91       	pop	r29
    2830:	cf 91       	pop	r28
    2832:	1f 91       	pop	r17
    2834:	0c 94 33 1f 	jmp	0x3e66	; 0x3e66 <_ZN7TwoWire15endTransmissionEv>

00002838 <_ZN17LiquidCrystal_I2C11noBacklightEv>:
    2838:	fc 01       	movw	r30, r24
    283a:	13 86       	std	Z+11, r1	; 0x0b
    283c:	60 e0       	ldi	r22, 0x00	; 0
    283e:	0c 94 05 14 	jmp	0x280a	; 0x280a <_ZN17LiquidCrystal_I2C13expanderWriteEh>

00002842 <_ZN17LiquidCrystal_I2C9backlightEv>:
    2842:	28 e0       	ldi	r18, 0x08	; 8
    2844:	fc 01       	movw	r30, r24
    2846:	23 87       	std	Z+11, r18	; 0x0b
    2848:	60 e0       	ldi	r22, 0x00	; 0
    284a:	0c 94 05 14 	jmp	0x280a	; 0x280a <_ZN17LiquidCrystal_I2C13expanderWriteEh>

0000284e <_ZN17LiquidCrystal_I2C11pulseEnableEh>:
    284e:	0f 93       	push	r16
    2850:	1f 93       	push	r17
    2852:	cf 93       	push	r28
    2854:	8c 01       	movw	r16, r24
    2856:	c6 2f       	mov	r28, r22
    2858:	64 60       	ori	r22, 0x04	; 4
    285a:	0e 94 05 14 	call	0x280a	; 0x280a <_ZN17LiquidCrystal_I2C13expanderWriteEh>
    285e:	81 e0       	ldi	r24, 0x01	; 1
    2860:	90 e0       	ldi	r25, 0x00	; 0
    2862:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <delayMicroseconds>
    2866:	6c 2f       	mov	r22, r28
    2868:	6b 7f       	andi	r22, 0xFB	; 251
    286a:	c8 01       	movw	r24, r16
    286c:	0e 94 05 14 	call	0x280a	; 0x280a <_ZN17LiquidCrystal_I2C13expanderWriteEh>
    2870:	82 e3       	ldi	r24, 0x32	; 50
    2872:	90 e0       	ldi	r25, 0x00	; 0
    2874:	cf 91       	pop	r28
    2876:	1f 91       	pop	r17
    2878:	0f 91       	pop	r16
    287a:	0c 94 f9 12 	jmp	0x25f2	; 0x25f2 <delayMicroseconds>

0000287e <_ZN17LiquidCrystal_I2C10write4bitsEh>:
    287e:	1f 93       	push	r17
    2880:	cf 93       	push	r28
    2882:	df 93       	push	r29
    2884:	ec 01       	movw	r28, r24
    2886:	16 2f       	mov	r17, r22
    2888:	0e 94 05 14 	call	0x280a	; 0x280a <_ZN17LiquidCrystal_I2C13expanderWriteEh>
    288c:	61 2f       	mov	r22, r17
    288e:	ce 01       	movw	r24, r28
    2890:	df 91       	pop	r29
    2892:	cf 91       	pop	r28
    2894:	1f 91       	pop	r17
    2896:	0c 94 27 14 	jmp	0x284e	; 0x284e <_ZN17LiquidCrystal_I2C11pulseEnableEh>

0000289a <_ZN17LiquidCrystal_I2C4sendEhh>:
    289a:	0f 93       	push	r16
    289c:	1f 93       	push	r17
    289e:	cf 93       	push	r28
    28a0:	df 93       	push	r29
    28a2:	8c 01       	movw	r16, r24
    28a4:	c6 2f       	mov	r28, r22
    28a6:	d4 2f       	mov	r29, r20
    28a8:	60 7f       	andi	r22, 0xF0	; 240
    28aa:	64 2b       	or	r22, r20
    28ac:	0e 94 3f 14 	call	0x287e	; 0x287e <_ZN17LiquidCrystal_I2C10write4bitsEh>
    28b0:	80 e1       	ldi	r24, 0x10	; 16
    28b2:	c8 9f       	mul	r28, r24
    28b4:	b0 01       	movw	r22, r0
    28b6:	11 24       	eor	r1, r1
    28b8:	6d 2b       	or	r22, r29
    28ba:	c8 01       	movw	r24, r16
    28bc:	df 91       	pop	r29
    28be:	cf 91       	pop	r28
    28c0:	1f 91       	pop	r17
    28c2:	0f 91       	pop	r16
    28c4:	0c 94 3f 14 	jmp	0x287e	; 0x287e <_ZN17LiquidCrystal_I2C10write4bitsEh>

000028c8 <_ZN17LiquidCrystal_I2C7commandEh>:
    28c8:	40 e0       	ldi	r20, 0x00	; 0
    28ca:	0c 94 4d 14 	jmp	0x289a	; 0x289a <_ZN17LiquidCrystal_I2C4sendEhh>

000028ce <_ZN17LiquidCrystal_I2C5clearEv>:
    28ce:	61 e0       	ldi	r22, 0x01	; 1
    28d0:	0e 94 64 14 	call	0x28c8	; 0x28c8 <_ZN17LiquidCrystal_I2C7commandEh>
    28d4:	80 ed       	ldi	r24, 0xD0	; 208
    28d6:	97 e0       	ldi	r25, 0x07	; 7
    28d8:	0c 94 f9 12 	jmp	0x25f2	; 0x25f2 <delayMicroseconds>

000028dc <_ZN17LiquidCrystal_I2C4homeEv>:
    28dc:	62 e0       	ldi	r22, 0x02	; 2
    28de:	0e 94 64 14 	call	0x28c8	; 0x28c8 <_ZN17LiquidCrystal_I2C7commandEh>
    28e2:	80 ed       	ldi	r24, 0xD0	; 208
    28e4:	97 e0       	ldi	r25, 0x07	; 7
    28e6:	0c 94 f9 12 	jmp	0x25f2	; 0x25f2 <delayMicroseconds>

000028ea <_ZN17LiquidCrystal_I2C9setCursorEhh>:
    28ea:	cf 93       	push	r28
    28ec:	df 93       	push	r29
    28ee:	cd b7       	in	r28, 0x3d	; 61
    28f0:	de b7       	in	r29, 0x3e	; 62
    28f2:	28 97       	sbiw	r28, 0x08	; 8
    28f4:	0f b6       	in	r0, 0x3f	; 63
    28f6:	f8 94       	cli
    28f8:	de bf       	out	0x3e, r29	; 62
    28fa:	0f be       	out	0x3f, r0	; 63
    28fc:	cd bf       	out	0x3d, r28	; 61
    28fe:	9c 01       	movw	r18, r24
    2900:	88 e0       	ldi	r24, 0x08	; 8
    2902:	e1 e0       	ldi	r30, 0x01	; 1
    2904:	f1 e0       	ldi	r31, 0x01	; 1
    2906:	de 01       	movw	r26, r28
    2908:	11 96       	adiw	r26, 0x01	; 1
    290a:	01 90       	ld	r0, Z+
    290c:	0d 92       	st	X+, r0
    290e:	8a 95       	dec	r24
    2910:	e1 f7       	brne	.-8      	; 0x290a <_ZN17LiquidCrystal_I2C9setCursorEhh+0x20>
    2912:	f9 01       	movw	r30, r18
    2914:	80 85       	ldd	r24, Z+8	; 0x08
    2916:	84 17       	cp	r24, r20
    2918:	10 f4       	brcc	.+4      	; 0x291e <_ZN17LiquidCrystal_I2C9setCursorEhh+0x34>
    291a:	4f ef       	ldi	r20, 0xFF	; 255
    291c:	48 0f       	add	r20, r24
    291e:	fe 01       	movw	r30, r28
    2920:	31 96       	adiw	r30, 0x01	; 1
    2922:	e4 0f       	add	r30, r20
    2924:	f1 1d       	adc	r31, r1
    2926:	e4 0f       	add	r30, r20
    2928:	f1 1d       	adc	r31, r1
    292a:	90 81       	ld	r25, Z
    292c:	69 0f       	add	r22, r25
    292e:	60 68       	ori	r22, 0x80	; 128
    2930:	c9 01       	movw	r24, r18
    2932:	28 96       	adiw	r28, 0x08	; 8
    2934:	0f b6       	in	r0, 0x3f	; 63
    2936:	f8 94       	cli
    2938:	de bf       	out	0x3e, r29	; 62
    293a:	0f be       	out	0x3f, r0	; 63
    293c:	cd bf       	out	0x3d, r28	; 61
    293e:	df 91       	pop	r29
    2940:	cf 91       	pop	r28
    2942:	0c 94 64 14 	jmp	0x28c8	; 0x28c8 <_ZN17LiquidCrystal_I2C7commandEh>

00002946 <_ZN17LiquidCrystal_I2C7displayEv>:
    2946:	fc 01       	movw	r30, r24
    2948:	66 81       	ldd	r22, Z+6	; 0x06
    294a:	26 2f       	mov	r18, r22
    294c:	24 60       	ori	r18, 0x04	; 4
    294e:	26 83       	std	Z+6, r18	; 0x06
    2950:	6c 60       	ori	r22, 0x0C	; 12
    2952:	0c 94 64 14 	jmp	0x28c8	; 0x28c8 <_ZN17LiquidCrystal_I2C7commandEh>

00002956 <_ZN17LiquidCrystal_I2C5writeEh>:

#include "Arduino.h"

#define printIIC(args)	Wire.write(args)
inline size_t LiquidCrystal_I2C::write(uint8_t value) {
	send(value, Rs);
    2956:	41 e0       	ldi	r20, 0x01	; 1
    2958:	0e 94 4d 14 	call	0x289a	; 0x289a <_ZN17LiquidCrystal_I2C4sendEhh>
	return 1;
}
    295c:	81 e0       	ldi	r24, 0x01	; 1
    295e:	90 e0       	ldi	r25, 0x00	; 0
    2960:	08 95       	ret

00002962 <_ZN17LiquidCrystal_I2C5beginEhhh>:
	Wire.begin();
	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
	begin(_cols, _rows);  
}

void LiquidCrystal_I2C::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) {
    2962:	cf 93       	push	r28
    2964:	df 93       	push	r29
    2966:	ec 01       	movw	r28, r24
	if (lines > 1) {
    2968:	42 30       	cpi	r20, 0x02	; 2
    296a:	18 f0       	brcs	.+6      	; 0x2972 <_ZN17LiquidCrystal_I2C5beginEhhh+0x10>
		_displayfunction |= LCD_2LINE;
    296c:	8d 81       	ldd	r24, Y+5	; 0x05
    296e:	88 60       	ori	r24, 0x08	; 8
    2970:	8d 83       	std	Y+5, r24	; 0x05
	}
	_numlines = lines;
    2972:	48 87       	std	Y+8, r20	; 0x08

	// for some 1 line displays you can select a 10 pixel high font
	if ((dotsize != 0) && (lines == 1)) {
    2974:	22 23       	and	r18, r18
    2976:	29 f0       	breq	.+10     	; 0x2982 <_ZN17LiquidCrystal_I2C5beginEhhh+0x20>
    2978:	41 30       	cpi	r20, 0x01	; 1
    297a:	19 f4       	brne	.+6      	; 0x2982 <_ZN17LiquidCrystal_I2C5beginEhhh+0x20>
		_displayfunction |= LCD_5x10DOTS;
    297c:	8d 81       	ldd	r24, Y+5	; 0x05
    297e:	84 60       	ori	r24, 0x04	; 4
    2980:	8d 83       	std	Y+5, r24	; 0x05
	}

	// SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
	// according to datasheet, we need at least 40ms after power rises above 2.7V
	// before sending commands. Arduino can turn on way befer 4.5V so we'll wait 50
	delay(50); 
    2982:	62 e3       	ldi	r22, 0x32	; 50
    2984:	70 e0       	ldi	r23, 0x00	; 0
    2986:	80 e0       	ldi	r24, 0x00	; 0
    2988:	90 e0       	ldi	r25, 0x00	; 0
    298a:	0e 94 bd 12 	call	0x257a	; 0x257a <delay>
  
	// Now we pull both RS and R/W low to begin commands
	expanderWrite(_backlightval);	// reset expanderand turn backlight off (Bit 8 =1)
    298e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2990:	ce 01       	movw	r24, r28
    2992:	0e 94 05 14 	call	0x280a	; 0x280a <_ZN17LiquidCrystal_I2C13expanderWriteEh>
	delay(1000);
    2996:	68 ee       	ldi	r22, 0xE8	; 232
    2998:	73 e0       	ldi	r23, 0x03	; 3
    299a:	80 e0       	ldi	r24, 0x00	; 0
    299c:	90 e0       	ldi	r25, 0x00	; 0
    299e:	0e 94 bd 12 	call	0x257a	; 0x257a <delay>
  	//put the LCD into 4 bit mode
	// this is according to the hitachi HD44780 datasheet
	// figure 24, pg 46
	
	  // we start in 8bit mode, try to set 4 bit mode
   write4bits(0x03 << 4);
    29a2:	60 e3       	ldi	r22, 0x30	; 48
    29a4:	ce 01       	movw	r24, r28
    29a6:	0e 94 3f 14 	call	0x287e	; 0x287e <_ZN17LiquidCrystal_I2C10write4bitsEh>
   delayMicroseconds(4500); // wait min 4.1ms
    29aa:	84 e9       	ldi	r24, 0x94	; 148
    29ac:	91 e1       	ldi	r25, 0x11	; 17
    29ae:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <delayMicroseconds>
   
   // second try
   write4bits(0x03 << 4);
    29b2:	60 e3       	ldi	r22, 0x30	; 48
    29b4:	ce 01       	movw	r24, r28
    29b6:	0e 94 3f 14 	call	0x287e	; 0x287e <_ZN17LiquidCrystal_I2C10write4bitsEh>
   delayMicroseconds(4500); // wait min 4.1ms
    29ba:	84 e9       	ldi	r24, 0x94	; 148
    29bc:	91 e1       	ldi	r25, 0x11	; 17
    29be:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <delayMicroseconds>
   
   // third go!
   write4bits(0x03 << 4); 
    29c2:	60 e3       	ldi	r22, 0x30	; 48
    29c4:	ce 01       	movw	r24, r28
    29c6:	0e 94 3f 14 	call	0x287e	; 0x287e <_ZN17LiquidCrystal_I2C10write4bitsEh>
   delayMicroseconds(150);
    29ca:	86 e9       	ldi	r24, 0x96	; 150
    29cc:	90 e0       	ldi	r25, 0x00	; 0
    29ce:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <delayMicroseconds>
   
   // finally, set to 4-bit interface
   write4bits(0x02 << 4); 
    29d2:	60 e2       	ldi	r22, 0x20	; 32
    29d4:	ce 01       	movw	r24, r28
    29d6:	0e 94 3f 14 	call	0x287e	; 0x287e <_ZN17LiquidCrystal_I2C10write4bitsEh>


	// set # lines, font size, etc.
	command(LCD_FUNCTIONSET | _displayfunction);  
    29da:	6d 81       	ldd	r22, Y+5	; 0x05
    29dc:	60 62       	ori	r22, 0x20	; 32
    29de:	ce 01       	movw	r24, r28
    29e0:	0e 94 64 14 	call	0x28c8	; 0x28c8 <_ZN17LiquidCrystal_I2C7commandEh>
	
	// turn the display on with no cursor or blinking default
	_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
    29e4:	84 e0       	ldi	r24, 0x04	; 4
    29e6:	8e 83       	std	Y+6, r24	; 0x06
	display();
    29e8:	ce 01       	movw	r24, r28
    29ea:	0e 94 a3 14 	call	0x2946	; 0x2946 <_ZN17LiquidCrystal_I2C7displayEv>
	
	// clear it off
	clear();
    29ee:	ce 01       	movw	r24, r28
    29f0:	0e 94 67 14 	call	0x28ce	; 0x28ce <_ZN17LiquidCrystal_I2C5clearEv>
	
	// Initialize to default text direction (for roman languages)
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
    29f4:	82 e0       	ldi	r24, 0x02	; 2
    29f6:	8f 83       	std	Y+7, r24	; 0x07
	
	// set the entry mode
	command(LCD_ENTRYMODESET | _displaymode);
    29f8:	66 e0       	ldi	r22, 0x06	; 6
    29fa:	ce 01       	movw	r24, r28
    29fc:	0e 94 64 14 	call	0x28c8	; 0x28c8 <_ZN17LiquidCrystal_I2C7commandEh>
	
	home();
    2a00:	ce 01       	movw	r24, r28
  
}
    2a02:	df 91       	pop	r29
    2a04:	cf 91       	pop	r28
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
	
	// set the entry mode
	command(LCD_ENTRYMODESET | _displaymode);
	
	home();
    2a06:	0c 94 6e 14 	jmp	0x28dc	; 0x28dc <_ZN17LiquidCrystal_I2C4homeEv>

00002a0a <_ZN17LiquidCrystal_I2C9init_privEv>:
  _rows = lcd_rows;
	init_priv();
}

void LiquidCrystal_I2C::init_priv()
{
    2a0a:	cf 93       	push	r28
    2a0c:	df 93       	push	r29
    2a0e:	ec 01       	movw	r28, r24
	Wire.begin();
    2a10:	83 e9       	ldi	r24, 0x93	; 147
    2a12:	93 e0       	ldi	r25, 0x03	; 3
    2a14:	0e 94 98 1e 	call	0x3d30	; 0x3d30 <_ZN7TwoWire5beginEv>
	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
    2a18:	1d 82       	std	Y+5, r1	; 0x05
	begin(_cols, _rows);  
    2a1a:	20 e0       	ldi	r18, 0x00	; 0
    2a1c:	4a 85       	ldd	r20, Y+10	; 0x0a
    2a1e:	69 85       	ldd	r22, Y+9	; 0x09
    2a20:	ce 01       	movw	r24, r28
}
    2a22:	df 91       	pop	r29
    2a24:	cf 91       	pop	r28

void LiquidCrystal_I2C::init_priv()
{
	Wire.begin();
	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
	begin(_cols, _rows);  
    2a26:	0c 94 b1 14 	jmp	0x2962	; 0x2962 <_ZN17LiquidCrystal_I2C5beginEhhh>

00002a2a <_ZN17LiquidCrystal_I2C4initEhhh>:

  _backlightval = LCD_NOBACKLIGHT;
}

void LiquidCrystal_I2C::init(uint8_t lcd_Addr,uint8_t lcd_cols,uint8_t lcd_rows){
  _Addr = lcd_Addr;
    2a2a:	fc 01       	movw	r30, r24
    2a2c:	64 83       	std	Z+4, r22	; 0x04
  _cols = lcd_cols;
    2a2e:	41 87       	std	Z+9, r20	; 0x09
  _rows = lcd_rows;
    2a30:	22 87       	std	Z+10, r18	; 0x0a
	init_priv();
    2a32:	0c 94 05 15 	jmp	0x2a0a	; 0x2a0a <_ZN17LiquidCrystal_I2C9init_privEv>

00002a36 <_ZN7MFRC52219PICC_ReadCardSerialEv>:
 * @return STATUS_OK on success, STATUS_??? otherwise.
 */
MFRC522::StatusCode MFRC522::PICC_WakeupA(	byte *bufferATQA,	///< The buffer to store the ATQA (Answer to request) in
											byte *bufferSize	///< Buffer size, at least two bytes. Also number of bytes returned if STATUS_OK.
										) {
	return PICC_REQA_or_WUPA(PICC_CMD_WUPA, bufferATQA, bufferSize);
    2a36:	bc 01       	movw	r22, r24
    2a38:	6e 5f       	subi	r22, 0xFE	; 254
    2a3a:	7f 4f       	sbci	r23, 0xFF	; 255
    2a3c:	dc 01       	movw	r26, r24
    2a3e:	ed 91       	ld	r30, X+
    2a40:	fc 91       	ld	r31, X
    2a42:	01 90       	ld	r0, Z+
    2a44:	f0 81       	ld	r31, Z
    2a46:	e0 2d       	mov	r30, r0
    2a48:	40 e0       	ldi	r20, 0x00	; 0
    2a4a:	09 95       	icall
    2a4c:	91 e0       	ldi	r25, 0x01	; 1
    2a4e:	81 11       	cpse	r24, r1
    2a50:	90 e0       	ldi	r25, 0x00	; 0
    2a52:	89 2f       	mov	r24, r25
    2a54:	08 95       	ret

00002a56 <_ZN8SPIClass16beginTransactionE11SPISettings>:
    2a56:	20 91 91 03 	lds	r18, 0x0391	; 0x800391 <_ZN8SPIClass13interruptModeE>
    2a5a:	22 23       	and	r18, r18
    2a5c:	99 f0       	breq	.+38     	; 0x2a84 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
    2a5e:	4f b7       	in	r20, 0x3f	; 63
    2a60:	f8 94       	cli
    2a62:	20 91 91 03 	lds	r18, 0x0391	; 0x800391 <_ZN8SPIClass13interruptModeE>
    2a66:	21 30       	cpi	r18, 0x01	; 1
    2a68:	59 f4       	brne	.+22     	; 0x2a80 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2a>
    2a6a:	2d b3       	in	r18, 0x1d	; 29
    2a6c:	20 93 8f 03 	sts	0x038F, r18	; 0x80038f <_ZN8SPIClass13interruptSaveE>
    2a70:	3d b3       	in	r19, 0x1d	; 29
    2a72:	20 91 90 03 	lds	r18, 0x0390	; 0x800390 <_ZN8SPIClass13interruptMaskE>
    2a76:	20 95       	com	r18
    2a78:	23 23       	and	r18, r19
    2a7a:	2d bb       	out	0x1d, r18	; 29
    2a7c:	4f bf       	out	0x3f, r20	; 63
    2a7e:	02 c0       	rjmp	.+4      	; 0x2a84 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
    2a80:	40 93 8f 03 	sts	0x038F, r20	; 0x80038f <_ZN8SPIClass13interruptSaveE>
    2a84:	8c bd       	out	0x2c, r24	; 44
    2a86:	9d bd       	out	0x2d, r25	; 45
    2a88:	08 95       	ret

00002a8a <_ZN8SPIClass8transferEh>:
    2a8a:	8e bd       	out	0x2e, r24	; 46
    2a8c:	00 00       	nop
    2a8e:	0d b4       	in	r0, 0x2d	; 45
    2a90:	07 fe       	sbrs	r0, 7
    2a92:	fd cf       	rjmp	.-6      	; 0x2a8e <_ZN8SPIClass8transferEh+0x4>
    2a94:	8e b5       	in	r24, 0x2e	; 46
    2a96:	08 95       	ret

00002a98 <_ZN8SPIClass14endTransactionEv>:
    2a98:	80 91 91 03 	lds	r24, 0x0391	; 0x800391 <_ZN8SPIClass13interruptModeE>
    2a9c:	88 23       	and	r24, r24
    2a9e:	61 f0       	breq	.+24     	; 0x2ab8 <_ZN8SPIClass14endTransactionEv+0x20>
    2aa0:	9f b7       	in	r25, 0x3f	; 63
    2aa2:	f8 94       	cli
    2aa4:	20 91 91 03 	lds	r18, 0x0391	; 0x800391 <_ZN8SPIClass13interruptModeE>
    2aa8:	80 91 8f 03 	lds	r24, 0x038F	; 0x80038f <_ZN8SPIClass13interruptSaveE>
    2aac:	21 30       	cpi	r18, 0x01	; 1
    2aae:	19 f4       	brne	.+6      	; 0x2ab6 <_ZN8SPIClass14endTransactionEv+0x1e>
    2ab0:	8d bb       	out	0x1d, r24	; 29
    2ab2:	9f bf       	out	0x3f, r25	; 63
    2ab4:	08 95       	ret
    2ab6:	8f bf       	out	0x3f, r24	; 63
    2ab8:	08 95       	ret

00002aba <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh.part.1.constprop.8>:
    2aba:	af 92       	push	r10
    2abc:	bf 92       	push	r11
    2abe:	cf 92       	push	r12
    2ac0:	df 92       	push	r13
    2ac2:	ef 92       	push	r14
    2ac4:	ff 92       	push	r15
    2ac6:	0f 93       	push	r16
    2ac8:	1f 93       	push	r17
    2aca:	cf 93       	push	r28
    2acc:	df 93       	push	r29
    2ace:	6c 01       	movw	r12, r24
    2ad0:	a4 2e       	mov	r10, r20
    2ad2:	79 01       	movw	r14, r18
    2ad4:	60 68       	ori	r22, 0x80	; 128
    2ad6:	b6 2e       	mov	r11, r22
    2ad8:	83 e5       	ldi	r24, 0x53	; 83
    2ada:	90 e0       	ldi	r25, 0x00	; 0
    2adc:	0e 94 2b 15 	call	0x2a56	; 0x2a56 <_ZN8SPIClass16beginTransactionE11SPISettings>
    2ae0:	60 e0       	ldi	r22, 0x00	; 0
    2ae2:	f6 01       	movw	r30, r12
    2ae4:	86 85       	ldd	r24, Z+14	; 0x0e
    2ae6:	0e 94 a4 13 	call	0x2748	; 0x2748 <digitalWrite>
    2aea:	aa 94       	dec	r10
    2aec:	8b 2d       	mov	r24, r11
    2aee:	0e 94 45 15 	call	0x2a8a	; 0x2a8a <_ZN8SPIClass8transferEh>
    2af2:	00 23       	and	r16, r16
    2af4:	a1 f0       	breq	.+40     	; 0x2b1e <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh.part.1.constprop.8+0x64>
    2af6:	cf ef       	ldi	r28, 0xFF	; 255
    2af8:	d0 e0       	ldi	r29, 0x00	; 0
    2afa:	01 c0       	rjmp	.+2      	; 0x2afe <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh.part.1.constprop.8+0x44>
    2afc:	cc 0f       	add	r28, r28
    2afe:	0a 95       	dec	r16
    2b00:	ea f7       	brpl	.-6      	; 0x2afc <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh.part.1.constprop.8+0x42>
    2b02:	8b 2d       	mov	r24, r11
    2b04:	0e 94 45 15 	call	0x2a8a	; 0x2a8a <_ZN8SPIClass8transferEh>
    2b08:	2c 2f       	mov	r18, r28
    2b0a:	20 95       	com	r18
    2b0c:	f7 01       	movw	r30, r14
    2b0e:	90 81       	ld	r25, Z
    2b10:	92 23       	and	r25, r18
    2b12:	8c 23       	and	r24, r28
    2b14:	89 2b       	or	r24, r25
    2b16:	f7 01       	movw	r30, r14
    2b18:	80 83       	st	Z, r24
    2b1a:	11 e0       	ldi	r17, 0x01	; 1
    2b1c:	01 c0       	rjmp	.+2      	; 0x2b20 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh.part.1.constprop.8+0x66>
    2b1e:	10 e0       	ldi	r17, 0x00	; 0
    2b20:	81 2f       	mov	r24, r17
    2b22:	90 e0       	ldi	r25, 0x00	; 0
    2b24:	e7 01       	movw	r28, r14
    2b26:	c8 0f       	add	r28, r24
    2b28:	d9 1f       	adc	r29, r25
    2b2a:	1a 15       	cp	r17, r10
    2b2c:	30 f4       	brcc	.+12     	; 0x2b3a <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh.part.1.constprop.8+0x80>
    2b2e:	8b 2d       	mov	r24, r11
    2b30:	0e 94 45 15 	call	0x2a8a	; 0x2a8a <_ZN8SPIClass8transferEh>
    2b34:	88 83       	st	Y, r24
    2b36:	1f 5f       	subi	r17, 0xFF	; 255
    2b38:	f3 cf       	rjmp	.-26     	; 0x2b20 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh.part.1.constprop.8+0x66>
    2b3a:	80 e0       	ldi	r24, 0x00	; 0
    2b3c:	0e 94 45 15 	call	0x2a8a	; 0x2a8a <_ZN8SPIClass8transferEh>
    2b40:	88 83       	st	Y, r24
    2b42:	61 e0       	ldi	r22, 0x01	; 1
    2b44:	f6 01       	movw	r30, r12
    2b46:	86 85       	ldd	r24, Z+14	; 0x0e
    2b48:	0e 94 a4 13 	call	0x2748	; 0x2748 <digitalWrite>
    2b4c:	df 91       	pop	r29
    2b4e:	cf 91       	pop	r28
    2b50:	1f 91       	pop	r17
    2b52:	0f 91       	pop	r16
    2b54:	ff 90       	pop	r15
    2b56:	ef 90       	pop	r14
    2b58:	df 90       	pop	r13
    2b5a:	cf 90       	pop	r12
    2b5c:	bf 90       	pop	r11
    2b5e:	af 90       	pop	r10
    2b60:	0c 94 4c 15 	jmp	0x2a98	; 0x2a98 <_ZN8SPIClass14endTransactionEv>

00002b64 <_ZN7MFRC522C1Ev>:
    2b64:	fc 01       	movw	r30, r24
    2b66:	83 e7       	ldi	r24, 0x73	; 115
    2b68:	92 e0       	ldi	r25, 0x02	; 2
    2b6a:	91 83       	std	Z+1, r25	; 0x01
    2b6c:	80 83       	st	Z, r24
    2b6e:	8a e0       	ldi	r24, 0x0A	; 10
    2b70:	86 87       	std	Z+14, r24	; 0x0e
    2b72:	8f ef       	ldi	r24, 0xFF	; 255
    2b74:	87 87       	std	Z+15, r24	; 0x0f
    2b76:	08 95       	ret

00002b78 <_ZN7MFRC522C1Ehh>:
    2b78:	fc 01       	movw	r30, r24
    2b7a:	83 e7       	ldi	r24, 0x73	; 115
    2b7c:	92 e0       	ldi	r25, 0x02	; 2
    2b7e:	91 83       	std	Z+1, r25	; 0x01
    2b80:	80 83       	st	Z, r24
    2b82:	66 87       	std	Z+14, r22	; 0x0e
    2b84:	47 87       	std	Z+15, r20	; 0x0f
    2b86:	08 95       	ret

00002b88 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>:
    2b88:	0f 93       	push	r16
    2b8a:	1f 93       	push	r17
    2b8c:	cf 93       	push	r28
    2b8e:	df 93       	push	r29
    2b90:	ec 01       	movw	r28, r24
    2b92:	06 2f       	mov	r16, r22
    2b94:	14 2f       	mov	r17, r20
    2b96:	83 e5       	ldi	r24, 0x53	; 83
    2b98:	90 e0       	ldi	r25, 0x00	; 0
    2b9a:	0e 94 2b 15 	call	0x2a56	; 0x2a56 <_ZN8SPIClass16beginTransactionE11SPISettings>
    2b9e:	60 e0       	ldi	r22, 0x00	; 0
    2ba0:	8e 85       	ldd	r24, Y+14	; 0x0e
    2ba2:	0e 94 a4 13 	call	0x2748	; 0x2748 <digitalWrite>
    2ba6:	80 2f       	mov	r24, r16
    2ba8:	0e 94 45 15 	call	0x2a8a	; 0x2a8a <_ZN8SPIClass8transferEh>
    2bac:	81 2f       	mov	r24, r17
    2bae:	0e 94 45 15 	call	0x2a8a	; 0x2a8a <_ZN8SPIClass8transferEh>
    2bb2:	61 e0       	ldi	r22, 0x01	; 1
    2bb4:	8e 85       	ldd	r24, Y+14	; 0x0e
    2bb6:	0e 94 a4 13 	call	0x2748	; 0x2748 <digitalWrite>
    2bba:	df 91       	pop	r29
    2bbc:	cf 91       	pop	r28
    2bbe:	1f 91       	pop	r17
    2bc0:	0f 91       	pop	r16
    2bc2:	0c 94 4c 15 	jmp	0x2a98	; 0x2a98 <_ZN8SPIClass14endTransactionEv>

00002bc6 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEhPh>:
    2bc6:	df 92       	push	r13
    2bc8:	ef 92       	push	r14
    2bca:	ff 92       	push	r15
    2bcc:	0f 93       	push	r16
    2bce:	1f 93       	push	r17
    2bd0:	cf 93       	push	r28
    2bd2:	df 93       	push	r29
    2bd4:	8c 01       	movw	r16, r24
    2bd6:	c6 2f       	mov	r28, r22
    2bd8:	f4 2e       	mov	r15, r20
    2bda:	d2 2e       	mov	r13, r18
    2bdc:	e3 2e       	mov	r14, r19
    2bde:	83 e5       	ldi	r24, 0x53	; 83
    2be0:	90 e0       	ldi	r25, 0x00	; 0
    2be2:	0e 94 2b 15 	call	0x2a56	; 0x2a56 <_ZN8SPIClass16beginTransactionE11SPISettings>
    2be6:	60 e0       	ldi	r22, 0x00	; 0
    2be8:	f8 01       	movw	r30, r16
    2bea:	86 85       	ldd	r24, Z+14	; 0x0e
    2bec:	0e 94 a4 13 	call	0x2748	; 0x2748 <digitalWrite>
    2bf0:	8c 2f       	mov	r24, r28
    2bf2:	0e 94 45 15 	call	0x2a8a	; 0x2a8a <_ZN8SPIClass8transferEh>
    2bf6:	cd 2d       	mov	r28, r13
    2bf8:	de 2d       	mov	r29, r14
    2bfa:	ce 01       	movw	r24, r28
    2bfc:	8f 0d       	add	r24, r15
    2bfe:	91 1d       	adc	r25, r1
    2c00:	7c 01       	movw	r14, r24
    2c02:	ec 16       	cp	r14, r28
    2c04:	fd 06       	cpc	r15, r29
    2c06:	21 f0       	breq	.+8      	; 0x2c10 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEhPh+0x4a>
    2c08:	89 91       	ld	r24, Y+
    2c0a:	0e 94 45 15 	call	0x2a8a	; 0x2a8a <_ZN8SPIClass8transferEh>
    2c0e:	f9 cf       	rjmp	.-14     	; 0x2c02 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEhPh+0x3c>
    2c10:	61 e0       	ldi	r22, 0x01	; 1
    2c12:	f8 01       	movw	r30, r16
    2c14:	86 85       	ldd	r24, Z+14	; 0x0e
    2c16:	0e 94 a4 13 	call	0x2748	; 0x2748 <digitalWrite>
    2c1a:	df 91       	pop	r29
    2c1c:	cf 91       	pop	r28
    2c1e:	1f 91       	pop	r17
    2c20:	0f 91       	pop	r16
    2c22:	ff 90       	pop	r15
    2c24:	ef 90       	pop	r14
    2c26:	df 90       	pop	r13
    2c28:	0c 94 4c 15 	jmp	0x2a98	; 0x2a98 <_ZN8SPIClass14endTransactionEv>

00002c2c <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>:
    2c2c:	1f 93       	push	r17
    2c2e:	cf 93       	push	r28
    2c30:	df 93       	push	r29
    2c32:	ec 01       	movw	r28, r24
    2c34:	16 2f       	mov	r17, r22
    2c36:	83 e5       	ldi	r24, 0x53	; 83
    2c38:	90 e0       	ldi	r25, 0x00	; 0
    2c3a:	0e 94 2b 15 	call	0x2a56	; 0x2a56 <_ZN8SPIClass16beginTransactionE11SPISettings>
    2c3e:	60 e0       	ldi	r22, 0x00	; 0
    2c40:	8e 85       	ldd	r24, Y+14	; 0x0e
    2c42:	0e 94 a4 13 	call	0x2748	; 0x2748 <digitalWrite>
    2c46:	81 2f       	mov	r24, r17
    2c48:	80 68       	ori	r24, 0x80	; 128
    2c4a:	0e 94 45 15 	call	0x2a8a	; 0x2a8a <_ZN8SPIClass8transferEh>
    2c4e:	80 e0       	ldi	r24, 0x00	; 0
    2c50:	0e 94 45 15 	call	0x2a8a	; 0x2a8a <_ZN8SPIClass8transferEh>
    2c54:	18 2f       	mov	r17, r24
    2c56:	61 e0       	ldi	r22, 0x01	; 1
    2c58:	8e 85       	ldd	r24, Y+14	; 0x0e
    2c5a:	0e 94 a4 13 	call	0x2748	; 0x2748 <digitalWrite>
    2c5e:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN8SPIClass14endTransactionEv>
    2c62:	81 2f       	mov	r24, r17
    2c64:	df 91       	pop	r29
    2c66:	cf 91       	pop	r28
    2c68:	1f 91       	pop	r17
    2c6a:	08 95       	ret

00002c6c <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh>:
    2c6c:	0f 93       	push	r16
    2c6e:	41 11       	cpse	r20, r1
    2c70:	0e 94 5d 15 	call	0x2aba	; 0x2aba <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh.part.1.constprop.8>
    2c74:	0f 91       	pop	r16
    2c76:	08 95       	ret

00002c78 <_ZN7MFRC52222PCD_SetRegisterBitMaskENS_12PCD_RegisterEh>:
    2c78:	0f 93       	push	r16
    2c7a:	1f 93       	push	r17
    2c7c:	cf 93       	push	r28
    2c7e:	df 93       	push	r29
    2c80:	8c 01       	movw	r16, r24
    2c82:	d6 2f       	mov	r29, r22
    2c84:	c4 2f       	mov	r28, r20
    2c86:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    2c8a:	48 2f       	mov	r20, r24
    2c8c:	4c 2b       	or	r20, r28
    2c8e:	6d 2f       	mov	r22, r29
    2c90:	c8 01       	movw	r24, r16
    2c92:	df 91       	pop	r29
    2c94:	cf 91       	pop	r28
    2c96:	1f 91       	pop	r17
    2c98:	0f 91       	pop	r16
    2c9a:	0c 94 c4 15 	jmp	0x2b88	; 0x2b88 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>

00002c9e <_ZN7MFRC52224PCD_ClearRegisterBitMaskENS_12PCD_RegisterEh>:
    2c9e:	0f 93       	push	r16
    2ca0:	1f 93       	push	r17
    2ca2:	cf 93       	push	r28
    2ca4:	df 93       	push	r29
    2ca6:	8c 01       	movw	r16, r24
    2ca8:	d6 2f       	mov	r29, r22
    2caa:	c4 2f       	mov	r28, r20
    2cac:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    2cb0:	c0 95       	com	r28
    2cb2:	4c 2f       	mov	r20, r28
    2cb4:	48 23       	and	r20, r24
    2cb6:	6d 2f       	mov	r22, r29
    2cb8:	c8 01       	movw	r24, r16
    2cba:	df 91       	pop	r29
    2cbc:	cf 91       	pop	r28
    2cbe:	1f 91       	pop	r17
    2cc0:	0f 91       	pop	r16
    2cc2:	0c 94 c4 15 	jmp	0x2b88	; 0x2b88 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>

00002cc6 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>:
    2cc6:	cf 92       	push	r12
    2cc8:	df 92       	push	r13
    2cca:	ef 92       	push	r14
    2ccc:	ff 92       	push	r15
    2cce:	0f 93       	push	r16
    2cd0:	1f 93       	push	r17
    2cd2:	cf 93       	push	r28
    2cd4:	df 93       	push	r29
    2cd6:	ec 01       	movw	r28, r24
    2cd8:	6b 01       	movw	r12, r22
    2cda:	14 2f       	mov	r17, r20
    2cdc:	79 01       	movw	r14, r18
    2cde:	40 e0       	ldi	r20, 0x00	; 0
    2ce0:	62 e0       	ldi	r22, 0x02	; 2
    2ce2:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    2ce6:	44 e0       	ldi	r20, 0x04	; 4
    2ce8:	6a e0       	ldi	r22, 0x0A	; 10
    2cea:	ce 01       	movw	r24, r28
    2cec:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    2cf0:	40 e8       	ldi	r20, 0x80	; 128
    2cf2:	64 e1       	ldi	r22, 0x14	; 20
    2cf4:	ce 01       	movw	r24, r28
    2cf6:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    2cfa:	96 01       	movw	r18, r12
    2cfc:	41 2f       	mov	r20, r17
    2cfe:	62 e1       	ldi	r22, 0x12	; 18
    2d00:	ce 01       	movw	r24, r28
    2d02:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEhPh>
    2d06:	43 e0       	ldi	r20, 0x03	; 3
    2d08:	62 e0       	ldi	r22, 0x02	; 2
    2d0a:	ce 01       	movw	r24, r28
    2d0c:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    2d10:	08 e8       	ldi	r16, 0x88	; 136
    2d12:	13 e1       	ldi	r17, 0x13	; 19
    2d14:	6a e0       	ldi	r22, 0x0A	; 10
    2d16:	ce 01       	movw	r24, r28
    2d18:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    2d1c:	82 ff       	sbrs	r24, 2
    2d1e:	13 c0       	rjmp	.+38     	; 0x2d46 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x80>
    2d20:	40 e0       	ldi	r20, 0x00	; 0
    2d22:	62 e0       	ldi	r22, 0x02	; 2
    2d24:	ce 01       	movw	r24, r28
    2d26:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    2d2a:	64 e4       	ldi	r22, 0x44	; 68
    2d2c:	ce 01       	movw	r24, r28
    2d2e:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    2d32:	f7 01       	movw	r30, r14
    2d34:	80 83       	st	Z, r24
    2d36:	62 e4       	ldi	r22, 0x42	; 66
    2d38:	ce 01       	movw	r24, r28
    2d3a:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    2d3e:	f7 01       	movw	r30, r14
    2d40:	81 83       	std	Z+1, r24	; 0x01
    2d42:	80 e0       	ldi	r24, 0x00	; 0
    2d44:	04 c0       	rjmp	.+8      	; 0x2d4e <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x88>
    2d46:	01 50       	subi	r16, 0x01	; 1
    2d48:	11 09       	sbc	r17, r1
    2d4a:	21 f7       	brne	.-56     	; 0x2d14 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x4e>
    2d4c:	83 e0       	ldi	r24, 0x03	; 3
    2d4e:	df 91       	pop	r29
    2d50:	cf 91       	pop	r28
    2d52:	1f 91       	pop	r17
    2d54:	0f 91       	pop	r16
    2d56:	ff 90       	pop	r15
    2d58:	ef 90       	pop	r14
    2d5a:	df 90       	pop	r13
    2d5c:	cf 90       	pop	r12
    2d5e:	08 95       	ret

00002d60 <_ZN7MFRC5229PCD_ResetEv>:
    2d60:	0f 93       	push	r16
    2d62:	1f 93       	push	r17
    2d64:	cf 93       	push	r28
    2d66:	8c 01       	movw	r16, r24
    2d68:	4f e0       	ldi	r20, 0x0F	; 15
    2d6a:	62 e0       	ldi	r22, 0x02	; 2
    2d6c:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    2d70:	c3 e0       	ldi	r28, 0x03	; 3
    2d72:	62 e3       	ldi	r22, 0x32	; 50
    2d74:	70 e0       	ldi	r23, 0x00	; 0
    2d76:	80 e0       	ldi	r24, 0x00	; 0
    2d78:	90 e0       	ldi	r25, 0x00	; 0
    2d7a:	0e 94 bd 12 	call	0x257a	; 0x257a <delay>
    2d7e:	62 e0       	ldi	r22, 0x02	; 2
    2d80:	c8 01       	movw	r24, r16
    2d82:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    2d86:	84 ff       	sbrs	r24, 4
    2d88:	02 c0       	rjmp	.+4      	; 0x2d8e <_ZN7MFRC5229PCD_ResetEv+0x2e>
    2d8a:	c1 50       	subi	r28, 0x01	; 1
    2d8c:	91 f7       	brne	.-28     	; 0x2d72 <_ZN7MFRC5229PCD_ResetEv+0x12>
    2d8e:	cf 91       	pop	r28
    2d90:	1f 91       	pop	r17
    2d92:	0f 91       	pop	r16
    2d94:	08 95       	ret

00002d96 <_ZN7MFRC52213PCD_AntennaOnEv>:
    2d96:	cf 93       	push	r28
    2d98:	df 93       	push	r29
    2d9a:	ec 01       	movw	r28, r24
    2d9c:	68 e2       	ldi	r22, 0x28	; 40
    2d9e:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    2da2:	98 2f       	mov	r25, r24
    2da4:	93 70       	andi	r25, 0x03	; 3
    2da6:	93 30       	cpi	r25, 0x03	; 3
    2da8:	41 f0       	breq	.+16     	; 0x2dba <_ZN7MFRC52213PCD_AntennaOnEv+0x24>
    2daa:	48 2f       	mov	r20, r24
    2dac:	43 60       	ori	r20, 0x03	; 3
    2dae:	68 e2       	ldi	r22, 0x28	; 40
    2db0:	ce 01       	movw	r24, r28
    2db2:	df 91       	pop	r29
    2db4:	cf 91       	pop	r28
    2db6:	0c 94 c4 15 	jmp	0x2b88	; 0x2b88 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    2dba:	df 91       	pop	r29
    2dbc:	cf 91       	pop	r28
    2dbe:	08 95       	ret

00002dc0 <_ZN7MFRC5228PCD_InitEv>:
    2dc0:	cf 93       	push	r28
    2dc2:	df 93       	push	r29
    2dc4:	ec 01       	movw	r28, r24
    2dc6:	61 e0       	ldi	r22, 0x01	; 1
    2dc8:	8e 85       	ldd	r24, Y+14	; 0x0e
    2dca:	0e 94 68 13 	call	0x26d0	; 0x26d0 <pinMode>
    2dce:	61 e0       	ldi	r22, 0x01	; 1
    2dd0:	8e 85       	ldd	r24, Y+14	; 0x0e
    2dd2:	0e 94 a4 13 	call	0x2748	; 0x2748 <digitalWrite>
    2dd6:	8f 85       	ldd	r24, Y+15	; 0x0f
    2dd8:	8f 3f       	cpi	r24, 0xFF	; 255
    2dda:	09 f4       	brne	.+2      	; 0x2dde <_ZN7MFRC5228PCD_InitEv+0x1e>
    2ddc:	51 c0       	rjmp	.+162    	; 0x2e80 <_ZN7MFRC5228PCD_InitEv+0xc0>
    2dde:	60 e0       	ldi	r22, 0x00	; 0
    2de0:	0e 94 68 13 	call	0x26d0	; 0x26d0 <pinMode>
    2de4:	8f 85       	ldd	r24, Y+15	; 0x0f
    2de6:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <digitalRead>
    2dea:	89 2b       	or	r24, r25
    2dec:	09 f0       	breq	.+2      	; 0x2df0 <_ZN7MFRC5228PCD_InitEv+0x30>
    2dee:	48 c0       	rjmp	.+144    	; 0x2e80 <_ZN7MFRC5228PCD_InitEv+0xc0>
    2df0:	61 e0       	ldi	r22, 0x01	; 1
    2df2:	8f 85       	ldd	r24, Y+15	; 0x0f
    2df4:	0e 94 68 13 	call	0x26d0	; 0x26d0 <pinMode>
    2df8:	60 e0       	ldi	r22, 0x00	; 0
    2dfa:	8f 85       	ldd	r24, Y+15	; 0x0f
    2dfc:	0e 94 a4 13 	call	0x2748	; 0x2748 <digitalWrite>
    2e00:	82 e0       	ldi	r24, 0x02	; 2
    2e02:	90 e0       	ldi	r25, 0x00	; 0
    2e04:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <delayMicroseconds>
    2e08:	61 e0       	ldi	r22, 0x01	; 1
    2e0a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e0c:	0e 94 a4 13 	call	0x2748	; 0x2748 <digitalWrite>
    2e10:	62 e3       	ldi	r22, 0x32	; 50
    2e12:	70 e0       	ldi	r23, 0x00	; 0
    2e14:	80 e0       	ldi	r24, 0x00	; 0
    2e16:	90 e0       	ldi	r25, 0x00	; 0
    2e18:	0e 94 bd 12 	call	0x257a	; 0x257a <delay>
    2e1c:	40 e0       	ldi	r20, 0x00	; 0
    2e1e:	64 e2       	ldi	r22, 0x24	; 36
    2e20:	ce 01       	movw	r24, r28
    2e22:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    2e26:	40 e0       	ldi	r20, 0x00	; 0
    2e28:	66 e2       	ldi	r22, 0x26	; 38
    2e2a:	ce 01       	movw	r24, r28
    2e2c:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    2e30:	46 e2       	ldi	r20, 0x26	; 38
    2e32:	68 e4       	ldi	r22, 0x48	; 72
    2e34:	ce 01       	movw	r24, r28
    2e36:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    2e3a:	40 e8       	ldi	r20, 0x80	; 128
    2e3c:	64 e5       	ldi	r22, 0x54	; 84
    2e3e:	ce 01       	movw	r24, r28
    2e40:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    2e44:	49 ea       	ldi	r20, 0xA9	; 169
    2e46:	66 e5       	ldi	r22, 0x56	; 86
    2e48:	ce 01       	movw	r24, r28
    2e4a:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    2e4e:	43 e0       	ldi	r20, 0x03	; 3
    2e50:	68 e5       	ldi	r22, 0x58	; 88
    2e52:	ce 01       	movw	r24, r28
    2e54:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    2e58:	48 ee       	ldi	r20, 0xE8	; 232
    2e5a:	6a e5       	ldi	r22, 0x5A	; 90
    2e5c:	ce 01       	movw	r24, r28
    2e5e:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    2e62:	40 e4       	ldi	r20, 0x40	; 64
    2e64:	6a e2       	ldi	r22, 0x2A	; 42
    2e66:	ce 01       	movw	r24, r28
    2e68:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    2e6c:	4d e3       	ldi	r20, 0x3D	; 61
    2e6e:	62 e2       	ldi	r22, 0x22	; 34
    2e70:	ce 01       	movw	r24, r28
    2e72:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    2e76:	ce 01       	movw	r24, r28
    2e78:	df 91       	pop	r29
    2e7a:	cf 91       	pop	r28
    2e7c:	0c 94 cb 16 	jmp	0x2d96	; 0x2d96 <_ZN7MFRC52213PCD_AntennaOnEv>
    2e80:	ce 01       	movw	r24, r28
    2e82:	0e 94 b0 16 	call	0x2d60	; 0x2d60 <_ZN7MFRC5229PCD_ResetEv>
    2e86:	ca cf       	rjmp	.-108    	; 0x2e1c <_ZN7MFRC5228PCD_InitEv+0x5c>

00002e88 <_ZN7MFRC52218PCD_GetAntennaGainEv>:
    2e88:	6c e4       	ldi	r22, 0x4C	; 76
    2e8a:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    2e8e:	80 77       	andi	r24, 0x70	; 112
    2e90:	08 95       	ret

00002e92 <_ZN7MFRC52218PCD_SetAntennaGainEh>:
    2e92:	0f 93       	push	r16
    2e94:	1f 93       	push	r17
    2e96:	cf 93       	push	r28
    2e98:	8c 01       	movw	r16, r24
    2e9a:	c6 2f       	mov	r28, r22
    2e9c:	0e 94 44 17 	call	0x2e88	; 0x2e88 <_ZN7MFRC52218PCD_GetAntennaGainEv>
    2ea0:	8c 17       	cp	r24, r28
    2ea2:	71 f0       	breq	.+28     	; 0x2ec0 <_ZN7MFRC52218PCD_SetAntennaGainEh+0x2e>
    2ea4:	40 e7       	ldi	r20, 0x70	; 112
    2ea6:	6c e4       	ldi	r22, 0x4C	; 76
    2ea8:	c8 01       	movw	r24, r16
    2eaa:	0e 94 4f 16 	call	0x2c9e	; 0x2c9e <_ZN7MFRC52224PCD_ClearRegisterBitMaskENS_12PCD_RegisterEh>
    2eae:	4c 2f       	mov	r20, r28
    2eb0:	40 77       	andi	r20, 0x70	; 112
    2eb2:	6c e4       	ldi	r22, 0x4C	; 76
    2eb4:	c8 01       	movw	r24, r16
    2eb6:	cf 91       	pop	r28
    2eb8:	1f 91       	pop	r17
    2eba:	0f 91       	pop	r16
    2ebc:	0c 94 3c 16 	jmp	0x2c78	; 0x2c78 <_ZN7MFRC52222PCD_SetRegisterBitMaskENS_12PCD_RegisterEh>
    2ec0:	cf 91       	pop	r28
    2ec2:	1f 91       	pop	r17
    2ec4:	0f 91       	pop	r16
    2ec6:	08 95       	ret

00002ec8 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>:
    2ec8:	3f 92       	push	r3
    2eca:	4f 92       	push	r4
    2ecc:	5f 92       	push	r5
    2ece:	6f 92       	push	r6
    2ed0:	7f 92       	push	r7
    2ed2:	8f 92       	push	r8
    2ed4:	9f 92       	push	r9
    2ed6:	af 92       	push	r10
    2ed8:	bf 92       	push	r11
    2eda:	cf 92       	push	r12
    2edc:	df 92       	push	r13
    2ede:	ef 92       	push	r14
    2ee0:	ff 92       	push	r15
    2ee2:	0f 93       	push	r16
    2ee4:	1f 93       	push	r17
    2ee6:	cf 93       	push	r28
    2ee8:	df 93       	push	r29
    2eea:	00 d0       	rcall	.+0      	; 0x2eec <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24>
    2eec:	cd b7       	in	r28, 0x3d	; 61
    2eee:	de b7       	in	r29, 0x3e	; 62
    2ef0:	3c 01       	movw	r6, r24
    2ef2:	16 2f       	mov	r17, r22
    2ef4:	94 2e       	mov	r9, r20
    2ef6:	29 01       	movw	r4, r18
    2ef8:	a1 14       	cp	r10, r1
    2efa:	b1 04       	cpc	r11, r1
    2efc:	19 f0       	breq	.+6      	; 0x2f04 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x3c>
    2efe:	f5 01       	movw	r30, r10
    2f00:	40 81       	ld	r20, Z
    2f02:	01 c0       	rjmp	.+2      	; 0x2f06 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x3e>
    2f04:	40 e0       	ldi	r20, 0x00	; 0
    2f06:	34 2e       	mov	r3, r20
    2f08:	f0 e1       	ldi	r31, 0x10	; 16
    2f0a:	8f 9e       	mul	r8, r31
    2f0c:	30 0c       	add	r3, r0
    2f0e:	11 24       	eor	r1, r1
    2f10:	40 e0       	ldi	r20, 0x00	; 0
    2f12:	62 e0       	ldi	r22, 0x02	; 2
    2f14:	c3 01       	movw	r24, r6
    2f16:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    2f1a:	4f e7       	ldi	r20, 0x7F	; 127
    2f1c:	68 e0       	ldi	r22, 0x08	; 8
    2f1e:	c3 01       	movw	r24, r6
    2f20:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    2f24:	40 e8       	ldi	r20, 0x80	; 128
    2f26:	64 e1       	ldi	r22, 0x14	; 20
    2f28:	c3 01       	movw	r24, r6
    2f2a:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    2f2e:	92 01       	movw	r18, r4
    2f30:	40 2f       	mov	r20, r16
    2f32:	62 e1       	ldi	r22, 0x12	; 18
    2f34:	c3 01       	movw	r24, r6
    2f36:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEhPh>
    2f3a:	43 2d       	mov	r20, r3
    2f3c:	6a e1       	ldi	r22, 0x1A	; 26
    2f3e:	c3 01       	movw	r24, r6
    2f40:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    2f44:	41 2f       	mov	r20, r17
    2f46:	62 e0       	ldi	r22, 0x02	; 2
    2f48:	c3 01       	movw	r24, r6
    2f4a:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    2f4e:	1c 30       	cpi	r17, 0x0C	; 12
    2f50:	29 f4       	brne	.+10     	; 0x2f5c <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x94>
    2f52:	40 e8       	ldi	r20, 0x80	; 128
    2f54:	6a e1       	ldi	r22, 0x1A	; 26
    2f56:	c3 01       	movw	r24, r6
    2f58:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <_ZN7MFRC52222PCD_SetRegisterBitMaskENS_12PCD_RegisterEh>
    2f5c:	00 ed       	ldi	r16, 0xD0	; 208
    2f5e:	17 e0       	ldi	r17, 0x07	; 7
    2f60:	68 e0       	ldi	r22, 0x08	; 8
    2f62:	c3 01       	movw	r24, r6
    2f64:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    2f68:	98 2f       	mov	r25, r24
    2f6a:	99 21       	and	r25, r9
    2f6c:	39 f4       	brne	.+14     	; 0x2f7c <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xb4>
    2f6e:	80 fd       	sbrc	r24, 0
    2f70:	03 c0       	rjmp	.+6      	; 0x2f78 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xb0>
    2f72:	01 50       	subi	r16, 0x01	; 1
    2f74:	11 09       	sbc	r17, r1
    2f76:	a1 f7       	brne	.-24     	; 0x2f60 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x98>
    2f78:	83 e0       	ldi	r24, 0x03	; 3
    2f7a:	65 c0       	rjmp	.+202    	; 0x3046 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x17e>
    2f7c:	6c e0       	ldi	r22, 0x0C	; 12
    2f7e:	c3 01       	movw	r24, r6
    2f80:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    2f84:	18 2f       	mov	r17, r24
    2f86:	83 71       	andi	r24, 0x13	; 19
    2f88:	09 f0       	breq	.+2      	; 0x2f8c <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xc4>
    2f8a:	5a c0       	rjmp	.+180    	; 0x3040 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x178>
    2f8c:	e1 14       	cp	r14, r1
    2f8e:	f1 04       	cpc	r15, r1
    2f90:	f9 f0       	breq	.+62     	; 0x2fd0 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x108>
    2f92:	c1 14       	cp	r12, r1
    2f94:	d1 04       	cpc	r13, r1
    2f96:	e1 f0       	breq	.+56     	; 0x2fd0 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x108>
    2f98:	64 e1       	ldi	r22, 0x14	; 20
    2f9a:	c3 01       	movw	r24, r6
    2f9c:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    2fa0:	f6 01       	movw	r30, r12
    2fa2:	90 81       	ld	r25, Z
    2fa4:	98 17       	cp	r25, r24
    2fa6:	08 f4       	brcc	.+2      	; 0x2faa <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xe2>
    2fa8:	45 c0       	rjmp	.+138    	; 0x3034 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x16c>
    2faa:	80 83       	st	Z, r24
    2fac:	08 2d       	mov	r16, r8
    2fae:	97 01       	movw	r18, r14
    2fb0:	48 2f       	mov	r20, r24
    2fb2:	62 e1       	ldi	r22, 0x12	; 18
    2fb4:	c3 01       	movw	r24, r6
    2fb6:	0e 94 36 16 	call	0x2c6c	; 0x2c6c <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh>
    2fba:	68 e1       	ldi	r22, 0x18	; 24
    2fbc:	c3 01       	movw	r24, r6
    2fbe:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    2fc2:	87 70       	andi	r24, 0x07	; 7
    2fc4:	a1 14       	cp	r10, r1
    2fc6:	b1 04       	cpc	r11, r1
    2fc8:	21 f0       	breq	.+8      	; 0x2fd2 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x10a>
    2fca:	f5 01       	movw	r30, r10
    2fcc:	80 83       	st	Z, r24
    2fce:	01 c0       	rjmp	.+2      	; 0x2fd2 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x10a>
    2fd0:	80 e0       	ldi	r24, 0x00	; 0
    2fd2:	13 fd       	sbrc	r17, 3
    2fd4:	31 c0       	rjmp	.+98     	; 0x3038 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x170>
    2fd6:	e1 14       	cp	r14, r1
    2fd8:	f1 04       	cpc	r15, r1
    2fda:	81 f1       	breq	.+96     	; 0x303c <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x174>
    2fdc:	c1 14       	cp	r12, r1
    2fde:	d1 04       	cpc	r13, r1
    2fe0:	69 f1       	breq	.+90     	; 0x303c <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x174>
    2fe2:	9e 89       	ldd	r25, Y+22	; 0x16
    2fe4:	99 23       	and	r25, r25
    2fe6:	51 f1       	breq	.+84     	; 0x303c <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x174>
    2fe8:	f6 01       	movw	r30, r12
    2fea:	40 81       	ld	r20, Z
    2fec:	41 30       	cpi	r20, 0x01	; 1
    2fee:	21 f4       	brne	.+8      	; 0x2ff8 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x130>
    2ff0:	84 30       	cpi	r24, 0x04	; 4
    2ff2:	41 f5       	brne	.+80     	; 0x3044 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x17c>
    2ff4:	8f ef       	ldi	r24, 0xFF	; 255
    2ff6:	27 c0       	rjmp	.+78     	; 0x3046 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x17e>
    2ff8:	42 30       	cpi	r20, 0x02	; 2
    2ffa:	20 f1       	brcs	.+72     	; 0x3044 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x17c>
    2ffc:	81 11       	cpse	r24, r1
    2ffe:	22 c0       	rjmp	.+68     	; 0x3044 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x17c>
    3000:	42 50       	subi	r20, 0x02	; 2
    3002:	9e 01       	movw	r18, r28
    3004:	2f 5f       	subi	r18, 0xFF	; 255
    3006:	3f 4f       	sbci	r19, 0xFF	; 255
    3008:	b7 01       	movw	r22, r14
    300a:	c3 01       	movw	r24, r6
    300c:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
    3010:	81 11       	cpse	r24, r1
    3012:	19 c0       	rjmp	.+50     	; 0x3046 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x17e>
    3014:	f6 01       	movw	r30, r12
    3016:	80 81       	ld	r24, Z
    3018:	e8 0e       	add	r14, r24
    301a:	f1 1c       	adc	r15, r1
    301c:	f7 01       	movw	r30, r14
    301e:	32 97       	sbiw	r30, 0x02	; 2
    3020:	90 81       	ld	r25, Z
    3022:	89 81       	ldd	r24, Y+1	; 0x01
    3024:	98 13       	cpse	r25, r24
    3026:	0e c0       	rjmp	.+28     	; 0x3044 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x17c>
    3028:	31 96       	adiw	r30, 0x01	; 1
    302a:	90 81       	ld	r25, Z
    302c:	8a 81       	ldd	r24, Y+2	; 0x02
    302e:	98 13       	cpse	r25, r24
    3030:	09 c0       	rjmp	.+18     	; 0x3044 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x17c>
    3032:	04 c0       	rjmp	.+8      	; 0x303c <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x174>
    3034:	84 e0       	ldi	r24, 0x04	; 4
    3036:	07 c0       	rjmp	.+14     	; 0x3046 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x17e>
    3038:	82 e0       	ldi	r24, 0x02	; 2
    303a:	05 c0       	rjmp	.+10     	; 0x3046 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x17e>
    303c:	80 e0       	ldi	r24, 0x00	; 0
    303e:	03 c0       	rjmp	.+6      	; 0x3046 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x17e>
    3040:	81 e0       	ldi	r24, 0x01	; 1
    3042:	01 c0       	rjmp	.+2      	; 0x3046 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x17e>
    3044:	87 e0       	ldi	r24, 0x07	; 7
    3046:	0f 90       	pop	r0
    3048:	0f 90       	pop	r0
    304a:	df 91       	pop	r29
    304c:	cf 91       	pop	r28
    304e:	1f 91       	pop	r17
    3050:	0f 91       	pop	r16
    3052:	ff 90       	pop	r15
    3054:	ef 90       	pop	r14
    3056:	df 90       	pop	r13
    3058:	cf 90       	pop	r12
    305a:	bf 90       	pop	r11
    305c:	af 90       	pop	r10
    305e:	9f 90       	pop	r9
    3060:	8f 90       	pop	r8
    3062:	7f 90       	pop	r7
    3064:	6f 90       	pop	r6
    3066:	5f 90       	pop	r5
    3068:	4f 90       	pop	r4
    306a:	3f 90       	pop	r3
    306c:	08 95       	ret

0000306e <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>:
    306e:	8f 92       	push	r8
    3070:	af 92       	push	r10
    3072:	bf 92       	push	r11
    3074:	cf 92       	push	r12
    3076:	df 92       	push	r13
    3078:	ef 92       	push	r14
    307a:	ff 92       	push	r15
    307c:	0f 93       	push	r16
    307e:	1f 93       	push	r17
    3080:	af 92       	push	r10
    3082:	8c 2c       	mov	r8, r12
    3084:	57 01       	movw	r10, r14
    3086:	68 01       	movw	r12, r16
    3088:	79 01       	movw	r14, r18
    308a:	04 2f       	mov	r16, r20
    308c:	9b 01       	movw	r18, r22
    308e:	40 e3       	ldi	r20, 0x30	; 48
    3090:	6c e0       	ldi	r22, 0x0C	; 12
    3092:	0e 94 64 17 	call	0x2ec8	; 0x2ec8 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>
    3096:	0f 90       	pop	r0
    3098:	1f 91       	pop	r17
    309a:	0f 91       	pop	r16
    309c:	ff 90       	pop	r15
    309e:	ef 90       	pop	r14
    30a0:	df 90       	pop	r13
    30a2:	cf 90       	pop	r12
    30a4:	bf 90       	pop	r11
    30a6:	af 90       	pop	r10
    30a8:	8f 90       	pop	r8
    30aa:	08 95       	ret

000030ac <_ZN7MFRC52211PICC_SelectEPNS_3UidEh>:
    30ac:	2f 92       	push	r2
    30ae:	3f 92       	push	r3
    30b0:	4f 92       	push	r4
    30b2:	5f 92       	push	r5
    30b4:	6f 92       	push	r6
    30b6:	7f 92       	push	r7
    30b8:	8f 92       	push	r8
    30ba:	9f 92       	push	r9
    30bc:	af 92       	push	r10
    30be:	bf 92       	push	r11
    30c0:	cf 92       	push	r12
    30c2:	df 92       	push	r13
    30c4:	ef 92       	push	r14
    30c6:	ff 92       	push	r15
    30c8:	0f 93       	push	r16
    30ca:	1f 93       	push	r17
    30cc:	cf 93       	push	r28
    30ce:	df 93       	push	r29
    30d0:	cd b7       	in	r28, 0x3d	; 61
    30d2:	de b7       	in	r29, 0x3e	; 62
    30d4:	2c 97       	sbiw	r28, 0x0c	; 12
    30d6:	0f b6       	in	r0, 0x3f	; 63
    30d8:	f8 94       	cli
    30da:	de bf       	out	0x3e, r29	; 62
    30dc:	0f be       	out	0x3f, r0	; 63
    30de:	cd bf       	out	0x3d, r28	; 61
    30e0:	41 35       	cpi	r20, 0x51	; 81
    30e2:	08 f0       	brcs	.+2      	; 0x30e6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x3a>
    30e4:	05 c1       	rjmp	.+522    	; 0x32f0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x244>
    30e6:	34 2e       	mov	r3, r20
    30e8:	3b 01       	movw	r6, r22
    30ea:	4c 01       	movw	r8, r24
    30ec:	40 e8       	ldi	r20, 0x80	; 128
    30ee:	6c e1       	ldi	r22, 0x1C	; 28
    30f0:	0e 94 4f 16 	call	0x2c9e	; 0x2c9e <_ZN7MFRC52224PCD_ClearRegisterBitMaskENS_12PCD_RegisterEh>
    30f4:	22 24       	eor	r2, r2
    30f6:	23 94       	inc	r2
    30f8:	32 e0       	ldi	r19, 0x02	; 2
    30fa:	23 16       	cp	r2, r19
    30fc:	91 f0       	breq	.+36     	; 0x3122 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x76>
    30fe:	83 e0       	ldi	r24, 0x03	; 3
    3100:	28 16       	cp	r2, r24
    3102:	e1 f0       	breq	.+56     	; 0x313c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x90>
    3104:	91 e0       	ldi	r25, 0x01	; 1
    3106:	29 12       	cpse	r2, r25
    3108:	f7 c0       	rjmp	.+494    	; 0x32f8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x24c>
    310a:	83 e9       	ldi	r24, 0x93	; 147
    310c:	89 83       	std	Y+1, r24	; 0x01
    310e:	33 20       	and	r3, r3
    3110:	d1 f0       	breq	.+52     	; 0x3146 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x9a>
    3112:	81 e0       	ldi	r24, 0x01	; 1
    3114:	f3 01       	movw	r30, r6
    3116:	90 81       	ld	r25, Z
    3118:	95 30       	cpi	r25, 0x05	; 5
    311a:	08 f4       	brcc	.+2      	; 0x311e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x72>
    311c:	80 e0       	ldi	r24, 0x00	; 0
    311e:	b1 2c       	mov	r11, r1
    3120:	17 c0       	rjmp	.+46     	; 0x3150 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xa4>
    3122:	f5 e9       	ldi	r31, 0x95	; 149
    3124:	f9 83       	std	Y+1, r31	; 0x01
    3126:	33 20       	and	r3, r3
    3128:	81 f0       	breq	.+32     	; 0x314a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x9e>
    312a:	81 e0       	ldi	r24, 0x01	; 1
    312c:	f3 01       	movw	r30, r6
    312e:	90 81       	ld	r25, Z
    3130:	98 30       	cpi	r25, 0x08	; 8
    3132:	08 f4       	brcc	.+2      	; 0x3136 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x8a>
    3134:	80 e0       	ldi	r24, 0x00	; 0
    3136:	43 e0       	ldi	r20, 0x03	; 3
    3138:	b4 2e       	mov	r11, r20
    313a:	0a c0       	rjmp	.+20     	; 0x3150 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xa4>
    313c:	87 e9       	ldi	r24, 0x97	; 151
    313e:	89 83       	std	Y+1, r24	; 0x01
    3140:	36 e0       	ldi	r19, 0x06	; 6
    3142:	b3 2e       	mov	r11, r19
    3144:	04 c0       	rjmp	.+8      	; 0x314e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xa2>
    3146:	b1 2c       	mov	r11, r1
    3148:	02 c0       	rjmp	.+4      	; 0x314e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xa2>
    314a:	23 e0       	ldi	r18, 0x03	; 3
    314c:	b2 2e       	mov	r11, r18
    314e:	80 e0       	ldi	r24, 0x00	; 0
    3150:	d3 2c       	mov	r13, r3
    3152:	f8 e0       	ldi	r31, 0x08	; 8
    3154:	bf 9e       	mul	r11, r31
    3156:	d0 18       	sub	r13, r0
    3158:	11 24       	eor	r1, r1
    315a:	d7 fc       	sbrc	r13, 7
    315c:	d1 2c       	mov	r13, r1
    315e:	88 23       	and	r24, r24
    3160:	21 f0       	breq	.+8      	; 0x316a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xbe>
    3162:	98 e8       	ldi	r25, 0x88	; 136
    3164:	9b 83       	std	Y+3, r25	; 0x03
    3166:	33 e0       	ldi	r19, 0x03	; 3
    3168:	01 c0       	rjmp	.+2      	; 0x316c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xc0>
    316a:	32 e0       	ldi	r19, 0x02	; 2
    316c:	21 e0       	ldi	r18, 0x01	; 1
    316e:	9d 2d       	mov	r25, r13
    3170:	97 70       	andi	r25, 0x07	; 7
    3172:	09 f4       	brne	.+2      	; 0x3176 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xca>
    3174:	20 e0       	ldi	r18, 0x00	; 0
    3176:	9d 2d       	mov	r25, r13
    3178:	95 95       	asr	r25
    317a:	95 95       	asr	r25
    317c:	95 95       	asr	r25
    317e:	29 0f       	add	r18, r25
    3180:	31 f4       	brne	.+12     	; 0x318e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xe2>
    3182:	88 23       	and	r24, r24
    3184:	09 f4       	brne	.+2      	; 0x3188 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xdc>
    3186:	91 c0       	rjmp	.+290    	; 0x32aa <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1fe>
    3188:	38 e0       	ldi	r19, 0x08	; 8
    318a:	d3 0e       	add	r13, r19
    318c:	8e c0       	rjmp	.+284    	; 0x32aa <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1fe>
    318e:	81 11       	cpse	r24, r1
    3190:	02 c0       	rjmp	.+4      	; 0x3196 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xea>
    3192:	94 e0       	ldi	r25, 0x04	; 4
    3194:	01 c0       	rjmp	.+2      	; 0x3198 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xec>
    3196:	93 e0       	ldi	r25, 0x03	; 3
    3198:	29 17       	cp	r18, r25
    319a:	08 f4       	brcc	.+2      	; 0x319e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xf2>
    319c:	92 2f       	mov	r25, r18
    319e:	eb 2d       	mov	r30, r11
    31a0:	f0 e0       	ldi	r31, 0x00	; 0
    31a2:	31 96       	adiw	r30, 0x01	; 1
    31a4:	e6 0d       	add	r30, r6
    31a6:	f7 1d       	adc	r31, r7
    31a8:	23 2f       	mov	r18, r19
    31aa:	41 91       	ld	r20, Z+
    31ac:	a1 e0       	ldi	r26, 0x01	; 1
    31ae:	b0 e0       	ldi	r27, 0x00	; 0
    31b0:	ac 0f       	add	r26, r28
    31b2:	bd 1f       	adc	r27, r29
    31b4:	a2 0f       	add	r26, r18
    31b6:	b1 1d       	adc	r27, r1
    31b8:	4c 93       	st	X, r20
    31ba:	2f 5f       	subi	r18, 0xFF	; 255
    31bc:	42 2f       	mov	r20, r18
    31be:	43 1b       	sub	r20, r19
    31c0:	49 17       	cp	r20, r25
    31c2:	98 f3       	brcs	.-26     	; 0x31aa <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xfe>
    31c4:	de cf       	rjmp	.-68     	; 0x3182 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xd6>
    31c6:	81 11       	cpse	r24, r1
    31c8:	dd c0       	rjmp	.+442    	; 0x3384 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2d8>
    31ca:	9f e1       	ldi	r25, 0x1F	; 31
    31cc:	9d 15       	cp	r25, r13
    31ce:	0c f4       	brge	.+2      	; 0x31d2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x126>
    31d0:	95 c0       	rjmp	.+298    	; 0x32fc <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x250>
    31d2:	80 e2       	ldi	r24, 0x20	; 32
    31d4:	d8 2e       	mov	r13, r24
    31d6:	90 e7       	ldi	r25, 0x70	; 112
    31d8:	9a 83       	std	Y+2, r25	; 0x02
    31da:	9b 81       	ldd	r25, Y+3	; 0x03
    31dc:	8c 81       	ldd	r24, Y+4	; 0x04
    31de:	89 27       	eor	r24, r25
    31e0:	9d 81       	ldd	r25, Y+5	; 0x05
    31e2:	89 27       	eor	r24, r25
    31e4:	9e 81       	ldd	r25, Y+6	; 0x06
    31e6:	89 27       	eor	r24, r25
    31e8:	8f 83       	std	Y+7, r24	; 0x07
    31ea:	9e 01       	movw	r18, r28
    31ec:	28 5f       	subi	r18, 0xF8	; 248
    31ee:	3f 4f       	sbci	r19, 0xFF	; 255
    31f0:	47 e0       	ldi	r20, 0x07	; 7
    31f2:	be 01       	movw	r22, r28
    31f4:	6f 5f       	subi	r22, 0xFF	; 255
    31f6:	7f 4f       	sbci	r23, 0xFF	; 255
    31f8:	c4 01       	movw	r24, r8
    31fa:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
    31fe:	81 11       	cpse	r24, r1
    3200:	c1 c0       	rjmp	.+386    	; 0x3384 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2d8>
    3202:	1b 86       	std	Y+11, r1	; 0x0b
    3204:	e3 e0       	ldi	r30, 0x03	; 3
    3206:	ea 87       	std	Y+10, r30	; 0x0a
    3208:	ce 01       	movw	r24, r28
    320a:	07 96       	adiw	r24, 0x07	; 7
    320c:	2c 01       	movw	r4, r24
    320e:	99 e0       	ldi	r25, 0x09	; 9
    3210:	9c 87       	std	Y+12, r25	; 0x0c
    3212:	cb 84       	ldd	r12, Y+11	; 0x0b
    3214:	4c 2d       	mov	r20, r12
    3216:	42 95       	swap	r20
    3218:	40 7f       	andi	r20, 0xF0	; 240
    321a:	4c 0d       	add	r20, r12
    321c:	6a e1       	ldi	r22, 0x1A	; 26
    321e:	c4 01       	movw	r24, r8
    3220:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    3224:	a1 2c       	mov	r10, r1
    3226:	ce 01       	movw	r24, r28
    3228:	0b 96       	adiw	r24, 0x0b	; 11
    322a:	7c 01       	movw	r14, r24
    322c:	8e 01       	movw	r16, r28
    322e:	06 5f       	subi	r16, 0xF6	; 246
    3230:	1f 4f       	sbci	r17, 0xFF	; 255
    3232:	92 01       	movw	r18, r4
    3234:	4c 85       	ldd	r20, Y+12	; 0x0c
    3236:	be 01       	movw	r22, r28
    3238:	6f 5f       	subi	r22, 0xFF	; 255
    323a:	7f 4f       	sbci	r23, 0xFF	; 255
    323c:	c4 01       	movw	r24, r8
    323e:	0e 94 37 18 	call	0x306e	; 0x306e <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
    3242:	82 30       	cpi	r24, 0x02	; 2
    3244:	09 f0       	breq	.+2      	; 0x3248 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x19c>
    3246:	bf cf       	rjmp	.-130    	; 0x31c6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x11a>
    3248:	6c e1       	ldi	r22, 0x1C	; 28
    324a:	c4 01       	movw	r24, r8
    324c:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    3250:	85 fd       	sbrc	r24, 5
    3252:	50 c0       	rjmp	.+160    	; 0x32f4 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x248>
    3254:	8f 71       	andi	r24, 0x1F	; 31
    3256:	09 f4       	brne	.+2      	; 0x325a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1ae>
    3258:	80 e2       	ldi	r24, 0x20	; 32
    325a:	28 2f       	mov	r18, r24
    325c:	30 e0       	ldi	r19, 0x00	; 0
    325e:	4d 2d       	mov	r20, r13
    3260:	dd 0c       	add	r13, r13
    3262:	55 0b       	sbc	r21, r21
    3264:	42 17       	cp	r20, r18
    3266:	53 07       	cpc	r21, r19
    3268:	0c f0       	brlt	.+2      	; 0x326c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1c0>
    326a:	46 c0       	rjmp	.+140    	; 0x32f8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x24c>
    326c:	d8 2e       	mov	r13, r24
    326e:	85 95       	asr	r24
    3270:	85 95       	asr	r24
    3272:	85 95       	asr	r24
    3274:	91 e0       	ldi	r25, 0x01	; 1
    3276:	98 0f       	add	r25, r24
    3278:	42 2f       	mov	r20, r18
    327a:	47 70       	andi	r20, 0x07	; 7
    327c:	81 e0       	ldi	r24, 0x01	; 1
    327e:	09 f4       	brne	.+2      	; 0x3282 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1d6>
    3280:	80 e0       	ldi	r24, 0x00	; 0
    3282:	89 0f       	add	r24, r25
    3284:	e1 e0       	ldi	r30, 0x01	; 1
    3286:	f0 e0       	ldi	r31, 0x00	; 0
    3288:	ec 0f       	add	r30, r28
    328a:	fd 1f       	adc	r31, r29
    328c:	e8 0f       	add	r30, r24
    328e:	f1 1d       	adc	r31, r1
    3290:	21 50       	subi	r18, 0x01	; 1
    3292:	31 09       	sbc	r19, r1
    3294:	27 70       	andi	r18, 0x07	; 7
    3296:	33 27       	eor	r19, r19
    3298:	81 e0       	ldi	r24, 0x01	; 1
    329a:	90 e0       	ldi	r25, 0x00	; 0
    329c:	01 c0       	rjmp	.+2      	; 0x32a0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1f4>
    329e:	88 0f       	add	r24, r24
    32a0:	2a 95       	dec	r18
    32a2:	ea f7       	brpl	.-6      	; 0x329e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1f2>
    32a4:	90 81       	ld	r25, Z
    32a6:	89 2b       	or	r24, r25
    32a8:	80 83       	st	Z, r24
    32aa:	8f e1       	ldi	r24, 0x1F	; 31
    32ac:	8d 15       	cp	r24, r13
    32ae:	0c f4       	brge	.+2      	; 0x32b2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x206>
    32b0:	92 cf       	rjmp	.-220    	; 0x31d6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x12a>
    32b2:	9d 2d       	mov	r25, r13
    32b4:	97 70       	andi	r25, 0x07	; 7
    32b6:	9b 87       	std	Y+11, r25	; 0x0b
    32b8:	8d 2d       	mov	r24, r13
    32ba:	85 95       	asr	r24
    32bc:	85 95       	asr	r24
    32be:	85 95       	asr	r24
    32c0:	8e 5f       	subi	r24, 0xFE	; 254
    32c2:	29 2f       	mov	r18, r25
    32c4:	e0 e1       	ldi	r30, 0x10	; 16
    32c6:	8e 9f       	mul	r24, r30
    32c8:	20 0d       	add	r18, r0
    32ca:	11 24       	eor	r1, r1
    32cc:	2a 83       	std	Y+2, r18	; 0x02
    32ce:	21 e0       	ldi	r18, 0x01	; 1
    32d0:	91 11       	cpse	r25, r1
    32d2:	01 c0       	rjmp	.+2      	; 0x32d6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x22a>
    32d4:	20 e0       	ldi	r18, 0x00	; 0
    32d6:	28 0f       	add	r18, r24
    32d8:	2c 87       	std	Y+12, r18	; 0x0c
    32da:	44 24       	eor	r4, r4
    32dc:	43 94       	inc	r4
    32de:	51 2c       	mov	r5, r1
    32e0:	4c 0e       	add	r4, r28
    32e2:	5d 1e       	adc	r5, r29
    32e4:	48 0e       	add	r4, r24
    32e6:	51 1c       	adc	r5, r1
    32e8:	f9 e0       	ldi	r31, 0x09	; 9
    32ea:	f8 1b       	sub	r31, r24
    32ec:	fa 87       	std	Y+10, r31	; 0x0a
    32ee:	91 cf       	rjmp	.-222    	; 0x3212 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x166>
    32f0:	86 e0       	ldi	r24, 0x06	; 6
    32f2:	48 c0       	rjmp	.+144    	; 0x3384 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2d8>
    32f4:	82 e0       	ldi	r24, 0x02	; 2
    32f6:	46 c0       	rjmp	.+140    	; 0x3384 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2d8>
    32f8:	85 e0       	ldi	r24, 0x05	; 5
    32fa:	44 c0       	rjmp	.+136    	; 0x3384 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2d8>
    32fc:	8b 81       	ldd	r24, Y+3	; 0x03
    32fe:	88 38       	cpi	r24, 0x88	; 136
    3300:	f1 f1       	breq	.+124    	; 0x337e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2d2>
    3302:	82 e0       	ldi	r24, 0x02	; 2
    3304:	94 e0       	ldi	r25, 0x04	; 4
    3306:	eb 2d       	mov	r30, r11
    3308:	f0 e0       	ldi	r31, 0x00	; 0
    330a:	31 96       	adiw	r30, 0x01	; 1
    330c:	e6 0d       	add	r30, r6
    330e:	f7 1d       	adc	r31, r7
    3310:	98 0f       	add	r25, r24
    3312:	a1 e0       	ldi	r26, 0x01	; 1
    3314:	b0 e0       	ldi	r27, 0x00	; 0
    3316:	ac 0f       	add	r26, r28
    3318:	bd 1f       	adc	r27, r29
    331a:	a8 0f       	add	r26, r24
    331c:	b1 1d       	adc	r27, r1
    331e:	2c 91       	ld	r18, X
    3320:	21 93       	st	Z+, r18
    3322:	8f 5f       	subi	r24, 0xFF	; 255
    3324:	98 13       	cpse	r25, r24
    3326:	f5 cf       	rjmp	.-22     	; 0x3312 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x266>
    3328:	8a 85       	ldd	r24, Y+10	; 0x0a
    332a:	83 30       	cpi	r24, 0x03	; 3
    332c:	21 f5       	brne	.+72     	; 0x3376 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2ca>
    332e:	8b 85       	ldd	r24, Y+11	; 0x0b
    3330:	81 11       	cpse	r24, r1
    3332:	21 c0       	rjmp	.+66     	; 0x3376 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2ca>
    3334:	9e 01       	movw	r18, r28
    3336:	2d 5f       	subi	r18, 0xFD	; 253
    3338:	3f 4f       	sbci	r19, 0xFF	; 255
    333a:	41 e0       	ldi	r20, 0x01	; 1
    333c:	b2 01       	movw	r22, r4
    333e:	c4 01       	movw	r24, r8
    3340:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
    3344:	81 11       	cpse	r24, r1
    3346:	1e c0       	rjmp	.+60     	; 0x3384 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2d8>
    3348:	9b 81       	ldd	r25, Y+3	; 0x03
    334a:	f2 01       	movw	r30, r4
    334c:	81 81       	ldd	r24, Z+1	; 0x01
    334e:	98 13       	cpse	r25, r24
    3350:	14 c0       	rjmp	.+40     	; 0x337a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2ce>
    3352:	9c 81       	ldd	r25, Y+4	; 0x04
    3354:	82 81       	ldd	r24, Z+2	; 0x02
    3356:	98 13       	cpse	r25, r24
    3358:	10 c0       	rjmp	.+32     	; 0x337a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2ce>
    335a:	80 81       	ld	r24, Z
    335c:	82 ff       	sbrs	r24, 2
    335e:	02 c0       	rjmp	.+4      	; 0x3364 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2b8>
    3360:	23 94       	inc	r2
    3362:	ca ce       	rjmp	.-620    	; 0x30f8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x4c>
    3364:	f3 01       	movw	r30, r6
    3366:	83 87       	std	Z+11, r24	; 0x0b
    3368:	82 2d       	mov	r24, r2
    336a:	88 0f       	add	r24, r24
    336c:	82 0d       	add	r24, r2
    336e:	8f 5f       	subi	r24, 0xFF	; 255
    3370:	80 83       	st	Z, r24
    3372:	80 e0       	ldi	r24, 0x00	; 0
    3374:	07 c0       	rjmp	.+14     	; 0x3384 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2d8>
    3376:	81 e0       	ldi	r24, 0x01	; 1
    3378:	05 c0       	rjmp	.+10     	; 0x3384 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2d8>
    337a:	87 e0       	ldi	r24, 0x07	; 7
    337c:	03 c0       	rjmp	.+6      	; 0x3384 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2d8>
    337e:	83 e0       	ldi	r24, 0x03	; 3
    3380:	93 e0       	ldi	r25, 0x03	; 3
    3382:	c1 cf       	rjmp	.-126    	; 0x3306 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x25a>
    3384:	2c 96       	adiw	r28, 0x0c	; 12
    3386:	0f b6       	in	r0, 0x3f	; 63
    3388:	f8 94       	cli
    338a:	de bf       	out	0x3e, r29	; 62
    338c:	0f be       	out	0x3f, r0	; 63
    338e:	cd bf       	out	0x3d, r28	; 61
    3390:	df 91       	pop	r29
    3392:	cf 91       	pop	r28
    3394:	1f 91       	pop	r17
    3396:	0f 91       	pop	r16
    3398:	ff 90       	pop	r15
    339a:	ef 90       	pop	r14
    339c:	df 90       	pop	r13
    339e:	cf 90       	pop	r12
    33a0:	bf 90       	pop	r11
    33a2:	af 90       	pop	r10
    33a4:	9f 90       	pop	r9
    33a6:	8f 90       	pop	r8
    33a8:	7f 90       	pop	r7
    33aa:	6f 90       	pop	r6
    33ac:	5f 90       	pop	r5
    33ae:	4f 90       	pop	r4
    33b0:	3f 90       	pop	r3
    33b2:	2f 90       	pop	r2
    33b4:	08 95       	ret

000033b6 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_>:
    33b6:	4f 92       	push	r4
    33b8:	5f 92       	push	r5
    33ba:	6f 92       	push	r6
    33bc:	7f 92       	push	r7
    33be:	8f 92       	push	r8
    33c0:	9f 92       	push	r9
    33c2:	af 92       	push	r10
    33c4:	cf 92       	push	r12
    33c6:	ef 92       	push	r14
    33c8:	ff 92       	push	r15
    33ca:	0f 93       	push	r16
    33cc:	1f 93       	push	r17
    33ce:	cf 93       	push	r28
    33d0:	df 93       	push	r29
    33d2:	00 d0       	rcall	.+0      	; 0x33d4 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x1e>
    33d4:	cd b7       	in	r28, 0x3d	; 61
    33d6:	de b7       	in	r29, 0x3e	; 62
    33d8:	6a 83       	std	Y+2, r22	; 0x02
    33da:	41 15       	cp	r20, r1
    33dc:	51 05       	cpc	r21, r1
    33de:	39 f1       	breq	.+78     	; 0x342e <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x78>
    33e0:	f9 01       	movw	r30, r18
    33e2:	60 81       	ld	r22, Z
    33e4:	62 30       	cpi	r22, 0x02	; 2
    33e6:	18 f1       	brcs	.+70     	; 0x342e <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x78>
    33e8:	49 01       	movw	r8, r18
    33ea:	2a 01       	movw	r4, r20
    33ec:	3c 01       	movw	r6, r24
    33ee:	40 e8       	ldi	r20, 0x80	; 128
    33f0:	6c e1       	ldi	r22, 0x1C	; 28
    33f2:	0e 94 4f 16 	call	0x2c9e	; 0x2c9e <_ZN7MFRC52224PCD_ClearRegisterBitMaskENS_12PCD_RegisterEh>
    33f6:	87 e0       	ldi	r24, 0x07	; 7
    33f8:	89 83       	std	Y+1, r24	; 0x01
    33fa:	a1 2c       	mov	r10, r1
    33fc:	c1 2c       	mov	r12, r1
    33fe:	ce 01       	movw	r24, r28
    3400:	01 96       	adiw	r24, 0x01	; 1
    3402:	7c 01       	movw	r14, r24
    3404:	84 01       	movw	r16, r8
    3406:	92 01       	movw	r18, r4
    3408:	41 e0       	ldi	r20, 0x01	; 1
    340a:	be 01       	movw	r22, r28
    340c:	6e 5f       	subi	r22, 0xFE	; 254
    340e:	7f 4f       	sbci	r23, 0xFF	; 255
    3410:	c3 01       	movw	r24, r6
    3412:	0e 94 37 18 	call	0x306e	; 0x306e <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
    3416:	81 11       	cpse	r24, r1
    3418:	0d c0       	rjmp	.+26     	; 0x3434 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x7e>
    341a:	f4 01       	movw	r30, r8
    341c:	80 81       	ld	r24, Z
    341e:	82 30       	cpi	r24, 0x02	; 2
    3420:	41 f4       	brne	.+16     	; 0x3432 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x7c>
    3422:	81 e0       	ldi	r24, 0x01	; 1
    3424:	99 81       	ldd	r25, Y+1	; 0x01
    3426:	91 11       	cpse	r25, r1
    3428:	05 c0       	rjmp	.+10     	; 0x3434 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x7e>
    342a:	80 e0       	ldi	r24, 0x00	; 0
    342c:	03 c0       	rjmp	.+6      	; 0x3434 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x7e>
    342e:	84 e0       	ldi	r24, 0x04	; 4
    3430:	01 c0       	rjmp	.+2      	; 0x3434 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x7e>
    3432:	81 e0       	ldi	r24, 0x01	; 1
    3434:	0f 90       	pop	r0
    3436:	0f 90       	pop	r0
    3438:	df 91       	pop	r29
    343a:	cf 91       	pop	r28
    343c:	1f 91       	pop	r17
    343e:	0f 91       	pop	r16
    3440:	ff 90       	pop	r15
    3442:	ef 90       	pop	r14
    3444:	cf 90       	pop	r12
    3446:	af 90       	pop	r10
    3448:	9f 90       	pop	r9
    344a:	8f 90       	pop	r8
    344c:	7f 90       	pop	r7
    344e:	6f 90       	pop	r6
    3450:	5f 90       	pop	r5
    3452:	4f 90       	pop	r4
    3454:	08 95       	ret

00003456 <_ZN7MFRC52213PICC_RequestAEPhS0_>:
    3456:	9a 01       	movw	r18, r20
    3458:	ab 01       	movw	r20, r22
    345a:	66 e2       	ldi	r22, 0x26	; 38
    345c:	0c 94 db 19 	jmp	0x33b6	; 0x33b6 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_>

00003460 <_ZN7MFRC52221PICC_IsNewCardPresentEv>:
    3460:	0f 93       	push	r16
    3462:	1f 93       	push	r17
    3464:	cf 93       	push	r28
    3466:	df 93       	push	r29
    3468:	00 d0       	rcall	.+0      	; 0x346a <_ZN7MFRC52221PICC_IsNewCardPresentEv+0xa>
    346a:	1f 92       	push	r1
    346c:	cd b7       	in	r28, 0x3d	; 61
    346e:	de b7       	in	r29, 0x3e	; 62
    3470:	8c 01       	movw	r16, r24
    3472:	82 e0       	ldi	r24, 0x02	; 2
    3474:	8b 83       	std	Y+3, r24	; 0x03
    3476:	40 e0       	ldi	r20, 0x00	; 0
    3478:	64 e2       	ldi	r22, 0x24	; 36
    347a:	c8 01       	movw	r24, r16
    347c:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    3480:	40 e0       	ldi	r20, 0x00	; 0
    3482:	66 e2       	ldi	r22, 0x26	; 38
    3484:	c8 01       	movw	r24, r16
    3486:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    348a:	46 e2       	ldi	r20, 0x26	; 38
    348c:	68 e4       	ldi	r22, 0x48	; 72
    348e:	c8 01       	movw	r24, r16
    3490:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    3494:	ae 01       	movw	r20, r28
    3496:	4d 5f       	subi	r20, 0xFD	; 253
    3498:	5f 4f       	sbci	r21, 0xFF	; 255
    349a:	be 01       	movw	r22, r28
    349c:	6f 5f       	subi	r22, 0xFF	; 255
    349e:	7f 4f       	sbci	r23, 0xFF	; 255
    34a0:	c8 01       	movw	r24, r16
    34a2:	0e 94 2b 1a 	call	0x3456	; 0x3456 <_ZN7MFRC52213PICC_RequestAEPhS0_>
    34a6:	98 2f       	mov	r25, r24
    34a8:	81 e0       	ldi	r24, 0x01	; 1
    34aa:	99 23       	and	r25, r25
    34ac:	19 f0       	breq	.+6      	; 0x34b4 <_ZN7MFRC52221PICC_IsNewCardPresentEv+0x54>
    34ae:	92 30       	cpi	r25, 0x02	; 2
    34b0:	09 f0       	breq	.+2      	; 0x34b4 <_ZN7MFRC52221PICC_IsNewCardPresentEv+0x54>
    34b2:	80 e0       	ldi	r24, 0x00	; 0
    34b4:	0f 90       	pop	r0
    34b6:	0f 90       	pop	r0
    34b8:	0f 90       	pop	r0
    34ba:	df 91       	pop	r29
    34bc:	cf 91       	pop	r28
    34be:	1f 91       	pop	r17
    34c0:	0f 91       	pop	r16
    34c2:	08 95       	ret

000034c4 <_ZN7MFRC52210PICC_HaltAEv>:
/**
 * Instructs a PICC in state ACTIVE(*) to go to state HALT.
 *
 * @return STATUS_OK on success, STATUS_??? otherwise.
 */ 
MFRC522::StatusCode MFRC522::PICC_HaltA() {
    34c4:	8f 92       	push	r8
    34c6:	9f 92       	push	r9
    34c8:	af 92       	push	r10
    34ca:	cf 92       	push	r12
    34cc:	ef 92       	push	r14
    34ce:	ff 92       	push	r15
    34d0:	0f 93       	push	r16
    34d2:	1f 93       	push	r17
    34d4:	cf 93       	push	r28
    34d6:	df 93       	push	r29
    34d8:	00 d0       	rcall	.+0      	; 0x34da <_ZN7MFRC52210PICC_HaltAEv+0x16>
    34da:	00 d0       	rcall	.+0      	; 0x34dc <_ZN7MFRC52210PICC_HaltAEv+0x18>
    34dc:	cd b7       	in	r28, 0x3d	; 61
    34de:	de b7       	in	r29, 0x3e	; 62
    34e0:	4c 01       	movw	r8, r24
	MFRC522::StatusCode result;
	byte buffer[4];
	
	// Build command buffer
	buffer[0] = PICC_CMD_HLTA;
    34e2:	80 e5       	ldi	r24, 0x50	; 80
    34e4:	89 83       	std	Y+1, r24	; 0x01
	buffer[1] = 0;
    34e6:	1a 82       	std	Y+2, r1	; 0x02
	// Calculate CRC_A
	result = PCD_CalculateCRC(buffer, 2, &buffer[2]);
    34e8:	9e 01       	movw	r18, r28
    34ea:	2d 5f       	subi	r18, 0xFD	; 253
    34ec:	3f 4f       	sbci	r19, 0xFF	; 255
    34ee:	42 e0       	ldi	r20, 0x02	; 2
    34f0:	be 01       	movw	r22, r28
    34f2:	6f 5f       	subi	r22, 0xFF	; 255
    34f4:	7f 4f       	sbci	r23, 0xFF	; 255
    34f6:	c4 01       	movw	r24, r8
    34f8:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
	if (result != STATUS_OK) {
    34fc:	81 11       	cpse	r24, r1
    34fe:	16 c0       	rjmp	.+44     	; 0x352c <_ZN7MFRC52210PICC_HaltAEv+0x68>
	// Send the command.
	// The standard says:
	//		If the PICC responds with any modulation during a period of 1 ms after the end of the frame containing the
	//		HLTA command, this response shall be interpreted as 'not acknowledge'.
	// We interpret that this way: Only STATUS_TIMEOUT is a success.
	result = PCD_TransceiveData(buffer, sizeof(buffer), nullptr, 0);
    3500:	a1 2c       	mov	r10, r1
    3502:	c1 2c       	mov	r12, r1
    3504:	e1 2c       	mov	r14, r1
    3506:	f1 2c       	mov	r15, r1
    3508:	00 e0       	ldi	r16, 0x00	; 0
    350a:	10 e0       	ldi	r17, 0x00	; 0
    350c:	20 e0       	ldi	r18, 0x00	; 0
    350e:	30 e0       	ldi	r19, 0x00	; 0
    3510:	44 e0       	ldi	r20, 0x04	; 4
    3512:	be 01       	movw	r22, r28
    3514:	6f 5f       	subi	r22, 0xFF	; 255
    3516:	7f 4f       	sbci	r23, 0xFF	; 255
    3518:	c4 01       	movw	r24, r8
    351a:	0e 94 37 18 	call	0x306e	; 0x306e <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
	if (result == STATUS_TIMEOUT) {
    351e:	83 30       	cpi	r24, 0x03	; 3
    3520:	21 f0       	breq	.+8      	; 0x352a <_ZN7MFRC52210PICC_HaltAEv+0x66>
		return STATUS_OK;
	}
	if (result == STATUS_OK) { // That is ironically NOT ok in this case ;-)
    3522:	81 11       	cpse	r24, r1
    3524:	03 c0       	rjmp	.+6      	; 0x352c <_ZN7MFRC52210PICC_HaltAEv+0x68>
		return STATUS_ERROR;
    3526:	81 e0       	ldi	r24, 0x01	; 1
    3528:	01 c0       	rjmp	.+2      	; 0x352c <_ZN7MFRC52210PICC_HaltAEv+0x68>
	//		If the PICC responds with any modulation during a period of 1 ms after the end of the frame containing the
	//		HLTA command, this response shall be interpreted as 'not acknowledge'.
	// We interpret that this way: Only STATUS_TIMEOUT is a success.
	result = PCD_TransceiveData(buffer, sizeof(buffer), nullptr, 0);
	if (result == STATUS_TIMEOUT) {
		return STATUS_OK;
    352a:	80 e0       	ldi	r24, 0x00	; 0
	}
	if (result == STATUS_OK) { // That is ironically NOT ok in this case ;-)
		return STATUS_ERROR;
	}
	return result;
} // End PICC_HaltA()
    352c:	0f 90       	pop	r0
    352e:	0f 90       	pop	r0
    3530:	0f 90       	pop	r0
    3532:	0f 90       	pop	r0
    3534:	df 91       	pop	r29
    3536:	cf 91       	pop	r28
    3538:	1f 91       	pop	r17
    353a:	0f 91       	pop	r16
    353c:	ff 90       	pop	r15
    353e:	ef 90       	pop	r14
    3540:	cf 90       	pop	r12
    3542:	af 90       	pop	r10
    3544:	9f 90       	pop	r9
    3546:	8f 90       	pop	r8
    3548:	08 95       	ret

0000354a <_ZL9date2daysjhh>:

static void write_i2c_register(uint8_t addr, uint8_t reg, uint8_t val) {
  Wire.beginTransmission(addr);
  Wire._I2C_WRITE((byte)reg);
  Wire._I2C_WRITE((byte)val);
  Wire.endTransmission();
    354a:	80 3d       	cpi	r24, 0xD0	; 208
    354c:	27 e0       	ldi	r18, 0x07	; 7
    354e:	92 07       	cpc	r25, r18
    3550:	10 f0       	brcs	.+4      	; 0x3556 <_ZL9date2daysjhh+0xc>
    3552:	80 5d       	subi	r24, 0xD0	; 208
    3554:	97 40       	sbci	r25, 0x07	; 7
    3556:	50 e0       	ldi	r21, 0x00	; 0
    3558:	e9 ee       	ldi	r30, 0xE9	; 233
    355a:	f0 e0       	ldi	r31, 0x00	; 0
    355c:	21 e0       	ldi	r18, 0x01	; 1
    355e:	26 17       	cp	r18, r22
    3560:	30 f4       	brcc	.+12     	; 0x356e <_ZL9date2daysjhh+0x24>
    3562:	34 91       	lpm	r19, Z
    3564:	43 0f       	add	r20, r19
    3566:	51 1d       	adc	r21, r1
    3568:	2f 5f       	subi	r18, 0xFF	; 255
    356a:	31 96       	adiw	r30, 0x01	; 1
    356c:	f8 cf       	rjmp	.-16     	; 0x355e <_ZL9date2daysjhh+0x14>
    356e:	63 30       	cpi	r22, 0x03	; 3
    3570:	38 f0       	brcs	.+14     	; 0x3580 <_ZL9date2daysjhh+0x36>
    3572:	9c 01       	movw	r18, r24
    3574:	23 70       	andi	r18, 0x03	; 3
    3576:	33 27       	eor	r19, r19
    3578:	23 2b       	or	r18, r19
    357a:	11 f4       	brne	.+4      	; 0x3580 <_ZL9date2daysjhh+0x36>
    357c:	4f 5f       	subi	r20, 0xFF	; 255
    357e:	5f 4f       	sbci	r21, 0xFF	; 255
    3580:	bc 01       	movw	r22, r24
    3582:	6d 5f       	subi	r22, 0xFD	; 253
    3584:	7f 4f       	sbci	r23, 0xFF	; 255
    3586:	76 95       	lsr	r23
    3588:	67 95       	ror	r22
    358a:	76 95       	lsr	r23
    358c:	67 95       	ror	r22
    358e:	ed e6       	ldi	r30, 0x6D	; 109
    3590:	f1 e0       	ldi	r31, 0x01	; 1
    3592:	8e 9f       	mul	r24, r30
    3594:	90 01       	movw	r18, r0
    3596:	8f 9f       	mul	r24, r31
    3598:	30 0d       	add	r19, r0
    359a:	9e 9f       	mul	r25, r30
    359c:	30 0d       	add	r19, r0
    359e:	11 24       	eor	r1, r1
    35a0:	c9 01       	movw	r24, r18
    35a2:	01 97       	sbiw	r24, 0x01	; 1
    35a4:	86 0f       	add	r24, r22
    35a6:	97 1f       	adc	r25, r23
    35a8:	84 0f       	add	r24, r20
    35aa:	95 1f       	adc	r25, r21
    35ac:	08 95       	ret

000035ae <_ZL6conv2dPKc>:
    35ae:	fc 01       	movw	r30, r24
    35b0:	90 81       	ld	r25, Z
    35b2:	90 53       	subi	r25, 0x30	; 48
    35b4:	9a 30       	cpi	r25, 0x0A	; 10
    35b6:	08 f0       	brcs	.+2      	; 0x35ba <_ZL6conv2dPKc+0xc>
    35b8:	90 e0       	ldi	r25, 0x00	; 0
    35ba:	81 81       	ldd	r24, Z+1	; 0x01
    35bc:	80 53       	subi	r24, 0x30	; 48
    35be:	2a e0       	ldi	r18, 0x0A	; 10
    35c0:	92 9f       	mul	r25, r18
    35c2:	80 0d       	add	r24, r0
    35c4:	11 24       	eor	r1, r1
    35c6:	08 95       	ret

000035c8 <_ZN8DateTimeC1Em>:
    35c8:	8f 92       	push	r8
    35ca:	9f 92       	push	r9
    35cc:	af 92       	push	r10
    35ce:	bf 92       	push	r11
    35d0:	cf 92       	push	r12
    35d2:	df 92       	push	r13
    35d4:	ef 92       	push	r14
    35d6:	ff 92       	push	r15
    35d8:	cf 93       	push	r28
    35da:	df 93       	push	r29
    35dc:	ec 01       	movw	r28, r24
    35de:	6a 01       	movw	r12, r20
    35e0:	7b 01       	movw	r14, r22
    35e2:	80 e8       	ldi	r24, 0x80	; 128
    35e4:	c8 1a       	sub	r12, r24
    35e6:	83 e4       	ldi	r24, 0x43	; 67
    35e8:	d8 0a       	sbc	r13, r24
    35ea:	8d e6       	ldi	r24, 0x6D	; 109
    35ec:	e8 0a       	sbc	r14, r24
    35ee:	88 e3       	ldi	r24, 0x38	; 56
    35f0:	f8 0a       	sbc	r15, r24
    35f2:	8c e3       	ldi	r24, 0x3C	; 60
    35f4:	88 2e       	mov	r8, r24
    35f6:	91 2c       	mov	r9, r1
    35f8:	a1 2c       	mov	r10, r1
    35fa:	b1 2c       	mov	r11, r1
    35fc:	c7 01       	movw	r24, r14
    35fe:	b6 01       	movw	r22, r12
    3600:	a5 01       	movw	r20, r10
    3602:	94 01       	movw	r18, r8
    3604:	0e 94 72 21 	call	0x42e4	; 0x42e4 <__udivmodsi4>
    3608:	6d 83       	std	Y+5, r22	; 0x05
    360a:	ca 01       	movw	r24, r20
    360c:	b9 01       	movw	r22, r18
    360e:	a5 01       	movw	r20, r10
    3610:	94 01       	movw	r18, r8
    3612:	0e 94 72 21 	call	0x42e4	; 0x42e4 <__udivmodsi4>
    3616:	6c 83       	std	Y+4, r22	; 0x04
    3618:	c7 01       	movw	r24, r14
    361a:	b6 01       	movw	r22, r12
    361c:	20 e1       	ldi	r18, 0x10	; 16
    361e:	3e e0       	ldi	r19, 0x0E	; 14
    3620:	40 e0       	ldi	r20, 0x00	; 0
    3622:	50 e0       	ldi	r21, 0x00	; 0
    3624:	0e 94 72 21 	call	0x42e4	; 0x42e4 <__udivmodsi4>
    3628:	ca 01       	movw	r24, r20
    362a:	b9 01       	movw	r22, r18
    362c:	28 e1       	ldi	r18, 0x18	; 24
    362e:	30 e0       	ldi	r19, 0x00	; 0
    3630:	40 e0       	ldi	r20, 0x00	; 0
    3632:	50 e0       	ldi	r21, 0x00	; 0
    3634:	0e 94 72 21 	call	0x42e4	; 0x42e4 <__udivmodsi4>
    3638:	6b 83       	std	Y+3, r22	; 0x03
    363a:	c7 01       	movw	r24, r14
    363c:	b6 01       	movw	r22, r12
    363e:	20 e8       	ldi	r18, 0x80	; 128
    3640:	31 e5       	ldi	r19, 0x51	; 81
    3642:	41 e0       	ldi	r20, 0x01	; 1
    3644:	50 e0       	ldi	r21, 0x00	; 0
    3646:	0e 94 72 21 	call	0x42e4	; 0x42e4 <__udivmodsi4>
    364a:	18 82       	st	Y, r1
    364c:	48 81       	ld	r20, Y
    364e:	54 2f       	mov	r21, r20
    3650:	53 70       	andi	r21, 0x03	; 3
    3652:	81 e0       	ldi	r24, 0x01	; 1
    3654:	09 f0       	breq	.+2      	; 0x3658 <_ZN8DateTimeC1Em+0x90>
    3656:	80 e0       	ldi	r24, 0x00	; 0
    3658:	90 e0       	ldi	r25, 0x00	; 0
    365a:	bc 01       	movw	r22, r24
    365c:	63 59       	subi	r22, 0x93	; 147
    365e:	7e 4f       	sbci	r23, 0xFE	; 254
    3660:	26 17       	cp	r18, r22
    3662:	37 07       	cpc	r19, r23
    3664:	38 f0       	brcs	.+14     	; 0x3674 <_ZN8DateTimeC1Em+0xac>
    3666:	28 1b       	sub	r18, r24
    3668:	39 0b       	sbc	r19, r25
    366a:	2d 56       	subi	r18, 0x6D	; 109
    366c:	31 40       	sbci	r19, 0x01	; 1
    366e:	4f 5f       	subi	r20, 0xFF	; 255
    3670:	48 83       	st	Y, r20
    3672:	ec cf       	rjmp	.-40     	; 0x364c <_ZN8DateTimeC1Em+0x84>
    3674:	81 e0       	ldi	r24, 0x01	; 1
    3676:	89 83       	std	Y+1, r24	; 0x01
    3678:	89 81       	ldd	r24, Y+1	; 0x01
    367a:	e8 2f       	mov	r30, r24
    367c:	f0 e0       	ldi	r31, 0x00	; 0
    367e:	e8 51       	subi	r30, 0x18	; 24
    3680:	ff 4f       	sbci	r31, 0xFF	; 255
    3682:	e4 91       	lpm	r30, Z
    3684:	51 11       	cpse	r21, r1
    3686:	03 c0       	rjmp	.+6      	; 0x368e <_ZN8DateTimeC1Em+0xc6>
    3688:	82 30       	cpi	r24, 0x02	; 2
    368a:	09 f4       	brne	.+2      	; 0x368e <_ZN8DateTimeC1Em+0xc6>
    368c:	ef 5f       	subi	r30, 0xFF	; 255
    368e:	f0 e0       	ldi	r31, 0x00	; 0
    3690:	2e 17       	cp	r18, r30
    3692:	3f 07       	cpc	r19, r31
    3694:	20 f0       	brcs	.+8      	; 0x369e <_ZN8DateTimeC1Em+0xd6>
    3696:	2e 1b       	sub	r18, r30
    3698:	3f 0b       	sbc	r19, r31
    369a:	8f 5f       	subi	r24, 0xFF	; 255
    369c:	ec cf       	rjmp	.-40     	; 0x3676 <_ZN8DateTimeC1Em+0xae>
    369e:	2f 5f       	subi	r18, 0xFF	; 255
    36a0:	2a 83       	std	Y+2, r18	; 0x02
    36a2:	df 91       	pop	r29
    36a4:	cf 91       	pop	r28
    36a6:	ff 90       	pop	r15
    36a8:	ef 90       	pop	r14
    36aa:	df 90       	pop	r13
    36ac:	cf 90       	pop	r12
    36ae:	bf 90       	pop	r11
    36b0:	af 90       	pop	r10
    36b2:	9f 90       	pop	r9
    36b4:	8f 90       	pop	r8
    36b6:	08 95       	ret

000036b8 <_ZN8DateTimeC1Ejhhhhh>:
    36b8:	cf 92       	push	r12
    36ba:	ef 92       	push	r14
    36bc:	0f 93       	push	r16
    36be:	fc 01       	movw	r30, r24
    36c0:	60 3d       	cpi	r22, 0xD0	; 208
    36c2:	87 e0       	ldi	r24, 0x07	; 7
    36c4:	78 07       	cpc	r23, r24
    36c6:	10 f0       	brcs	.+4      	; 0x36cc <_ZN8DateTimeC1Ejhhhhh+0x14>
    36c8:	60 5d       	subi	r22, 0xD0	; 208
    36ca:	77 40       	sbci	r23, 0x07	; 7
    36cc:	60 83       	st	Z, r22
    36ce:	41 83       	std	Z+1, r20	; 0x01
    36d0:	22 83       	std	Z+2, r18	; 0x02
    36d2:	03 83       	std	Z+3, r16	; 0x03
    36d4:	e4 82       	std	Z+4, r14	; 0x04
    36d6:	c5 82       	std	Z+5, r12	; 0x05
    36d8:	0f 91       	pop	r16
    36da:	ef 90       	pop	r14
    36dc:	cf 90       	pop	r12
    36de:	08 95       	ret

000036e0 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_>:
    36e0:	ef 92       	push	r14
    36e2:	ff 92       	push	r15
    36e4:	0f 93       	push	r16
    36e6:	1f 93       	push	r17
    36e8:	cf 93       	push	r28
    36ea:	df 93       	push	r29
    36ec:	cd b7       	in	r28, 0x3d	; 61
    36ee:	de b7       	in	r29, 0x3e	; 62
    36f0:	2b 97       	sbiw	r28, 0x0b	; 11
    36f2:	0f b6       	in	r0, 0x3f	; 63
    36f4:	f8 94       	cli
    36f6:	de bf       	out	0x3e, r29	; 62
    36f8:	0f be       	out	0x3f, r0	; 63
    36fa:	cd bf       	out	0x3d, r28	; 61
    36fc:	8c 01       	movw	r16, r24
    36fe:	7a 01       	movw	r14, r20
    3700:	4b e0       	ldi	r20, 0x0B	; 11
    3702:	50 e0       	ldi	r21, 0x00	; 0
    3704:	ce 01       	movw	r24, r28
    3706:	01 96       	adiw	r24, 0x01	; 1
    3708:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <memcpy_P>
    370c:	ce 01       	movw	r24, r28
    370e:	0a 96       	adiw	r24, 0x0a	; 10
    3710:	0e 94 d7 1a 	call	0x35ae	; 0x35ae <_ZL6conv2dPKc>
    3714:	f8 01       	movw	r30, r16
    3716:	80 83       	st	Z, r24
    3718:	e9 81       	ldd	r30, Y+1	; 0x01
    371a:	8e 2f       	mov	r24, r30
    371c:	90 e0       	ldi	r25, 0x00	; 0
    371e:	fc 01       	movw	r30, r24
    3720:	e1 54       	subi	r30, 0x41	; 65
    3722:	f1 09       	sbc	r31, r1
    3724:	e3 31       	cpi	r30, 0x13	; 19
    3726:	f1 05       	cpc	r31, r1
    3728:	48 f5       	brcc	.+82     	; 0x377c <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x9c>
    372a:	ec 5c       	subi	r30, 0xCC	; 204
    372c:	ff 4f       	sbci	r31, 0xFF	; 255
    372e:	0c 94 b3 21 	jmp	0x4366	; 0x4366 <__tablejump2__>
    3732:	8a 81       	ldd	r24, Y+2	; 0x02
    3734:	81 36       	cpi	r24, 0x61	; 97
    3736:	39 f0       	breq	.+14     	; 0x3746 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x66>
    3738:	8b 81       	ldd	r24, Y+3	; 0x03
    373a:	8e 36       	cpi	r24, 0x6E	; 110
    373c:	11 f0       	breq	.+4      	; 0x3742 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x62>
    373e:	87 e0       	ldi	r24, 0x07	; 7
    3740:	1b c0       	rjmp	.+54     	; 0x3778 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x98>
    3742:	86 e0       	ldi	r24, 0x06	; 6
    3744:	19 c0       	rjmp	.+50     	; 0x3778 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x98>
    3746:	81 e0       	ldi	r24, 0x01	; 1
    3748:	17 c0       	rjmp	.+46     	; 0x3778 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x98>
    374a:	82 e0       	ldi	r24, 0x02	; 2
    374c:	15 c0       	rjmp	.+42     	; 0x3778 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x98>
    374e:	8b 81       	ldd	r24, Y+3	; 0x03
    3750:	82 37       	cpi	r24, 0x72	; 114
    3752:	11 f0       	breq	.+4      	; 0x3758 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x78>
    3754:	88 e0       	ldi	r24, 0x08	; 8
    3756:	10 c0       	rjmp	.+32     	; 0x3778 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x98>
    3758:	84 e0       	ldi	r24, 0x04	; 4
    375a:	0e c0       	rjmp	.+28     	; 0x3778 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x98>
    375c:	8b 81       	ldd	r24, Y+3	; 0x03
    375e:	82 37       	cpi	r24, 0x72	; 114
    3760:	11 f0       	breq	.+4      	; 0x3766 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x86>
    3762:	85 e0       	ldi	r24, 0x05	; 5
    3764:	09 c0       	rjmp	.+18     	; 0x3778 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x98>
    3766:	83 e0       	ldi	r24, 0x03	; 3
    3768:	07 c0       	rjmp	.+14     	; 0x3778 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x98>
    376a:	89 e0       	ldi	r24, 0x09	; 9
    376c:	05 c0       	rjmp	.+10     	; 0x3778 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x98>
    376e:	8a e0       	ldi	r24, 0x0A	; 10
    3770:	03 c0       	rjmp	.+6      	; 0x3778 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x98>
    3772:	8b e0       	ldi	r24, 0x0B	; 11
    3774:	01 c0       	rjmp	.+2      	; 0x3778 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x98>
    3776:	8c e0       	ldi	r24, 0x0C	; 12
    3778:	f8 01       	movw	r30, r16
    377a:	81 83       	std	Z+1, r24	; 0x01
    377c:	ce 01       	movw	r24, r28
    377e:	05 96       	adiw	r24, 0x05	; 5
    3780:	0e 94 d7 1a 	call	0x35ae	; 0x35ae <_ZL6conv2dPKc>
    3784:	f8 01       	movw	r30, r16
    3786:	82 83       	std	Z+2, r24	; 0x02
    3788:	48 e0       	ldi	r20, 0x08	; 8
    378a:	50 e0       	ldi	r21, 0x00	; 0
    378c:	b7 01       	movw	r22, r14
    378e:	ce 01       	movw	r24, r28
    3790:	01 96       	adiw	r24, 0x01	; 1
    3792:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <memcpy_P>
    3796:	ce 01       	movw	r24, r28
    3798:	01 96       	adiw	r24, 0x01	; 1
    379a:	0e 94 d7 1a 	call	0x35ae	; 0x35ae <_ZL6conv2dPKc>
    379e:	f8 01       	movw	r30, r16
    37a0:	83 83       	std	Z+3, r24	; 0x03
    37a2:	ce 01       	movw	r24, r28
    37a4:	04 96       	adiw	r24, 0x04	; 4
    37a6:	0e 94 d7 1a 	call	0x35ae	; 0x35ae <_ZL6conv2dPKc>
    37aa:	f8 01       	movw	r30, r16
    37ac:	84 83       	std	Z+4, r24	; 0x04
    37ae:	ce 01       	movw	r24, r28
    37b0:	07 96       	adiw	r24, 0x07	; 7
    37b2:	0e 94 d7 1a 	call	0x35ae	; 0x35ae <_ZL6conv2dPKc>
    37b6:	f8 01       	movw	r30, r16
    37b8:	85 83       	std	Z+5, r24	; 0x05
    37ba:	2b 96       	adiw	r28, 0x0b	; 11
    37bc:	0f b6       	in	r0, 0x3f	; 63
    37be:	f8 94       	cli
    37c0:	de bf       	out	0x3e, r29	; 62
    37c2:	0f be       	out	0x3f, r0	; 63
    37c4:	cd bf       	out	0x3d, r28	; 61
    37c6:	df 91       	pop	r29
    37c8:	cf 91       	pop	r28
    37ca:	1f 91       	pop	r17
    37cc:	0f 91       	pop	r16
    37ce:	ff 90       	pop	r15
    37d0:	ef 90       	pop	r14
    37d2:	08 95       	ret

000037d4 <_ZNK8DateTime8unixtimeEv>:
    37d4:	ef 92       	push	r14
    37d6:	ff 92       	push	r15
    37d8:	0f 93       	push	r16
    37da:	1f 93       	push	r17
    37dc:	cf 93       	push	r28
    37de:	df 93       	push	r29
    37e0:	ec 01       	movw	r28, r24
    37e2:	88 81       	ld	r24, Y
    37e4:	4a 81       	ldd	r20, Y+2	; 0x02
    37e6:	69 81       	ldd	r22, Y+1	; 0x01
    37e8:	90 e0       	ldi	r25, 0x00	; 0
    37ea:	0e 94 a5 1a 	call	0x354a	; 0x354a <_ZL9date2daysjhh>
    37ee:	9c 01       	movw	r18, r24
    37f0:	a8 e1       	ldi	r26, 0x18	; 24
    37f2:	b0 e0       	ldi	r27, 0x00	; 0
    37f4:	0e 94 b9 21 	call	0x4372	; 0x4372 <__umulhisi3>
    37f8:	2b 81       	ldd	r18, Y+3	; 0x03
    37fa:	7b 01       	movw	r14, r22
    37fc:	8c 01       	movw	r16, r24
    37fe:	e2 0e       	add	r14, r18
    3800:	f1 1c       	adc	r15, r1
    3802:	01 1d       	adc	r16, r1
    3804:	11 1d       	adc	r17, r1
    3806:	a8 01       	movw	r20, r16
    3808:	97 01       	movw	r18, r14
    380a:	ac e3       	ldi	r26, 0x3C	; 60
    380c:	b0 e0       	ldi	r27, 0x00	; 0
    380e:	0e 94 c8 21 	call	0x4390	; 0x4390 <__muluhisi3>
    3812:	2c 81       	ldd	r18, Y+4	; 0x04
    3814:	7b 01       	movw	r14, r22
    3816:	8c 01       	movw	r16, r24
    3818:	e2 0e       	add	r14, r18
    381a:	f1 1c       	adc	r15, r1
    381c:	01 1d       	adc	r16, r1
    381e:	11 1d       	adc	r17, r1
    3820:	a8 01       	movw	r20, r16
    3822:	97 01       	movw	r18, r14
    3824:	0e 94 c8 21 	call	0x4390	; 0x4390 <__muluhisi3>
    3828:	2d 81       	ldd	r18, Y+5	; 0x05
    382a:	dc 01       	movw	r26, r24
    382c:	cb 01       	movw	r24, r22
    382e:	82 0f       	add	r24, r18
    3830:	91 1d       	adc	r25, r1
    3832:	a1 1d       	adc	r26, r1
    3834:	b1 1d       	adc	r27, r1
    3836:	bc 01       	movw	r22, r24
    3838:	cd 01       	movw	r24, r26
    383a:	60 58       	subi	r22, 0x80	; 128
    383c:	7c 4b       	sbci	r23, 0xBC	; 188
    383e:	82 49       	sbci	r24, 0x92	; 146
    3840:	97 4c       	sbci	r25, 0xC7	; 199
    3842:	df 91       	pop	r29
    3844:	cf 91       	pop	r28
    3846:	1f 91       	pop	r17
    3848:	0f 91       	pop	r16
    384a:	ff 90       	pop	r15
    384c:	ef 90       	pop	r14
    384e:	08 95       	ret

00003850 <_ZN8DateTimemiERKS_>:
    3850:	cf 92       	push	r12
    3852:	df 92       	push	r13
    3854:	ef 92       	push	r14
    3856:	ff 92       	push	r15
    3858:	0f 93       	push	r16
    385a:	1f 93       	push	r17
    385c:	cf 93       	push	r28
    385e:	df 93       	push	r29
    3860:	ec 01       	movw	r28, r24
    3862:	cb 01       	movw	r24, r22
    3864:	8a 01       	movw	r16, r20
    3866:	0e 94 ea 1b 	call	0x37d4	; 0x37d4 <_ZNK8DateTime8unixtimeEv>
    386a:	6b 01       	movw	r12, r22
    386c:	7c 01       	movw	r14, r24
    386e:	c8 01       	movw	r24, r16
    3870:	0e 94 ea 1b 	call	0x37d4	; 0x37d4 <_ZNK8DateTime8unixtimeEv>
    3874:	c6 1a       	sub	r12, r22
    3876:	d7 0a       	sbc	r13, r23
    3878:	e8 0a       	sbc	r14, r24
    387a:	f9 0a       	sbc	r15, r25
    387c:	c8 82       	st	Y, r12
    387e:	d9 82       	std	Y+1, r13	; 0x01
    3880:	ea 82       	std	Y+2, r14	; 0x02
    3882:	fb 82       	std	Y+3, r15	; 0x03
    3884:	ce 01       	movw	r24, r28
    3886:	df 91       	pop	r29
    3888:	cf 91       	pop	r28
    388a:	1f 91       	pop	r17
    388c:	0f 91       	pop	r16
    388e:	ff 90       	pop	r15
    3890:	ef 90       	pop	r14
    3892:	df 90       	pop	r13
    3894:	cf 90       	pop	r12
    3896:	08 95       	ret

00003898 <_ZN10RTC_DS32315beginEv>:
    3898:	83 e9       	ldi	r24, 0x93	; 147
    389a:	93 e0       	ldi	r25, 0x03	; 3
    389c:	0e 94 98 1e 	call	0x3d30	; 0x3d30 <_ZN7TwoWire5beginEv>
    38a0:	81 e0       	ldi	r24, 0x01	; 1
    38a2:	08 95       	ret

000038a4 <_ZN10RTC_DS32313nowEv>:
    38a4:	cf 92       	push	r12
    38a6:	df 92       	push	r13
    38a8:	ef 92       	push	r14
    38aa:	ff 92       	push	r15
    38ac:	0f 93       	push	r16
    38ae:	1f 93       	push	r17
    38b0:	cf 93       	push	r28
    38b2:	df 93       	push	r29
    38b4:	ec 01       	movw	r28, r24
    38b6:	68 e6       	ldi	r22, 0x68	; 104
    38b8:	70 e0       	ldi	r23, 0x00	; 0
    38ba:	83 e9       	ldi	r24, 0x93	; 147
    38bc:	93 e0       	ldi	r25, 0x03	; 3
    38be:	0e 94 b4 1e 	call	0x3d68	; 0x3d68 <_ZN7TwoWire17beginTransmissionEi>
    38c2:	60 e0       	ldi	r22, 0x00	; 0
    38c4:	83 e9       	ldi	r24, 0x93	; 147
    38c6:	93 e0       	ldi	r25, 0x03	; 3
    38c8:	0e 94 59 1e 	call	0x3cb2	; 0x3cb2 <_ZN7TwoWire5writeEh>
    38cc:	83 e9       	ldi	r24, 0x93	; 147
    38ce:	93 e0       	ldi	r25, 0x03	; 3
    38d0:	0e 94 33 1f 	call	0x3e66	; 0x3e66 <_ZN7TwoWire15endTransmissionEv>
    38d4:	47 e0       	ldi	r20, 0x07	; 7
    38d6:	50 e0       	ldi	r21, 0x00	; 0
    38d8:	68 e6       	ldi	r22, 0x68	; 104
    38da:	70 e0       	ldi	r23, 0x00	; 0
    38dc:	83 e9       	ldi	r24, 0x93	; 147
    38de:	93 e0       	ldi	r25, 0x03	; 3
    38e0:	0e 94 30 1f 	call	0x3e60	; 0x3e60 <_ZN7TwoWire11requestFromEii>
    38e4:	83 e9       	ldi	r24, 0x93	; 147
    38e6:	93 e0       	ldi	r25, 0x03	; 3
    38e8:	0e 94 d2 1d 	call	0x3ba4	; 0x3ba4 <_ZN7TwoWire4readEv>
    38ec:	8f 77       	andi	r24, 0x7F	; 127
    38ee:	98 2f       	mov	r25, r24
    38f0:	92 95       	swap	r25
    38f2:	9f 70       	andi	r25, 0x0F	; 15
    38f4:	1a ef       	ldi	r17, 0xFA	; 250
    38f6:	08 2f       	mov	r16, r24
    38f8:	91 9f       	mul	r25, r17
    38fa:	00 0d       	add	r16, r0
    38fc:	11 24       	eor	r1, r1
    38fe:	83 e9       	ldi	r24, 0x93	; 147
    3900:	93 e0       	ldi	r25, 0x03	; 3
    3902:	0e 94 d2 1d 	call	0x3ba4	; 0x3ba4 <_ZN7TwoWire4readEv>
    3906:	9c 01       	movw	r18, r24
    3908:	33 27       	eor	r19, r19
    390a:	94 e0       	ldi	r25, 0x04	; 4
    390c:	35 95       	asr	r19
    390e:	27 95       	ror	r18
    3910:	9a 95       	dec	r25
    3912:	e1 f7       	brne	.-8      	; 0x390c <_ZN10RTC_DS32313nowEv+0x68>
    3914:	f8 2e       	mov	r15, r24
    3916:	12 9f       	mul	r17, r18
    3918:	f0 0c       	add	r15, r0
    391a:	11 24       	eor	r1, r1
    391c:	83 e9       	ldi	r24, 0x93	; 147
    391e:	93 e0       	ldi	r25, 0x03	; 3
    3920:	0e 94 d2 1d 	call	0x3ba4	; 0x3ba4 <_ZN7TwoWire4readEv>
    3924:	9c 01       	movw	r18, r24
    3926:	33 27       	eor	r19, r19
    3928:	44 e0       	ldi	r20, 0x04	; 4
    392a:	35 95       	asr	r19
    392c:	27 95       	ror	r18
    392e:	4a 95       	dec	r20
    3930:	e1 f7       	brne	.-8      	; 0x392a <_ZN10RTC_DS32313nowEv+0x86>
    3932:	e8 2e       	mov	r14, r24
    3934:	12 9f       	mul	r17, r18
    3936:	e0 0c       	add	r14, r0
    3938:	11 24       	eor	r1, r1
    393a:	83 e9       	ldi	r24, 0x93	; 147
    393c:	93 e0       	ldi	r25, 0x03	; 3
    393e:	0e 94 d2 1d 	call	0x3ba4	; 0x3ba4 <_ZN7TwoWire4readEv>
    3942:	83 e9       	ldi	r24, 0x93	; 147
    3944:	93 e0       	ldi	r25, 0x03	; 3
    3946:	0e 94 d2 1d 	call	0x3ba4	; 0x3ba4 <_ZN7TwoWire4readEv>
    394a:	9c 01       	movw	r18, r24
    394c:	33 27       	eor	r19, r19
    394e:	54 e0       	ldi	r21, 0x04	; 4
    3950:	35 95       	asr	r19
    3952:	27 95       	ror	r18
    3954:	5a 95       	dec	r21
    3956:	e1 f7       	brne	.-8      	; 0x3950 <_ZN10RTC_DS32313nowEv+0xac>
    3958:	d8 2e       	mov	r13, r24
    395a:	12 9f       	mul	r17, r18
    395c:	d0 0c       	add	r13, r0
    395e:	11 24       	eor	r1, r1
    3960:	83 e9       	ldi	r24, 0x93	; 147
    3962:	93 e0       	ldi	r25, 0x03	; 3
    3964:	0e 94 d2 1d 	call	0x3ba4	; 0x3ba4 <_ZN7TwoWire4readEv>
    3968:	9c 01       	movw	r18, r24
    396a:	33 27       	eor	r19, r19
    396c:	64 e0       	ldi	r22, 0x04	; 4
    396e:	35 95       	asr	r19
    3970:	27 95       	ror	r18
    3972:	6a 95       	dec	r22
    3974:	e1 f7       	brne	.-8      	; 0x396e <_ZN10RTC_DS32313nowEv+0xca>
    3976:	c8 2e       	mov	r12, r24
    3978:	12 9f       	mul	r17, r18
    397a:	c0 0c       	add	r12, r0
    397c:	11 24       	eor	r1, r1
    397e:	83 e9       	ldi	r24, 0x93	; 147
    3980:	93 e0       	ldi	r25, 0x03	; 3
    3982:	0e 94 d2 1d 	call	0x3ba4	; 0x3ba4 <_ZN7TwoWire4readEv>
    3986:	9c 01       	movw	r18, r24
    3988:	33 27       	eor	r19, r19
    398a:	74 e0       	ldi	r23, 0x04	; 4
    398c:	35 95       	asr	r19
    398e:	27 95       	ror	r18
    3990:	7a 95       	dec	r23
    3992:	e1 f7       	brne	.-8      	; 0x398c <_ZN10RTC_DS32313nowEv+0xe8>
    3994:	12 9f       	mul	r17, r18
    3996:	80 0d       	add	r24, r0
    3998:	11 24       	eor	r1, r1
    399a:	88 83       	st	Y, r24
    399c:	c9 82       	std	Y+1, r12	; 0x01
    399e:	da 82       	std	Y+2, r13	; 0x02
    39a0:	eb 82       	std	Y+3, r14	; 0x03
    39a2:	fc 82       	std	Y+4, r15	; 0x04
    39a4:	0d 83       	std	Y+5, r16	; 0x05
    39a6:	ce 01       	movw	r24, r28
    39a8:	df 91       	pop	r29
    39aa:	cf 91       	pop	r28
    39ac:	1f 91       	pop	r17
    39ae:	0f 91       	pop	r16
    39b0:	ff 90       	pop	r15
    39b2:	ef 90       	pop	r14
    39b4:	df 90       	pop	r13
    39b6:	cf 90       	pop	r12
    39b8:	08 95       	ret

000039ba <_ZL17read_i2c_registerhh.constprop.7>:
    39ba:	cf 93       	push	r28
    39bc:	c8 2f       	mov	r28, r24
    39be:	68 e6       	ldi	r22, 0x68	; 104
    39c0:	83 e9       	ldi	r24, 0x93	; 147
    39c2:	93 e0       	ldi	r25, 0x03	; 3
    39c4:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <_ZN7TwoWire17beginTransmissionEh>
    39c8:	6c 2f       	mov	r22, r28
    39ca:	83 e9       	ldi	r24, 0x93	; 147
    39cc:	93 e0       	ldi	r25, 0x03	; 3
    39ce:	0e 94 59 1e 	call	0x3cb2	; 0x3cb2 <_ZN7TwoWire5writeEh>
    39d2:	83 e9       	ldi	r24, 0x93	; 147
    39d4:	93 e0       	ldi	r25, 0x03	; 3
    39d6:	0e 94 33 1f 	call	0x3e66	; 0x3e66 <_ZN7TwoWire15endTransmissionEv>
    39da:	41 e0       	ldi	r20, 0x01	; 1
    39dc:	68 e6       	ldi	r22, 0x68	; 104
    39de:	83 e9       	ldi	r24, 0x93	; 147
    39e0:	93 e0       	ldi	r25, 0x03	; 3
    39e2:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <_ZN7TwoWire11requestFromEhh>
    39e6:	83 e9       	ldi	r24, 0x93	; 147
    39e8:	93 e0       	ldi	r25, 0x03	; 3
    39ea:	0e 94 d2 1d 	call	0x3ba4	; 0x3ba4 <_ZN7TwoWire4readEv>
    39ee:	cf 91       	pop	r28
    39f0:	08 95       	ret

000039f2 <_ZN10RTC_DS32316adjustERK8DateTime>:

bool RTC_DS3231::lostPower(void) {
  return (read_i2c_register(DS3231_ADDRESS, DS3231_STATUSREG) >> 7);
}

void RTC_DS3231::adjust(const DateTime& dt) {
    39f2:	0f 93       	push	r16
    39f4:	1f 93       	push	r17
    39f6:	cf 93       	push	r28
    39f8:	8c 01       	movw	r16, r24
  Wire.beginTransmission(DS3231_ADDRESS);
    39fa:	68 e6       	ldi	r22, 0x68	; 104
    39fc:	70 e0       	ldi	r23, 0x00	; 0
    39fe:	83 e9       	ldi	r24, 0x93	; 147
    3a00:	93 e0       	ldi	r25, 0x03	; 3
    3a02:	0e 94 b4 1e 	call	0x3d68	; 0x3d68 <_ZN7TwoWire17beginTransmissionEi>
  Wire._I2C_WRITE((byte)0); // start at location 0
    3a06:	60 e0       	ldi	r22, 0x00	; 0
    3a08:	83 e9       	ldi	r24, 0x93	; 147
    3a0a:	93 e0       	ldi	r25, 0x03	; 3
    3a0c:	0e 94 59 1e 	call	0x3cb2	; 0x3cb2 <_ZN7TwoWire5writeEh>
    3a10:	f8 01       	movw	r30, r16
    3a12:	25 81       	ldd	r18, Z+5	; 0x05
  Wire._I2C_WRITE(bin2bcd(dt.second()));
    3a14:	ca e0       	ldi	r28, 0x0A	; 10
    3a16:	82 2f       	mov	r24, r18
    3a18:	6c 2f       	mov	r22, r28
    3a1a:	0e 94 66 21 	call	0x42cc	; 0x42cc <__udivmodqi4>
    3a1e:	68 2f       	mov	r22, r24
    3a20:	66 0f       	add	r22, r22
    3a22:	86 0f       	add	r24, r22
    3a24:	88 0f       	add	r24, r24
    3a26:	68 2f       	mov	r22, r24
    3a28:	62 0f       	add	r22, r18
    3a2a:	83 e9       	ldi	r24, 0x93	; 147
    3a2c:	93 e0       	ldi	r25, 0x03	; 3
    3a2e:	0e 94 59 1e 	call	0x3cb2	; 0x3cb2 <_ZN7TwoWire5writeEh>
    3a32:	f8 01       	movw	r30, r16
    3a34:	24 81       	ldd	r18, Z+4	; 0x04
  Wire._I2C_WRITE(bin2bcd(dt.minute()));
    3a36:	82 2f       	mov	r24, r18
    3a38:	6c 2f       	mov	r22, r28
    3a3a:	0e 94 66 21 	call	0x42cc	; 0x42cc <__udivmodqi4>
    3a3e:	68 2f       	mov	r22, r24
    3a40:	66 0f       	add	r22, r22
    3a42:	86 0f       	add	r24, r22
    3a44:	88 0f       	add	r24, r24
    3a46:	68 2f       	mov	r22, r24
    3a48:	62 0f       	add	r22, r18
    3a4a:	83 e9       	ldi	r24, 0x93	; 147
    3a4c:	93 e0       	ldi	r25, 0x03	; 3
    3a4e:	0e 94 59 1e 	call	0x3cb2	; 0x3cb2 <_ZN7TwoWire5writeEh>
    3a52:	f8 01       	movw	r30, r16
    3a54:	23 81       	ldd	r18, Z+3	; 0x03
  Wire._I2C_WRITE(bin2bcd(dt.hour()));
    3a56:	82 2f       	mov	r24, r18
    3a58:	6c 2f       	mov	r22, r28
    3a5a:	0e 94 66 21 	call	0x42cc	; 0x42cc <__udivmodqi4>
    3a5e:	68 2f       	mov	r22, r24
    3a60:	66 0f       	add	r22, r22
    3a62:	86 0f       	add	r24, r22
    3a64:	88 0f       	add	r24, r24
    3a66:	68 2f       	mov	r22, r24
    3a68:	62 0f       	add	r22, r18
    3a6a:	83 e9       	ldi	r24, 0x93	; 147
    3a6c:	93 e0       	ldi	r25, 0x03	; 3
    3a6e:	0e 94 59 1e 	call	0x3cb2	; 0x3cb2 <_ZN7TwoWire5writeEh>
  Wire._I2C_WRITE(bin2bcd(0));
    3a72:	60 e0       	ldi	r22, 0x00	; 0
    3a74:	83 e9       	ldi	r24, 0x93	; 147
    3a76:	93 e0       	ldi	r25, 0x03	; 3
    3a78:	0e 94 59 1e 	call	0x3cb2	; 0x3cb2 <_ZN7TwoWire5writeEh>
    3a7c:	f8 01       	movw	r30, r16
    3a7e:	22 81       	ldd	r18, Z+2	; 0x02
  Wire._I2C_WRITE(bin2bcd(dt.day()));
    3a80:	82 2f       	mov	r24, r18
    3a82:	6c 2f       	mov	r22, r28
    3a84:	0e 94 66 21 	call	0x42cc	; 0x42cc <__udivmodqi4>
    3a88:	68 2f       	mov	r22, r24
    3a8a:	66 0f       	add	r22, r22
    3a8c:	86 0f       	add	r24, r22
    3a8e:	88 0f       	add	r24, r24
    3a90:	68 2f       	mov	r22, r24
    3a92:	62 0f       	add	r22, r18
    3a94:	83 e9       	ldi	r24, 0x93	; 147
    3a96:	93 e0       	ldi	r25, 0x03	; 3
    3a98:	0e 94 59 1e 	call	0x3cb2	; 0x3cb2 <_ZN7TwoWire5writeEh>
    3a9c:	f8 01       	movw	r30, r16
    3a9e:	21 81       	ldd	r18, Z+1	; 0x01
  Wire._I2C_WRITE(bin2bcd(dt.month()));
    3aa0:	82 2f       	mov	r24, r18
    3aa2:	6c 2f       	mov	r22, r28
    3aa4:	0e 94 66 21 	call	0x42cc	; 0x42cc <__udivmodqi4>
    3aa8:	68 2f       	mov	r22, r24
    3aaa:	66 0f       	add	r22, r22
    3aac:	86 0f       	add	r24, r22
    3aae:	88 0f       	add	r24, r24
    3ab0:	68 2f       	mov	r22, r24
    3ab2:	62 0f       	add	r22, r18
    3ab4:	83 e9       	ldi	r24, 0x93	; 147
    3ab6:	93 e0       	ldi	r25, 0x03	; 3
    3ab8:	0e 94 59 1e 	call	0x3cb2	; 0x3cb2 <_ZN7TwoWire5writeEh>
  Wire._I2C_WRITE(bin2bcd(dt.year() - 2000));
    3abc:	f8 01       	movw	r30, r16
    3abe:	20 81       	ld	r18, Z
    3ac0:	82 2f       	mov	r24, r18
    3ac2:	6c 2f       	mov	r22, r28
    3ac4:	0e 94 66 21 	call	0x42cc	; 0x42cc <__udivmodqi4>
    3ac8:	68 2f       	mov	r22, r24
    3aca:	66 0f       	add	r22, r22
    3acc:	86 0f       	add	r24, r22
    3ace:	88 0f       	add	r24, r24
    3ad0:	68 2f       	mov	r22, r24
    3ad2:	62 0f       	add	r22, r18
    3ad4:	83 e9       	ldi	r24, 0x93	; 147
    3ad6:	93 e0       	ldi	r25, 0x03	; 3
    3ad8:	0e 94 59 1e 	call	0x3cb2	; 0x3cb2 <_ZN7TwoWire5writeEh>
  Wire.endTransmission();
    3adc:	83 e9       	ldi	r24, 0x93	; 147
    3ade:	93 e0       	ldi	r25, 0x03	; 3
    3ae0:	0e 94 33 1f 	call	0x3e66	; 0x3e66 <_ZN7TwoWire15endTransmissionEv>

  uint8_t statreg = read_i2c_register(DS3231_ADDRESS, DS3231_STATUSREG);
    3ae4:	8f e0       	ldi	r24, 0x0F	; 15
    3ae6:	0e 94 dd 1c 	call	0x39ba	; 0x39ba <_ZL17read_i2c_registerhh.constprop.7>
    3aea:	c8 2f       	mov	r28, r24
  Wire.requestFrom(addr, (byte)1);
  return Wire._I2C_READ();
}

static void write_i2c_register(uint8_t addr, uint8_t reg, uint8_t val) {
  Wire.beginTransmission(addr);
    3aec:	68 e6       	ldi	r22, 0x68	; 104
    3aee:	83 e9       	ldi	r24, 0x93	; 147
    3af0:	93 e0       	ldi	r25, 0x03	; 3
    3af2:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <_ZN7TwoWire17beginTransmissionEh>
  Wire._I2C_WRITE((byte)reg);
    3af6:	6f e0       	ldi	r22, 0x0F	; 15
    3af8:	83 e9       	ldi	r24, 0x93	; 147
    3afa:	93 e0       	ldi	r25, 0x03	; 3
    3afc:	0e 94 59 1e 	call	0x3cb2	; 0x3cb2 <_ZN7TwoWire5writeEh>
  Wire._I2C_WRITE((byte)val);
    3b00:	6c 2f       	mov	r22, r28
    3b02:	6f 77       	andi	r22, 0x7F	; 127
    3b04:	83 e9       	ldi	r24, 0x93	; 147
    3b06:	93 e0       	ldi	r25, 0x03	; 3
    3b08:	0e 94 59 1e 	call	0x3cb2	; 0x3cb2 <_ZN7TwoWire5writeEh>
  Wire.endTransmission();
    3b0c:	83 e9       	ldi	r24, 0x93	; 147
    3b0e:	93 e0       	ldi	r25, 0x03	; 3
  Wire.endTransmission();

  uint8_t statreg = read_i2c_register(DS3231_ADDRESS, DS3231_STATUSREG);
  statreg &= ~0x80; // flip OSF bit
  write_i2c_register(DS3231_ADDRESS, DS3231_STATUSREG, statreg);
}
    3b10:	cf 91       	pop	r28
    3b12:	1f 91       	pop	r17
    3b14:	0f 91       	pop	r16

static void write_i2c_register(uint8_t addr, uint8_t reg, uint8_t val) {
  Wire.beginTransmission(addr);
  Wire._I2C_WRITE((byte)reg);
  Wire._I2C_WRITE((byte)val);
  Wire.endTransmission();
    3b16:	0c 94 33 1f 	jmp	0x3e66	; 0x3e66 <_ZN7TwoWire15endTransmissionEv>

00003b1a <_ZN10RTC_DS32319lostPowerEv>:
  Wire.begin();
  return true;
}

bool RTC_DS3231::lostPower(void) {
  return (read_i2c_register(DS3231_ADDRESS, DS3231_STATUSREG) >> 7);
    3b1a:	8f e0       	ldi	r24, 0x0F	; 15
    3b1c:	0e 94 dd 1c 	call	0x39ba	; 0x39ba <_ZL17read_i2c_registerhh.constprop.7>
    3b20:	87 fb       	bst	r24, 7
    3b22:	88 27       	eor	r24, r24
    3b24:	80 f9       	bld	r24, 0
}
    3b26:	08 95       	ret

00003b28 <_ZN8SPIClass5beginEv>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    3b28:	cf 93       	push	r28
  uint8_t sreg = SREG;
    3b2a:	cf b7       	in	r28, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    3b2c:	f8 94       	cli
  if (!initialized) {
    3b2e:	80 91 92 03 	lds	r24, 0x0392	; 0x800392 <_ZN8SPIClass11initializedE>
    3b32:	81 11       	cpse	r24, r1
    3b34:	27 c0       	rjmp	.+78     	; 0x3b84 <_ZN8SPIClass5beginEv+0x5c>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    3b36:	e1 ec       	ldi	r30, 0xC1	; 193
    3b38:	f0 e0       	ldi	r31, 0x00	; 0
    3b3a:	84 91       	lpm	r24, Z
    uint8_t bit = digitalPinToBitMask(SS);
    3b3c:	ed ea       	ldi	r30, 0xAD	; 173
    3b3e:	f0 e0       	ldi	r31, 0x00	; 0
    3b40:	94 91       	lpm	r25, Z
    volatile uint8_t *reg = portModeRegister(port);
    3b42:	e8 2f       	mov	r30, r24
    3b44:	f0 e0       	ldi	r31, 0x00	; 0
    3b46:	ee 0f       	add	r30, r30
    3b48:	ff 1f       	adc	r31, r31
    3b4a:	e1 52       	subi	r30, 0x21	; 33
    3b4c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b4e:	a5 91       	lpm	r26, Z+
    3b50:	b4 91       	lpm	r27, Z

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    3b52:	ec 91       	ld	r30, X
    3b54:	e9 23       	and	r30, r25
    3b56:	21 f4       	brne	.+8      	; 0x3b60 <_ZN8SPIClass5beginEv+0x38>
      digitalWrite(SS, HIGH);
    3b58:	61 e0       	ldi	r22, 0x01	; 1
    3b5a:	8a e0       	ldi	r24, 0x0A	; 10
    3b5c:	0e 94 a4 13 	call	0x2748	; 0x2748 <digitalWrite>
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    3b60:	61 e0       	ldi	r22, 0x01	; 1
    3b62:	8a e0       	ldi	r24, 0x0A	; 10
    3b64:	0e 94 68 13 	call	0x26d0	; 0x26d0 <pinMode>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    3b68:	8c b5       	in	r24, 0x2c	; 44
    3b6a:	80 61       	ori	r24, 0x10	; 16
    3b6c:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
    3b6e:	8c b5       	in	r24, 0x2c	; 44
    3b70:	80 64       	ori	r24, 0x40	; 64
    3b72:	8c bd       	out	0x2c, r24	; 44
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    3b74:	61 e0       	ldi	r22, 0x01	; 1
    3b76:	8d e0       	ldi	r24, 0x0D	; 13
    3b78:	0e 94 68 13 	call	0x26d0	; 0x26d0 <pinMode>
    pinMode(MOSI, OUTPUT);
    3b7c:	61 e0       	ldi	r22, 0x01	; 1
    3b7e:	8b e0       	ldi	r24, 0x0B	; 11
    3b80:	0e 94 68 13 	call	0x26d0	; 0x26d0 <pinMode>
  }
  initialized++; // reference count
    3b84:	80 91 92 03 	lds	r24, 0x0392	; 0x800392 <_ZN8SPIClass11initializedE>
    3b88:	8f 5f       	subi	r24, 0xFF	; 255
    3b8a:	80 93 92 03 	sts	0x0392, r24	; 0x800392 <_ZN8SPIClass11initializedE>
  SREG = sreg;
    3b8e:	cf bf       	out	0x3f, r28	; 63
}
    3b90:	cf 91       	pop	r28
    3b92:	08 95       	ret

00003b94 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    3b94:	80 91 c7 03 	lds	r24, 0x03C7	; 0x8003c7 <_ZN7TwoWire14rxBufferLengthE>
    3b98:	90 e0       	ldi	r25, 0x00	; 0
    3b9a:	20 91 c8 03 	lds	r18, 0x03C8	; 0x8003c8 <_ZN7TwoWire13rxBufferIndexE>
    3b9e:	82 1b       	sub	r24, r18
    3ba0:	91 09       	sbc	r25, r1
    3ba2:	08 95       	ret

00003ba4 <_ZN7TwoWire4readEv>:
    3ba4:	90 91 c8 03 	lds	r25, 0x03C8	; 0x8003c8 <_ZN7TwoWire13rxBufferIndexE>
    3ba8:	80 91 c7 03 	lds	r24, 0x03C7	; 0x8003c7 <_ZN7TwoWire14rxBufferLengthE>
    3bac:	98 17       	cp	r25, r24
    3bae:	50 f4       	brcc	.+20     	; 0x3bc4 <_ZN7TwoWire4readEv+0x20>
    3bb0:	e9 2f       	mov	r30, r25
    3bb2:	f0 e0       	ldi	r31, 0x00	; 0
    3bb4:	e7 53       	subi	r30, 0x37	; 55
    3bb6:	fc 4f       	sbci	r31, 0xFC	; 252
    3bb8:	20 81       	ld	r18, Z
    3bba:	30 e0       	ldi	r19, 0x00	; 0
    3bbc:	9f 5f       	subi	r25, 0xFF	; 255
    3bbe:	90 93 c8 03 	sts	0x03C8, r25	; 0x8003c8 <_ZN7TwoWire13rxBufferIndexE>
    3bc2:	02 c0       	rjmp	.+4      	; 0x3bc8 <_ZN7TwoWire4readEv+0x24>
    3bc4:	2f ef       	ldi	r18, 0xFF	; 255
    3bc6:	3f ef       	ldi	r19, 0xFF	; 255
    3bc8:	c9 01       	movw	r24, r18
    3bca:	08 95       	ret

00003bcc <_ZN7TwoWire4peekEv>:
    3bcc:	e0 91 c8 03 	lds	r30, 0x03C8	; 0x8003c8 <_ZN7TwoWire13rxBufferIndexE>
    3bd0:	80 91 c7 03 	lds	r24, 0x03C7	; 0x8003c7 <_ZN7TwoWire14rxBufferLengthE>
    3bd4:	e8 17       	cp	r30, r24
    3bd6:	30 f4       	brcc	.+12     	; 0x3be4 <_ZN7TwoWire4peekEv+0x18>
    3bd8:	f0 e0       	ldi	r31, 0x00	; 0
    3bda:	e7 53       	subi	r30, 0x37	; 55
    3bdc:	fc 4f       	sbci	r31, 0xFC	; 252
    3bde:	80 81       	ld	r24, Z
    3be0:	90 e0       	ldi	r25, 0x00	; 0
    3be2:	08 95       	ret
    3be4:	8f ef       	ldi	r24, 0xFF	; 255
    3be6:	9f ef       	ldi	r25, 0xFF	; 255
    3be8:	08 95       	ret

00003bea <_ZN7TwoWire5flushEv>:
    3bea:	08 95       	ret

00003bec <_ZN7TwoWire16onReceiveServiceEPhi>:
    3bec:	cf 93       	push	r28
    3bee:	df 93       	push	r29
    3bf0:	ec 01       	movw	r28, r24
    3bf2:	e0 91 9f 03 	lds	r30, 0x039F	; 0x80039f <_ZN7TwoWire14user_onReceiveE>
    3bf6:	f0 91 a0 03 	lds	r31, 0x03A0	; 0x8003a0 <_ZN7TwoWire14user_onReceiveE+0x1>
    3bfa:	30 97       	sbiw	r30, 0x00	; 0
    3bfc:	f1 f0       	breq	.+60     	; 0x3c3a <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    3bfe:	90 91 c8 03 	lds	r25, 0x03C8	; 0x8003c8 <_ZN7TwoWire13rxBufferIndexE>
    3c02:	80 91 c7 03 	lds	r24, 0x03C7	; 0x8003c7 <_ZN7TwoWire14rxBufferLengthE>
    3c06:	98 17       	cp	r25, r24
    3c08:	c0 f0       	brcs	.+48     	; 0x3c3a <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    3c0a:	90 e0       	ldi	r25, 0x00	; 0
    3c0c:	29 2f       	mov	r18, r25
    3c0e:	30 e0       	ldi	r19, 0x00	; 0
    3c10:	26 17       	cp	r18, r22
    3c12:	37 07       	cpc	r19, r23
    3c14:	54 f4       	brge	.+20     	; 0x3c2a <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    3c16:	de 01       	movw	r26, r28
    3c18:	a2 0f       	add	r26, r18
    3c1a:	b3 1f       	adc	r27, r19
    3c1c:	4c 91       	ld	r20, X
    3c1e:	d9 01       	movw	r26, r18
    3c20:	a7 53       	subi	r26, 0x37	; 55
    3c22:	bc 4f       	sbci	r27, 0xFC	; 252
    3c24:	4c 93       	st	X, r20
    3c26:	9f 5f       	subi	r25, 0xFF	; 255
    3c28:	f1 cf       	rjmp	.-30     	; 0x3c0c <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    3c2a:	10 92 c8 03 	sts	0x03C8, r1	; 0x8003c8 <_ZN7TwoWire13rxBufferIndexE>
    3c2e:	60 93 c7 03 	sts	0x03C7, r22	; 0x8003c7 <_ZN7TwoWire14rxBufferLengthE>
    3c32:	cb 01       	movw	r24, r22
    3c34:	df 91       	pop	r29
    3c36:	cf 91       	pop	r28
    3c38:	09 94       	ijmp
    3c3a:	df 91       	pop	r29
    3c3c:	cf 91       	pop	r28
    3c3e:	08 95       	ret

00003c40 <_ZN7TwoWire16onRequestServiceEv>:
    3c40:	e0 91 a1 03 	lds	r30, 0x03A1	; 0x8003a1 <_ZN7TwoWire14user_onRequestE>
    3c44:	f0 91 a2 03 	lds	r31, 0x03A2	; 0x8003a2 <_ZN7TwoWire14user_onRequestE+0x1>
    3c48:	30 97       	sbiw	r30, 0x00	; 0
    3c4a:	29 f0       	breq	.+10     	; 0x3c56 <_ZN7TwoWire16onRequestServiceEv+0x16>
    3c4c:	10 92 a5 03 	sts	0x03A5, r1	; 0x8003a5 <_ZN7TwoWire13txBufferIndexE>
    3c50:	10 92 a4 03 	sts	0x03A4, r1	; 0x8003a4 <_ZN7TwoWire14txBufferLengthE>
    3c54:	09 94       	ijmp
    3c56:	08 95       	ret

00003c58 <_ZN7TwoWire5writeEPKhj>:
    3c58:	cf 92       	push	r12
    3c5a:	df 92       	push	r13
    3c5c:	ef 92       	push	r14
    3c5e:	ff 92       	push	r15
    3c60:	0f 93       	push	r16
    3c62:	1f 93       	push	r17
    3c64:	cf 93       	push	r28
    3c66:	df 93       	push	r29
    3c68:	7c 01       	movw	r14, r24
    3c6a:	cb 01       	movw	r24, r22
    3c6c:	8a 01       	movw	r16, r20
    3c6e:	20 91 a3 03 	lds	r18, 0x03A3	; 0x8003a3 <_ZN7TwoWire12transmittingE>
    3c72:	22 23       	and	r18, r18
    3c74:	89 f0       	breq	.+34     	; 0x3c98 <_ZN7TwoWire5writeEPKhj+0x40>
    3c76:	eb 01       	movw	r28, r22
    3c78:	6b 01       	movw	r12, r22
    3c7a:	c4 0e       	add	r12, r20
    3c7c:	d5 1e       	adc	r13, r21
    3c7e:	cc 15       	cp	r28, r12
    3c80:	dd 05       	cpc	r29, r13
    3c82:	69 f0       	breq	.+26     	; 0x3c9e <_ZN7TwoWire5writeEPKhj+0x46>
    3c84:	69 91       	ld	r22, Y+
    3c86:	d7 01       	movw	r26, r14
    3c88:	ed 91       	ld	r30, X+
    3c8a:	fc 91       	ld	r31, X
    3c8c:	01 90       	ld	r0, Z+
    3c8e:	f0 81       	ld	r31, Z
    3c90:	e0 2d       	mov	r30, r0
    3c92:	c7 01       	movw	r24, r14
    3c94:	09 95       	icall
    3c96:	f3 cf       	rjmp	.-26     	; 0x3c7e <_ZN7TwoWire5writeEPKhj+0x26>
    3c98:	64 2f       	mov	r22, r20
    3c9a:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <twi_transmit>
    3c9e:	c8 01       	movw	r24, r16
    3ca0:	df 91       	pop	r29
    3ca2:	cf 91       	pop	r28
    3ca4:	1f 91       	pop	r17
    3ca6:	0f 91       	pop	r16
    3ca8:	ff 90       	pop	r15
    3caa:	ef 90       	pop	r14
    3cac:	df 90       	pop	r13
    3cae:	cf 90       	pop	r12
    3cb0:	08 95       	ret

00003cb2 <_ZN7TwoWire5writeEh>:
    3cb2:	cf 93       	push	r28
    3cb4:	df 93       	push	r29
    3cb6:	1f 92       	push	r1
    3cb8:	cd b7       	in	r28, 0x3d	; 61
    3cba:	de b7       	in	r29, 0x3e	; 62
    3cbc:	69 83       	std	Y+1, r22	; 0x01
    3cbe:	20 91 a3 03 	lds	r18, 0x03A3	; 0x8003a3 <_ZN7TwoWire12transmittingE>
    3cc2:	22 23       	and	r18, r18
    3cc4:	d1 f0       	breq	.+52     	; 0x3cfa <_ZN7TwoWire5writeEh+0x48>
    3cc6:	20 91 a4 03 	lds	r18, 0x03A4	; 0x8003a4 <_ZN7TwoWire14txBufferLengthE>
    3cca:	20 32       	cpi	r18, 0x20	; 32
    3ccc:	40 f0       	brcs	.+16     	; 0x3cde <_ZN7TwoWire5writeEh+0x2c>
    3cce:	21 e0       	ldi	r18, 0x01	; 1
    3cd0:	30 e0       	ldi	r19, 0x00	; 0
    3cd2:	fc 01       	movw	r30, r24
    3cd4:	33 83       	std	Z+3, r19	; 0x03
    3cd6:	22 83       	std	Z+2, r18	; 0x02
    3cd8:	80 e0       	ldi	r24, 0x00	; 0
    3cda:	90 e0       	ldi	r25, 0x00	; 0
    3cdc:	15 c0       	rjmp	.+42     	; 0x3d08 <_ZN7TwoWire5writeEh+0x56>
    3cde:	80 91 a5 03 	lds	r24, 0x03A5	; 0x8003a5 <_ZN7TwoWire13txBufferIndexE>
    3ce2:	e8 2f       	mov	r30, r24
    3ce4:	f0 e0       	ldi	r31, 0x00	; 0
    3ce6:	ea 55       	subi	r30, 0x5A	; 90
    3ce8:	fc 4f       	sbci	r31, 0xFC	; 252
    3cea:	99 81       	ldd	r25, Y+1	; 0x01
    3cec:	90 83       	st	Z, r25
    3cee:	8f 5f       	subi	r24, 0xFF	; 255
    3cf0:	80 93 a5 03 	sts	0x03A5, r24	; 0x8003a5 <_ZN7TwoWire13txBufferIndexE>
    3cf4:	80 93 a4 03 	sts	0x03A4, r24	; 0x8003a4 <_ZN7TwoWire14txBufferLengthE>
    3cf8:	05 c0       	rjmp	.+10     	; 0x3d04 <_ZN7TwoWire5writeEh+0x52>
    3cfa:	61 e0       	ldi	r22, 0x01	; 1
    3cfc:	ce 01       	movw	r24, r28
    3cfe:	01 96       	adiw	r24, 0x01	; 1
    3d00:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <twi_transmit>
    3d04:	81 e0       	ldi	r24, 0x01	; 1
    3d06:	90 e0       	ldi	r25, 0x00	; 0
    3d08:	0f 90       	pop	r0
    3d0a:	df 91       	pop	r29
    3d0c:	cf 91       	pop	r28
    3d0e:	08 95       	ret

00003d10 <_ZN7TwoWireC1Ev>:
    3d10:	fc 01       	movw	r30, r24
    3d12:	13 82       	std	Z+3, r1	; 0x03
    3d14:	12 82       	std	Z+2, r1	; 0x02
    3d16:	88 ee       	ldi	r24, 0xE8	; 232
    3d18:	93 e0       	ldi	r25, 0x03	; 3
    3d1a:	a0 e0       	ldi	r26, 0x00	; 0
    3d1c:	b0 e0       	ldi	r27, 0x00	; 0
    3d1e:	84 83       	std	Z+4, r24	; 0x04
    3d20:	95 83       	std	Z+5, r25	; 0x05
    3d22:	a6 83       	std	Z+6, r26	; 0x06
    3d24:	b7 83       	std	Z+7, r27	; 0x07
    3d26:	8d e7       	ldi	r24, 0x7D	; 125
    3d28:	92 e0       	ldi	r25, 0x02	; 2
    3d2a:	91 83       	std	Z+1, r25	; 0x01
    3d2c:	80 83       	st	Z, r24
    3d2e:	08 95       	ret

00003d30 <_ZN7TwoWire5beginEv>:
    3d30:	10 92 c8 03 	sts	0x03C8, r1	; 0x8003c8 <_ZN7TwoWire13rxBufferIndexE>
    3d34:	10 92 c7 03 	sts	0x03C7, r1	; 0x8003c7 <_ZN7TwoWire14rxBufferLengthE>
    3d38:	10 92 a5 03 	sts	0x03A5, r1	; 0x8003a5 <_ZN7TwoWire13txBufferIndexE>
    3d3c:	10 92 a4 03 	sts	0x03A4, r1	; 0x8003a4 <_ZN7TwoWire14txBufferLengthE>
    3d40:	0e 94 3b 1f 	call	0x3e76	; 0x3e76 <twi_init>
    3d44:	80 e2       	ldi	r24, 0x20	; 32
    3d46:	9e e1       	ldi	r25, 0x1E	; 30
    3d48:	0e 94 24 20 	call	0x4048	; 0x4048 <twi_attachSlaveTxEvent>
    3d4c:	86 ef       	ldi	r24, 0xF6	; 246
    3d4e:	9d e1       	ldi	r25, 0x1D	; 29
    3d50:	0c 94 1f 20 	jmp	0x403e	; 0x403e <twi_attachSlaveRxEvent>

00003d54 <_ZN7TwoWire17beginTransmissionEh>:
    3d54:	81 e0       	ldi	r24, 0x01	; 1
    3d56:	80 93 a3 03 	sts	0x03A3, r24	; 0x8003a3 <_ZN7TwoWire12transmittingE>
    3d5a:	60 93 c6 03 	sts	0x03C6, r22	; 0x8003c6 <_ZN7TwoWire9txAddressE>
    3d5e:	10 92 a5 03 	sts	0x03A5, r1	; 0x8003a5 <_ZN7TwoWire13txBufferIndexE>
    3d62:	10 92 a4 03 	sts	0x03A4, r1	; 0x8003a4 <_ZN7TwoWire14txBufferLengthE>
    3d66:	08 95       	ret

00003d68 <_ZN7TwoWire17beginTransmissionEi>:
    3d68:	0c 94 aa 1e 	jmp	0x3d54	; 0x3d54 <_ZN7TwoWire17beginTransmissionEh>

00003d6c <_ZN7TwoWire15endTransmissionEh>:
    3d6c:	0f 93       	push	r16
    3d6e:	06 2f       	mov	r16, r22
    3d70:	21 e0       	ldi	r18, 0x01	; 1
    3d72:	40 91 a4 03 	lds	r20, 0x03A4	; 0x8003a4 <_ZN7TwoWire14txBufferLengthE>
    3d76:	66 ea       	ldi	r22, 0xA6	; 166
    3d78:	73 e0       	ldi	r23, 0x03	; 3
    3d7a:	80 91 c6 03 	lds	r24, 0x03C6	; 0x8003c6 <_ZN7TwoWire9txAddressE>
    3d7e:	0e 94 a1 1f 	call	0x3f42	; 0x3f42 <twi_writeTo>
    3d82:	10 92 a5 03 	sts	0x03A5, r1	; 0x8003a5 <_ZN7TwoWire13txBufferIndexE>
    3d86:	10 92 a4 03 	sts	0x03A4, r1	; 0x8003a4 <_ZN7TwoWire14txBufferLengthE>
    3d8a:	10 92 a3 03 	sts	0x03A3, r1	; 0x8003a3 <_ZN7TwoWire12transmittingE>
    3d8e:	0f 91       	pop	r16
    3d90:	08 95       	ret

00003d92 <_ZN7TwoWire11requestFromEhhmhh>:
    3d92:	4f 92       	push	r4
    3d94:	5f 92       	push	r5
    3d96:	6f 92       	push	r6
    3d98:	7f 92       	push	r7
    3d9a:	af 92       	push	r10
    3d9c:	bf 92       	push	r11
    3d9e:	cf 92       	push	r12
    3da0:	ef 92       	push	r14
    3da2:	ff 92       	push	r15
    3da4:	0f 93       	push	r16
    3da6:	1f 93       	push	r17
    3da8:	cf 93       	push	r28
    3daa:	df 93       	push	r29
    3dac:	5c 01       	movw	r10, r24
    3dae:	f6 2e       	mov	r15, r22
    3db0:	d4 2f       	mov	r29, r20
    3db2:	28 01       	movw	r4, r16
    3db4:	39 01       	movw	r6, r18
    3db6:	ee 20       	and	r14, r14
    3db8:	21 f1       	breq	.+72     	; 0x3e02 <_ZN7TwoWire11requestFromEhhmhh+0x70>
    3dba:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <_ZN7TwoWire17beginTransmissionEh>
    3dbe:	ce 2d       	mov	r28, r14
    3dc0:	c4 30       	cpi	r28, 0x04	; 4
    3dc2:	08 f0       	brcs	.+2      	; 0x3dc6 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    3dc4:	c3 e0       	ldi	r28, 0x03	; 3
    3dc6:	c1 50       	subi	r28, 0x01	; 1
    3dc8:	c0 f0       	brcs	.+48     	; 0x3dfa <_ZN7TwoWire11requestFromEhhmhh+0x68>
    3dca:	28 e0       	ldi	r18, 0x08	; 8
    3dcc:	c2 9f       	mul	r28, r18
    3dce:	c0 01       	movw	r24, r0
    3dd0:	11 24       	eor	r1, r1
    3dd2:	a3 01       	movw	r20, r6
    3dd4:	92 01       	movw	r18, r4
    3dd6:	04 c0       	rjmp	.+8      	; 0x3de0 <_ZN7TwoWire11requestFromEhhmhh+0x4e>
    3dd8:	56 95       	lsr	r21
    3dda:	47 95       	ror	r20
    3ddc:	37 95       	ror	r19
    3dde:	27 95       	ror	r18
    3de0:	8a 95       	dec	r24
    3de2:	d2 f7       	brpl	.-12     	; 0x3dd8 <_ZN7TwoWire11requestFromEhhmhh+0x46>
    3de4:	ca 01       	movw	r24, r20
    3de6:	b9 01       	movw	r22, r18
    3de8:	d5 01       	movw	r26, r10
    3dea:	ed 91       	ld	r30, X+
    3dec:	fc 91       	ld	r31, X
    3dee:	01 90       	ld	r0, Z+
    3df0:	f0 81       	ld	r31, Z
    3df2:	e0 2d       	mov	r30, r0
    3df4:	c5 01       	movw	r24, r10
    3df6:	09 95       	icall
    3df8:	e6 cf       	rjmp	.-52     	; 0x3dc6 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    3dfa:	60 e0       	ldi	r22, 0x00	; 0
    3dfc:	c5 01       	movw	r24, r10
    3dfe:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <_ZN7TwoWire15endTransmissionEh>
    3e02:	4d 2f       	mov	r20, r29
    3e04:	d1 32       	cpi	r29, 0x21	; 33
    3e06:	08 f0       	brcs	.+2      	; 0x3e0a <_ZN7TwoWire11requestFromEhhmhh+0x78>
    3e08:	40 e2       	ldi	r20, 0x20	; 32
    3e0a:	2c 2d       	mov	r18, r12
    3e0c:	69 ec       	ldi	r22, 0xC9	; 201
    3e0e:	73 e0       	ldi	r23, 0x03	; 3
    3e10:	8f 2d       	mov	r24, r15
    3e12:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <twi_readFrom>
    3e16:	10 92 c8 03 	sts	0x03C8, r1	; 0x8003c8 <_ZN7TwoWire13rxBufferIndexE>
    3e1a:	80 93 c7 03 	sts	0x03C7, r24	; 0x8003c7 <_ZN7TwoWire14rxBufferLengthE>
    3e1e:	df 91       	pop	r29
    3e20:	cf 91       	pop	r28
    3e22:	1f 91       	pop	r17
    3e24:	0f 91       	pop	r16
    3e26:	ff 90       	pop	r15
    3e28:	ef 90       	pop	r14
    3e2a:	cf 90       	pop	r12
    3e2c:	bf 90       	pop	r11
    3e2e:	af 90       	pop	r10
    3e30:	7f 90       	pop	r7
    3e32:	6f 90       	pop	r6
    3e34:	5f 90       	pop	r5
    3e36:	4f 90       	pop	r4
    3e38:	08 95       	ret

00003e3a <_ZN7TwoWire11requestFromEhhh>:
    3e3a:	cf 92       	push	r12
    3e3c:	ef 92       	push	r14
    3e3e:	0f 93       	push	r16
    3e40:	1f 93       	push	r17
    3e42:	c2 2e       	mov	r12, r18
    3e44:	e1 2c       	mov	r14, r1
    3e46:	00 e0       	ldi	r16, 0x00	; 0
    3e48:	10 e0       	ldi	r17, 0x00	; 0
    3e4a:	98 01       	movw	r18, r16
    3e4c:	0e 94 c9 1e 	call	0x3d92	; 0x3d92 <_ZN7TwoWire11requestFromEhhmhh>
    3e50:	1f 91       	pop	r17
    3e52:	0f 91       	pop	r16
    3e54:	ef 90       	pop	r14
    3e56:	cf 90       	pop	r12
    3e58:	08 95       	ret

00003e5a <_ZN7TwoWire11requestFromEhh>:
    3e5a:	21 e0       	ldi	r18, 0x01	; 1
    3e5c:	0c 94 1d 1f 	jmp	0x3e3a	; 0x3e3a <_ZN7TwoWire11requestFromEhhh>

00003e60 <_ZN7TwoWire11requestFromEii>:
    3e60:	21 e0       	ldi	r18, 0x01	; 1
    3e62:	0c 94 1d 1f 	jmp	0x3e3a	; 0x3e3a <_ZN7TwoWire11requestFromEhhh>

00003e66 <_ZN7TwoWire15endTransmissionEv>:
    3e66:	61 e0       	ldi	r22, 0x01	; 1
    3e68:	0c 94 b6 1e 	jmp	0x3d6c	; 0x3d6c <_ZN7TwoWire15endTransmissionEh>

00003e6c <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    3e6c:	83 e9       	ldi	r24, 0x93	; 147
    3e6e:	93 e0       	ldi	r25, 0x03	; 3
    3e70:	0c 94 88 1e 	jmp	0x3d10	; 0x3d10 <_ZN7TwoWireC1Ev>

00003e74 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    3e74:	08 95       	ret

00003e76 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    3e76:	10 92 56 04 	sts	0x0456, r1	; 0x800456 <twi_state>
    3e7a:	81 e0       	ldi	r24, 0x01	; 1
    3e7c:	80 93 54 04 	sts	0x0454, r24	; 0x800454 <twi_sendStop>
    3e80:	10 92 53 04 	sts	0x0453, r1	; 0x800453 <twi_inRepStart>
    3e84:	61 e0       	ldi	r22, 0x01	; 1
    3e86:	82 e1       	ldi	r24, 0x12	; 18
    3e88:	0e 94 a4 13 	call	0x2748	; 0x2748 <digitalWrite>
    3e8c:	61 e0       	ldi	r22, 0x01	; 1
    3e8e:	83 e1       	ldi	r24, 0x13	; 19
    3e90:	0e 94 a4 13 	call	0x2748	; 0x2748 <digitalWrite>
    3e94:	e9 eb       	ldi	r30, 0xB9	; 185
    3e96:	f0 e0       	ldi	r31, 0x00	; 0
    3e98:	80 81       	ld	r24, Z
    3e9a:	8e 7f       	andi	r24, 0xFE	; 254
    3e9c:	80 83       	st	Z, r24
    3e9e:	80 81       	ld	r24, Z
    3ea0:	8d 7f       	andi	r24, 0xFD	; 253
    3ea2:	80 83       	st	Z, r24
    3ea4:	88 e4       	ldi	r24, 0x48	; 72
    3ea6:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    3eaa:	85 e4       	ldi	r24, 0x45	; 69
    3eac:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    3eb0:	08 95       	ret

00003eb2 <twi_readFrom>:
    3eb2:	41 32       	cpi	r20, 0x21	; 33
    3eb4:	08 f0       	brcs	.+2      	; 0x3eb8 <twi_readFrom+0x6>
    3eb6:	43 c0       	rjmp	.+134    	; 0x3f3e <twi_readFrom+0x8c>
    3eb8:	90 91 56 04 	lds	r25, 0x0456	; 0x800456 <twi_state>
    3ebc:	91 11       	cpse	r25, r1
    3ebe:	fc cf       	rjmp	.-8      	; 0x3eb8 <twi_readFrom+0x6>
    3ec0:	91 e0       	ldi	r25, 0x01	; 1
    3ec2:	90 93 56 04 	sts	0x0456, r25	; 0x800456 <twi_state>
    3ec6:	20 93 54 04 	sts	0x0454, r18	; 0x800454 <twi_sendStop>
    3eca:	2f ef       	ldi	r18, 0xFF	; 255
    3ecc:	20 93 e9 03 	sts	0x03E9, r18	; 0x8003e9 <twi_error>
    3ed0:	10 92 2e 04 	sts	0x042E, r1	; 0x80042e <twi_masterBufferIndex>
    3ed4:	24 0f       	add	r18, r20
    3ed6:	20 93 2d 04 	sts	0x042D, r18	; 0x80042d <twi_masterBufferLength>
    3eda:	90 93 55 04 	sts	0x0455, r25	; 0x800455 <twi_slarw>
    3ede:	90 91 55 04 	lds	r25, 0x0455	; 0x800455 <twi_slarw>
    3ee2:	88 0f       	add	r24, r24
    3ee4:	89 2b       	or	r24, r25
    3ee6:	80 93 55 04 	sts	0x0455, r24	; 0x800455 <twi_slarw>
    3eea:	80 91 53 04 	lds	r24, 0x0453	; 0x800453 <twi_inRepStart>
    3eee:	81 30       	cpi	r24, 0x01	; 1
    3ef0:	61 f4       	brne	.+24     	; 0x3f0a <twi_readFrom+0x58>
    3ef2:	10 92 53 04 	sts	0x0453, r1	; 0x800453 <twi_inRepStart>
    3ef6:	80 91 55 04 	lds	r24, 0x0455	; 0x800455 <twi_slarw>
    3efa:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    3efe:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    3f02:	83 fd       	sbrc	r24, 3
    3f04:	f8 cf       	rjmp	.-16     	; 0x3ef6 <twi_readFrom+0x44>
    3f06:	85 ec       	ldi	r24, 0xC5	; 197
    3f08:	01 c0       	rjmp	.+2      	; 0x3f0c <twi_readFrom+0x5a>
    3f0a:	85 ee       	ldi	r24, 0xE5	; 229
    3f0c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    3f10:	80 91 56 04 	lds	r24, 0x0456	; 0x800456 <twi_state>
    3f14:	81 30       	cpi	r24, 0x01	; 1
    3f16:	e1 f3       	breq	.-8      	; 0x3f10 <twi_readFrom+0x5e>
    3f18:	80 91 2e 04 	lds	r24, 0x042E	; 0x80042e <twi_masterBufferIndex>
    3f1c:	84 17       	cp	r24, r20
    3f1e:	10 f4       	brcc	.+4      	; 0x3f24 <twi_readFrom+0x72>
    3f20:	40 91 2e 04 	lds	r20, 0x042E	; 0x80042e <twi_masterBufferIndex>
    3f24:	af e2       	ldi	r26, 0x2F	; 47
    3f26:	b4 e0       	ldi	r27, 0x04	; 4
    3f28:	96 2f       	mov	r25, r22
    3f2a:	fb 01       	movw	r30, r22
    3f2c:	8e 2f       	mov	r24, r30
    3f2e:	89 1b       	sub	r24, r25
    3f30:	84 17       	cp	r24, r20
    3f32:	18 f4       	brcc	.+6      	; 0x3f3a <twi_readFrom+0x88>
    3f34:	8d 91       	ld	r24, X+
    3f36:	81 93       	st	Z+, r24
    3f38:	f9 cf       	rjmp	.-14     	; 0x3f2c <twi_readFrom+0x7a>
    3f3a:	84 2f       	mov	r24, r20
    3f3c:	08 95       	ret
    3f3e:	80 e0       	ldi	r24, 0x00	; 0
    3f40:	08 95       	ret

00003f42 <twi_writeTo>:
    3f42:	0f 93       	push	r16
    3f44:	41 32       	cpi	r20, 0x21	; 33
    3f46:	08 f0       	brcs	.+2      	; 0x3f4a <twi_writeTo+0x8>
    3f48:	4a c0       	rjmp	.+148    	; 0x3fde <twi_writeTo+0x9c>
    3f4a:	90 91 56 04 	lds	r25, 0x0456	; 0x800456 <twi_state>
    3f4e:	91 11       	cpse	r25, r1
    3f50:	fc cf       	rjmp	.-8      	; 0x3f4a <twi_writeTo+0x8>
    3f52:	32 e0       	ldi	r19, 0x02	; 2
    3f54:	30 93 56 04 	sts	0x0456, r19	; 0x800456 <twi_state>
    3f58:	00 93 54 04 	sts	0x0454, r16	; 0x800454 <twi_sendStop>
    3f5c:	3f ef       	ldi	r19, 0xFF	; 255
    3f5e:	30 93 e9 03 	sts	0x03E9, r19	; 0x8003e9 <twi_error>
    3f62:	10 92 2e 04 	sts	0x042E, r1	; 0x80042e <twi_masterBufferIndex>
    3f66:	40 93 2d 04 	sts	0x042D, r20	; 0x80042d <twi_masterBufferLength>
    3f6a:	56 2f       	mov	r21, r22
    3f6c:	af e2       	ldi	r26, 0x2F	; 47
    3f6e:	b4 e0       	ldi	r27, 0x04	; 4
    3f70:	fb 01       	movw	r30, r22
    3f72:	3e 2f       	mov	r19, r30
    3f74:	35 1b       	sub	r19, r21
    3f76:	34 17       	cp	r19, r20
    3f78:	18 f4       	brcc	.+6      	; 0x3f80 <twi_writeTo+0x3e>
    3f7a:	31 91       	ld	r19, Z+
    3f7c:	3d 93       	st	X+, r19
    3f7e:	f9 cf       	rjmp	.-14     	; 0x3f72 <twi_writeTo+0x30>
    3f80:	10 92 55 04 	sts	0x0455, r1	; 0x800455 <twi_slarw>
    3f84:	30 91 55 04 	lds	r19, 0x0455	; 0x800455 <twi_slarw>
    3f88:	88 0f       	add	r24, r24
    3f8a:	83 2b       	or	r24, r19
    3f8c:	80 93 55 04 	sts	0x0455, r24	; 0x800455 <twi_slarw>
    3f90:	80 91 53 04 	lds	r24, 0x0453	; 0x800453 <twi_inRepStart>
    3f94:	81 30       	cpi	r24, 0x01	; 1
    3f96:	61 f4       	brne	.+24     	; 0x3fb0 <twi_writeTo+0x6e>
    3f98:	10 92 53 04 	sts	0x0453, r1	; 0x800453 <twi_inRepStart>
    3f9c:	80 91 55 04 	lds	r24, 0x0455	; 0x800455 <twi_slarw>
    3fa0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    3fa4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    3fa8:	83 fd       	sbrc	r24, 3
    3faa:	f8 cf       	rjmp	.-16     	; 0x3f9c <twi_writeTo+0x5a>
    3fac:	85 ec       	ldi	r24, 0xC5	; 197
    3fae:	01 c0       	rjmp	.+2      	; 0x3fb2 <twi_writeTo+0x70>
    3fb0:	85 ee       	ldi	r24, 0xE5	; 229
    3fb2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    3fb6:	22 23       	and	r18, r18
    3fb8:	21 f0       	breq	.+8      	; 0x3fc2 <twi_writeTo+0x80>
    3fba:	80 91 56 04 	lds	r24, 0x0456	; 0x800456 <twi_state>
    3fbe:	82 30       	cpi	r24, 0x02	; 2
    3fc0:	d1 f3       	breq	.-12     	; 0x3fb6 <twi_writeTo+0x74>
    3fc2:	80 91 e9 03 	lds	r24, 0x03E9	; 0x8003e9 <twi_error>
    3fc6:	8f 3f       	cpi	r24, 0xFF	; 255
    3fc8:	79 f0       	breq	.+30     	; 0x3fe8 <twi_writeTo+0xa6>
    3fca:	80 91 e9 03 	lds	r24, 0x03E9	; 0x8003e9 <twi_error>
    3fce:	80 32       	cpi	r24, 0x20	; 32
    3fd0:	41 f0       	breq	.+16     	; 0x3fe2 <twi_writeTo+0xa0>
    3fd2:	80 91 e9 03 	lds	r24, 0x03E9	; 0x8003e9 <twi_error>
    3fd6:	80 33       	cpi	r24, 0x30	; 48
    3fd8:	31 f0       	breq	.+12     	; 0x3fe6 <twi_writeTo+0xa4>
    3fda:	94 e0       	ldi	r25, 0x04	; 4
    3fdc:	05 c0       	rjmp	.+10     	; 0x3fe8 <twi_writeTo+0xa6>
    3fde:	91 e0       	ldi	r25, 0x01	; 1
    3fe0:	03 c0       	rjmp	.+6      	; 0x3fe8 <twi_writeTo+0xa6>
    3fe2:	92 e0       	ldi	r25, 0x02	; 2
    3fe4:	01 c0       	rjmp	.+2      	; 0x3fe8 <twi_writeTo+0xa6>
    3fe6:	93 e0       	ldi	r25, 0x03	; 3
    3fe8:	89 2f       	mov	r24, r25
    3fea:	0f 91       	pop	r16
    3fec:	08 95       	ret

00003fee <twi_transmit>:
    3fee:	40 91 0b 04 	lds	r20, 0x040B	; 0x80040b <twi_txBufferLength>
    3ff2:	26 2f       	mov	r18, r22
    3ff4:	30 e0       	ldi	r19, 0x00	; 0
    3ff6:	24 0f       	add	r18, r20
    3ff8:	31 1d       	adc	r19, r1
    3ffa:	21 32       	cpi	r18, 0x21	; 33
    3ffc:	31 05       	cpc	r19, r1
    3ffe:	dc f4       	brge	.+54     	; 0x4036 <twi_transmit+0x48>
    4000:	20 91 56 04 	lds	r18, 0x0456	; 0x800456 <twi_state>
    4004:	24 30       	cpi	r18, 0x04	; 4
    4006:	c9 f4       	brne	.+50     	; 0x403a <twi_transmit+0x4c>
    4008:	fc 01       	movw	r30, r24
    400a:	80 e0       	ldi	r24, 0x00	; 0
    400c:	90 e0       	ldi	r25, 0x00	; 0
    400e:	86 17       	cp	r24, r22
    4010:	58 f4       	brcc	.+22     	; 0x4028 <twi_transmit+0x3a>
    4012:	30 91 0b 04 	lds	r19, 0x040B	; 0x80040b <twi_txBufferLength>
    4016:	21 91       	ld	r18, Z+
    4018:	dc 01       	movw	r26, r24
    401a:	a3 5f       	subi	r26, 0xF3	; 243
    401c:	bb 4f       	sbci	r27, 0xFB	; 251
    401e:	a3 0f       	add	r26, r19
    4020:	b1 1d       	adc	r27, r1
    4022:	2c 93       	st	X, r18
    4024:	01 96       	adiw	r24, 0x01	; 1
    4026:	f3 cf       	rjmp	.-26     	; 0x400e <twi_transmit+0x20>
    4028:	80 91 0b 04 	lds	r24, 0x040B	; 0x80040b <twi_txBufferLength>
    402c:	68 0f       	add	r22, r24
    402e:	60 93 0b 04 	sts	0x040B, r22	; 0x80040b <twi_txBufferLength>
    4032:	80 e0       	ldi	r24, 0x00	; 0
    4034:	08 95       	ret
    4036:	81 e0       	ldi	r24, 0x01	; 1
    4038:	08 95       	ret
    403a:	82 e0       	ldi	r24, 0x02	; 2
    403c:	08 95       	ret

0000403e <twi_attachSlaveRxEvent>:
    403e:	90 93 50 04 	sts	0x0450, r25	; 0x800450 <twi_onSlaveReceive+0x1>
    4042:	80 93 4f 04 	sts	0x044F, r24	; 0x80044f <twi_onSlaveReceive>
    4046:	08 95       	ret

00004048 <twi_attachSlaveTxEvent>:
    4048:	90 93 52 04 	sts	0x0452, r25	; 0x800452 <twi_onSlaveTransmit+0x1>
    404c:	80 93 51 04 	sts	0x0451, r24	; 0x800451 <twi_onSlaveTransmit>
    4050:	08 95       	ret

00004052 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    4052:	85 ed       	ldi	r24, 0xD5	; 213
    4054:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    4058:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    405c:	84 fd       	sbrc	r24, 4
    405e:	fc cf       	rjmp	.-8      	; 0x4058 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    4060:	10 92 56 04 	sts	0x0456, r1	; 0x800456 <twi_state>
    4064:	08 95       	ret

00004066 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    4066:	85 ec       	ldi	r24, 0xC5	; 197
    4068:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // update twi state
  twi_state = TWI_READY;
    406c:	10 92 56 04 	sts	0x0456, r1	; 0x800456 <twi_state>
    4070:	08 95       	ret

00004072 <__vector_24>:
}

ISR(TWI_vect)
{
    4072:	1f 92       	push	r1
    4074:	0f 92       	push	r0
    4076:	0f b6       	in	r0, 0x3f	; 63
    4078:	0f 92       	push	r0
    407a:	11 24       	eor	r1, r1
    407c:	2f 93       	push	r18
    407e:	3f 93       	push	r19
    4080:	4f 93       	push	r20
    4082:	5f 93       	push	r21
    4084:	6f 93       	push	r22
    4086:	7f 93       	push	r23
    4088:	8f 93       	push	r24
    408a:	9f 93       	push	r25
    408c:	af 93       	push	r26
    408e:	bf 93       	push	r27
    4090:	ef 93       	push	r30
    4092:	ff 93       	push	r31
  switch(TW_STATUS){
    4094:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    4098:	88 7f       	andi	r24, 0xF8	; 248
    409a:	80 36       	cpi	r24, 0x60	; 96
    409c:	09 f4       	brne	.+2      	; 0x40a0 <__vector_24+0x2e>
    409e:	9e c0       	rjmp	.+316    	; 0x41dc <__vector_24+0x16a>
    40a0:	78 f5       	brcc	.+94     	; 0x4100 <__vector_24+0x8e>
    40a2:	88 32       	cpi	r24, 0x28	; 40
    40a4:	09 f4       	brne	.+2      	; 0x40a8 <__vector_24+0x36>
    40a6:	5d c0       	rjmp	.+186    	; 0x4162 <__vector_24+0xf0>
    40a8:	90 f4       	brcc	.+36     	; 0x40ce <__vector_24+0x5c>
    40aa:	80 31       	cpi	r24, 0x10	; 16
    40ac:	09 f4       	brne	.+2      	; 0x40b0 <__vector_24+0x3e>
    40ae:	56 c0       	rjmp	.+172    	; 0x415c <__vector_24+0xea>
    40b0:	38 f4       	brcc	.+14     	; 0x40c0 <__vector_24+0x4e>
    40b2:	88 23       	and	r24, r24
    40b4:	09 f4       	brne	.+2      	; 0x40b8 <__vector_24+0x46>
    40b6:	f5 c0       	rjmp	.+490    	; 0x42a2 <__vector_24+0x230>
    40b8:	88 30       	cpi	r24, 0x08	; 8
    40ba:	09 f4       	brne	.+2      	; 0x40be <__vector_24+0x4c>
    40bc:	4f c0       	rjmp	.+158    	; 0x415c <__vector_24+0xea>
    40be:	f5 c0       	rjmp	.+490    	; 0x42aa <__vector_24+0x238>
    40c0:	88 31       	cpi	r24, 0x18	; 24
    40c2:	09 f4       	brne	.+2      	; 0x40c6 <__vector_24+0x54>
    40c4:	4e c0       	rjmp	.+156    	; 0x4162 <__vector_24+0xf0>
    40c6:	80 32       	cpi	r24, 0x20	; 32
    40c8:	09 f4       	brne	.+2      	; 0x40cc <__vector_24+0x5a>
    40ca:	5f c0       	rjmp	.+190    	; 0x418a <__vector_24+0x118>
    40cc:	ee c0       	rjmp	.+476    	; 0x42aa <__vector_24+0x238>
    40ce:	80 34       	cpi	r24, 0x40	; 64
    40d0:	09 f4       	brne	.+2      	; 0x40d4 <__vector_24+0x62>
    40d2:	6a c0       	rjmp	.+212    	; 0x41a8 <__vector_24+0x136>
    40d4:	58 f4       	brcc	.+22     	; 0x40ec <__vector_24+0x7a>
    40d6:	80 33       	cpi	r24, 0x30	; 48
    40d8:	09 f4       	brne	.+2      	; 0x40dc <__vector_24+0x6a>
    40da:	57 c0       	rjmp	.+174    	; 0x418a <__vector_24+0x118>
    40dc:	88 33       	cpi	r24, 0x38	; 56
    40de:	09 f0       	breq	.+2      	; 0x40e2 <__vector_24+0x70>
    40e0:	e4 c0       	rjmp	.+456    	; 0x42aa <__vector_24+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    40e2:	80 93 e9 03 	sts	0x03E9, r24	; 0x8003e9 <twi_error>
      twi_releaseBus();
    40e6:	0e 94 33 20 	call	0x4066	; 0x4066 <twi_releaseBus>
      break;
    40ea:	df c0       	rjmp	.+446    	; 0x42aa <__vector_24+0x238>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    40ec:	80 35       	cpi	r24, 0x50	; 80
    40ee:	09 f4       	brne	.+2      	; 0x40f2 <__vector_24+0x80>
    40f0:	4f c0       	rjmp	.+158    	; 0x4190 <__vector_24+0x11e>
    40f2:	88 35       	cpi	r24, 0x58	; 88
    40f4:	09 f4       	brne	.+2      	; 0x40f8 <__vector_24+0x86>
    40f6:	5d c0       	rjmp	.+186    	; 0x41b2 <__vector_24+0x140>
    40f8:	88 34       	cpi	r24, 0x48	; 72
    40fa:	09 f0       	breq	.+2      	; 0x40fe <__vector_24+0x8c>
    40fc:	d6 c0       	rjmp	.+428    	; 0x42aa <__vector_24+0x238>
    40fe:	d3 c0       	rjmp	.+422    	; 0x42a6 <__vector_24+0x234>
    4100:	88 39       	cpi	r24, 0x98	; 152
    4102:	09 f4       	brne	.+2      	; 0x4106 <__vector_24+0x94>
    4104:	c4 c0       	rjmp	.+392    	; 0x428e <__vector_24+0x21c>
    4106:	a8 f4       	brcc	.+42     	; 0x4132 <__vector_24+0xc0>
    4108:	88 37       	cpi	r24, 0x78	; 120
    410a:	09 f4       	brne	.+2      	; 0x410e <__vector_24+0x9c>
    410c:	67 c0       	rjmp	.+206    	; 0x41dc <__vector_24+0x16a>
    410e:	38 f4       	brcc	.+14     	; 0x411e <__vector_24+0xac>
    4110:	88 36       	cpi	r24, 0x68	; 104
    4112:	09 f4       	brne	.+2      	; 0x4116 <__vector_24+0xa4>
    4114:	63 c0       	rjmp	.+198    	; 0x41dc <__vector_24+0x16a>
    4116:	80 37       	cpi	r24, 0x70	; 112
    4118:	09 f4       	brne	.+2      	; 0x411c <__vector_24+0xaa>
    411a:	60 c0       	rjmp	.+192    	; 0x41dc <__vector_24+0x16a>
    411c:	c6 c0       	rjmp	.+396    	; 0x42aa <__vector_24+0x238>
    411e:	88 38       	cpi	r24, 0x88	; 136
    4120:	09 f4       	brne	.+2      	; 0x4124 <__vector_24+0xb2>
    4122:	b5 c0       	rjmp	.+362    	; 0x428e <__vector_24+0x21c>
    4124:	80 39       	cpi	r24, 0x90	; 144
    4126:	09 f4       	brne	.+2      	; 0x412a <__vector_24+0xb8>
    4128:	5f c0       	rjmp	.+190    	; 0x41e8 <__vector_24+0x176>
    412a:	80 38       	cpi	r24, 0x80	; 128
    412c:	09 f0       	breq	.+2      	; 0x4130 <__vector_24+0xbe>
    412e:	bd c0       	rjmp	.+378    	; 0x42aa <__vector_24+0x238>
    4130:	5b c0       	rjmp	.+182    	; 0x41e8 <__vector_24+0x176>
    4132:	80 3b       	cpi	r24, 0xB0	; 176
    4134:	09 f4       	brne	.+2      	; 0x4138 <__vector_24+0xc6>
    4136:	83 c0       	rjmp	.+262    	; 0x423e <__vector_24+0x1cc>
    4138:	38 f4       	brcc	.+14     	; 0x4148 <__vector_24+0xd6>
    413a:	80 3a       	cpi	r24, 0xA0	; 160
    413c:	09 f4       	brne	.+2      	; 0x4140 <__vector_24+0xce>
    413e:	66 c0       	rjmp	.+204    	; 0x420c <__vector_24+0x19a>
    4140:	88 3a       	cpi	r24, 0xA8	; 168
    4142:	09 f4       	brne	.+2      	; 0x4146 <__vector_24+0xd4>
    4144:	7c c0       	rjmp	.+248    	; 0x423e <__vector_24+0x1cc>
    4146:	b1 c0       	rjmp	.+354    	; 0x42aa <__vector_24+0x238>
    4148:	80 3c       	cpi	r24, 0xC0	; 192
    414a:	09 f4       	brne	.+2      	; 0x414e <__vector_24+0xdc>
    414c:	a4 c0       	rjmp	.+328    	; 0x4296 <__vector_24+0x224>
    414e:	88 3c       	cpi	r24, 0xC8	; 200
    4150:	09 f4       	brne	.+2      	; 0x4154 <__vector_24+0xe2>
    4152:	a1 c0       	rjmp	.+322    	; 0x4296 <__vector_24+0x224>
    4154:	88 3b       	cpi	r24, 0xB8	; 184
    4156:	09 f4       	brne	.+2      	; 0x415a <__vector_24+0xe8>
    4158:	87 c0       	rjmp	.+270    	; 0x4268 <__vector_24+0x1f6>
    415a:	a7 c0       	rjmp	.+334    	; 0x42aa <__vector_24+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    415c:	80 91 55 04 	lds	r24, 0x0455	; 0x800455 <twi_slarw>
    4160:	10 c0       	rjmp	.+32     	; 0x4182 <__vector_24+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    4162:	90 91 2e 04 	lds	r25, 0x042E	; 0x80042e <twi_masterBufferIndex>
    4166:	80 91 2d 04 	lds	r24, 0x042D	; 0x80042d <twi_masterBufferLength>
    416a:	98 17       	cp	r25, r24
    416c:	70 f5       	brcc	.+92     	; 0x41ca <__vector_24+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    416e:	e0 91 2e 04 	lds	r30, 0x042E	; 0x80042e <twi_masterBufferIndex>
    4172:	81 e0       	ldi	r24, 0x01	; 1
    4174:	8e 0f       	add	r24, r30
    4176:	80 93 2e 04 	sts	0x042E, r24	; 0x80042e <twi_masterBufferIndex>
    417a:	f0 e0       	ldi	r31, 0x00	; 0
    417c:	e1 5d       	subi	r30, 0xD1	; 209
    417e:	fb 4f       	sbci	r31, 0xFB	; 251
    4180:	80 81       	ld	r24, Z
    4182:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    4186:	85 ec       	ldi	r24, 0xC5	; 197
    4188:	83 c0       	rjmp	.+262    	; 0x4290 <__vector_24+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    418a:	80 93 e9 03 	sts	0x03E9, r24	; 0x8003e9 <twi_error>
    418e:	8b c0       	rjmp	.+278    	; 0x42a6 <__vector_24+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    4190:	e0 91 2e 04 	lds	r30, 0x042E	; 0x80042e <twi_masterBufferIndex>
    4194:	81 e0       	ldi	r24, 0x01	; 1
    4196:	8e 0f       	add	r24, r30
    4198:	80 93 2e 04 	sts	0x042E, r24	; 0x80042e <twi_masterBufferIndex>
    419c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    41a0:	f0 e0       	ldi	r31, 0x00	; 0
    41a2:	e1 5d       	subi	r30, 0xD1	; 209
    41a4:	fb 4f       	sbci	r31, 0xFB	; 251
    41a6:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    41a8:	90 91 2e 04 	lds	r25, 0x042E	; 0x80042e <twi_masterBufferIndex>
    41ac:	80 91 2d 04 	lds	r24, 0x042D	; 0x80042d <twi_masterBufferLength>
    41b0:	6b c0       	rjmp	.+214    	; 0x4288 <__vector_24+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    41b2:	e0 91 2e 04 	lds	r30, 0x042E	; 0x80042e <twi_masterBufferIndex>
    41b6:	81 e0       	ldi	r24, 0x01	; 1
    41b8:	8e 0f       	add	r24, r30
    41ba:	80 93 2e 04 	sts	0x042E, r24	; 0x80042e <twi_masterBufferIndex>
    41be:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    41c2:	f0 e0       	ldi	r31, 0x00	; 0
    41c4:	e1 5d       	subi	r30, 0xD1	; 209
    41c6:	fb 4f       	sbci	r31, 0xFB	; 251
    41c8:	80 83       	st	Z, r24
	if (twi_sendStop)
    41ca:	80 91 54 04 	lds	r24, 0x0454	; 0x800454 <twi_sendStop>
    41ce:	81 11       	cpse	r24, r1
    41d0:	6a c0       	rjmp	.+212    	; 0x42a6 <__vector_24+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    41d2:	81 e0       	ldi	r24, 0x01	; 1
    41d4:	80 93 53 04 	sts	0x0453, r24	; 0x800453 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    41d8:	84 ea       	ldi	r24, 0xA4	; 164
    41da:	5e c0       	rjmp	.+188    	; 0x4298 <__vector_24+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    41dc:	83 e0       	ldi	r24, 0x03	; 3
    41de:	80 93 56 04 	sts	0x0456, r24	; 0x800456 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    41e2:	10 92 ea 03 	sts	0x03EA, r1	; 0x8003ea <twi_rxBufferIndex>
    41e6:	cf cf       	rjmp	.-98     	; 0x4186 <__vector_24+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    41e8:	80 91 ea 03 	lds	r24, 0x03EA	; 0x8003ea <twi_rxBufferIndex>
    41ec:	80 32       	cpi	r24, 0x20	; 32
    41ee:	08 f0       	brcs	.+2      	; 0x41f2 <__vector_24+0x180>
    41f0:	4e c0       	rjmp	.+156    	; 0x428e <__vector_24+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    41f2:	e0 91 ea 03 	lds	r30, 0x03EA	; 0x8003ea <twi_rxBufferIndex>
    41f6:	81 e0       	ldi	r24, 0x01	; 1
    41f8:	8e 0f       	add	r24, r30
    41fa:	80 93 ea 03 	sts	0x03EA, r24	; 0x8003ea <twi_rxBufferIndex>
    41fe:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    4202:	f0 e0       	ldi	r31, 0x00	; 0
    4204:	e5 51       	subi	r30, 0x15	; 21
    4206:	fc 4f       	sbci	r31, 0xFC	; 252
    4208:	80 83       	st	Z, r24
    420a:	bd cf       	rjmp	.-134    	; 0x4186 <__vector_24+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    420c:	0e 94 33 20 	call	0x4066	; 0x4066 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    4210:	80 91 ea 03 	lds	r24, 0x03EA	; 0x8003ea <twi_rxBufferIndex>
    4214:	80 32       	cpi	r24, 0x20	; 32
    4216:	30 f4       	brcc	.+12     	; 0x4224 <__vector_24+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    4218:	e0 91 ea 03 	lds	r30, 0x03EA	; 0x8003ea <twi_rxBufferIndex>
    421c:	f0 e0       	ldi	r31, 0x00	; 0
    421e:	e5 51       	subi	r30, 0x15	; 21
    4220:	fc 4f       	sbci	r31, 0xFC	; 252
    4222:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    4224:	60 91 ea 03 	lds	r22, 0x03EA	; 0x8003ea <twi_rxBufferIndex>
    4228:	70 e0       	ldi	r23, 0x00	; 0
    422a:	e0 91 4f 04 	lds	r30, 0x044F	; 0x80044f <twi_onSlaveReceive>
    422e:	f0 91 50 04 	lds	r31, 0x0450	; 0x800450 <twi_onSlaveReceive+0x1>
    4232:	8b ee       	ldi	r24, 0xEB	; 235
    4234:	93 e0       	ldi	r25, 0x03	; 3
    4236:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    4238:	10 92 ea 03 	sts	0x03EA, r1	; 0x8003ea <twi_rxBufferIndex>
      break;
    423c:	36 c0       	rjmp	.+108    	; 0x42aa <__vector_24+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    423e:	84 e0       	ldi	r24, 0x04	; 4
    4240:	80 93 56 04 	sts	0x0456, r24	; 0x800456 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    4244:	10 92 0c 04 	sts	0x040C, r1	; 0x80040c <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    4248:	10 92 0b 04 	sts	0x040B, r1	; 0x80040b <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    424c:	e0 91 51 04 	lds	r30, 0x0451	; 0x800451 <twi_onSlaveTransmit>
    4250:	f0 91 52 04 	lds	r31, 0x0452	; 0x800452 <twi_onSlaveTransmit+0x1>
    4254:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    4256:	80 91 0b 04 	lds	r24, 0x040B	; 0x80040b <twi_txBufferLength>
    425a:	81 11       	cpse	r24, r1
    425c:	05 c0       	rjmp	.+10     	; 0x4268 <__vector_24+0x1f6>
        twi_txBufferLength = 1;
    425e:	81 e0       	ldi	r24, 0x01	; 1
    4260:	80 93 0b 04 	sts	0x040B, r24	; 0x80040b <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    4264:	10 92 0d 04 	sts	0x040D, r1	; 0x80040d <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    4268:	e0 91 0c 04 	lds	r30, 0x040C	; 0x80040c <twi_txBufferIndex>
    426c:	81 e0       	ldi	r24, 0x01	; 1
    426e:	8e 0f       	add	r24, r30
    4270:	80 93 0c 04 	sts	0x040C, r24	; 0x80040c <twi_txBufferIndex>
    4274:	f0 e0       	ldi	r31, 0x00	; 0
    4276:	e3 5f       	subi	r30, 0xF3	; 243
    4278:	fb 4f       	sbci	r31, 0xFB	; 251
    427a:	80 81       	ld	r24, Z
    427c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    4280:	90 91 0c 04 	lds	r25, 0x040C	; 0x80040c <twi_txBufferIndex>
    4284:	80 91 0b 04 	lds	r24, 0x040B	; 0x80040b <twi_txBufferLength>
    4288:	98 17       	cp	r25, r24
    428a:	08 f4       	brcc	.+2      	; 0x428e <__vector_24+0x21c>
    428c:	7c cf       	rjmp	.-264    	; 0x4186 <__vector_24+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    428e:	85 e8       	ldi	r24, 0x85	; 133
    4290:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    4294:	0a c0       	rjmp	.+20     	; 0x42aa <__vector_24+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    4296:	85 ec       	ldi	r24, 0xC5	; 197
    4298:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    429c:	10 92 56 04 	sts	0x0456, r1	; 0x800456 <twi_state>
      break;
    42a0:	04 c0       	rjmp	.+8      	; 0x42aa <__vector_24+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    42a2:	10 92 e9 03 	sts	0x03E9, r1	; 0x8003e9 <twi_error>
      twi_stop();
    42a6:	0e 94 29 20 	call	0x4052	; 0x4052 <twi_stop>
      break;
  }
}
    42aa:	ff 91       	pop	r31
    42ac:	ef 91       	pop	r30
    42ae:	bf 91       	pop	r27
    42b0:	af 91       	pop	r26
    42b2:	9f 91       	pop	r25
    42b4:	8f 91       	pop	r24
    42b6:	7f 91       	pop	r23
    42b8:	6f 91       	pop	r22
    42ba:	5f 91       	pop	r21
    42bc:	4f 91       	pop	r20
    42be:	3f 91       	pop	r19
    42c0:	2f 91       	pop	r18
    42c2:	0f 90       	pop	r0
    42c4:	0f be       	out	0x3f, r0	; 63
    42c6:	0f 90       	pop	r0
    42c8:	1f 90       	pop	r1
    42ca:	18 95       	reti

000042cc <__udivmodqi4>:
    42cc:	99 1b       	sub	r25, r25
    42ce:	79 e0       	ldi	r23, 0x09	; 9
    42d0:	04 c0       	rjmp	.+8      	; 0x42da <__udivmodqi4_ep>

000042d2 <__udivmodqi4_loop>:
    42d2:	99 1f       	adc	r25, r25
    42d4:	96 17       	cp	r25, r22
    42d6:	08 f0       	brcs	.+2      	; 0x42da <__udivmodqi4_ep>
    42d8:	96 1b       	sub	r25, r22

000042da <__udivmodqi4_ep>:
    42da:	88 1f       	adc	r24, r24
    42dc:	7a 95       	dec	r23
    42de:	c9 f7       	brne	.-14     	; 0x42d2 <__udivmodqi4_loop>
    42e0:	80 95       	com	r24
    42e2:	08 95       	ret

000042e4 <__udivmodsi4>:
    42e4:	a1 e2       	ldi	r26, 0x21	; 33
    42e6:	1a 2e       	mov	r1, r26
    42e8:	aa 1b       	sub	r26, r26
    42ea:	bb 1b       	sub	r27, r27
    42ec:	fd 01       	movw	r30, r26
    42ee:	0d c0       	rjmp	.+26     	; 0x430a <__udivmodsi4_ep>

000042f0 <__udivmodsi4_loop>:
    42f0:	aa 1f       	adc	r26, r26
    42f2:	bb 1f       	adc	r27, r27
    42f4:	ee 1f       	adc	r30, r30
    42f6:	ff 1f       	adc	r31, r31
    42f8:	a2 17       	cp	r26, r18
    42fa:	b3 07       	cpc	r27, r19
    42fc:	e4 07       	cpc	r30, r20
    42fe:	f5 07       	cpc	r31, r21
    4300:	20 f0       	brcs	.+8      	; 0x430a <__udivmodsi4_ep>
    4302:	a2 1b       	sub	r26, r18
    4304:	b3 0b       	sbc	r27, r19
    4306:	e4 0b       	sbc	r30, r20
    4308:	f5 0b       	sbc	r31, r21

0000430a <__udivmodsi4_ep>:
    430a:	66 1f       	adc	r22, r22
    430c:	77 1f       	adc	r23, r23
    430e:	88 1f       	adc	r24, r24
    4310:	99 1f       	adc	r25, r25
    4312:	1a 94       	dec	r1
    4314:	69 f7       	brne	.-38     	; 0x42f0 <__udivmodsi4_loop>
    4316:	60 95       	com	r22
    4318:	70 95       	com	r23
    431a:	80 95       	com	r24
    431c:	90 95       	com	r25
    431e:	9b 01       	movw	r18, r22
    4320:	ac 01       	movw	r20, r24
    4322:	bd 01       	movw	r22, r26
    4324:	cf 01       	movw	r24, r30
    4326:	08 95       	ret

00004328 <__divmodsi4>:
    4328:	05 2e       	mov	r0, r21
    432a:	97 fb       	bst	r25, 7
    432c:	1e f4       	brtc	.+6      	; 0x4334 <__divmodsi4+0xc>
    432e:	00 94       	com	r0
    4330:	0e 94 ab 21 	call	0x4356	; 0x4356 <__negsi2>
    4334:	57 fd       	sbrc	r21, 7
    4336:	07 d0       	rcall	.+14     	; 0x4346 <__divmodsi4_neg2>
    4338:	0e 94 72 21 	call	0x42e4	; 0x42e4 <__udivmodsi4>
    433c:	07 fc       	sbrc	r0, 7
    433e:	03 d0       	rcall	.+6      	; 0x4346 <__divmodsi4_neg2>
    4340:	4e f4       	brtc	.+18     	; 0x4354 <__divmodsi4_exit>
    4342:	0c 94 ab 21 	jmp	0x4356	; 0x4356 <__negsi2>

00004346 <__divmodsi4_neg2>:
    4346:	50 95       	com	r21
    4348:	40 95       	com	r20
    434a:	30 95       	com	r19
    434c:	21 95       	neg	r18
    434e:	3f 4f       	sbci	r19, 0xFF	; 255
    4350:	4f 4f       	sbci	r20, 0xFF	; 255
    4352:	5f 4f       	sbci	r21, 0xFF	; 255

00004354 <__divmodsi4_exit>:
    4354:	08 95       	ret

00004356 <__negsi2>:
    4356:	90 95       	com	r25
    4358:	80 95       	com	r24
    435a:	70 95       	com	r23
    435c:	61 95       	neg	r22
    435e:	7f 4f       	sbci	r23, 0xFF	; 255
    4360:	8f 4f       	sbci	r24, 0xFF	; 255
    4362:	9f 4f       	sbci	r25, 0xFF	; 255
    4364:	08 95       	ret

00004366 <__tablejump2__>:
    4366:	ee 0f       	add	r30, r30
    4368:	ff 1f       	adc	r31, r31
    436a:	05 90       	lpm	r0, Z+
    436c:	f4 91       	lpm	r31, Z
    436e:	e0 2d       	mov	r30, r0
    4370:	09 94       	ijmp

00004372 <__umulhisi3>:
    4372:	a2 9f       	mul	r26, r18
    4374:	b0 01       	movw	r22, r0
    4376:	b3 9f       	mul	r27, r19
    4378:	c0 01       	movw	r24, r0
    437a:	a3 9f       	mul	r26, r19
    437c:	70 0d       	add	r23, r0
    437e:	81 1d       	adc	r24, r1
    4380:	11 24       	eor	r1, r1
    4382:	91 1d       	adc	r25, r1
    4384:	b2 9f       	mul	r27, r18
    4386:	70 0d       	add	r23, r0
    4388:	81 1d       	adc	r24, r1
    438a:	11 24       	eor	r1, r1
    438c:	91 1d       	adc	r25, r1
    438e:	08 95       	ret

00004390 <__muluhisi3>:
    4390:	0e 94 b9 21 	call	0x4372	; 0x4372 <__umulhisi3>
    4394:	a5 9f       	mul	r26, r21
    4396:	90 0d       	add	r25, r0
    4398:	b4 9f       	mul	r27, r20
    439a:	90 0d       	add	r25, r0
    439c:	a4 9f       	mul	r26, r20
    439e:	80 0d       	add	r24, r0
    43a0:	91 1d       	adc	r25, r1
    43a2:	11 24       	eor	r1, r1
    43a4:	08 95       	ret

000043a6 <atoi>:
    43a6:	fc 01       	movw	r30, r24
    43a8:	88 27       	eor	r24, r24
    43aa:	99 27       	eor	r25, r25
    43ac:	e8 94       	clt
    43ae:	21 91       	ld	r18, Z+
    43b0:	20 32       	cpi	r18, 0x20	; 32
    43b2:	e9 f3       	breq	.-6      	; 0x43ae <atoi+0x8>
    43b4:	29 30       	cpi	r18, 0x09	; 9
    43b6:	10 f0       	brcs	.+4      	; 0x43bc <atoi+0x16>
    43b8:	2e 30       	cpi	r18, 0x0E	; 14
    43ba:	c8 f3       	brcs	.-14     	; 0x43ae <atoi+0x8>
    43bc:	2b 32       	cpi	r18, 0x2B	; 43
    43be:	41 f0       	breq	.+16     	; 0x43d0 <atoi+0x2a>
    43c0:	2d 32       	cpi	r18, 0x2D	; 45
    43c2:	39 f4       	brne	.+14     	; 0x43d2 <atoi+0x2c>
    43c4:	68 94       	set
    43c6:	04 c0       	rjmp	.+8      	; 0x43d0 <atoi+0x2a>
    43c8:	0e 94 5a 22 	call	0x44b4	; 0x44b4 <__mulhi_const_10>
    43cc:	82 0f       	add	r24, r18
    43ce:	91 1d       	adc	r25, r1
    43d0:	21 91       	ld	r18, Z+
    43d2:	20 53       	subi	r18, 0x30	; 48
    43d4:	2a 30       	cpi	r18, 0x0A	; 10
    43d6:	c0 f3       	brcs	.-16     	; 0x43c8 <atoi+0x22>
    43d8:	1e f4       	brtc	.+6      	; 0x43e0 <atoi+0x3a>
    43da:	90 95       	com	r25
    43dc:	81 95       	neg	r24
    43de:	9f 4f       	sbci	r25, 0xFF	; 255
    43e0:	08 95       	ret

000043e2 <memcpy_P>:
    43e2:	fb 01       	movw	r30, r22
    43e4:	dc 01       	movw	r26, r24
    43e6:	02 c0       	rjmp	.+4      	; 0x43ec <memcpy_P+0xa>
    43e8:	05 90       	lpm	r0, Z+
    43ea:	0d 92       	st	X+, r0
    43ec:	41 50       	subi	r20, 0x01	; 1
    43ee:	50 40       	sbci	r21, 0x00	; 0
    43f0:	d8 f7       	brcc	.-10     	; 0x43e8 <memcpy_P+0x6>
    43f2:	08 95       	ret

000043f4 <strtok>:
    43f4:	4c e8       	ldi	r20, 0x8C	; 140
    43f6:	52 e0       	ldi	r21, 0x02	; 2
    43f8:	0e 94 33 22 	call	0x4466	; 0x4466 <strtok_r>
    43fc:	08 95       	ret

000043fe <memcpy>:
    43fe:	fb 01       	movw	r30, r22
    4400:	dc 01       	movw	r26, r24
    4402:	02 c0       	rjmp	.+4      	; 0x4408 <memcpy+0xa>
    4404:	01 90       	ld	r0, Z+
    4406:	0d 92       	st	X+, r0
    4408:	41 50       	subi	r20, 0x01	; 1
    440a:	50 40       	sbci	r21, 0x00	; 0
    440c:	d8 f7       	brcc	.-10     	; 0x4404 <memcpy+0x6>
    440e:	08 95       	ret

00004410 <memset>:
    4410:	dc 01       	movw	r26, r24
    4412:	01 c0       	rjmp	.+2      	; 0x4416 <memset+0x6>
    4414:	6d 93       	st	X+, r22
    4416:	41 50       	subi	r20, 0x01	; 1
    4418:	50 40       	sbci	r21, 0x00	; 0
    441a:	e0 f7       	brcc	.-8      	; 0x4414 <memset+0x4>
    441c:	08 95       	ret

0000441e <strcat>:
    441e:	fb 01       	movw	r30, r22
    4420:	dc 01       	movw	r26, r24
    4422:	0d 90       	ld	r0, X+
    4424:	00 20       	and	r0, r0
    4426:	e9 f7       	brne	.-6      	; 0x4422 <strcat+0x4>
    4428:	11 97       	sbiw	r26, 0x01	; 1
    442a:	01 90       	ld	r0, Z+
    442c:	0d 92       	st	X+, r0
    442e:	00 20       	and	r0, r0
    4430:	e1 f7       	brne	.-8      	; 0x442a <strcat+0xc>
    4432:	08 95       	ret

00004434 <strcmp>:
    4434:	fb 01       	movw	r30, r22
    4436:	dc 01       	movw	r26, r24
    4438:	8d 91       	ld	r24, X+
    443a:	01 90       	ld	r0, Z+
    443c:	80 19       	sub	r24, r0
    443e:	01 10       	cpse	r0, r1
    4440:	d9 f3       	breq	.-10     	; 0x4438 <strcmp+0x4>
    4442:	99 0b       	sbc	r25, r25
    4444:	08 95       	ret

00004446 <strncat>:
    4446:	fb 01       	movw	r30, r22
    4448:	dc 01       	movw	r26, r24
    444a:	0d 90       	ld	r0, X+
    444c:	00 20       	and	r0, r0
    444e:	e9 f7       	brne	.-6      	; 0x444a <strncat+0x4>
    4450:	11 97       	sbiw	r26, 0x01	; 1
    4452:	41 50       	subi	r20, 0x01	; 1
    4454:	50 40       	sbci	r21, 0x00	; 0
    4456:	28 f0       	brcs	.+10     	; 0x4462 <strncat+0x1c>
    4458:	01 90       	ld	r0, Z+
    445a:	00 20       	and	r0, r0
    445c:	0d 92       	st	X+, r0
    445e:	c9 f7       	brne	.-14     	; 0x4452 <strncat+0xc>
    4460:	08 95       	ret
    4462:	1c 92       	st	X, r1
    4464:	08 95       	ret

00004466 <strtok_r>:
    4466:	fa 01       	movw	r30, r20
    4468:	a1 91       	ld	r26, Z+
    446a:	b0 81       	ld	r27, Z
    446c:	00 97       	sbiw	r24, 0x00	; 0
    446e:	19 f4       	brne	.+6      	; 0x4476 <strtok_r+0x10>
    4470:	10 97       	sbiw	r26, 0x00	; 0
    4472:	e1 f0       	breq	.+56     	; 0x44ac <strtok_r+0x46>
    4474:	cd 01       	movw	r24, r26
    4476:	dc 01       	movw	r26, r24
    4478:	cd 01       	movw	r24, r26
    447a:	0d 90       	ld	r0, X+
    447c:	00 20       	and	r0, r0
    447e:	11 f4       	brne	.+4      	; 0x4484 <strtok_r+0x1e>
    4480:	c0 01       	movw	r24, r0
    4482:	13 c0       	rjmp	.+38     	; 0x44aa <strtok_r+0x44>
    4484:	fb 01       	movw	r30, r22
    4486:	21 91       	ld	r18, Z+
    4488:	22 23       	and	r18, r18
    448a:	19 f0       	breq	.+6      	; 0x4492 <strtok_r+0x2c>
    448c:	20 15       	cp	r18, r0
    448e:	d9 f7       	brne	.-10     	; 0x4486 <strtok_r+0x20>
    4490:	f3 cf       	rjmp	.-26     	; 0x4478 <strtok_r+0x12>
    4492:	fb 01       	movw	r30, r22
    4494:	21 91       	ld	r18, Z+
    4496:	20 15       	cp	r18, r0
    4498:	19 f4       	brne	.+6      	; 0x44a0 <strtok_r+0x3a>
    449a:	1e 92       	st	-X, r1
    449c:	11 96       	adiw	r26, 0x01	; 1
    449e:	06 c0       	rjmp	.+12     	; 0x44ac <strtok_r+0x46>
    44a0:	22 23       	and	r18, r18
    44a2:	c1 f7       	brne	.-16     	; 0x4494 <strtok_r+0x2e>
    44a4:	0d 90       	ld	r0, X+
    44a6:	00 20       	and	r0, r0
    44a8:	a1 f7       	brne	.-24     	; 0x4492 <strtok_r+0x2c>
    44aa:	d0 01       	movw	r26, r0
    44ac:	fa 01       	movw	r30, r20
    44ae:	a1 93       	st	Z+, r26
    44b0:	b0 83       	st	Z, r27
    44b2:	08 95       	ret

000044b4 <__mulhi_const_10>:
    44b4:	7a e0       	ldi	r23, 0x0A	; 10
    44b6:	97 9f       	mul	r25, r23
    44b8:	90 2d       	mov	r25, r0
    44ba:	87 9f       	mul	r24, r23
    44bc:	80 2d       	mov	r24, r0
    44be:	91 0d       	add	r25, r1
    44c0:	11 24       	eor	r1, r1
    44c2:	08 95       	ret

000044c4 <sprintf>:
    44c4:	ae e0       	ldi	r26, 0x0E	; 14
    44c6:	b0 e0       	ldi	r27, 0x00	; 0
    44c8:	e8 e6       	ldi	r30, 0x68	; 104
    44ca:	f2 e2       	ldi	r31, 0x22	; 34
    44cc:	0c 94 39 25 	jmp	0x4a72	; 0x4a72 <__prologue_saves__+0x1c>
    44d0:	0d 89       	ldd	r16, Y+21	; 0x15
    44d2:	1e 89       	ldd	r17, Y+22	; 0x16
    44d4:	86 e0       	ldi	r24, 0x06	; 6
    44d6:	8c 83       	std	Y+4, r24	; 0x04
    44d8:	1a 83       	std	Y+2, r17	; 0x02
    44da:	09 83       	std	Y+1, r16	; 0x01
    44dc:	8f ef       	ldi	r24, 0xFF	; 255
    44de:	9f e7       	ldi	r25, 0x7F	; 127
    44e0:	9e 83       	std	Y+6, r25	; 0x06
    44e2:	8d 83       	std	Y+5, r24	; 0x05
    44e4:	ae 01       	movw	r20, r28
    44e6:	47 5e       	subi	r20, 0xE7	; 231
    44e8:	5f 4f       	sbci	r21, 0xFF	; 255
    44ea:	6f 89       	ldd	r22, Y+23	; 0x17
    44ec:	78 8d       	ldd	r23, Y+24	; 0x18
    44ee:	ce 01       	movw	r24, r28
    44f0:	01 96       	adiw	r24, 0x01	; 1
    44f2:	0e 94 84 22 	call	0x4508	; 0x4508 <vfprintf>
    44f6:	ef 81       	ldd	r30, Y+7	; 0x07
    44f8:	f8 85       	ldd	r31, Y+8	; 0x08
    44fa:	e0 0f       	add	r30, r16
    44fc:	f1 1f       	adc	r31, r17
    44fe:	10 82       	st	Z, r1
    4500:	2e 96       	adiw	r28, 0x0e	; 14
    4502:	e4 e0       	ldi	r30, 0x04	; 4
    4504:	0c 94 55 25 	jmp	0x4aaa	; 0x4aaa <__epilogue_restores__+0x1c>

00004508 <vfprintf>:
    4508:	ab e0       	ldi	r26, 0x0B	; 11
    450a:	b0 e0       	ldi	r27, 0x00	; 0
    450c:	ea e8       	ldi	r30, 0x8A	; 138
    450e:	f2 e2       	ldi	r31, 0x22	; 34
    4510:	0c 94 2b 25 	jmp	0x4a56	; 0x4a56 <__prologue_saves__>
    4514:	6c 01       	movw	r12, r24
    4516:	7b 01       	movw	r14, r22
    4518:	8a 01       	movw	r16, r20
    451a:	fc 01       	movw	r30, r24
    451c:	17 82       	std	Z+7, r1	; 0x07
    451e:	16 82       	std	Z+6, r1	; 0x06
    4520:	83 81       	ldd	r24, Z+3	; 0x03
    4522:	81 ff       	sbrs	r24, 1
    4524:	cc c1       	rjmp	.+920    	; 0x48be <vfprintf+0x3b6>
    4526:	ce 01       	movw	r24, r28
    4528:	01 96       	adiw	r24, 0x01	; 1
    452a:	3c 01       	movw	r6, r24
    452c:	f6 01       	movw	r30, r12
    452e:	93 81       	ldd	r25, Z+3	; 0x03
    4530:	f7 01       	movw	r30, r14
    4532:	93 fd       	sbrc	r25, 3
    4534:	85 91       	lpm	r24, Z+
    4536:	93 ff       	sbrs	r25, 3
    4538:	81 91       	ld	r24, Z+
    453a:	7f 01       	movw	r14, r30
    453c:	88 23       	and	r24, r24
    453e:	09 f4       	brne	.+2      	; 0x4542 <vfprintf+0x3a>
    4540:	ba c1       	rjmp	.+884    	; 0x48b6 <vfprintf+0x3ae>
    4542:	85 32       	cpi	r24, 0x25	; 37
    4544:	39 f4       	brne	.+14     	; 0x4554 <vfprintf+0x4c>
    4546:	93 fd       	sbrc	r25, 3
    4548:	85 91       	lpm	r24, Z+
    454a:	93 ff       	sbrs	r25, 3
    454c:	81 91       	ld	r24, Z+
    454e:	7f 01       	movw	r14, r30
    4550:	85 32       	cpi	r24, 0x25	; 37
    4552:	29 f4       	brne	.+10     	; 0x455e <vfprintf+0x56>
    4554:	b6 01       	movw	r22, r12
    4556:	90 e0       	ldi	r25, 0x00	; 0
    4558:	0e 94 7b 24 	call	0x48f6	; 0x48f6 <fputc>
    455c:	e7 cf       	rjmp	.-50     	; 0x452c <vfprintf+0x24>
    455e:	91 2c       	mov	r9, r1
    4560:	21 2c       	mov	r2, r1
    4562:	31 2c       	mov	r3, r1
    4564:	ff e1       	ldi	r31, 0x1F	; 31
    4566:	f3 15       	cp	r31, r3
    4568:	d8 f0       	brcs	.+54     	; 0x45a0 <vfprintf+0x98>
    456a:	8b 32       	cpi	r24, 0x2B	; 43
    456c:	79 f0       	breq	.+30     	; 0x458c <vfprintf+0x84>
    456e:	38 f4       	brcc	.+14     	; 0x457e <vfprintf+0x76>
    4570:	80 32       	cpi	r24, 0x20	; 32
    4572:	79 f0       	breq	.+30     	; 0x4592 <vfprintf+0x8a>
    4574:	83 32       	cpi	r24, 0x23	; 35
    4576:	a1 f4       	brne	.+40     	; 0x45a0 <vfprintf+0x98>
    4578:	23 2d       	mov	r18, r3
    457a:	20 61       	ori	r18, 0x10	; 16
    457c:	1d c0       	rjmp	.+58     	; 0x45b8 <vfprintf+0xb0>
    457e:	8d 32       	cpi	r24, 0x2D	; 45
    4580:	61 f0       	breq	.+24     	; 0x459a <vfprintf+0x92>
    4582:	80 33       	cpi	r24, 0x30	; 48
    4584:	69 f4       	brne	.+26     	; 0x45a0 <vfprintf+0x98>
    4586:	23 2d       	mov	r18, r3
    4588:	21 60       	ori	r18, 0x01	; 1
    458a:	16 c0       	rjmp	.+44     	; 0x45b8 <vfprintf+0xb0>
    458c:	83 2d       	mov	r24, r3
    458e:	82 60       	ori	r24, 0x02	; 2
    4590:	38 2e       	mov	r3, r24
    4592:	e3 2d       	mov	r30, r3
    4594:	e4 60       	ori	r30, 0x04	; 4
    4596:	3e 2e       	mov	r3, r30
    4598:	2a c0       	rjmp	.+84     	; 0x45ee <vfprintf+0xe6>
    459a:	f3 2d       	mov	r31, r3
    459c:	f8 60       	ori	r31, 0x08	; 8
    459e:	1d c0       	rjmp	.+58     	; 0x45da <vfprintf+0xd2>
    45a0:	37 fc       	sbrc	r3, 7
    45a2:	2d c0       	rjmp	.+90     	; 0x45fe <vfprintf+0xf6>
    45a4:	20 ed       	ldi	r18, 0xD0	; 208
    45a6:	28 0f       	add	r18, r24
    45a8:	2a 30       	cpi	r18, 0x0A	; 10
    45aa:	40 f0       	brcs	.+16     	; 0x45bc <vfprintf+0xb4>
    45ac:	8e 32       	cpi	r24, 0x2E	; 46
    45ae:	b9 f4       	brne	.+46     	; 0x45de <vfprintf+0xd6>
    45b0:	36 fc       	sbrc	r3, 6
    45b2:	81 c1       	rjmp	.+770    	; 0x48b6 <vfprintf+0x3ae>
    45b4:	23 2d       	mov	r18, r3
    45b6:	20 64       	ori	r18, 0x40	; 64
    45b8:	32 2e       	mov	r3, r18
    45ba:	19 c0       	rjmp	.+50     	; 0x45ee <vfprintf+0xe6>
    45bc:	36 fe       	sbrs	r3, 6
    45be:	06 c0       	rjmp	.+12     	; 0x45cc <vfprintf+0xc4>
    45c0:	8a e0       	ldi	r24, 0x0A	; 10
    45c2:	98 9e       	mul	r9, r24
    45c4:	20 0d       	add	r18, r0
    45c6:	11 24       	eor	r1, r1
    45c8:	92 2e       	mov	r9, r18
    45ca:	11 c0       	rjmp	.+34     	; 0x45ee <vfprintf+0xe6>
    45cc:	ea e0       	ldi	r30, 0x0A	; 10
    45ce:	2e 9e       	mul	r2, r30
    45d0:	20 0d       	add	r18, r0
    45d2:	11 24       	eor	r1, r1
    45d4:	22 2e       	mov	r2, r18
    45d6:	f3 2d       	mov	r31, r3
    45d8:	f0 62       	ori	r31, 0x20	; 32
    45da:	3f 2e       	mov	r3, r31
    45dc:	08 c0       	rjmp	.+16     	; 0x45ee <vfprintf+0xe6>
    45de:	8c 36       	cpi	r24, 0x6C	; 108
    45e0:	21 f4       	brne	.+8      	; 0x45ea <vfprintf+0xe2>
    45e2:	83 2d       	mov	r24, r3
    45e4:	80 68       	ori	r24, 0x80	; 128
    45e6:	38 2e       	mov	r3, r24
    45e8:	02 c0       	rjmp	.+4      	; 0x45ee <vfprintf+0xe6>
    45ea:	88 36       	cpi	r24, 0x68	; 104
    45ec:	41 f4       	brne	.+16     	; 0x45fe <vfprintf+0xf6>
    45ee:	f7 01       	movw	r30, r14
    45f0:	93 fd       	sbrc	r25, 3
    45f2:	85 91       	lpm	r24, Z+
    45f4:	93 ff       	sbrs	r25, 3
    45f6:	81 91       	ld	r24, Z+
    45f8:	7f 01       	movw	r14, r30
    45fa:	81 11       	cpse	r24, r1
    45fc:	b3 cf       	rjmp	.-154    	; 0x4564 <vfprintf+0x5c>
    45fe:	98 2f       	mov	r25, r24
    4600:	9f 7d       	andi	r25, 0xDF	; 223
    4602:	95 54       	subi	r25, 0x45	; 69
    4604:	93 30       	cpi	r25, 0x03	; 3
    4606:	28 f4       	brcc	.+10     	; 0x4612 <vfprintf+0x10a>
    4608:	0c 5f       	subi	r16, 0xFC	; 252
    460a:	1f 4f       	sbci	r17, 0xFF	; 255
    460c:	9f e3       	ldi	r25, 0x3F	; 63
    460e:	99 83       	std	Y+1, r25	; 0x01
    4610:	0d c0       	rjmp	.+26     	; 0x462c <vfprintf+0x124>
    4612:	83 36       	cpi	r24, 0x63	; 99
    4614:	31 f0       	breq	.+12     	; 0x4622 <vfprintf+0x11a>
    4616:	83 37       	cpi	r24, 0x73	; 115
    4618:	71 f0       	breq	.+28     	; 0x4636 <vfprintf+0x12e>
    461a:	83 35       	cpi	r24, 0x53	; 83
    461c:	09 f0       	breq	.+2      	; 0x4620 <vfprintf+0x118>
    461e:	59 c0       	rjmp	.+178    	; 0x46d2 <vfprintf+0x1ca>
    4620:	21 c0       	rjmp	.+66     	; 0x4664 <vfprintf+0x15c>
    4622:	f8 01       	movw	r30, r16
    4624:	80 81       	ld	r24, Z
    4626:	89 83       	std	Y+1, r24	; 0x01
    4628:	0e 5f       	subi	r16, 0xFE	; 254
    462a:	1f 4f       	sbci	r17, 0xFF	; 255
    462c:	88 24       	eor	r8, r8
    462e:	83 94       	inc	r8
    4630:	91 2c       	mov	r9, r1
    4632:	53 01       	movw	r10, r6
    4634:	13 c0       	rjmp	.+38     	; 0x465c <vfprintf+0x154>
    4636:	28 01       	movw	r4, r16
    4638:	f2 e0       	ldi	r31, 0x02	; 2
    463a:	4f 0e       	add	r4, r31
    463c:	51 1c       	adc	r5, r1
    463e:	f8 01       	movw	r30, r16
    4640:	a0 80       	ld	r10, Z
    4642:	b1 80       	ldd	r11, Z+1	; 0x01
    4644:	36 fe       	sbrs	r3, 6
    4646:	03 c0       	rjmp	.+6      	; 0x464e <vfprintf+0x146>
    4648:	69 2d       	mov	r22, r9
    464a:	70 e0       	ldi	r23, 0x00	; 0
    464c:	02 c0       	rjmp	.+4      	; 0x4652 <vfprintf+0x14a>
    464e:	6f ef       	ldi	r22, 0xFF	; 255
    4650:	7f ef       	ldi	r23, 0xFF	; 255
    4652:	c5 01       	movw	r24, r10
    4654:	0e 94 70 24 	call	0x48e0	; 0x48e0 <strnlen>
    4658:	4c 01       	movw	r8, r24
    465a:	82 01       	movw	r16, r4
    465c:	f3 2d       	mov	r31, r3
    465e:	ff 77       	andi	r31, 0x7F	; 127
    4660:	3f 2e       	mov	r3, r31
    4662:	16 c0       	rjmp	.+44     	; 0x4690 <vfprintf+0x188>
    4664:	28 01       	movw	r4, r16
    4666:	22 e0       	ldi	r18, 0x02	; 2
    4668:	42 0e       	add	r4, r18
    466a:	51 1c       	adc	r5, r1
    466c:	f8 01       	movw	r30, r16
    466e:	a0 80       	ld	r10, Z
    4670:	b1 80       	ldd	r11, Z+1	; 0x01
    4672:	36 fe       	sbrs	r3, 6
    4674:	03 c0       	rjmp	.+6      	; 0x467c <vfprintf+0x174>
    4676:	69 2d       	mov	r22, r9
    4678:	70 e0       	ldi	r23, 0x00	; 0
    467a:	02 c0       	rjmp	.+4      	; 0x4680 <vfprintf+0x178>
    467c:	6f ef       	ldi	r22, 0xFF	; 255
    467e:	7f ef       	ldi	r23, 0xFF	; 255
    4680:	c5 01       	movw	r24, r10
    4682:	0e 94 65 24 	call	0x48ca	; 0x48ca <strnlen_P>
    4686:	4c 01       	movw	r8, r24
    4688:	f3 2d       	mov	r31, r3
    468a:	f0 68       	ori	r31, 0x80	; 128
    468c:	3f 2e       	mov	r3, r31
    468e:	82 01       	movw	r16, r4
    4690:	33 fc       	sbrc	r3, 3
    4692:	1b c0       	rjmp	.+54     	; 0x46ca <vfprintf+0x1c2>
    4694:	82 2d       	mov	r24, r2
    4696:	90 e0       	ldi	r25, 0x00	; 0
    4698:	88 16       	cp	r8, r24
    469a:	99 06       	cpc	r9, r25
    469c:	b0 f4       	brcc	.+44     	; 0x46ca <vfprintf+0x1c2>
    469e:	b6 01       	movw	r22, r12
    46a0:	80 e2       	ldi	r24, 0x20	; 32
    46a2:	90 e0       	ldi	r25, 0x00	; 0
    46a4:	0e 94 7b 24 	call	0x48f6	; 0x48f6 <fputc>
    46a8:	2a 94       	dec	r2
    46aa:	f4 cf       	rjmp	.-24     	; 0x4694 <vfprintf+0x18c>
    46ac:	f5 01       	movw	r30, r10
    46ae:	37 fc       	sbrc	r3, 7
    46b0:	85 91       	lpm	r24, Z+
    46b2:	37 fe       	sbrs	r3, 7
    46b4:	81 91       	ld	r24, Z+
    46b6:	5f 01       	movw	r10, r30
    46b8:	b6 01       	movw	r22, r12
    46ba:	90 e0       	ldi	r25, 0x00	; 0
    46bc:	0e 94 7b 24 	call	0x48f6	; 0x48f6 <fputc>
    46c0:	21 10       	cpse	r2, r1
    46c2:	2a 94       	dec	r2
    46c4:	21 e0       	ldi	r18, 0x01	; 1
    46c6:	82 1a       	sub	r8, r18
    46c8:	91 08       	sbc	r9, r1
    46ca:	81 14       	cp	r8, r1
    46cc:	91 04       	cpc	r9, r1
    46ce:	71 f7       	brne	.-36     	; 0x46ac <vfprintf+0x1a4>
    46d0:	e8 c0       	rjmp	.+464    	; 0x48a2 <vfprintf+0x39a>
    46d2:	84 36       	cpi	r24, 0x64	; 100
    46d4:	11 f0       	breq	.+4      	; 0x46da <vfprintf+0x1d2>
    46d6:	89 36       	cpi	r24, 0x69	; 105
    46d8:	41 f5       	brne	.+80     	; 0x472a <vfprintf+0x222>
    46da:	f8 01       	movw	r30, r16
    46dc:	37 fe       	sbrs	r3, 7
    46de:	07 c0       	rjmp	.+14     	; 0x46ee <vfprintf+0x1e6>
    46e0:	60 81       	ld	r22, Z
    46e2:	71 81       	ldd	r23, Z+1	; 0x01
    46e4:	82 81       	ldd	r24, Z+2	; 0x02
    46e6:	93 81       	ldd	r25, Z+3	; 0x03
    46e8:	0c 5f       	subi	r16, 0xFC	; 252
    46ea:	1f 4f       	sbci	r17, 0xFF	; 255
    46ec:	08 c0       	rjmp	.+16     	; 0x46fe <vfprintf+0x1f6>
    46ee:	60 81       	ld	r22, Z
    46f0:	71 81       	ldd	r23, Z+1	; 0x01
    46f2:	07 2e       	mov	r0, r23
    46f4:	00 0c       	add	r0, r0
    46f6:	88 0b       	sbc	r24, r24
    46f8:	99 0b       	sbc	r25, r25
    46fa:	0e 5f       	subi	r16, 0xFE	; 254
    46fc:	1f 4f       	sbci	r17, 0xFF	; 255
    46fe:	f3 2d       	mov	r31, r3
    4700:	ff 76       	andi	r31, 0x6F	; 111
    4702:	3f 2e       	mov	r3, r31
    4704:	97 ff       	sbrs	r25, 7
    4706:	09 c0       	rjmp	.+18     	; 0x471a <vfprintf+0x212>
    4708:	90 95       	com	r25
    470a:	80 95       	com	r24
    470c:	70 95       	com	r23
    470e:	61 95       	neg	r22
    4710:	7f 4f       	sbci	r23, 0xFF	; 255
    4712:	8f 4f       	sbci	r24, 0xFF	; 255
    4714:	9f 4f       	sbci	r25, 0xFF	; 255
    4716:	f0 68       	ori	r31, 0x80	; 128
    4718:	3f 2e       	mov	r3, r31
    471a:	2a e0       	ldi	r18, 0x0A	; 10
    471c:	30 e0       	ldi	r19, 0x00	; 0
    471e:	a3 01       	movw	r20, r6
    4720:	0e 94 b7 24 	call	0x496e	; 0x496e <__ultoa_invert>
    4724:	88 2e       	mov	r8, r24
    4726:	86 18       	sub	r8, r6
    4728:	45 c0       	rjmp	.+138    	; 0x47b4 <vfprintf+0x2ac>
    472a:	85 37       	cpi	r24, 0x75	; 117
    472c:	31 f4       	brne	.+12     	; 0x473a <vfprintf+0x232>
    472e:	23 2d       	mov	r18, r3
    4730:	2f 7e       	andi	r18, 0xEF	; 239
    4732:	b2 2e       	mov	r11, r18
    4734:	2a e0       	ldi	r18, 0x0A	; 10
    4736:	30 e0       	ldi	r19, 0x00	; 0
    4738:	25 c0       	rjmp	.+74     	; 0x4784 <vfprintf+0x27c>
    473a:	93 2d       	mov	r25, r3
    473c:	99 7f       	andi	r25, 0xF9	; 249
    473e:	b9 2e       	mov	r11, r25
    4740:	8f 36       	cpi	r24, 0x6F	; 111
    4742:	c1 f0       	breq	.+48     	; 0x4774 <vfprintf+0x26c>
    4744:	18 f4       	brcc	.+6      	; 0x474c <vfprintf+0x244>
    4746:	88 35       	cpi	r24, 0x58	; 88
    4748:	79 f0       	breq	.+30     	; 0x4768 <vfprintf+0x260>
    474a:	b5 c0       	rjmp	.+362    	; 0x48b6 <vfprintf+0x3ae>
    474c:	80 37       	cpi	r24, 0x70	; 112
    474e:	19 f0       	breq	.+6      	; 0x4756 <vfprintf+0x24e>
    4750:	88 37       	cpi	r24, 0x78	; 120
    4752:	21 f0       	breq	.+8      	; 0x475c <vfprintf+0x254>
    4754:	b0 c0       	rjmp	.+352    	; 0x48b6 <vfprintf+0x3ae>
    4756:	e9 2f       	mov	r30, r25
    4758:	e0 61       	ori	r30, 0x10	; 16
    475a:	be 2e       	mov	r11, r30
    475c:	b4 fe       	sbrs	r11, 4
    475e:	0d c0       	rjmp	.+26     	; 0x477a <vfprintf+0x272>
    4760:	fb 2d       	mov	r31, r11
    4762:	f4 60       	ori	r31, 0x04	; 4
    4764:	bf 2e       	mov	r11, r31
    4766:	09 c0       	rjmp	.+18     	; 0x477a <vfprintf+0x272>
    4768:	34 fe       	sbrs	r3, 4
    476a:	0a c0       	rjmp	.+20     	; 0x4780 <vfprintf+0x278>
    476c:	29 2f       	mov	r18, r25
    476e:	26 60       	ori	r18, 0x06	; 6
    4770:	b2 2e       	mov	r11, r18
    4772:	06 c0       	rjmp	.+12     	; 0x4780 <vfprintf+0x278>
    4774:	28 e0       	ldi	r18, 0x08	; 8
    4776:	30 e0       	ldi	r19, 0x00	; 0
    4778:	05 c0       	rjmp	.+10     	; 0x4784 <vfprintf+0x27c>
    477a:	20 e1       	ldi	r18, 0x10	; 16
    477c:	30 e0       	ldi	r19, 0x00	; 0
    477e:	02 c0       	rjmp	.+4      	; 0x4784 <vfprintf+0x27c>
    4780:	20 e1       	ldi	r18, 0x10	; 16
    4782:	32 e0       	ldi	r19, 0x02	; 2
    4784:	f8 01       	movw	r30, r16
    4786:	b7 fe       	sbrs	r11, 7
    4788:	07 c0       	rjmp	.+14     	; 0x4798 <vfprintf+0x290>
    478a:	60 81       	ld	r22, Z
    478c:	71 81       	ldd	r23, Z+1	; 0x01
    478e:	82 81       	ldd	r24, Z+2	; 0x02
    4790:	93 81       	ldd	r25, Z+3	; 0x03
    4792:	0c 5f       	subi	r16, 0xFC	; 252
    4794:	1f 4f       	sbci	r17, 0xFF	; 255
    4796:	06 c0       	rjmp	.+12     	; 0x47a4 <vfprintf+0x29c>
    4798:	60 81       	ld	r22, Z
    479a:	71 81       	ldd	r23, Z+1	; 0x01
    479c:	80 e0       	ldi	r24, 0x00	; 0
    479e:	90 e0       	ldi	r25, 0x00	; 0
    47a0:	0e 5f       	subi	r16, 0xFE	; 254
    47a2:	1f 4f       	sbci	r17, 0xFF	; 255
    47a4:	a3 01       	movw	r20, r6
    47a6:	0e 94 b7 24 	call	0x496e	; 0x496e <__ultoa_invert>
    47aa:	88 2e       	mov	r8, r24
    47ac:	86 18       	sub	r8, r6
    47ae:	fb 2d       	mov	r31, r11
    47b0:	ff 77       	andi	r31, 0x7F	; 127
    47b2:	3f 2e       	mov	r3, r31
    47b4:	36 fe       	sbrs	r3, 6
    47b6:	0d c0       	rjmp	.+26     	; 0x47d2 <vfprintf+0x2ca>
    47b8:	23 2d       	mov	r18, r3
    47ba:	2e 7f       	andi	r18, 0xFE	; 254
    47bc:	a2 2e       	mov	r10, r18
    47be:	89 14       	cp	r8, r9
    47c0:	58 f4       	brcc	.+22     	; 0x47d8 <vfprintf+0x2d0>
    47c2:	34 fe       	sbrs	r3, 4
    47c4:	0b c0       	rjmp	.+22     	; 0x47dc <vfprintf+0x2d4>
    47c6:	32 fc       	sbrc	r3, 2
    47c8:	09 c0       	rjmp	.+18     	; 0x47dc <vfprintf+0x2d4>
    47ca:	83 2d       	mov	r24, r3
    47cc:	8e 7e       	andi	r24, 0xEE	; 238
    47ce:	a8 2e       	mov	r10, r24
    47d0:	05 c0       	rjmp	.+10     	; 0x47dc <vfprintf+0x2d4>
    47d2:	b8 2c       	mov	r11, r8
    47d4:	a3 2c       	mov	r10, r3
    47d6:	03 c0       	rjmp	.+6      	; 0x47de <vfprintf+0x2d6>
    47d8:	b8 2c       	mov	r11, r8
    47da:	01 c0       	rjmp	.+2      	; 0x47de <vfprintf+0x2d6>
    47dc:	b9 2c       	mov	r11, r9
    47de:	a4 fe       	sbrs	r10, 4
    47e0:	0f c0       	rjmp	.+30     	; 0x4800 <vfprintf+0x2f8>
    47e2:	fe 01       	movw	r30, r28
    47e4:	e8 0d       	add	r30, r8
    47e6:	f1 1d       	adc	r31, r1
    47e8:	80 81       	ld	r24, Z
    47ea:	80 33       	cpi	r24, 0x30	; 48
    47ec:	21 f4       	brne	.+8      	; 0x47f6 <vfprintf+0x2ee>
    47ee:	9a 2d       	mov	r25, r10
    47f0:	99 7e       	andi	r25, 0xE9	; 233
    47f2:	a9 2e       	mov	r10, r25
    47f4:	09 c0       	rjmp	.+18     	; 0x4808 <vfprintf+0x300>
    47f6:	a2 fe       	sbrs	r10, 2
    47f8:	06 c0       	rjmp	.+12     	; 0x4806 <vfprintf+0x2fe>
    47fa:	b3 94       	inc	r11
    47fc:	b3 94       	inc	r11
    47fe:	04 c0       	rjmp	.+8      	; 0x4808 <vfprintf+0x300>
    4800:	8a 2d       	mov	r24, r10
    4802:	86 78       	andi	r24, 0x86	; 134
    4804:	09 f0       	breq	.+2      	; 0x4808 <vfprintf+0x300>
    4806:	b3 94       	inc	r11
    4808:	a3 fc       	sbrc	r10, 3
    480a:	11 c0       	rjmp	.+34     	; 0x482e <vfprintf+0x326>
    480c:	a0 fe       	sbrs	r10, 0
    480e:	06 c0       	rjmp	.+12     	; 0x481c <vfprintf+0x314>
    4810:	b2 14       	cp	r11, r2
    4812:	88 f4       	brcc	.+34     	; 0x4836 <vfprintf+0x32e>
    4814:	28 0c       	add	r2, r8
    4816:	92 2c       	mov	r9, r2
    4818:	9b 18       	sub	r9, r11
    481a:	0e c0       	rjmp	.+28     	; 0x4838 <vfprintf+0x330>
    481c:	b2 14       	cp	r11, r2
    481e:	60 f4       	brcc	.+24     	; 0x4838 <vfprintf+0x330>
    4820:	b6 01       	movw	r22, r12
    4822:	80 e2       	ldi	r24, 0x20	; 32
    4824:	90 e0       	ldi	r25, 0x00	; 0
    4826:	0e 94 7b 24 	call	0x48f6	; 0x48f6 <fputc>
    482a:	b3 94       	inc	r11
    482c:	f7 cf       	rjmp	.-18     	; 0x481c <vfprintf+0x314>
    482e:	b2 14       	cp	r11, r2
    4830:	18 f4       	brcc	.+6      	; 0x4838 <vfprintf+0x330>
    4832:	2b 18       	sub	r2, r11
    4834:	02 c0       	rjmp	.+4      	; 0x483a <vfprintf+0x332>
    4836:	98 2c       	mov	r9, r8
    4838:	21 2c       	mov	r2, r1
    483a:	a4 fe       	sbrs	r10, 4
    483c:	10 c0       	rjmp	.+32     	; 0x485e <vfprintf+0x356>
    483e:	b6 01       	movw	r22, r12
    4840:	80 e3       	ldi	r24, 0x30	; 48
    4842:	90 e0       	ldi	r25, 0x00	; 0
    4844:	0e 94 7b 24 	call	0x48f6	; 0x48f6 <fputc>
    4848:	a2 fe       	sbrs	r10, 2
    484a:	17 c0       	rjmp	.+46     	; 0x487a <vfprintf+0x372>
    484c:	a1 fc       	sbrc	r10, 1
    484e:	03 c0       	rjmp	.+6      	; 0x4856 <vfprintf+0x34e>
    4850:	88 e7       	ldi	r24, 0x78	; 120
    4852:	90 e0       	ldi	r25, 0x00	; 0
    4854:	02 c0       	rjmp	.+4      	; 0x485a <vfprintf+0x352>
    4856:	88 e5       	ldi	r24, 0x58	; 88
    4858:	90 e0       	ldi	r25, 0x00	; 0
    485a:	b6 01       	movw	r22, r12
    485c:	0c c0       	rjmp	.+24     	; 0x4876 <vfprintf+0x36e>
    485e:	8a 2d       	mov	r24, r10
    4860:	86 78       	andi	r24, 0x86	; 134
    4862:	59 f0       	breq	.+22     	; 0x487a <vfprintf+0x372>
    4864:	a1 fe       	sbrs	r10, 1
    4866:	02 c0       	rjmp	.+4      	; 0x486c <vfprintf+0x364>
    4868:	8b e2       	ldi	r24, 0x2B	; 43
    486a:	01 c0       	rjmp	.+2      	; 0x486e <vfprintf+0x366>
    486c:	80 e2       	ldi	r24, 0x20	; 32
    486e:	a7 fc       	sbrc	r10, 7
    4870:	8d e2       	ldi	r24, 0x2D	; 45
    4872:	b6 01       	movw	r22, r12
    4874:	90 e0       	ldi	r25, 0x00	; 0
    4876:	0e 94 7b 24 	call	0x48f6	; 0x48f6 <fputc>
    487a:	89 14       	cp	r8, r9
    487c:	38 f4       	brcc	.+14     	; 0x488c <vfprintf+0x384>
    487e:	b6 01       	movw	r22, r12
    4880:	80 e3       	ldi	r24, 0x30	; 48
    4882:	90 e0       	ldi	r25, 0x00	; 0
    4884:	0e 94 7b 24 	call	0x48f6	; 0x48f6 <fputc>
    4888:	9a 94       	dec	r9
    488a:	f7 cf       	rjmp	.-18     	; 0x487a <vfprintf+0x372>
    488c:	8a 94       	dec	r8
    488e:	f3 01       	movw	r30, r6
    4890:	e8 0d       	add	r30, r8
    4892:	f1 1d       	adc	r31, r1
    4894:	80 81       	ld	r24, Z
    4896:	b6 01       	movw	r22, r12
    4898:	90 e0       	ldi	r25, 0x00	; 0
    489a:	0e 94 7b 24 	call	0x48f6	; 0x48f6 <fputc>
    489e:	81 10       	cpse	r8, r1
    48a0:	f5 cf       	rjmp	.-22     	; 0x488c <vfprintf+0x384>
    48a2:	22 20       	and	r2, r2
    48a4:	09 f4       	brne	.+2      	; 0x48a8 <vfprintf+0x3a0>
    48a6:	42 ce       	rjmp	.-892    	; 0x452c <vfprintf+0x24>
    48a8:	b6 01       	movw	r22, r12
    48aa:	80 e2       	ldi	r24, 0x20	; 32
    48ac:	90 e0       	ldi	r25, 0x00	; 0
    48ae:	0e 94 7b 24 	call	0x48f6	; 0x48f6 <fputc>
    48b2:	2a 94       	dec	r2
    48b4:	f6 cf       	rjmp	.-20     	; 0x48a2 <vfprintf+0x39a>
    48b6:	f6 01       	movw	r30, r12
    48b8:	86 81       	ldd	r24, Z+6	; 0x06
    48ba:	97 81       	ldd	r25, Z+7	; 0x07
    48bc:	02 c0       	rjmp	.+4      	; 0x48c2 <vfprintf+0x3ba>
    48be:	8f ef       	ldi	r24, 0xFF	; 255
    48c0:	9f ef       	ldi	r25, 0xFF	; 255
    48c2:	2b 96       	adiw	r28, 0x0b	; 11
    48c4:	e2 e1       	ldi	r30, 0x12	; 18
    48c6:	0c 94 47 25 	jmp	0x4a8e	; 0x4a8e <__epilogue_restores__>

000048ca <strnlen_P>:
    48ca:	fc 01       	movw	r30, r24
    48cc:	05 90       	lpm	r0, Z+
    48ce:	61 50       	subi	r22, 0x01	; 1
    48d0:	70 40       	sbci	r23, 0x00	; 0
    48d2:	01 10       	cpse	r0, r1
    48d4:	d8 f7       	brcc	.-10     	; 0x48cc <strnlen_P+0x2>
    48d6:	80 95       	com	r24
    48d8:	90 95       	com	r25
    48da:	8e 0f       	add	r24, r30
    48dc:	9f 1f       	adc	r25, r31
    48de:	08 95       	ret

000048e0 <strnlen>:
    48e0:	fc 01       	movw	r30, r24
    48e2:	61 50       	subi	r22, 0x01	; 1
    48e4:	70 40       	sbci	r23, 0x00	; 0
    48e6:	01 90       	ld	r0, Z+
    48e8:	01 10       	cpse	r0, r1
    48ea:	d8 f7       	brcc	.-10     	; 0x48e2 <strnlen+0x2>
    48ec:	80 95       	com	r24
    48ee:	90 95       	com	r25
    48f0:	8e 0f       	add	r24, r30
    48f2:	9f 1f       	adc	r25, r31
    48f4:	08 95       	ret

000048f6 <fputc>:
    48f6:	0f 93       	push	r16
    48f8:	1f 93       	push	r17
    48fa:	cf 93       	push	r28
    48fc:	df 93       	push	r29
    48fe:	fb 01       	movw	r30, r22
    4900:	23 81       	ldd	r18, Z+3	; 0x03
    4902:	21 fd       	sbrc	r18, 1
    4904:	03 c0       	rjmp	.+6      	; 0x490c <fputc+0x16>
    4906:	8f ef       	ldi	r24, 0xFF	; 255
    4908:	9f ef       	ldi	r25, 0xFF	; 255
    490a:	2c c0       	rjmp	.+88     	; 0x4964 <fputc+0x6e>
    490c:	22 ff       	sbrs	r18, 2
    490e:	16 c0       	rjmp	.+44     	; 0x493c <fputc+0x46>
    4910:	46 81       	ldd	r20, Z+6	; 0x06
    4912:	57 81       	ldd	r21, Z+7	; 0x07
    4914:	24 81       	ldd	r18, Z+4	; 0x04
    4916:	35 81       	ldd	r19, Z+5	; 0x05
    4918:	42 17       	cp	r20, r18
    491a:	53 07       	cpc	r21, r19
    491c:	44 f4       	brge	.+16     	; 0x492e <fputc+0x38>
    491e:	a0 81       	ld	r26, Z
    4920:	b1 81       	ldd	r27, Z+1	; 0x01
    4922:	9d 01       	movw	r18, r26
    4924:	2f 5f       	subi	r18, 0xFF	; 255
    4926:	3f 4f       	sbci	r19, 0xFF	; 255
    4928:	31 83       	std	Z+1, r19	; 0x01
    492a:	20 83       	st	Z, r18
    492c:	8c 93       	st	X, r24
    492e:	26 81       	ldd	r18, Z+6	; 0x06
    4930:	37 81       	ldd	r19, Z+7	; 0x07
    4932:	2f 5f       	subi	r18, 0xFF	; 255
    4934:	3f 4f       	sbci	r19, 0xFF	; 255
    4936:	37 83       	std	Z+7, r19	; 0x07
    4938:	26 83       	std	Z+6, r18	; 0x06
    493a:	14 c0       	rjmp	.+40     	; 0x4964 <fputc+0x6e>
    493c:	8b 01       	movw	r16, r22
    493e:	ec 01       	movw	r28, r24
    4940:	fb 01       	movw	r30, r22
    4942:	00 84       	ldd	r0, Z+8	; 0x08
    4944:	f1 85       	ldd	r31, Z+9	; 0x09
    4946:	e0 2d       	mov	r30, r0
    4948:	09 95       	icall
    494a:	89 2b       	or	r24, r25
    494c:	e1 f6       	brne	.-72     	; 0x4906 <fputc+0x10>
    494e:	d8 01       	movw	r26, r16
    4950:	16 96       	adiw	r26, 0x06	; 6
    4952:	8d 91       	ld	r24, X+
    4954:	9c 91       	ld	r25, X
    4956:	17 97       	sbiw	r26, 0x07	; 7
    4958:	01 96       	adiw	r24, 0x01	; 1
    495a:	17 96       	adiw	r26, 0x07	; 7
    495c:	9c 93       	st	X, r25
    495e:	8e 93       	st	-X, r24
    4960:	16 97       	sbiw	r26, 0x06	; 6
    4962:	ce 01       	movw	r24, r28
    4964:	df 91       	pop	r29
    4966:	cf 91       	pop	r28
    4968:	1f 91       	pop	r17
    496a:	0f 91       	pop	r16
    496c:	08 95       	ret

0000496e <__ultoa_invert>:
    496e:	fa 01       	movw	r30, r20
    4970:	aa 27       	eor	r26, r26
    4972:	28 30       	cpi	r18, 0x08	; 8
    4974:	51 f1       	breq	.+84     	; 0x49ca <__ultoa_invert+0x5c>
    4976:	20 31       	cpi	r18, 0x10	; 16
    4978:	81 f1       	breq	.+96     	; 0x49da <__ultoa_invert+0x6c>
    497a:	e8 94       	clt
    497c:	6f 93       	push	r22
    497e:	6e 7f       	andi	r22, 0xFE	; 254
    4980:	6e 5f       	subi	r22, 0xFE	; 254
    4982:	7f 4f       	sbci	r23, 0xFF	; 255
    4984:	8f 4f       	sbci	r24, 0xFF	; 255
    4986:	9f 4f       	sbci	r25, 0xFF	; 255
    4988:	af 4f       	sbci	r26, 0xFF	; 255
    498a:	b1 e0       	ldi	r27, 0x01	; 1
    498c:	3e d0       	rcall	.+124    	; 0x4a0a <__ultoa_invert+0x9c>
    498e:	b4 e0       	ldi	r27, 0x04	; 4
    4990:	3c d0       	rcall	.+120    	; 0x4a0a <__ultoa_invert+0x9c>
    4992:	67 0f       	add	r22, r23
    4994:	78 1f       	adc	r23, r24
    4996:	89 1f       	adc	r24, r25
    4998:	9a 1f       	adc	r25, r26
    499a:	a1 1d       	adc	r26, r1
    499c:	68 0f       	add	r22, r24
    499e:	79 1f       	adc	r23, r25
    49a0:	8a 1f       	adc	r24, r26
    49a2:	91 1d       	adc	r25, r1
    49a4:	a1 1d       	adc	r26, r1
    49a6:	6a 0f       	add	r22, r26
    49a8:	71 1d       	adc	r23, r1
    49aa:	81 1d       	adc	r24, r1
    49ac:	91 1d       	adc	r25, r1
    49ae:	a1 1d       	adc	r26, r1
    49b0:	20 d0       	rcall	.+64     	; 0x49f2 <__ultoa_invert+0x84>
    49b2:	09 f4       	brne	.+2      	; 0x49b6 <__ultoa_invert+0x48>
    49b4:	68 94       	set
    49b6:	3f 91       	pop	r19
    49b8:	2a e0       	ldi	r18, 0x0A	; 10
    49ba:	26 9f       	mul	r18, r22
    49bc:	11 24       	eor	r1, r1
    49be:	30 19       	sub	r19, r0
    49c0:	30 5d       	subi	r19, 0xD0	; 208
    49c2:	31 93       	st	Z+, r19
    49c4:	de f6       	brtc	.-74     	; 0x497c <__ultoa_invert+0xe>
    49c6:	cf 01       	movw	r24, r30
    49c8:	08 95       	ret
    49ca:	46 2f       	mov	r20, r22
    49cc:	47 70       	andi	r20, 0x07	; 7
    49ce:	40 5d       	subi	r20, 0xD0	; 208
    49d0:	41 93       	st	Z+, r20
    49d2:	b3 e0       	ldi	r27, 0x03	; 3
    49d4:	0f d0       	rcall	.+30     	; 0x49f4 <__ultoa_invert+0x86>
    49d6:	c9 f7       	brne	.-14     	; 0x49ca <__ultoa_invert+0x5c>
    49d8:	f6 cf       	rjmp	.-20     	; 0x49c6 <__ultoa_invert+0x58>
    49da:	46 2f       	mov	r20, r22
    49dc:	4f 70       	andi	r20, 0x0F	; 15
    49de:	40 5d       	subi	r20, 0xD0	; 208
    49e0:	4a 33       	cpi	r20, 0x3A	; 58
    49e2:	18 f0       	brcs	.+6      	; 0x49ea <__ultoa_invert+0x7c>
    49e4:	49 5d       	subi	r20, 0xD9	; 217
    49e6:	31 fd       	sbrc	r19, 1
    49e8:	40 52       	subi	r20, 0x20	; 32
    49ea:	41 93       	st	Z+, r20
    49ec:	02 d0       	rcall	.+4      	; 0x49f2 <__ultoa_invert+0x84>
    49ee:	a9 f7       	brne	.-22     	; 0x49da <__ultoa_invert+0x6c>
    49f0:	ea cf       	rjmp	.-44     	; 0x49c6 <__ultoa_invert+0x58>
    49f2:	b4 e0       	ldi	r27, 0x04	; 4
    49f4:	a6 95       	lsr	r26
    49f6:	97 95       	ror	r25
    49f8:	87 95       	ror	r24
    49fa:	77 95       	ror	r23
    49fc:	67 95       	ror	r22
    49fe:	ba 95       	dec	r27
    4a00:	c9 f7       	brne	.-14     	; 0x49f4 <__ultoa_invert+0x86>
    4a02:	00 97       	sbiw	r24, 0x00	; 0
    4a04:	61 05       	cpc	r22, r1
    4a06:	71 05       	cpc	r23, r1
    4a08:	08 95       	ret
    4a0a:	9b 01       	movw	r18, r22
    4a0c:	ac 01       	movw	r20, r24
    4a0e:	0a 2e       	mov	r0, r26
    4a10:	06 94       	lsr	r0
    4a12:	57 95       	ror	r21
    4a14:	47 95       	ror	r20
    4a16:	37 95       	ror	r19
    4a18:	27 95       	ror	r18
    4a1a:	ba 95       	dec	r27
    4a1c:	c9 f7       	brne	.-14     	; 0x4a10 <__ultoa_invert+0xa2>
    4a1e:	62 0f       	add	r22, r18
    4a20:	73 1f       	adc	r23, r19
    4a22:	84 1f       	adc	r24, r20
    4a24:	95 1f       	adc	r25, r21
    4a26:	a0 1d       	adc	r26, r0
    4a28:	08 95       	ret

00004a2a <eeprom_read_byte>:
    4a2a:	f9 99       	sbic	0x1f, 1	; 31
    4a2c:	fe cf       	rjmp	.-4      	; 0x4a2a <eeprom_read_byte>
    4a2e:	92 bd       	out	0x22, r25	; 34
    4a30:	81 bd       	out	0x21, r24	; 33
    4a32:	f8 9a       	sbi	0x1f, 0	; 31
    4a34:	99 27       	eor	r25, r25
    4a36:	80 b5       	in	r24, 0x20	; 32
    4a38:	08 95       	ret

00004a3a <eeprom_write_byte>:
    4a3a:	26 2f       	mov	r18, r22

00004a3c <eeprom_write_r18>:
    4a3c:	f9 99       	sbic	0x1f, 1	; 31
    4a3e:	fe cf       	rjmp	.-4      	; 0x4a3c <eeprom_write_r18>
    4a40:	1f ba       	out	0x1f, r1	; 31
    4a42:	92 bd       	out	0x22, r25	; 34
    4a44:	81 bd       	out	0x21, r24	; 33
    4a46:	20 bd       	out	0x20, r18	; 32
    4a48:	0f b6       	in	r0, 0x3f	; 63
    4a4a:	f8 94       	cli
    4a4c:	fa 9a       	sbi	0x1f, 2	; 31
    4a4e:	f9 9a       	sbi	0x1f, 1	; 31
    4a50:	0f be       	out	0x3f, r0	; 63
    4a52:	01 96       	adiw	r24, 0x01	; 1
    4a54:	08 95       	ret

00004a56 <__prologue_saves__>:
    4a56:	2f 92       	push	r2
    4a58:	3f 92       	push	r3
    4a5a:	4f 92       	push	r4
    4a5c:	5f 92       	push	r5
    4a5e:	6f 92       	push	r6
    4a60:	7f 92       	push	r7
    4a62:	8f 92       	push	r8
    4a64:	9f 92       	push	r9
    4a66:	af 92       	push	r10
    4a68:	bf 92       	push	r11
    4a6a:	cf 92       	push	r12
    4a6c:	df 92       	push	r13
    4a6e:	ef 92       	push	r14
    4a70:	ff 92       	push	r15
    4a72:	0f 93       	push	r16
    4a74:	1f 93       	push	r17
    4a76:	cf 93       	push	r28
    4a78:	df 93       	push	r29
    4a7a:	cd b7       	in	r28, 0x3d	; 61
    4a7c:	de b7       	in	r29, 0x3e	; 62
    4a7e:	ca 1b       	sub	r28, r26
    4a80:	db 0b       	sbc	r29, r27
    4a82:	0f b6       	in	r0, 0x3f	; 63
    4a84:	f8 94       	cli
    4a86:	de bf       	out	0x3e, r29	; 62
    4a88:	0f be       	out	0x3f, r0	; 63
    4a8a:	cd bf       	out	0x3d, r28	; 61
    4a8c:	09 94       	ijmp

00004a8e <__epilogue_restores__>:
    4a8e:	2a 88       	ldd	r2, Y+18	; 0x12
    4a90:	39 88       	ldd	r3, Y+17	; 0x11
    4a92:	48 88       	ldd	r4, Y+16	; 0x10
    4a94:	5f 84       	ldd	r5, Y+15	; 0x0f
    4a96:	6e 84       	ldd	r6, Y+14	; 0x0e
    4a98:	7d 84       	ldd	r7, Y+13	; 0x0d
    4a9a:	8c 84       	ldd	r8, Y+12	; 0x0c
    4a9c:	9b 84       	ldd	r9, Y+11	; 0x0b
    4a9e:	aa 84       	ldd	r10, Y+10	; 0x0a
    4aa0:	b9 84       	ldd	r11, Y+9	; 0x09
    4aa2:	c8 84       	ldd	r12, Y+8	; 0x08
    4aa4:	df 80       	ldd	r13, Y+7	; 0x07
    4aa6:	ee 80       	ldd	r14, Y+6	; 0x06
    4aa8:	fd 80       	ldd	r15, Y+5	; 0x05
    4aaa:	0c 81       	ldd	r16, Y+4	; 0x04
    4aac:	1b 81       	ldd	r17, Y+3	; 0x03
    4aae:	aa 81       	ldd	r26, Y+2	; 0x02
    4ab0:	b9 81       	ldd	r27, Y+1	; 0x01
    4ab2:	ce 0f       	add	r28, r30
    4ab4:	d1 1d       	adc	r29, r1
    4ab6:	0f b6       	in	r0, 0x3f	; 63
    4ab8:	f8 94       	cli
    4aba:	de bf       	out	0x3e, r29	; 62
    4abc:	0f be       	out	0x3f, r0	; 63
    4abe:	cd bf       	out	0x3d, r28	; 61
    4ac0:	ed 01       	movw	r28, r26
    4ac2:	08 95       	ret

00004ac4 <_exit>:
    4ac4:	f8 94       	cli

00004ac6 <__stop_program>:
    4ac6:	ff cf       	rjmp	.-2      	; 0x4ac6 <__stop_program>
