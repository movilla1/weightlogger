
weightlogger_master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000192  00800100  000044e8  0000457c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000044e8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001c1  00800292  00800292  0000470e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000470e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000476c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000c40  00000000  00000000  000047b0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001f3ac  00000000  00000000  000053f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004f9d  00000000  00000000  0002479c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00007672  00000000  00000000  00029739  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002a6c  00000000  00000000  00030dac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000626f  00000000  00000000  00033818  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000ef55  00000000  00000000  00039a87  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000c00  00000000  00000000  000489dc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__ctors_end>
       4:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
       8:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
       c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      10:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      14:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      18:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      1c:	0c 94 0f 0f 	jmp	0x1e1e	; 0x1e1e <__vector_7>
      20:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      24:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      28:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      2c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      30:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      34:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      38:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      3c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      40:	0c 94 6b 0f 	jmp	0x1ed6	; 0x1ed6 <__vector_16>
      44:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      48:	0c 94 00 0a 	jmp	0x1400	; 0x1400 <__vector_18>
      4c:	0c 94 32 0a 	jmp	0x1464	; 0x1464 <__vector_19>
      50:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      54:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      58:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      5c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      60:	0c 94 62 1d 	jmp	0x3ac4	; 0x3ac4 <__vector_24>
      64:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      68:	d0 18       	sub	r13, r0
      6a:	e7 18       	sub	r14, r7
      6c:	e7 18       	sub	r14, r7
      6e:	e4 18       	sub	r14, r4
      70:	e7 18       	sub	r14, r7
      72:	ce 18       	sub	r12, r14
      74:	e7 18       	sub	r14, r7
      76:	e7 18       	sub	r14, r7
      78:	e7 18       	sub	r14, r7
      7a:	c2 18       	sub	r12, r2
      7c:	e7 18       	sub	r14, r7
      7e:	e7 18       	sub	r14, r7
      80:	d7 18       	sub	r13, r7
      82:	e2 18       	sub	r14, r2
      84:	e0 18       	sub	r14, r0
      86:	e7 18       	sub	r14, r7
      88:	e7 18       	sub	r14, r7
      8a:	e7 18       	sub	r14, r7
      8c:	de 18       	sub	r13, r14

0000008e <__trampolines_end>:
      8e:	02 00       	Address 0x0000008e is out of bounds.
.word	0xffff	; ????

0000008f <digital_pin_to_timer_PGM>:
      8f:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
      9f:	00 00 00 00                                         ....

000000a3 <digital_pin_to_bit_mask_PGM>:
      a3:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      b3:	04 08 10 20                                         ... 

000000b7 <digital_pin_to_port_PGM>:
      b7:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      c7:	03 03 03 03                                         ....

000000cb <port_to_input_PGM>:
      cb:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000d5 <port_to_output_PGM>:
      d5:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000df <port_to_mode_PGM>:
      df:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000e9 <_ZL11daysInMonth>:
      e9:	1f 1c 1f 1e 1f 1e 1f 1f 1e 1f 1e 1f 00              .............

000000f6 <__ctors_start>:
      f6:	6a 07       	cpc	r22, r26
      f8:	62 0a       	sbc	r6, r18
      fa:	5f 1c       	adc	r5, r15

000000fc <__ctors_end>:
      fc:	11 24       	eor	r1, r1
      fe:	1f be       	out	0x3f, r1	; 63
     100:	cf ef       	ldi	r28, 0xFF	; 255
     102:	d8 e0       	ldi	r29, 0x08	; 8
     104:	de bf       	out	0x3e, r29	; 62
     106:	cd bf       	out	0x3d, r28	; 61

00000108 <__do_copy_data>:
     108:	12 e0       	ldi	r17, 0x02	; 2
     10a:	a0 e0       	ldi	r26, 0x00	; 0
     10c:	b1 e0       	ldi	r27, 0x01	; 1
     10e:	e8 ee       	ldi	r30, 0xE8	; 232
     110:	f4 e4       	ldi	r31, 0x44	; 68
     112:	02 c0       	rjmp	.+4      	; 0x118 <__do_copy_data+0x10>
     114:	05 90       	lpm	r0, Z+
     116:	0d 92       	st	X+, r0
     118:	a2 39       	cpi	r26, 0x92	; 146
     11a:	b1 07       	cpc	r27, r17
     11c:	d9 f7       	brne	.-10     	; 0x114 <__do_copy_data+0xc>

0000011e <__do_clear_bss>:
     11e:	24 e0       	ldi	r18, 0x04	; 4
     120:	a2 e9       	ldi	r26, 0x92	; 146
     122:	b2 e0       	ldi	r27, 0x02	; 2
     124:	01 c0       	rjmp	.+2      	; 0x128 <.do_clear_bss_start>

00000126 <.do_clear_bss_loop>:
     126:	1d 92       	st	X+, r1

00000128 <.do_clear_bss_start>:
     128:	a3 35       	cpi	r26, 0x53	; 83
     12a:	b2 07       	cpc	r27, r18
     12c:	e1 f7       	brne	.-8      	; 0x126 <.do_clear_bss_loop>

0000012e <__do_global_ctors>:
     12e:	10 e0       	ldi	r17, 0x00	; 0
     130:	ce e7       	ldi	r28, 0x7E	; 126
     132:	d0 e0       	ldi	r29, 0x00	; 0
     134:	04 c0       	rjmp	.+8      	; 0x13e <__do_global_ctors+0x10>
     136:	21 97       	sbiw	r28, 0x01	; 1
     138:	fe 01       	movw	r30, r28
     13a:	0e 94 dc 1e 	call	0x3db8	; 0x3db8 <__tablejump2__>
     13e:	cb 37       	cpi	r28, 0x7B	; 123
     140:	d1 07       	cpc	r29, r17
     142:	c9 f7       	brne	.-14     	; 0x136 <__do_global_ctors+0x8>
     144:	0e 94 90 0a 	call	0x1520	; 0x1520 <main>
     148:	0c 94 72 22 	jmp	0x44e4	; 0x44e4 <_exit>

0000014c <__bad_interrupt>:
     14c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000150 <_Z12compare_cardPcS_>:

/**
 * this function compares a card with the readed bytes,
 * if they match it returns true
 */
bool compare_card(char *card_one, char *card_two) {
     150:	af 92       	push	r10
     152:	bf 92       	push	r11
     154:	cf 92       	push	r12
     156:	df 92       	push	r13
     158:	ef 92       	push	r14
     15a:	ff 92       	push	r15
     15c:	0f 93       	push	r16
     15e:	1f 93       	push	r17
     160:	cf 93       	push	r28
     162:	df 93       	push	r29
     164:	ec 01       	movw	r28, r24
     166:	8b 01       	movw	r16, r22
     168:	7c 01       	movw	r14, r24
     16a:	84 e0       	ldi	r24, 0x04	; 4
     16c:	e8 0e       	add	r14, r24
     16e:	f1 1c       	adc	r15, r1
  char i;
  for (i = 0; i < CARD_UID_SIZE; i++) {
#ifdef DEBUG    
    Serial.print("#");
     170:	69 e0       	ldi	r22, 0x09	; 9
     172:	71 e0       	ldi	r23, 0x01	; 1
     174:	80 ed       	ldi	r24, 0xD0	; 208
     176:	92 e0       	ldi	r25, 0x02	; 2
     178:	0e 94 ed 0a 	call	0x15da	; 0x15da <_ZN5Print5printEPKc>
     17c:	5e 01       	movw	r10, r28
    Serial.print(card_one[i], HEX);
     17e:	69 91       	ld	r22, Y+
     180:	70 e0       	ldi	r23, 0x00	; 0
     182:	40 e1       	ldi	r20, 0x10	; 16
     184:	50 e0       	ldi	r21, 0x00	; 0
     186:	80 ed       	ldi	r24, 0xD0	; 208
     188:	92 e0       	ldi	r25, 0x02	; 2
     18a:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <_ZN5Print5printEii>
    Serial.print("-");
     18e:	6b e0       	ldi	r22, 0x0B	; 11
     190:	71 e0       	ldi	r23, 0x01	; 1
     192:	80 ed       	ldi	r24, 0xD0	; 208
     194:	92 e0       	ldi	r25, 0x02	; 2
     196:	0e 94 ed 0a 	call	0x15da	; 0x15da <_ZN5Print5printEPKc>
     19a:	68 01       	movw	r12, r16
    Serial.println(card_two[i], HEX);
     19c:	f8 01       	movw	r30, r16
     19e:	61 91       	ld	r22, Z+
     1a0:	8f 01       	movw	r16, r30
     1a2:	70 e0       	ldi	r23, 0x00	; 0
     1a4:	40 e1       	ldi	r20, 0x10	; 16
     1a6:	50 e0       	ldi	r21, 0x00	; 0
     1a8:	80 ed       	ldi	r24, 0xD0	; 208
     1aa:	92 e0       	ldi	r25, 0x02	; 2
     1ac:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <_ZN5Print7printlnEii>
#endif
    if (card_one[i] != card_two[i]) {
     1b0:	f5 01       	movw	r30, r10
     1b2:	90 81       	ld	r25, Z
     1b4:	f6 01       	movw	r30, r12
     1b6:	80 81       	ld	r24, Z
     1b8:	98 13       	cpse	r25, r24
     1ba:	05 c0       	rjmp	.+10     	; 0x1c6 <_Z12compare_cardPcS_+0x76>
 * this function compares a card with the readed bytes,
 * if they match it returns true
 */
bool compare_card(char *card_one, char *card_two) {
  char i;
  for (i = 0; i < CARD_UID_SIZE; i++) {
     1bc:	ce 15       	cp	r28, r14
     1be:	df 05       	cpc	r29, r15
     1c0:	b9 f6       	brne	.-82     	; 0x170 <_Z12compare_cardPcS_+0x20>
#endif
    if (card_one[i] != card_two[i]) {
      return false;
    }
  }
  return true;
     1c2:	81 e0       	ldi	r24, 0x01	; 1
     1c4:	01 c0       	rjmp	.+2      	; 0x1c8 <_Z12compare_cardPcS_+0x78>
    Serial.print(card_one[i], HEX);
    Serial.print("-");
    Serial.println(card_two[i], HEX);
#endif
    if (card_one[i] != card_two[i]) {
      return false;
     1c6:	80 e0       	ldi	r24, 0x00	; 0
    }
  }
  return true;
}
     1c8:	df 91       	pop	r29
     1ca:	cf 91       	pop	r28
     1cc:	1f 91       	pop	r17
     1ce:	0f 91       	pop	r16
     1d0:	ff 90       	pop	r15
     1d2:	ef 90       	pop	r14
     1d4:	df 90       	pop	r13
     1d6:	cf 90       	pop	r12
     1d8:	bf 90       	pop	r11
     1da:	af 90       	pop	r10
     1dc:	08 95       	ret

000001de <_Z13is_known_cardPc>:

/**
 * this function checks if a card id sent is known by the device, if so, 
 * it returns the card_number value, it returns 0 for unknown cards
 */
char is_known_card(char *card_id) {
     1de:	5f 92       	push	r5
     1e0:	6f 92       	push	r6
     1e2:	7f 92       	push	r7
     1e4:	8f 92       	push	r8
     1e6:	9f 92       	push	r9
     1e8:	af 92       	push	r10
     1ea:	bf 92       	push	r11
     1ec:	cf 92       	push	r12
     1ee:	df 92       	push	r13
     1f0:	ef 92       	push	r14
     1f2:	ff 92       	push	r15
     1f4:	0f 93       	push	r16
     1f6:	1f 93       	push	r17
     1f8:	cf 93       	push	r28
     1fa:	df 93       	push	r29
     1fc:	00 d0       	rcall	.+0      	; 0x1fe <_Z13is_known_cardPc+0x20>
     1fe:	00 d0       	rcall	.+0      	; 0x200 <_Z13is_known_cardPc+0x22>
     200:	1f 92       	push	r1
     202:	cd b7       	in	r28, 0x3d	; 61
     204:	de b7       	in	r29, 0x3e	; 62
     206:	5c 01       	movw	r10, r24
  struct card_block card;
  bool finish = false;
  int pos = 0;
  char ret_val = 0;
     208:	51 2c       	mov	r5, r1
 * it returns the card_number value, it returns 0 for unknown cards
 */
char is_known_card(char *card_id) {
  struct card_block card;
  bool finish = false;
  int pos = 0;
     20a:	00 e0       	ldi	r16, 0x00	; 0
     20c:	10 e0       	ldi	r17, 0x00	; 0
     20e:	ce 01       	movw	r24, r28
     210:	01 96       	adiw	r24, 0x01	; 1
     212:	6c 01       	movw	r12, r24
     214:	3e 01       	movw	r6, r28
     216:	96 e0       	ldi	r25, 0x06	; 6
     218:	69 0e       	add	r6, r25
     21a:	71 1c       	adc	r7, r1
     21c:	76 01       	movw	r14, r12

    EERef( const int index )
        : index( index )                 {}
    
    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
     21e:	48 01       	movw	r8, r16
     220:	8c 18       	sub	r8, r12
     222:	9d 08       	sbc	r9, r13
     224:	c4 01       	movw	r24, r8
     226:	8e 0d       	add	r24, r14
     228:	9f 1d       	adc	r25, r15
     22a:	0e 94 25 22 	call	0x444a	; 0x444a <eeprom_read_byte>
template <class T> int EEPROM_readBlock(int ee, T& value)
{
    char* p = (char*)(void*)&value;
    unsigned int i;
    for (i = 0; i < sizeof(value); i++)
          *p++ = EEPROM.read(ee++);
     22e:	f7 01       	movw	r30, r14
     230:	81 93       	st	Z+, r24
     232:	7f 01       	movw	r14, r30

template <class T> int EEPROM_readBlock(int ee, T& value)
{
    char* p = (char*)(void*)&value;
    unsigned int i;
    for (i = 0; i < sizeof(value); i++)
     234:	e6 15       	cp	r30, r6
     236:	f7 05       	cpc	r31, r7
     238:	a9 f7       	brne	.-22     	; 0x224 <_Z13is_known_cardPc+0x46>
  char ret_val = 0;
  while(!finish) {
    EEPROM_readBlock(pos, card);
    if (compare_card(card_id, card.card_uid)) {
     23a:	b6 01       	movw	r22, r12
     23c:	c5 01       	movw	r24, r10
     23e:	0e 94 a8 00 	call	0x150	; 0x150 <_Z12compare_cardPcS_>
     242:	88 23       	and	r24, r24
     244:	19 f0       	breq	.+6      	; 0x24c <_Z13is_known_cardPc+0x6e>
      finish = true;
      ret_val = card.card_number;
     246:	5d 80       	ldd	r5, Y+5	; 0x05
  int pos = 0;
  char ret_val = 0;
  while(!finish) {
    EEPROM_readBlock(pos, card);
    if (compare_card(card_id, card.card_uid)) {
      finish = true;
     248:	81 e0       	ldi	r24, 0x01	; 1
     24a:	01 c0       	rjmp	.+2      	; 0x24e <_Z13is_known_cardPc+0x70>
     24c:	80 e0       	ldi	r24, 0x00	; 0
      ret_val = card.card_number;
    }
    if (pos > MAX_EEPROM_POSITION && finish == false) {
     24e:	09 3e       	cpi	r16, 0xE9	; 233
     250:	f3 e0       	ldi	r31, 0x03	; 3
     252:	1f 07       	cpc	r17, r31
     254:	20 f0       	brcs	.+8      	; 0x25e <_Z13is_known_cardPc+0x80>
     256:	81 11       	cpse	r24, r1
     258:	02 c0       	rjmp	.+4      	; 0x25e <_Z13is_known_cardPc+0x80>
      finish = true;
      ret_val = 0;
     25a:	51 2c       	mov	r5, r1
    if (compare_card(card_id, card.card_uid)) {
      finish = true;
      ret_val = card.card_number;
    }
    if (pos > MAX_EEPROM_POSITION && finish == false) {
      finish = true;
     25c:	81 e0       	ldi	r24, 0x01	; 1
     25e:	0b 5f       	subi	r16, 0xFB	; 251
     260:	1f 4f       	sbci	r17, 0xFF	; 255
char is_known_card(char *card_id) {
  struct card_block card;
  bool finish = false;
  int pos = 0;
  char ret_val = 0;
  while(!finish) {
     262:	88 23       	and	r24, r24
     264:	d9 f2       	breq	.-74     	; 0x21c <_Z13is_known_cardPc+0x3e>
      ret_val = 0;
    }
    pos += sizeof(card);
  }
  return ret_val;
}
     266:	85 2d       	mov	r24, r5
     268:	0f 90       	pop	r0
     26a:	0f 90       	pop	r0
     26c:	0f 90       	pop	r0
     26e:	0f 90       	pop	r0
     270:	0f 90       	pop	r0
     272:	df 91       	pop	r29
     274:	cf 91       	pop	r28
     276:	1f 91       	pop	r17
     278:	0f 91       	pop	r16
     27a:	ff 90       	pop	r15
     27c:	ef 90       	pop	r14
     27e:	df 90       	pop	r13
     280:	cf 90       	pop	r12
     282:	bf 90       	pop	r11
     284:	af 90       	pop	r10
     286:	9f 90       	pop	r9
     288:	8f 90       	pop	r8
     28a:	7f 90       	pop	r7
     28c:	6f 90       	pop	r6
     28e:	5f 90       	pop	r5
     290:	08 95       	ret

00000292 <_Z10store_card10card_blockc>:

/**
 * Stores the card uid and card_number at the position indicated
 * positions are from 0 to 199
 */
bool store_card(struct card_block card, char position) {
     292:	cf 92       	push	r12
     294:	df 92       	push	r13
     296:	ef 92       	push	r14
     298:	ff 92       	push	r15
     29a:	0f 93       	push	r16
     29c:	1f 93       	push	r17
     29e:	cf 93       	push	r28
     2a0:	df 93       	push	r29
     2a2:	00 d0       	rcall	.+0      	; 0x2a4 <_Z10store_card10card_blockc+0x12>
     2a4:	00 d0       	rcall	.+0      	; 0x2a6 <_Z10store_card10card_blockc+0x14>
     2a6:	1f 92       	push	r1
     2a8:	cd b7       	in	r28, 0x3d	; 61
     2aa:	de b7       	in	r29, 0x3e	; 62
     2ac:	49 83       	std	Y+1, r20	; 0x01
     2ae:	5a 83       	std	Y+2, r21	; 0x02
     2b0:	6b 83       	std	Y+3, r22	; 0x03
     2b2:	7c 83       	std	Y+4, r23	; 0x04
     2b4:	8d 83       	std	Y+5, r24	; 0x05
  int pos = (5 * position);
  if ( position < 200) {  //if we are not full capacity
     2b6:	28 3c       	cpi	r18, 0xC8	; 200
     2b8:	d0 f4       	brcc	.+52     	; 0x2ee <_Z10store_card10card_blockc+0x5c>
/**
 * Stores the card uid and card_number at the position indicated
 * positions are from 0 to 199
 */
bool store_card(struct card_block card, char position) {
  int pos = (5 * position);
     2ba:	85 e0       	ldi	r24, 0x05	; 5
     2bc:	28 9f       	mul	r18, r24
     2be:	80 01       	movw	r16, r0
     2c0:	11 24       	eor	r1, r1
     2c2:	fe 01       	movw	r30, r28
     2c4:	31 96       	adiw	r30, 0x01	; 1
     2c6:	6f 01       	movw	r12, r30
     2c8:	e1 2c       	mov	r14, r1
     2ca:	f1 2c       	mov	r15, r1
template <class T> int EEPROM_writeBlock(int ee, const T& value)
{
    const char* p = (const char*)(const void*)&value;
    unsigned int i;
    for (i = 0; i < sizeof(value); i++)
          EEPROM.write(ee++, *p++);
     2cc:	f6 01       	movw	r30, r12
     2ce:	61 91       	ld	r22, Z+
     2d0:	6f 01       	movw	r12, r30
    operator uint8_t() const             { return **this; }
    
    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
     2d2:	c8 01       	movw	r24, r16
     2d4:	8e 0d       	add	r24, r14
     2d6:	9f 1d       	adc	r25, r15
     2d8:	0e 94 2d 22 	call	0x445a	; 0x445a <eeprom_write_byte>
#ifndef __EEWB_
template <class T> int EEPROM_writeBlock(int ee, const T& value)
{
    const char* p = (const char*)(const void*)&value;
    unsigned int i;
    for (i = 0; i < sizeof(value); i++)
     2dc:	ff ef       	ldi	r31, 0xFF	; 255
     2de:	ef 1a       	sub	r14, r31
     2e0:	ff 0a       	sbc	r15, r31
     2e2:	85 e0       	ldi	r24, 0x05	; 5
     2e4:	e8 16       	cp	r14, r24
     2e6:	f1 04       	cpc	r15, r1
     2e8:	89 f7       	brne	.-30     	; 0x2cc <_Z10store_card10card_blockc+0x3a>
  if ( position < 200) {  //if we are not full capacity
    EEPROM_writeBlock(pos, card); //store the card
  } else {
    return false;
  }
  return true;
     2ea:	81 e0       	ldi	r24, 0x01	; 1
     2ec:	01 c0       	rjmp	.+2      	; 0x2f0 <_Z10store_card10card_blockc+0x5e>
bool store_card(struct card_block card, char position) {
  int pos = (5 * position);
  if ( position < 200) {  //if we are not full capacity
    EEPROM_writeBlock(pos, card); //store the card
  } else {
    return false;
     2ee:	80 e0       	ldi	r24, 0x00	; 0
  }
  return true;
}
     2f0:	0f 90       	pop	r0
     2f2:	0f 90       	pop	r0
     2f4:	0f 90       	pop	r0
     2f6:	0f 90       	pop	r0
     2f8:	0f 90       	pop	r0
     2fa:	df 91       	pop	r29
     2fc:	cf 91       	pop	r28
     2fe:	1f 91       	pop	r17
     300:	0f 91       	pop	r16
     302:	ff 90       	pop	r15
     304:	ef 90       	pop	r14
     306:	df 90       	pop	r13
     308:	cf 90       	pop	r12
     30a:	08 95       	ret

0000030c <_Z10erase_cardc>:

/**
 * Erases the data for a card_block in EEPROM
 * @params pos with the position to erase
 */
void erase_card(char pos) {
     30c:	0f 93       	push	r16
     30e:	1f 93       	push	r17
     310:	cf 93       	push	r28
     312:	df 93       	push	r29
  if (pos > 200) //always inside the position limit.
     314:	89 3c       	cpi	r24, 0xC9	; 201
     316:	a8 f4       	brcc	.+42     	; 0x342 <_Z10erase_cardc+0x36>
    return;
  int ppos = (pos * sizeof(struct card_block));
     318:	95 e0       	ldi	r25, 0x05	; 5
     31a:	89 9f       	mul	r24, r25
     31c:	e0 01       	movw	r28, r0
     31e:	11 24       	eor	r1, r1
     320:	8e 01       	movw	r16, r28
     322:	0b 5f       	subi	r16, 0xFB	; 251
     324:	1f 4f       	sbci	r17, 0xFF	; 255
     326:	6f ef       	ldi	r22, 0xFF	; 255
     328:	ce 01       	movw	r24, r28
     32a:	0e 94 2d 22 	call	0x445a	; 0x445a <eeprom_write_byte>
  for (char i=0; i<sizeof(struct card_block); i++) {
    EEPROM.write(ppos+i, 0xff);
    delay(5); // 5mS between byte writes, to allow the data to be written
     32e:	65 e0       	ldi	r22, 0x05	; 5
     330:	70 e0       	ldi	r23, 0x00	; 0
     332:	80 e0       	ldi	r24, 0x00	; 0
     334:	90 e0       	ldi	r25, 0x00	; 0
     336:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <delay>
     33a:	21 96       	adiw	r28, 0x01	; 1
 */
void erase_card(char pos) {
  if (pos > 200) //always inside the position limit.
    return;
  int ppos = (pos * sizeof(struct card_block));
  for (char i=0; i<sizeof(struct card_block); i++) {
     33c:	c0 17       	cp	r28, r16
     33e:	d1 07       	cpc	r29, r17
     340:	91 f7       	brne	.-28     	; 0x326 <_Z10erase_cardc+0x1a>
    EEPROM.write(ppos+i, 0xff);
    delay(5); // 5mS between byte writes, to allow the data to be written
  }
     342:	df 91       	pop	r29
     344:	cf 91       	pop	r28
     346:	1f 91       	pop	r17
     348:	0f 91       	pop	r16
     34a:	08 95       	ret

0000034c <_Z24hex_string_to_byte_arrayPcS_cc>:
void hex_string_to_byte_array(char *src, char *out_array, char start, char end) {
     34c:	cf 93       	push	r28
     34e:	df 93       	push	r29
     350:	ec 01       	movw	r28, r24
  char pos = 0;
     352:	30 e0       	ldi	r19, 0x00	; 0
  char tmp;
  for (char c = start; c < end; c += 2) {
     354:	42 17       	cp	r20, r18
     356:	d0 f4       	brcc	.+52     	; 0x38c <_Z24hex_string_to_byte_arrayPcS_cc+0x40>
    tmp = src[c] > 0x39 ? ((src[c] - 'A') + 10) * 16 : (src[c] - '0') * 16;
     358:	de 01       	movw	r26, r28
     35a:	a4 0f       	add	r26, r20
     35c:	b1 1d       	adc	r27, r1
     35e:	9c 91       	ld	r25, X
     360:	e9 2f       	mov	r30, r25
     362:	f0 e0       	ldi	r31, 0x00	; 0
     364:	9a 33       	cpi	r25, 0x3A	; 58
     366:	08 f0       	brcs	.+2      	; 0x36a <_Z24hex_string_to_byte_arrayPcS_cc+0x1e>
     368:	f7 97       	sbiw	r30, 0x37	; 55
     36a:	e2 95       	swap	r30
     36c:	e0 7f       	andi	r30, 0xF0	; 240
    tmp += src[c+1] > 0x39 ? ((src[c+1] - 'A') + 10) : (src[c+1] - '0');
     36e:	11 96       	adiw	r26, 0x01	; 1
     370:	9c 91       	ld	r25, X
     372:	9a 33       	cpi	r25, 0x3A	; 58
     374:	10 f0       	brcs	.+4      	; 0x37a <_Z24hex_string_to_byte_arrayPcS_cc+0x2e>
     376:	97 53       	subi	r25, 0x37	; 55
     378:	01 c0       	rjmp	.+2      	; 0x37c <_Z24hex_string_to_byte_arrayPcS_cc+0x30>
     37a:	90 53       	subi	r25, 0x30	; 48
    out_array[pos] = tmp;
     37c:	db 01       	movw	r26, r22
     37e:	a3 0f       	add	r26, r19
     380:	b1 1d       	adc	r27, r1
     382:	9e 0f       	add	r25, r30
     384:	9c 93       	st	X, r25
    pos ++;
     386:	3f 5f       	subi	r19, 0xFF	; 255
void hex_string_to_byte_array(char *src, char *out_array, char start, char end) {
  char pos = 0;
  char tmp;
  for (char c = start; c < end; c += 2) {
     388:	4e 5f       	subi	r20, 0xFE	; 254
     38a:	e4 cf       	rjmp	.-56     	; 0x354 <_Z24hex_string_to_byte_arrayPcS_cc+0x8>
    tmp = src[c] > 0x39 ? ((src[c] - 'A') + 10) * 16 : (src[c] - '0') * 16;
    tmp += src[c+1] > 0x39 ? ((src[c+1] - 'A') + 10) : (src[c+1] - '0');
    out_array[pos] = tmp;
    pos ++;
  }
}
     38c:	df 91       	pop	r29
     38e:	cf 91       	pop	r28
     390:	08 95       	ret

00000392 <_ZN15ElcanLCDManagerC1Eccc>:
	strcat(text, "Station IP......");
	strcat(text, ipaddr);
	this->show_message(text);
	delay(2500); //2 1/2 seconds delay to read the ip
	this->lcd.clear();
}
     392:	df 92       	push	r13
     394:	ef 92       	push	r14
     396:	ff 92       	push	r15
     398:	0f 93       	push	r16
     39a:	1f 93       	push	r17
     39c:	cf 93       	push	r28
     39e:	df 93       	push	r29
     3a0:	cd b7       	in	r28, 0x3d	; 61
     3a2:	de b7       	in	r29, 0x3e	; 62
     3a4:	2c 97       	sbiw	r28, 0x0c	; 12
     3a6:	0f b6       	in	r0, 0x3f	; 63
     3a8:	f8 94       	cli
     3aa:	de bf       	out	0x3e, r29	; 62
     3ac:	0f be       	out	0x3f, r0	; 63
     3ae:	cd bf       	out	0x3d, r28	; 61
     3b0:	8c 01       	movw	r16, r24
     3b2:	f6 2e       	mov	r15, r22
     3b4:	e4 2e       	mov	r14, r20
     3b6:	d2 2e       	mov	r13, r18
     3b8:	0e 94 25 11 	call	0x224a	; 0x224a <_ZN17LiquidCrystal_I2CC1Ev>
     3bc:	ce 01       	movw	r24, r28
     3be:	01 96       	adiw	r24, 0x01	; 1
     3c0:	0e 94 25 11 	call	0x224a	; 0x224a <_ZN17LiquidCrystal_I2CC1Ev>
     3c4:	8b 81       	ldd	r24, Y+3	; 0x03
     3c6:	9c 81       	ldd	r25, Y+4	; 0x04
     3c8:	f8 01       	movw	r30, r16
     3ca:	93 83       	std	Z+3, r25	; 0x03
     3cc:	82 83       	std	Z+2, r24	; 0x02
     3ce:	8d 81       	ldd	r24, Y+5	; 0x05
     3d0:	84 83       	std	Z+4, r24	; 0x04
     3d2:	8e 81       	ldd	r24, Y+6	; 0x06
     3d4:	85 83       	std	Z+5, r24	; 0x05
     3d6:	8f 81       	ldd	r24, Y+7	; 0x07
     3d8:	86 83       	std	Z+6, r24	; 0x06
     3da:	88 85       	ldd	r24, Y+8	; 0x08
     3dc:	87 83       	std	Z+7, r24	; 0x07
     3de:	89 85       	ldd	r24, Y+9	; 0x09
     3e0:	80 87       	std	Z+8, r24	; 0x08
     3e2:	8a 85       	ldd	r24, Y+10	; 0x0a
     3e4:	81 87       	std	Z+9, r24	; 0x09
     3e6:	8b 85       	ldd	r24, Y+11	; 0x0b
     3e8:	82 87       	std	Z+10, r24	; 0x0a
     3ea:	8c 85       	ldd	r24, Y+12	; 0x0c
     3ec:	83 87       	std	Z+11, r24	; 0x0b
     3ee:	2d 2d       	mov	r18, r13
     3f0:	4e 2d       	mov	r20, r14
     3f2:	6f 2d       	mov	r22, r15
     3f4:	c8 01       	movw	r24, r16
     3f6:	0e 94 3e 12 	call	0x247c	; 0x247c <_ZN17LiquidCrystal_I2C4initEhhh>
     3fa:	2c 96       	adiw	r28, 0x0c	; 12
     3fc:	0f b6       	in	r0, 0x3f	; 63
     3fe:	f8 94       	cli
     400:	de bf       	out	0x3e, r29	; 62
     402:	0f be       	out	0x3f, r0	; 63
     404:	cd bf       	out	0x3d, r28	; 61
     406:	df 91       	pop	r29
     408:	cf 91       	pop	r28
     40a:	1f 91       	pop	r17
     40c:	0f 91       	pop	r16
     40e:	ff 90       	pop	r15
     410:	ef 90       	pop	r14
     412:	df 90       	pop	r13
     414:	08 95       	ret

00000416 <_ZN15ElcanLCDManager5beginEcc>:
     416:	20 e0       	ldi	r18, 0x00	; 0
     418:	0c 94 da 11 	jmp	0x23b4	; 0x23b4 <_ZN17LiquidCrystal_I2C5beginEhhh>

0000041c <_ZN15ElcanLCDManager10show_errorEc>:
     41c:	1f 93       	push	r17
     41e:	cf 93       	push	r28
     420:	df 93       	push	r29
     422:	ec 01       	movw	r28, r24
     424:	16 2f       	mov	r17, r22
     426:	0e 94 90 11 	call	0x2320	; 0x2320 <_ZN17LiquidCrystal_I2C5clearEv>
     42a:	14 30       	cpi	r17, 0x04	; 4
     42c:	29 f0       	breq	.+10     	; 0x438 <_ZN15ElcanLCDManager10show_errorEc+0x1c>
     42e:	15 30       	cpi	r17, 0x05	; 5
     430:	51 f0       	breq	.+20     	; 0x446 <_ZN15ElcanLCDManager10show_errorEc+0x2a>
     432:	12 30       	cpi	r17, 0x02	; 2
     434:	a1 f4       	brne	.+40     	; 0x45e <_ZN15ElcanLCDManager10show_errorEc+0x42>
     436:	0c c0       	rjmp	.+24     	; 0x450 <_ZN15ElcanLCDManager10show_errorEc+0x34>
     438:	6d e0       	ldi	r22, 0x0D	; 13
     43a:	71 e0       	ldi	r23, 0x01	; 1
     43c:	ce 01       	movw	r24, r28
     43e:	0e 94 c9 0a 	call	0x1592	; 0x1592 <_ZN5Print5printEPK19__FlashStringHelper>
     442:	d2 e0       	ldi	r29, 0x02	; 2
     444:	21 c0       	rjmp	.+66     	; 0x488 <_ZN15ElcanLCDManager10show_errorEc+0x6c>
     446:	67 e1       	ldi	r22, 0x17	; 23
     448:	71 e0       	ldi	r23, 0x01	; 1
     44a:	ce 01       	movw	r24, r28
     44c:	0e 94 c9 0a 	call	0x1592	; 0x1592 <_ZN5Print5printEPK19__FlashStringHelper>
     450:	61 e2       	ldi	r22, 0x21	; 33
     452:	71 e0       	ldi	r23, 0x01	; 1
     454:	ce 01       	movw	r24, r28
     456:	0e 94 c9 0a 	call	0x1592	; 0x1592 <_ZN5Print5printEPK19__FlashStringHelper>
     45a:	d4 e0       	ldi	r29, 0x04	; 4
     45c:	15 c0       	rjmp	.+42     	; 0x488 <_ZN15ElcanLCDManager10show_errorEc+0x6c>
     45e:	6b e2       	ldi	r22, 0x2B	; 43
     460:	71 e0       	ldi	r23, 0x01	; 1
     462:	ce 01       	movw	r24, r28
     464:	0e 94 c9 0a 	call	0x1592	; 0x1592 <_ZN5Print5printEPK19__FlashStringHelper>
     468:	2c e2       	ldi	r18, 0x2C	; 44
     46a:	31 e0       	ldi	r19, 0x01	; 1
     46c:	40 e0       	ldi	r20, 0x00	; 0
     46e:	50 e0       	ldi	r21, 0x00	; 0
     470:	68 e7       	ldi	r22, 0x78	; 120
     472:	75 e0       	ldi	r23, 0x05	; 5
     474:	83 e0       	ldi	r24, 0x03	; 3
     476:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <_Z4tonehjm>
     47a:	68 ec       	ldi	r22, 0xC8	; 200
     47c:	70 e0       	ldi	r23, 0x00	; 0
     47e:	80 e0       	ldi	r24, 0x00	; 0
     480:	90 e0       	ldi	r25, 0x00	; 0
     482:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <delay>
     486:	13 c0       	rjmp	.+38     	; 0x4ae <_ZN15ElcanLCDManager10show_errorEc+0x92>
     488:	c0 e0       	ldi	r28, 0x00	; 0
     48a:	2c e2       	ldi	r18, 0x2C	; 44
     48c:	31 e0       	ldi	r19, 0x01	; 1
     48e:	40 e0       	ldi	r20, 0x00	; 0
     490:	50 e0       	ldi	r21, 0x00	; 0
     492:	68 e7       	ldi	r22, 0x78	; 120
     494:	75 e0       	ldi	r23, 0x05	; 5
     496:	83 e0       	ldi	r24, 0x03	; 3
     498:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <_Z4tonehjm>
     49c:	68 ec       	ldi	r22, 0xC8	; 200
     49e:	70 e0       	ldi	r23, 0x00	; 0
     4a0:	80 e0       	ldi	r24, 0x00	; 0
     4a2:	90 e0       	ldi	r25, 0x00	; 0
     4a4:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <delay>
     4a8:	cf 5f       	subi	r28, 0xFF	; 255
     4aa:	dc 13       	cpse	r29, r28
     4ac:	ee cf       	rjmp	.-36     	; 0x48a <_ZN15ElcanLCDManager10show_errorEc+0x6e>
     4ae:	64 ef       	ldi	r22, 0xF4	; 244
     4b0:	71 e0       	ldi	r23, 0x01	; 1
     4b2:	80 e0       	ldi	r24, 0x00	; 0
     4b4:	90 e0       	ldi	r25, 0x00	; 0
     4b6:	df 91       	pop	r29
     4b8:	cf 91       	pop	r28
     4ba:	1f 91       	pop	r17
     4bc:	0c 94 e6 0f 	jmp	0x1fcc	; 0x1fcc <delay>

000004c0 <_ZN15ElcanLCDManager10show_readyEPc>:
     4c0:	0f 93       	push	r16
     4c2:	1f 93       	push	r17
     4c4:	cf 93       	push	r28
     4c6:	df 93       	push	r29
     4c8:	ec 01       	movw	r28, r24
     4ca:	8b 01       	movw	r16, r22
     4cc:	40 e0       	ldi	r20, 0x00	; 0
     4ce:	60 e0       	ldi	r22, 0x00	; 0
     4d0:	0e 94 9e 11 	call	0x233c	; 0x233c <_ZN17LiquidCrystal_I2C9setCursorEhh>
     4d4:	b8 01       	movw	r22, r16
     4d6:	ce 01       	movw	r24, r28
     4d8:	0e 94 ed 0a 	call	0x15da	; 0x15da <_ZN5Print5printEPKc>
     4dc:	41 e0       	ldi	r20, 0x01	; 1
     4de:	60 e0       	ldi	r22, 0x00	; 0
     4e0:	ce 01       	movw	r24, r28
     4e2:	0e 94 9e 11 	call	0x233c	; 0x233c <_ZN17LiquidCrystal_I2C9setCursorEhh>
     4e6:	65 e3       	ldi	r22, 0x35	; 53
     4e8:	71 e0       	ldi	r23, 0x01	; 1
     4ea:	ce 01       	movw	r24, r28
     4ec:	df 91       	pop	r29
     4ee:	cf 91       	pop	r28
     4f0:	1f 91       	pop	r17
     4f2:	0f 91       	pop	r16
     4f4:	0c 94 c9 0a 	jmp	0x1592	; 0x1592 <_ZN5Print5printEPK19__FlashStringHelper>

000004f8 <_ZN15ElcanLCDManager12show_messageEPc>:
     4f8:	af 92       	push	r10
     4fa:	bf 92       	push	r11
     4fc:	cf 92       	push	r12
     4fe:	df 92       	push	r13
     500:	ef 92       	push	r14
     502:	ff 92       	push	r15
     504:	0f 93       	push	r16
     506:	1f 93       	push	r17
     508:	cf 93       	push	r28
     50a:	df 93       	push	r29
     50c:	cd b7       	in	r28, 0x3d	; 61
     50e:	de b7       	in	r29, 0x3e	; 62
     510:	61 97       	sbiw	r28, 0x11	; 17
     512:	0f b6       	in	r0, 0x3f	; 63
     514:	f8 94       	cli
     516:	de bf       	out	0x3e, r29	; 62
     518:	0f be       	out	0x3f, r0	; 63
     51a:	cd bf       	out	0x3d, r28	; 61
     51c:	8c 01       	movw	r16, r24
     51e:	6b 01       	movw	r12, r22
     520:	0e 94 90 11 	call	0x2320	; 0x2320 <_ZN17LiquidCrystal_I2C5clearEv>
     524:	c8 01       	movw	r24, r16
     526:	0e 94 4a 11 	call	0x2294	; 0x2294 <_ZN17LiquidCrystal_I2C9backlightEv>
     52a:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <millis>
     52e:	f8 01       	movw	r30, r16
     530:	64 87       	std	Z+12, r22	; 0x0c
     532:	75 87       	std	Z+13, r23	; 0x0d
     534:	86 87       	std	Z+14, r24	; 0x0e
     536:	97 87       	std	Z+15, r25	; 0x0f
     538:	f6 01       	movw	r30, r12
     53a:	01 90       	ld	r0, Z+
     53c:	00 20       	and	r0, r0
     53e:	e9 f7       	brne	.-6      	; 0x53a <_ZN15ElcanLCDManager12show_messageEPc+0x42>
     540:	31 97       	sbiw	r30, 0x01	; 1
     542:	7f 01       	movw	r14, r30
     544:	ec 18       	sub	r14, r12
     546:	fd 08       	sbc	r15, r13
     548:	f0 e1       	ldi	r31, 0x10	; 16
     54a:	fe 15       	cp	r31, r14
     54c:	40 f5       	brcc	.+80     	; 0x59e <_ZN15ElcanLCDManager12show_messageEPc+0xa6>
     54e:	40 e0       	ldi	r20, 0x00	; 0
     550:	60 e0       	ldi	r22, 0x00	; 0
     552:	c8 01       	movw	r24, r16
     554:	0e 94 9e 11 	call	0x233c	; 0x233c <_ZN17LiquidCrystal_I2C9setCursorEhh>
     558:	2f e0       	ldi	r18, 0x0F	; 15
     55a:	30 e0       	ldi	r19, 0x00	; 0
     55c:	40 e0       	ldi	r20, 0x00	; 0
     55e:	50 e0       	ldi	r21, 0x00	; 0
     560:	ce 01       	movw	r24, r28
     562:	01 96       	adiw	r24, 0x01	; 1
     564:	5c 01       	movw	r10, r24
     566:	bc 01       	movw	r22, r24
     568:	c6 01       	movw	r24, r12
     56a:	0e 94 08 09 	call	0x1210	; 0x1210 <_Z9substringPcS_ii>
     56e:	b5 01       	movw	r22, r10
     570:	c8 01       	movw	r24, r16
     572:	0e 94 ed 0a 	call	0x15da	; 0x15da <_ZN5Print5printEPKc>
     576:	81 e1       	ldi	r24, 0x11	; 17
     578:	f5 01       	movw	r30, r10
     57a:	11 92       	st	Z+, r1
     57c:	8a 95       	dec	r24
     57e:	e9 f7       	brne	.-6      	; 0x57a <_ZN15ElcanLCDManager12show_messageEPc+0x82>
     580:	41 e0       	ldi	r20, 0x01	; 1
     582:	60 e0       	ldi	r22, 0x00	; 0
     584:	c8 01       	movw	r24, r16
     586:	0e 94 9e 11 	call	0x233c	; 0x233c <_ZN17LiquidCrystal_I2C9setCursorEhh>
     58a:	97 01       	movw	r18, r14
     58c:	33 27       	eor	r19, r19
     58e:	40 e1       	ldi	r20, 0x10	; 16
     590:	50 e0       	ldi	r21, 0x00	; 0
     592:	b5 01       	movw	r22, r10
     594:	c6 01       	movw	r24, r12
     596:	0e 94 08 09 	call	0x1210	; 0x1210 <_Z9substringPcS_ii>
     59a:	b5 01       	movw	r22, r10
     59c:	01 c0       	rjmp	.+2      	; 0x5a0 <_ZN15ElcanLCDManager12show_messageEPc+0xa8>
     59e:	b6 01       	movw	r22, r12
     5a0:	c8 01       	movw	r24, r16
     5a2:	0e 94 ed 0a 	call	0x15da	; 0x15da <_ZN5Print5printEPKc>
     5a6:	61 96       	adiw	r28, 0x11	; 17
     5a8:	0f b6       	in	r0, 0x3f	; 63
     5aa:	f8 94       	cli
     5ac:	de bf       	out	0x3e, r29	; 62
     5ae:	0f be       	out	0x3f, r0	; 63
     5b0:	cd bf       	out	0x3d, r28	; 61
     5b2:	df 91       	pop	r29
     5b4:	cf 91       	pop	r28
     5b6:	1f 91       	pop	r17
     5b8:	0f 91       	pop	r16
     5ba:	ff 90       	pop	r15
     5bc:	ef 90       	pop	r14
     5be:	df 90       	pop	r13
     5c0:	cf 90       	pop	r12
     5c2:	bf 90       	pop	r11
     5c4:	af 90       	pop	r10
     5c6:	08 95       	ret

000005c8 <_ZN15ElcanLCDManager11check_lightEv>:
	} else {
		this->lcd.print(msg);
	}
}

void ElcanLCDManager::check_light() {
     5c8:	0f 93       	push	r16
     5ca:	1f 93       	push	r17
     5cc:	cf 93       	push	r28
     5ce:	df 93       	push	r29
	if (this->backlightStart > 0) {
     5d0:	fc 01       	movw	r30, r24
     5d2:	44 85       	ldd	r20, Z+12	; 0x0c
     5d4:	55 85       	ldd	r21, Z+13	; 0x0d
     5d6:	66 85       	ldd	r22, Z+14	; 0x0e
     5d8:	77 85       	ldd	r23, Z+15	; 0x0f
     5da:	14 16       	cp	r1, r20
     5dc:	15 06       	cpc	r1, r21
     5de:	16 06       	cpc	r1, r22
     5e0:	17 06       	cpc	r1, r23
     5e2:	cc f4       	brge	.+50     	; 0x616 <_ZN15ElcanLCDManager11check_lightEv+0x4e>
     5e4:	ec 01       	movw	r28, r24
		if (millis() - backlightStart > LIGHT_DURATION) {
     5e6:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <millis>
     5ea:	0c 85       	ldd	r16, Y+12	; 0x0c
     5ec:	1d 85       	ldd	r17, Y+13	; 0x0d
     5ee:	2e 85       	ldd	r18, Y+14	; 0x0e
     5f0:	3f 85       	ldd	r19, Y+15	; 0x0f
     5f2:	dc 01       	movw	r26, r24
     5f4:	cb 01       	movw	r24, r22
     5f6:	80 1b       	sub	r24, r16
     5f8:	91 0b       	sbc	r25, r17
     5fa:	a2 0b       	sbc	r26, r18
     5fc:	b3 0b       	sbc	r27, r19
     5fe:	81 3a       	cpi	r24, 0xA1	; 161
     600:	9f 40       	sbci	r25, 0x0F	; 15
     602:	a1 05       	cpc	r26, r1
     604:	b1 05       	cpc	r27, r1
     606:	38 f0       	brcs	.+14     	; 0x616 <_ZN15ElcanLCDManager11check_lightEv+0x4e>
			this->lcd.noBacklight();
     608:	ce 01       	movw	r24, r28
     60a:	0e 94 45 11 	call	0x228a	; 0x228a <_ZN17LiquidCrystal_I2C11noBacklightEv>
			this->backlightStart = 0;
     60e:	1c 86       	std	Y+12, r1	; 0x0c
     610:	1d 86       	std	Y+13, r1	; 0x0d
     612:	1e 86       	std	Y+14, r1	; 0x0e
     614:	1f 86       	std	Y+15, r1	; 0x0f
		}
	}
}
     616:	df 91       	pop	r29
     618:	cf 91       	pop	r28
     61a:	1f 91       	pop	r17
     61c:	0f 91       	pop	r16
     61e:	08 95       	ret

00000620 <_ZN15ElcanLCDManager8light_onEv>:

void ElcanLCDManager::light_on() {
     620:	cf 93       	push	r28
     622:	df 93       	push	r29
     624:	ec 01       	movw	r28, r24
	this->lcd.backlight();
     626:	0e 94 4a 11 	call	0x2294	; 0x2294 <_ZN17LiquidCrystal_I2C9backlightEv>
	this->backlightStart = millis();
     62a:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <millis>
     62e:	6c 87       	std	Y+12, r22	; 0x0c
     630:	7d 87       	std	Y+13, r23	; 0x0d
     632:	8e 87       	std	Y+14, r24	; 0x0e
     634:	9f 87       	std	Y+15, r25	; 0x0f
}
     636:	df 91       	pop	r29
     638:	cf 91       	pop	r28
     63a:	08 95       	ret

0000063c <_ZN5Print5writeEPKc>:
  empty_serial_buffer();
  Serial.write("I");
  Serial.flush();
  pos = Serial.readBytesUntil('\r', result, IP_ADDRESS_LEN);
  result[pos] = 0x00;
}
     63c:	61 15       	cp	r22, r1
     63e:	71 05       	cpc	r23, r1
     640:	79 f0       	breq	.+30     	; 0x660 <_ZN5Print5writeEPKc+0x24>
     642:	fb 01       	movw	r30, r22
     644:	01 90       	ld	r0, Z+
     646:	00 20       	and	r0, r0
     648:	e9 f7       	brne	.-6      	; 0x644 <_ZN5Print5writeEPKc+0x8>
     64a:	31 97       	sbiw	r30, 0x01	; 1
     64c:	af 01       	movw	r20, r30
     64e:	46 1b       	sub	r20, r22
     650:	57 0b       	sbc	r21, r23
     652:	dc 01       	movw	r26, r24
     654:	ed 91       	ld	r30, X+
     656:	fc 91       	ld	r31, X
     658:	02 80       	ldd	r0, Z+2	; 0x02
     65a:	f3 81       	ldd	r31, Z+3	; 0x03
     65c:	e0 2d       	mov	r30, r0
     65e:	09 94       	ijmp
     660:	80 e0       	ldi	r24, 0x00	; 0
     662:	90 e0       	ldi	r25, 0x00	; 0
     664:	08 95       	ret

00000666 <_ZN9ElcanWifiC1Ev>:
     666:	fc 01       	movw	r30, r24
     668:	11 82       	std	Z+1, r1	; 0x01
     66a:	08 95       	ret

0000066c <_ZN9ElcanWifi19empty_serial_bufferEv>:
     66c:	80 ed       	ldi	r24, 0xD0	; 208
     66e:	92 e0       	ldi	r25, 0x02	; 2
     670:	0e 94 20 09 	call	0x1240	; 0x1240 <_ZN14HardwareSerial9availableEv>
     674:	89 2b       	or	r24, r25
     676:	29 f0       	breq	.+10     	; 0x682 <_ZN9ElcanWifi19empty_serial_bufferEv+0x16>
     678:	80 ed       	ldi	r24, 0xD0	; 208
     67a:	92 e0       	ldi	r25, 0x02	; 2
     67c:	0e 94 3a 09 	call	0x1274	; 0x1274 <_ZN14HardwareSerial4readEv>
     680:	f5 cf       	rjmp	.-22     	; 0x66c <_ZN9ElcanWifi19empty_serial_bufferEv>
     682:	08 95       	ret

00000684 <_ZN9ElcanWifi12readCardDataEPcc>:
  while(!Serial.available() && count++ < 255);
  tmp = Serial.read();
  return tmp;
}

void ElcanWifi::readCardData(char *result, char maxLen) {
     684:	ef 92       	push	r14
     686:	ff 92       	push	r15
     688:	0f 93       	push	r16
     68a:	1f 93       	push	r17
     68c:	cf 93       	push	r28
     68e:	df 93       	push	r29
     690:	7c 01       	movw	r14, r24
     692:	eb 01       	movw	r28, r22
  char pos;
  memset(result, 0, maxLen);
     694:	04 2f       	mov	r16, r20
     696:	10 e0       	ldi	r17, 0x00	; 0
     698:	a8 01       	movw	r20, r16
     69a:	60 e0       	ldi	r22, 0x00	; 0
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	ce 01       	movw	r24, r28
     6a0:	0e 94 31 1f 	call	0x3e62	; 0x3e62 <memset>
  Serial.write("T");
     6a4:	6d e5       	ldi	r22, 0x5D	; 93
     6a6:	71 e0       	ldi	r23, 0x01	; 1
     6a8:	80 ed       	ldi	r24, 0xD0	; 208
     6aa:	92 e0       	ldi	r25, 0x02	; 2
     6ac:	0e 94 1e 03 	call	0x63c	; 0x63c <_ZN5Print5writeEPKc>
  Serial.flush();
     6b0:	80 ed       	ldi	r24, 0xD0	; 208
     6b2:	92 e0       	ldi	r25, 0x02	; 2
     6b4:	0e 94 da 09 	call	0x13b4	; 0x13b4 <_ZN14HardwareSerial5flushEv>
  delay(1);
     6b8:	61 e0       	ldi	r22, 0x01	; 1
     6ba:	70 e0       	ldi	r23, 0x00	; 0
     6bc:	80 e0       	ldi	r24, 0x00	; 0
     6be:	90 e0       	ldi	r25, 0x00	; 0
     6c0:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <delay>
  pos = Serial.readBytesUntil('\r', result, maxLen);
     6c4:	98 01       	movw	r18, r16
     6c6:	ae 01       	movw	r20, r28
     6c8:	6d e0       	ldi	r22, 0x0D	; 13
     6ca:	80 ed       	ldi	r24, 0xD0	; 208
     6cc:	92 e0       	ldi	r25, 0x02	; 2
     6ce:	0e 94 24 0c 	call	0x1848	; 0x1848 <_ZN6Stream14readBytesUntilEcPcj>
     6d2:	18 2f       	mov	r17, r24
  empty_serial_buffer();
     6d4:	c7 01       	movw	r24, r14
     6d6:	0e 94 36 03 	call	0x66c	; 0x66c <_ZN9ElcanWifi19empty_serial_bufferEv>
  result[pos] = 0x00;
     6da:	c1 0f       	add	r28, r17
     6dc:	d1 1d       	adc	r29, r1
     6de:	18 82       	st	Y, r1
}
     6e0:	df 91       	pop	r29
     6e2:	cf 91       	pop	r28
     6e4:	1f 91       	pop	r17
     6e6:	0f 91       	pop	r16
     6e8:	ff 90       	pop	r15
     6ea:	ef 90       	pop	r14
     6ec:	08 95       	ret

000006ee <_ZN9ElcanWifi4pollEv>:

int ElcanWifi::available() {
  return Serial.available();
}

char ElcanWifi::poll() {
     6ee:	cf 93       	push	r28
  char tmp;
  char count = 0;
  empty_serial_buffer();
     6f0:	0e 94 36 03 	call	0x66c	; 0x66c <_ZN9ElcanWifi19empty_serial_bufferEv>
  Serial.write("P");
     6f4:	6f e5       	ldi	r22, 0x5F	; 95
     6f6:	71 e0       	ldi	r23, 0x01	; 1
     6f8:	80 ed       	ldi	r24, 0xD0	; 208
     6fa:	92 e0       	ldi	r25, 0x02	; 2
     6fc:	0e 94 1e 03 	call	0x63c	; 0x63c <_ZN5Print5writeEPKc>
  Serial.flush();
     700:	80 ed       	ldi	r24, 0xD0	; 208
     702:	92 e0       	ldi	r25, 0x02	; 2
     704:	0e 94 da 09 	call	0x13b4	; 0x13b4 <_ZN14HardwareSerial5flushEv>
     708:	c0 e0       	ldi	r28, 0x00	; 0
  while(!Serial.available() && count++ < 255);
     70a:	80 ed       	ldi	r24, 0xD0	; 208
     70c:	92 e0       	ldi	r25, 0x02	; 2
     70e:	0e 94 20 09 	call	0x1240	; 0x1240 <_ZN14HardwareSerial9availableEv>
     712:	89 2b       	or	r24, r25
     714:	11 f4       	brne	.+4      	; 0x71a <_ZN9ElcanWifi4pollEv+0x2c>
     716:	c1 50       	subi	r28, 0x01	; 1
     718:	c1 f7       	brne	.-16     	; 0x70a <_ZN9ElcanWifi4pollEv+0x1c>
  tmp = Serial.read();
     71a:	80 ed       	ldi	r24, 0xD0	; 208
     71c:	92 e0       	ldi	r25, 0x02	; 2
     71e:	0e 94 3a 09 	call	0x1274	; 0x1274 <_ZN14HardwareSerial4readEv>
  return tmp;
}
     722:	cf 91       	pop	r28
     724:	08 95       	ret

00000726 <_ZN9ElcanWifi20sendIntrussionAttempEPc>:
  while(Serial.available()) {
    t = Serial.read();
  }
}

void ElcanWifi::sendIntrussionAttemp(char *data) {
     726:	df 92       	push	r13
     728:	ef 92       	push	r14
     72a:	ff 92       	push	r15
     72c:	0f 93       	push	r16
     72e:	1f 93       	push	r17
     730:	cf 93       	push	r28
     732:	df 93       	push	r29
     734:	cd b7       	in	r28, 0x3d	; 61
     736:	de b7       	in	r29, 0x3e	; 62
     738:	a0 97       	sbiw	r28, 0x20	; 32
     73a:	0f b6       	in	r0, 0x3f	; 63
     73c:	f8 94       	cli
     73e:	de bf       	out	0x3e, r29	; 62
     740:	0f be       	out	0x3f, r0	; 63
     742:	cd bf       	out	0x3d, r28	; 61
  char text[32];
  char len = strlen(data);
     744:	fb 01       	movw	r30, r22
     746:	01 90       	ld	r0, Z+
     748:	00 20       	and	r0, r0
     74a:	e9 f7       	brne	.-6      	; 0x746 <_ZN9ElcanWifi20sendIntrussionAttempEPc+0x20>
     74c:	31 97       	sbiw	r30, 0x01	; 1
     74e:	e6 1b       	sub	r30, r22
     750:	f7 0b       	sbc	r31, r23
     752:	de 2e       	mov	r13, r30
  memset(text,0,sizeof(text));
     754:	ce 01       	movw	r24, r28
     756:	01 96       	adiw	r24, 0x01	; 1
     758:	7c 01       	movw	r14, r24
     75a:	80 e2       	ldi	r24, 0x20	; 32
     75c:	d7 01       	movw	r26, r14
     75e:	1d 92       	st	X+, r1
     760:	8a 95       	dec	r24
     762:	e9 f7       	brne	.-6      	; 0x75e <_ZN9ElcanWifi20sendIntrussionAttempEPc+0x38>
  text[0]='N';
     764:	8e e4       	ldi	r24, 0x4E	; 78
     766:	89 83       	std	Y+1, r24	; 0x01
  memcpy(text+1, data, len); // 8 bytes: 4 cardID, 4 timestamp
     768:	af 01       	movw	r20, r30
     76a:	55 27       	eor	r21, r21
     76c:	ce 01       	movw	r24, r28
     76e:	02 96       	adiw	r24, 0x02	; 2
     770:	0e 94 28 1f 	call	0x3e50	; 0x3e50 <memcpy>
     774:	87 01       	movw	r16, r14
  for (char b=0; b < len; b++) {
     776:	80 2f       	mov	r24, r16
     778:	8e 19       	sub	r24, r14
     77a:	8d 15       	cp	r24, r13
     77c:	40 f4       	brcc	.+16     	; 0x78e <_ZN9ElcanWifi20sendIntrussionAttempEPc+0x68>
    Serial.write(text[b]);
     77e:	f8 01       	movw	r30, r16
     780:	61 91       	ld	r22, Z+
     782:	8f 01       	movw	r16, r30
    virtual void flush(void);
    virtual size_t write(uint8_t);
    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
     784:	80 ed       	ldi	r24, 0xD0	; 208
     786:	92 e0       	ldi	r25, 0x02	; 2
     788:	0e 94 8d 09 	call	0x131a	; 0x131a <_ZN14HardwareSerial5writeEh>
  char text[32];
  char len = strlen(data);
  memset(text,0,sizeof(text));
  text[0]='N';
  memcpy(text+1, data, len); // 8 bytes: 4 cardID, 4 timestamp
  for (char b=0; b < len; b++) {
     78c:	f4 cf       	rjmp	.-24     	; 0x776 <_ZN9ElcanWifi20sendIntrussionAttempEPc+0x50>
    Serial.write(text[b]);
  }
  Serial.write(EOL);
     78e:	61 e6       	ldi	r22, 0x61	; 97
     790:	71 e0       	ldi	r23, 0x01	; 1
     792:	80 ed       	ldi	r24, 0xD0	; 208
     794:	92 e0       	ldi	r25, 0x02	; 2
     796:	0e 94 1e 03 	call	0x63c	; 0x63c <_ZN5Print5writeEPKc>
  Serial.flush();
     79a:	80 ed       	ldi	r24, 0xD0	; 208
     79c:	92 e0       	ldi	r25, 0x02	; 2
     79e:	0e 94 da 09 	call	0x13b4	; 0x13b4 <_ZN14HardwareSerial5flushEv>
}
     7a2:	a0 96       	adiw	r28, 0x20	; 32
     7a4:	0f b6       	in	r0, 0x3f	; 63
     7a6:	f8 94       	cli
     7a8:	de bf       	out	0x3e, r29	; 62
     7aa:	0f be       	out	0x3f, r0	; 63
     7ac:	cd bf       	out	0x3d, r28	; 61
     7ae:	df 91       	pop	r29
     7b0:	cf 91       	pop	r28
     7b2:	1f 91       	pop	r17
     7b4:	0f 91       	pop	r16
     7b6:	ff 90       	pop	r15
     7b8:	ef 90       	pop	r14
     7ba:	df 90       	pop	r13
     7bc:	08 95       	ret

000007be <_ZN11RfidManagerC1Ev>:
// Initialization code for the parts.
#include "rfid.h"

RfidManager::RfidManager() {
     7be:	0f 93       	push	r16
     7c0:	1f 93       	push	r17
     7c2:	cf 93       	push	r28
     7c4:	df 93       	push	r29
     7c6:	cd b7       	in	r28, 0x3d	; 61
     7c8:	de b7       	in	r29, 0x3e	; 62
     7ca:	60 97       	sbiw	r28, 0x10	; 16
     7cc:	0f b6       	in	r0, 0x3f	; 63
     7ce:	f8 94       	cli
     7d0:	de bf       	out	0x3e, r29	; 62
     7d2:	0f be       	out	0x3f, r0	; 63
     7d4:	cd bf       	out	0x3d, r28	; 61
     7d6:	8c 01       	movw	r16, r24
     7d8:	0e 94 db 12 	call	0x25b6	; 0x25b6 <_ZN7MFRC522C1Ev>
  memset(this->readCard, 0, sizeof(this->readCard));
     7dc:	f8 01       	movw	r30, r16
     7de:	70 96       	adiw	r30, 0x10	; 16
     7e0:	84 e0       	ldi	r24, 0x04	; 4
     7e2:	df 01       	movw	r26, r30
     7e4:	1d 92       	st	X+, r1
     7e6:	8a 95       	dec	r24
     7e8:	e9 f7       	brne	.-6      	; 0x7e4 <_ZN11RfidManagerC1Ev+0x26>
  this->mfrc522 = MFRC522(RFID_SS, RFID_RST);
     7ea:	49 e0       	ldi	r20, 0x09	; 9
     7ec:	6a e0       	ldi	r22, 0x0A	; 10
     7ee:	ce 01       	movw	r24, r28
     7f0:	01 96       	adiw	r24, 0x01	; 1
     7f2:	0e 94 e5 12 	call	0x25ca	; 0x25ca <_ZN7MFRC522C1Ehh>
	0xC1, 0x5B, 0x00, 0x2A, 0xD0, 0x75, 0xDE, 0x9E,
	0x51, 0x64, 0xAB, 0x3E, 0xE9, 0x15, 0xB5, 0xAB,
	0x56, 0x9A, 0x98, 0x82, 0x26, 0xEA, 0x2A, 0x62
};

class MFRC522 {
     7f6:	8c e0       	ldi	r24, 0x0C	; 12
     7f8:	fe 01       	movw	r30, r28
     7fa:	33 96       	adiw	r30, 0x03	; 3
     7fc:	d8 01       	movw	r26, r16
     7fe:	12 96       	adiw	r26, 0x02	; 2
     800:	01 90       	ld	r0, Z+
     802:	0d 92       	st	X+, r0
     804:	8a 95       	dec	r24
     806:	e1 f7       	brne	.-8      	; 0x800 <_ZN11RfidManagerC1Ev+0x42>
     808:	8f 85       	ldd	r24, Y+15	; 0x0f
     80a:	f8 01       	movw	r30, r16
     80c:	86 87       	std	Z+14, r24	; 0x0e
     80e:	88 89       	ldd	r24, Y+16	; 0x10
     810:	87 87       	std	Z+15, r24	; 0x0f
}
     812:	60 96       	adiw	r28, 0x10	; 16
     814:	0f b6       	in	r0, 0x3f	; 63
     816:	f8 94       	cli
     818:	de bf       	out	0x3e, r29	; 62
     81a:	0f be       	out	0x3f, r0	; 63
     81c:	cd bf       	out	0x3d, r28	; 61
     81e:	df 91       	pop	r29
     820:	cf 91       	pop	r28
     822:	1f 91       	pop	r17
     824:	0f 91       	pop	r16
     826:	08 95       	ret

00000828 <_ZN11RfidManager5beginEv>:

void RfidManager::begin() {
     828:	cf 93       	push	r28
     82a:	df 93       	push	r29
     82c:	ec 01       	movw	r28, r24
  this->mfrc522.PCD_Init();    // Initialize MFRC522 Hardware
     82e:	0e 94 09 14 	call	0x2812	; 0x2812 <_ZN7MFRC5228PCD_InitEv>
  this->mfrc522.PCD_SetAntennaGain(this->mfrc522.RxGain_max); // Max reading distance
     832:	60 e7       	ldi	r22, 0x70	; 112
     834:	ce 01       	movw	r24, r28
}
     836:	df 91       	pop	r29
     838:	cf 91       	pop	r28
  this->mfrc522 = MFRC522(RFID_SS, RFID_RST);
}

void RfidManager::begin() {
  this->mfrc522.PCD_Init();    // Initialize MFRC522 Hardware
  this->mfrc522.PCD_SetAntennaGain(this->mfrc522.RxGain_max); // Max reading distance
     83a:	0c 94 72 14 	jmp	0x28e4	; 0x28e4 <_ZN7MFRC52218PCD_SetAntennaGainEh>

0000083e <_ZN11RfidManager5getIDEv>:
}

unsigned char RfidManager::getID() {
     83e:	ef 92       	push	r14
     840:	ff 92       	push	r15
     842:	0f 93       	push	r16
     844:	1f 93       	push	r17
     846:	cf 93       	push	r28
     848:	df 93       	push	r29
     84a:	ec 01       	movw	r28, r24
  if ( ! this->mfrc522.PICC_IsNewCardPresent()) { //If a new PICC placed to RFID reader continue
     84c:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <_ZN7MFRC52221PICC_IsNewCardPresentEv>
     850:	81 11       	cpse	r24, r1
     852:	02 c0       	rjmp	.+4      	; 0x858 <_ZN11RfidManager5getIDEv+0x1a>
    return 0;
     854:	80 e0       	ldi	r24, 0x00	; 0
     856:	30 c0       	rjmp	.+96     	; 0x8b8 <_ZN11RfidManager5getIDEv+0x7a>
  }
  if ( ! this->mfrc522.PICC_ReadCardSerial()) {   //Since a PICC placed get Serial and continue
     858:	ce 01       	movw	r24, r28
     85a:	0e 94 44 12 	call	0x2488	; 0x2488 <_ZN7MFRC52219PICC_ReadCardSerialEv>
     85e:	88 23       	and	r24, r24
     860:	c9 f3       	breq	.-14     	; 0x854 <_ZN11RfidManager5getIDEv+0x16>
    return 0;
  }
  // every PICC as they have 4 byte UID
#ifdef DEBUG
  Serial.print("#");
     862:	69 e0       	ldi	r22, 0x09	; 9
     864:	71 e0       	ldi	r23, 0x01	; 1
     866:	80 ed       	ldi	r24, 0xD0	; 208
     868:	92 e0       	ldi	r25, 0x02	; 2
     86a:	0e 94 ed 0a 	call	0x15da	; 0x15da <_ZN5Print5printEPKc>
     86e:	8e 01       	movw	r16, r28
     870:	0d 5f       	subi	r16, 0xFD	; 253
     872:	1f 4f       	sbci	r17, 0xFF	; 255
     874:	7e 01       	movw	r14, r28
     876:	87 e0       	ldi	r24, 0x07	; 7
     878:	e8 0e       	add	r14, r24
     87a:	f1 1c       	adc	r15, r1
#endif
  for ( uint8_t i = 0; i < 4; i++) {  //
    this->readCard[i] = this->mfrc522.uid.uidByte[i];
     87c:	f8 01       	movw	r30, r16
     87e:	61 91       	ld	r22, Z+
     880:	8f 01       	movw	r16, r30
     882:	64 87       	std	Z+12, r22	; 0x0c
#ifdef DEBUG
    Serial.print(readCard[i], HEX);
     884:	70 e0       	ldi	r23, 0x00	; 0
     886:	40 e1       	ldi	r20, 0x10	; 16
     888:	50 e0       	ldi	r21, 0x00	; 0
     88a:	80 ed       	ldi	r24, 0xD0	; 208
     88c:	92 e0       	ldi	r25, 0x02	; 2
     88e:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <_ZN5Print5printEii>
    Serial.print("-");
     892:	6b e0       	ldi	r22, 0x0B	; 11
     894:	71 e0       	ldi	r23, 0x01	; 1
     896:	80 ed       	ldi	r24, 0xD0	; 208
     898:	92 e0       	ldi	r25, 0x02	; 2
     89a:	0e 94 ed 0a 	call	0x15da	; 0x15da <_ZN5Print5printEPKc>
  }
  // every PICC as they have 4 byte UID
#ifdef DEBUG
  Serial.print("#");
#endif
  for ( uint8_t i = 0; i < 4; i++) {  //
     89e:	0e 15       	cp	r16, r14
     8a0:	1f 05       	cpc	r17, r15
     8a2:	61 f7       	brne	.-40     	; 0x87c <_ZN11RfidManager5getIDEv+0x3e>
    Serial.print(readCard[i], HEX);
    Serial.print("-");
#endif
  }
#ifdef DEBUG
    Serial.println(" ");
     8a4:	66 e9       	ldi	r22, 0x96	; 150
     8a6:	71 e0       	ldi	r23, 0x01	; 1
     8a8:	80 ed       	ldi	r24, 0xD0	; 208
     8aa:	92 e0       	ldi	r25, 0x02	; 2
     8ac:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <_ZN5Print7printlnEPKc>
#endif
  this->mfrc522.PICC_HaltA(); // Stop reading
     8b0:	ce 01       	movw	r24, r28
     8b2:	0e 94 8b 17 	call	0x2f16	; 0x2f16 <_ZN7MFRC52210PICC_HaltAEv>
  return 1;
     8b6:	81 e0       	ldi	r24, 0x01	; 1
}
     8b8:	df 91       	pop	r29
     8ba:	cf 91       	pop	r28
     8bc:	1f 91       	pop	r17
     8be:	0f 91       	pop	r16
     8c0:	ff 90       	pop	r15
     8c2:	ef 90       	pop	r14
     8c4:	08 95       	ret

000008c6 <_ZN8ElcanRtcC1Ev>:
#include <Arduino.h>
#include "rtc.h"
#include "definitions.h"

ElcanRtc::ElcanRtc() {
     8c6:	08 95       	ret

000008c8 <_ZN8ElcanRtc10initializeEv>:
}

void ElcanRtc::initialize() {
     8c8:	0f 93       	push	r16
     8ca:	1f 93       	push	r17
     8cc:	cf 93       	push	r28
     8ce:	df 93       	push	r29
     8d0:	00 d0       	rcall	.+0      	; 0x8d2 <_ZN8ElcanRtc10initializeEv+0xa>
     8d2:	00 d0       	rcall	.+0      	; 0x8d4 <_ZN8ElcanRtc10initializeEv+0xc>
     8d4:	00 d0       	rcall	.+0      	; 0x8d6 <_ZN8ElcanRtc10initializeEv+0xe>
     8d6:	cd b7       	in	r28, 0x3d	; 61
     8d8:	de b7       	in	r29, 0x3e	; 62
     8da:	8c 01       	movw	r16, r24
  bool exit_init = false;
  unsigned char init_return;
  char attemps = 0;
  for (attemps = 0 ; attemps < 2; attemps++) {
    init_return = this->rtc.begin();
     8dc:	0e 94 75 19 	call	0x32ea	; 0x32ea <_ZN10RTC_DS32315beginEv>
    if (init_return) {
     8e0:	88 23       	and	r24, r24
     8e2:	91 f0       	breq	.+36     	; 0x908 <__stack+0x9>
      if (this->rtc.lostPower()) {
     8e4:	c8 01       	movw	r24, r16
     8e6:	0e 94 b6 1a 	call	0x356c	; 0x356c <_ZN10RTC_DS32319lostPowerEv>
     8ea:	88 23       	and	r24, r24
     8ec:	91 f0       	breq	.+36     	; 0x912 <__stack+0x13>
      // Fijar a fecha y hora de compilacion
        this->rtc.adjust(DateTime(FS(__DATE__), FS(__TIME__)));
     8ee:	46 e6       	ldi	r20, 0x66	; 102
     8f0:	51 e0       	ldi	r21, 0x01	; 1
     8f2:	6f e6       	ldi	r22, 0x6F	; 111
     8f4:	71 e0       	ldi	r23, 0x01	; 1
     8f6:	ce 01       	movw	r24, r28
     8f8:	01 96       	adiw	r24, 0x01	; 1
     8fa:	0e 94 99 18 	call	0x3132	; 0x3132 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_>
     8fe:	ce 01       	movw	r24, r28
     900:	01 96       	adiw	r24, 0x01	; 1
     902:	0e 94 22 1a 	call	0x3444	; 0x3444 <_ZN10RTC_DS32316adjustERK8DateTime>
      }
      break;
    }
  }
}
     906:	05 c0       	rjmp	.+10     	; 0x912 <__stack+0x13>
void ElcanRtc::initialize() {
  bool exit_init = false;
  unsigned char init_return;
  char attemps = 0;
  for (attemps = 0 ; attemps < 2; attemps++) {
    init_return = this->rtc.begin();
     908:	c8 01       	movw	r24, r16
     90a:	0e 94 75 19 	call	0x32ea	; 0x32ea <_ZN10RTC_DS32315beginEv>
    if (init_return) {
     90e:	81 11       	cpse	r24, r1
     910:	e9 cf       	rjmp	.-46     	; 0x8e4 <_ZN8ElcanRtc10initializeEv+0x1c>
        this->rtc.adjust(DateTime(FS(__DATE__), FS(__TIME__)));
      }
      break;
    }
  }
}
     912:	26 96       	adiw	r28, 0x06	; 6
     914:	0f b6       	in	r0, 0x3f	; 63
     916:	f8 94       	cli
     918:	de bf       	out	0x3e, r29	; 62
     91a:	0f be       	out	0x3f, r0	; 63
     91c:	cd bf       	out	0x3d, r28	; 61
     91e:	df 91       	pop	r29
     920:	cf 91       	pop	r28
     922:	1f 91       	pop	r17
     924:	0f 91       	pop	r16
     926:	08 95       	ret

00000928 <_ZN8ElcanRtc3nowEv>:

DateTime ElcanRtc::now() {
     928:	cf 93       	push	r28
     92a:	df 93       	push	r29
     92c:	ec 01       	movw	r28, r24
  return this->rtc.now();
     92e:	0e 94 7b 19 	call	0x32f6	; 0x32f6 <_ZN10RTC_DS32313nowEv>
}
     932:	ce 01       	movw	r24, r28
     934:	df 91       	pop	r29
     936:	cf 91       	pop	r28
     938:	08 95       	ret

0000093a <_ZN8ElcanRtc15split_date_timeEPc>:
    this->rtc.adjust(stamp);
  }
  CLEAR_SERIAL
}

DateTime ElcanRtc::split_date_time(char *stamp) {
     93a:	8f 92       	push	r8
     93c:	9f 92       	push	r9
     93e:	af 92       	push	r10
     940:	bf 92       	push	r11
     942:	cf 92       	push	r12
     944:	ef 92       	push	r14
     946:	ff 92       	push	r15
     948:	0f 93       	push	r16
     94a:	1f 93       	push	r17
     94c:	cf 93       	push	r28
     94e:	df 93       	push	r29
     950:	00 d0       	rcall	.+0      	; 0x952 <_ZN8ElcanRtc15split_date_timeEPc+0x18>
     952:	cd b7       	in	r28, 0x3d	; 61
     954:	de b7       	in	r29, 0x3e	; 62
     956:	5c 01       	movw	r10, r24
     958:	ca 01       	movw	r24, r20
  const char chp[2] = "-";
     95a:	2d e2       	ldi	r18, 0x2D	; 45
     95c:	30 e0       	ldi	r19, 0x00	; 0
     95e:	3a 83       	std	Y+2, r19	; 0x02
     960:	29 83       	std	Y+1, r18	; 0x01
  uint8_t day;
  uint8_t hour;
  uint8_t min;
  uint8_t sec;
  char *section;
  section = strtok(stamp, chp);
     962:	be 01       	movw	r22, r28
     964:	6f 5f       	subi	r22, 0xFF	; 255
     966:	7f 4f       	sbci	r23, 0xFF	; 255
     968:	0e 94 23 1f 	call	0x3e46	; 0x3e46 <strtok>
  year = atoi(section);
     96c:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <atoi>
     970:	4c 01       	movw	r8, r24
  section = strtok(NULL, chp);
     972:	be 01       	movw	r22, r28
     974:	6f 5f       	subi	r22, 0xFF	; 255
     976:	7f 4f       	sbci	r23, 0xFF	; 255
     978:	80 e0       	ldi	r24, 0x00	; 0
     97a:	90 e0       	ldi	r25, 0x00	; 0
     97c:	0e 94 23 1f 	call	0x3e46	; 0x3e46 <strtok>
  month = atoi(section);
     980:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <atoi>
     984:	18 2f       	mov	r17, r24
  section = strtok(NULL, chp);
     986:	be 01       	movw	r22, r28
     988:	6f 5f       	subi	r22, 0xFF	; 255
     98a:	7f 4f       	sbci	r23, 0xFF	; 255
     98c:	80 e0       	ldi	r24, 0x00	; 0
     98e:	90 e0       	ldi	r25, 0x00	; 0
     990:	0e 94 23 1f 	call	0x3e46	; 0x3e46 <strtok>
  day = atoi(section);
     994:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <atoi>
     998:	f8 2e       	mov	r15, r24
  section = strtok(NULL, chp);
     99a:	be 01       	movw	r22, r28
     99c:	6f 5f       	subi	r22, 0xFF	; 255
     99e:	7f 4f       	sbci	r23, 0xFF	; 255
     9a0:	80 e0       	ldi	r24, 0x00	; 0
     9a2:	90 e0       	ldi	r25, 0x00	; 0
     9a4:	0e 94 23 1f 	call	0x3e46	; 0x3e46 <strtok>
  hour = atoi(section);
     9a8:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <atoi>
     9ac:	08 2f       	mov	r16, r24
  section = strtok(NULL, chp);
     9ae:	be 01       	movw	r22, r28
     9b0:	6f 5f       	subi	r22, 0xFF	; 255
     9b2:	7f 4f       	sbci	r23, 0xFF	; 255
     9b4:	80 e0       	ldi	r24, 0x00	; 0
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	0e 94 23 1f 	call	0x3e46	; 0x3e46 <strtok>
  min = atoi(section);
     9bc:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <atoi>
     9c0:	e8 2e       	mov	r14, r24
  section = strtok(NULL, chp);
     9c2:	be 01       	movw	r22, r28
     9c4:	6f 5f       	subi	r22, 0xFF	; 255
     9c6:	7f 4f       	sbci	r23, 0xFF	; 255
     9c8:	80 e0       	ldi	r24, 0x00	; 0
     9ca:	90 e0       	ldi	r25, 0x00	; 0
     9cc:	0e 94 23 1f 	call	0x3e46	; 0x3e46 <strtok>
  sec = atoi(section);
     9d0:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <atoi>
     9d4:	c8 2e       	mov	r12, r24
#ifdef DEBUG
  Serial.print("#");
     9d6:	69 e0       	ldi	r22, 0x09	; 9
     9d8:	71 e0       	ldi	r23, 0x01	; 1
     9da:	80 ed       	ldi	r24, 0xD0	; 208
     9dc:	92 e0       	ldi	r25, 0x02	; 2
     9de:	0e 94 ed 0a 	call	0x15da	; 0x15da <_ZN5Print5printEPKc>
  Serial.print(year);
     9e2:	4a e0       	ldi	r20, 0x0A	; 10
     9e4:	50 e0       	ldi	r21, 0x00	; 0
     9e6:	b4 01       	movw	r22, r8
     9e8:	80 ed       	ldi	r24, 0xD0	; 208
     9ea:	92 e0       	ldi	r25, 0x02	; 2
     9ec:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <_ZN5Print5printEji>
  Serial.print("-");
     9f0:	6b e0       	ldi	r22, 0x0B	; 11
     9f2:	71 e0       	ldi	r23, 0x01	; 1
     9f4:	80 ed       	ldi	r24, 0xD0	; 208
     9f6:	92 e0       	ldi	r25, 0x02	; 2
     9f8:	0e 94 ed 0a 	call	0x15da	; 0x15da <_ZN5Print5printEPKc>
  Serial.print(month);
     9fc:	4a e0       	ldi	r20, 0x0A	; 10
     9fe:	50 e0       	ldi	r21, 0x00	; 0
     a00:	61 2f       	mov	r22, r17
     a02:	80 ed       	ldi	r24, 0xD0	; 208
     a04:	92 e0       	ldi	r25, 0x02	; 2
     a06:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <_ZN5Print5printEhi>
  Serial.print("-");
     a0a:	6b e0       	ldi	r22, 0x0B	; 11
     a0c:	71 e0       	ldi	r23, 0x01	; 1
     a0e:	80 ed       	ldi	r24, 0xD0	; 208
     a10:	92 e0       	ldi	r25, 0x02	; 2
     a12:	0e 94 ed 0a 	call	0x15da	; 0x15da <_ZN5Print5printEPKc>
  Serial.print(day);
     a16:	4a e0       	ldi	r20, 0x0A	; 10
     a18:	50 e0       	ldi	r21, 0x00	; 0
     a1a:	6f 2d       	mov	r22, r15
     a1c:	80 ed       	ldi	r24, 0xD0	; 208
     a1e:	92 e0       	ldi	r25, 0x02	; 2
     a20:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <_ZN5Print5printEhi>
  Serial.print("#");
     a24:	69 e0       	ldi	r22, 0x09	; 9
     a26:	71 e0       	ldi	r23, 0x01	; 1
     a28:	80 ed       	ldi	r24, 0xD0	; 208
     a2a:	92 e0       	ldi	r25, 0x02	; 2
     a2c:	0e 94 ed 0a 	call	0x15da	; 0x15da <_ZN5Print5printEPKc>
  Serial.print(hour);
     a30:	4a e0       	ldi	r20, 0x0A	; 10
     a32:	50 e0       	ldi	r21, 0x00	; 0
     a34:	60 2f       	mov	r22, r16
     a36:	80 ed       	ldi	r24, 0xD0	; 208
     a38:	92 e0       	ldi	r25, 0x02	; 2
     a3a:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <_ZN5Print5printEhi>
  Serial.print(":");
     a3e:	6b e7       	ldi	r22, 0x7B	; 123
     a40:	71 e0       	ldi	r23, 0x01	; 1
     a42:	80 ed       	ldi	r24, 0xD0	; 208
     a44:	92 e0       	ldi	r25, 0x02	; 2
     a46:	0e 94 ed 0a 	call	0x15da	; 0x15da <_ZN5Print5printEPKc>
  Serial.print(min);
     a4a:	4a e0       	ldi	r20, 0x0A	; 10
     a4c:	50 e0       	ldi	r21, 0x00	; 0
     a4e:	6e 2d       	mov	r22, r14
     a50:	80 ed       	ldi	r24, 0xD0	; 208
     a52:	92 e0       	ldi	r25, 0x02	; 2
     a54:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <_ZN5Print5printEhi>
  Serial.print(":");
     a58:	6b e7       	ldi	r22, 0x7B	; 123
     a5a:	71 e0       	ldi	r23, 0x01	; 1
     a5c:	80 ed       	ldi	r24, 0xD0	; 208
     a5e:	92 e0       	ldi	r25, 0x02	; 2
     a60:	0e 94 ed 0a 	call	0x15da	; 0x15da <_ZN5Print5printEPKc>
  Serial.println(sec);
     a64:	4a e0       	ldi	r20, 0x0A	; 10
     a66:	50 e0       	ldi	r21, 0x00	; 0
     a68:	6c 2d       	mov	r22, r12
     a6a:	80 ed       	ldi	r24, 0xD0	; 208
     a6c:	92 e0       	ldi	r25, 0x02	; 2
     a6e:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <_ZN5Print7printlnEhi>
#endif
  return DateTime(year, month, day, hour, min, sec);
     a72:	2f 2d       	mov	r18, r15
     a74:	41 2f       	mov	r20, r17
     a76:	b4 01       	movw	r22, r8
     a78:	c5 01       	movw	r24, r10
     a7a:	0e 94 85 18 	call	0x310a	; 0x310a <_ZN8DateTimeC1Ejhhhhh>
     a7e:	c5 01       	movw	r24, r10
     a80:	0f 90       	pop	r0
     a82:	0f 90       	pop	r0
     a84:	df 91       	pop	r29
     a86:	cf 91       	pop	r28
     a88:	1f 91       	pop	r17
     a8a:	0f 91       	pop	r16
     a8c:	ff 90       	pop	r15
     a8e:	ef 90       	pop	r14
     a90:	cf 90       	pop	r12
     a92:	bf 90       	pop	r11
     a94:	af 90       	pop	r10
     a96:	9f 90       	pop	r9
     a98:	8f 90       	pop	r8
     a9a:	08 95       	ret

00000a9c <_ZN8ElcanRtc18adjust_from_serialEv>:

DateTime ElcanRtc::now() {
  return this->rtc.now();
}

void ElcanRtc::adjust_from_serial() {
     a9c:	ef 92       	push	r14
     a9e:	ff 92       	push	r15
     aa0:	0f 93       	push	r16
     aa2:	1f 93       	push	r17
     aa4:	cf 93       	push	r28
     aa6:	df 93       	push	r29
     aa8:	cd b7       	in	r28, 0x3d	; 61
     aaa:	de b7       	in	r29, 0x3e	; 62
     aac:	c0 54       	subi	r28, 0x40	; 64
     aae:	d1 09       	sbc	r29, r1
     ab0:	0f b6       	in	r0, 0x3f	; 63
     ab2:	f8 94       	cli
     ab4:	de bf       	out	0x3e, r29	; 62
     ab6:	0f be       	out	0x3f, r0	; 63
     ab8:	cd bf       	out	0x3d, r28	; 61
     aba:	7c 01       	movw	r14, r24
  char dateString[32];
  char date[11];
  char time[9];
  char pos = 0;
  DateTime stamp;
     abc:	40 e0       	ldi	r20, 0x00	; 0
     abe:	50 e0       	ldi	r21, 0x00	; 0
     ac0:	ba 01       	movw	r22, r20
     ac2:	ce 01       	movw	r24, r28
     ac4:	cb 96       	adiw	r24, 0x3b	; 59
     ac6:	0e 94 0d 18 	call	0x301a	; 0x301a <_ZN8DateTimeC1Em>
  memset(dateString, 0, sizeof(dateString));
     aca:	8e 01       	movw	r16, r28
     acc:	0f 5f       	subi	r16, 0xFF	; 255
     ace:	1f 4f       	sbci	r17, 0xFF	; 255
     ad0:	80 e2       	ldi	r24, 0x20	; 32
     ad2:	d8 01       	movw	r26, r16
     ad4:	1d 92       	st	X+, r1
     ad6:	8a 95       	dec	r24
     ad8:	e9 f7       	brne	.-6      	; 0xad4 <_ZN8ElcanRtc18adjust_from_serialEv+0x38>
  memset(date, 0, sizeof(date));
     ada:	fe 01       	movw	r30, r28
     adc:	b1 96       	adiw	r30, 0x21	; 33
     ade:	8b e0       	ldi	r24, 0x0B	; 11
     ae0:	df 01       	movw	r26, r30
     ae2:	1d 92       	st	X+, r1
     ae4:	8a 95       	dec	r24
     ae6:	e9 f7       	brne	.-6      	; 0xae2 <_ZN8ElcanRtc18adjust_from_serialEv+0x46>
  memset(time, 0, sizeof(time));
     ae8:	3b 96       	adiw	r30, 0x0b	; 11
     aea:	89 e0       	ldi	r24, 0x09	; 9
     aec:	df 01       	movw	r26, r30
     aee:	1d 92       	st	X+, r1
     af0:	8a 95       	dec	r24
     af2:	e9 f7       	brne	.-6      	; 0xaee <_ZN8ElcanRtc18adjust_from_serialEv+0x52>
     af4:	6d e4       	ldi	r22, 0x4D	; 77
     af6:	80 ed       	ldi	r24, 0xD0	; 208
     af8:	92 e0       	ldi	r25, 0x02	; 2
     afa:	0e 94 8d 09 	call	0x131a	; 0x131a <_ZN14HardwareSerial5writeEh>
  Serial.write('M');
  Serial.flush();
     afe:	80 ed       	ldi	r24, 0xD0	; 208
     b00:	92 e0       	ldi	r25, 0x02	; 2
     b02:	0e 94 da 09 	call	0x13b4	; 0x13b4 <_ZN14HardwareSerial5flushEv>
  delay(1);
     b06:	61 e0       	ldi	r22, 0x01	; 1
     b08:	70 e0       	ldi	r23, 0x00	; 0
     b0a:	80 e0       	ldi	r24, 0x00	; 0
     b0c:	90 e0       	ldi	r25, 0x00	; 0
     b0e:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <delay>
  pos = Serial.readBytesUntil('\r', dateString, sizeof(dateString));
     b12:	20 e2       	ldi	r18, 0x20	; 32
     b14:	30 e0       	ldi	r19, 0x00	; 0
     b16:	a8 01       	movw	r20, r16
     b18:	6d e0       	ldi	r22, 0x0D	; 13
     b1a:	80 ed       	ldi	r24, 0xD0	; 208
     b1c:	92 e0       	ldi	r25, 0x02	; 2
     b1e:	0e 94 24 0c 	call	0x1848	; 0x1848 <_ZN6Stream14readBytesUntilEcPcj>
  if (pos > 10) {
     b22:	8b 30       	cpi	r24, 0x0B	; 11
     b24:	20 f1       	brcs	.+72     	; 0xb6e <_ZN8ElcanRtc18adjust_from_serialEv+0xd2>
    stamp = split_date_time(dateString);
     b26:	a8 01       	movw	r20, r16
     b28:	b7 01       	movw	r22, r14
     b2a:	ce 01       	movw	r24, r28
     b2c:	c5 96       	adiw	r24, 0x35	; 53
     b2e:	0e 94 9d 04 	call	0x93a	; 0x93a <_ZN8ElcanRtc15split_date_timeEPc>
     b32:	86 e0       	ldi	r24, 0x06	; 6
     b34:	fe 01       	movw	r30, r28
     b36:	f5 96       	adiw	r30, 0x35	; 53
     b38:	de 01       	movw	r26, r28
     b3a:	db 96       	adiw	r26, 0x3b	; 59
     b3c:	01 90       	ld	r0, Z+
     b3e:	0d 92       	st	X+, r0
     b40:	8a 95       	dec	r24
     b42:	e1 f7       	brne	.-8      	; 0xb3c <_ZN8ElcanRtc18adjust_from_serialEv+0xa0>
     b44:	63 e2       	ldi	r22, 0x23	; 35
     b46:	80 ed       	ldi	r24, 0xD0	; 208
     b48:	92 e0       	ldi	r25, 0x02	; 2
     b4a:	0e 94 8d 09 	call	0x131a	; 0x131a <_ZN14HardwareSerial5writeEh>
#ifdef DEBUG
    Serial.write('#');
    Serial.println(stamp.unixtime());
     b4e:	ce 01       	movw	r24, r28
     b50:	cb 96       	adiw	r24, 0x3b	; 59
     b52:	0e 94 13 19 	call	0x3226	; 0x3226 <_ZNK8DateTime8unixtimeEv>
     b56:	ab 01       	movw	r20, r22
     b58:	bc 01       	movw	r22, r24
     b5a:	2a e0       	ldi	r18, 0x0A	; 10
     b5c:	30 e0       	ldi	r19, 0x00	; 0
     b5e:	80 ed       	ldi	r24, 0xD0	; 208
     b60:	92 e0       	ldi	r25, 0x02	; 2
     b62:	0e 94 81 0b 	call	0x1702	; 0x1702 <_ZN5Print7printlnEmi>
#endif
    this->rtc.adjust(stamp);
     b66:	ce 01       	movw	r24, r28
     b68:	cb 96       	adiw	r24, 0x3b	; 59
     b6a:	0e 94 22 1a 	call	0x3444	; 0x3444 <_ZN10RTC_DS32316adjustERK8DateTime>
  }
  CLEAR_SERIAL
     b6e:	80 ed       	ldi	r24, 0xD0	; 208
     b70:	92 e0       	ldi	r25, 0x02	; 2
     b72:	0e 94 20 09 	call	0x1240	; 0x1240 <_ZN14HardwareSerial9availableEv>
     b76:	89 2b       	or	r24, r25
     b78:	29 f0       	breq	.+10     	; 0xb84 <_ZN8ElcanRtc18adjust_from_serialEv+0xe8>
     b7a:	80 ed       	ldi	r24, 0xD0	; 208
     b7c:	92 e0       	ldi	r25, 0x02	; 2
     b7e:	0e 94 3a 09 	call	0x1274	; 0x1274 <_ZN14HardwareSerial4readEv>
     b82:	f5 cf       	rjmp	.-22     	; 0xb6e <_ZN8ElcanRtc18adjust_from_serialEv+0xd2>
}
     b84:	c0 5c       	subi	r28, 0xC0	; 192
     b86:	df 4f       	sbci	r29, 0xFF	; 255
     b88:	0f b6       	in	r0, 0x3f	; 63
     b8a:	f8 94       	cli
     b8c:	de bf       	out	0x3e, r29	; 62
     b8e:	0f be       	out	0x3f, r0	; 63
     b90:	cd bf       	out	0x3d, r28	; 61
     b92:	df 91       	pop	r29
     b94:	cf 91       	pop	r28
     b96:	1f 91       	pop	r17
     b98:	0f 91       	pop	r16
     b9a:	ff 90       	pop	r15
     b9c:	ef 90       	pop	r14
     b9e:	08 95       	ret

00000ba0 <setup>:
 * System setup
 */
void setup() {
  char ipaddr[30];
  memset(ipaddr, 0, sizeof(ipaddr));
  pinMode(WIFI_RX, INPUT);
     ba0:	60 e0       	ldi	r22, 0x00	; 0
     ba2:	85 e0       	ldi	r24, 0x05	; 5
     ba4:	0e 94 91 10 	call	0x2122	; 0x2122 <pinMode>
  pinMode(WIFI_TX, OUTPUT);
     ba8:	61 e0       	ldi	r22, 0x01	; 1
     baa:	86 e0       	ldi	r24, 0x06	; 6
     bac:	0e 94 91 10 	call	0x2122	; 0x2122 <pinMode>
  pinMode(BARRERA, OUTPUT);
     bb0:	61 e0       	ldi	r22, 0x01	; 1
     bb2:	84 e0       	ldi	r24, 0x04	; 4
     bb4:	0e 94 91 10 	call	0x2122	; 0x2122 <pinMode>
  pinMode(BUZZER, OUTPUT);
     bb8:	61 e0       	ldi	r22, 0x01	; 1
     bba:	83 e0       	ldi	r24, 0x03	; 3
     bbc:	0e 94 91 10 	call	0x2122	; 0x2122 <pinMode>
  pinMode(RFID_SS, OUTPUT);
     bc0:	61 e0       	ldi	r22, 0x01	; 1
     bc2:	8a e0       	ldi	r24, 0x0A	; 10
     bc4:	0e 94 91 10 	call	0x2122	; 0x2122 <pinMode>
  pinMode(RFID_RST, OUTPUT);
     bc8:	61 e0       	ldi	r22, 0x01	; 1
     bca:	89 e0       	ldi	r24, 0x09	; 9
     bcc:	0e 94 91 10 	call	0x2122	; 0x2122 <pinMode>
  digitalWrite(BARRERA, LOW);
     bd0:	60 e0       	ldi	r22, 0x00	; 0
     bd2:	84 e0       	ldi	r24, 0x04	; 4
     bd4:	0e 94 cd 10 	call	0x219a	; 0x219a <digitalWrite>
  digitalWrite(BUZZER, LOW);
     bd8:	60 e0       	ldi	r22, 0x00	; 0
     bda:	83 e0       	ldi	r24, 0x03	; 3
     bdc:	0e 94 cd 10 	call	0x219a	; 0x219a <digitalWrite>
#ifdef WITH_WEIGHT
  scale.begin(SCALE_I2C_ADDR); // according to wheight measurement device
#endif
  Wire.begin();
     be0:	8f e8       	ldi	r24, 0x8F	; 143
     be2:	93 e0       	ldi	r25, 0x03	; 3
     be4:	0e 94 c1 1b 	call	0x3782	; 0x3782 <_ZN7TwoWire5beginEv>
  SPI.begin();           // MFRC522 Hardware uses SPI protocol
     be8:	0e 94 bd 1a 	call	0x357a	; 0x357a <_ZN8SPIClass5beginEv>
  ElcanLcd.begin(16, 2);
     bec:	42 e0       	ldi	r20, 0x02	; 2
     bee:	60 e1       	ldi	r22, 0x10	; 16
     bf0:	8b ea       	ldi	r24, 0xAB	; 171
     bf2:	92 e0       	ldi	r25, 0x02	; 2
     bf4:	0e 94 0b 02 	call	0x416	; 0x416 <_ZN15ElcanLCDManager5beginEcc>
  rtc.initialize();
     bf8:	88 ea       	ldi	r24, 0xA8	; 168
     bfa:	92 e0       	ldi	r25, 0x02	; 2
     bfc:	0e 94 64 04 	call	0x8c8	; 0x8c8 <_ZN8ElcanRtc10initializeEv>
  rfid.begin();
     c00:	84 e9       	ldi	r24, 0x94	; 148
     c02:	92 e0       	ldi	r25, 0x02	; 2
     c04:	0e 94 14 04 	call	0x828	; 0x828 <_ZN11RfidManager5beginEv>
  sys_state = READY;
     c08:	81 e0       	ldi	r24, 0x01	; 1
     c0a:	80 93 cf 02 	sts	0x02CF, r24	; 0x8002cf <sys_state>
  backlightStart = 0;
     c0e:	10 92 bf 02 	sts	0x02BF, r1	; 0x8002bf <backlightStart>
     c12:	10 92 c0 02 	sts	0x02C0, r1	; 0x8002c0 <backlightStart+0x1>
     c16:	10 92 c1 02 	sts	0x02C1, r1	; 0x8002c1 <backlightStart+0x2>
     c1a:	10 92 c2 02 	sts	0x02C2, r1	; 0x8002c2 <backlightStart+0x3>
  lastPoll = 0;
     c1e:	10 92 bb 02 	sts	0x02BB, r1	; 0x8002bb <lastPoll>
     c22:	10 92 bc 02 	sts	0x02BC, r1	; 0x8002bc <lastPoll+0x1>
     c26:	10 92 bd 02 	sts	0x02BD, r1	; 0x8002bd <lastPoll+0x2>
     c2a:	10 92 be 02 	sts	0x02BE, r1	; 0x8002be <lastPoll+0x3>
    ElcanLcd.show_ip(ipaddr);
  } else {
    sys_state = ERROR_WIFI;
  }
#else
  ElcanLcd.show_message("Initialized...");
     c2e:	6d e7       	ldi	r22, 0x7D	; 125
     c30:	71 e0       	ldi	r23, 0x01	; 1
     c32:	8b ea       	ldi	r24, 0xAB	; 171
     c34:	92 e0       	ldi	r25, 0x02	; 2
     c36:	0c 94 7c 02 	jmp	0x4f8	; 0x4f8 <_ZN15ElcanLCDManager12show_messageEPc>

00000c3a <_Z18check_card_and_actv>:
}

/**
 * Read card must be checked against the known ones
 */
bool check_card_and_act() {
     c3a:	cf 93       	push	r28
  char ret;
  ret = is_known_card(rfid.readCard);
     c3c:	84 ea       	ldi	r24, 0xA4	; 164
     c3e:	92 e0       	ldi	r25, 0x02	; 2
     c40:	0e 94 ef 00 	call	0x1de	; 0x1de <_Z13is_known_cardPc>
     c44:	c8 2f       	mov	r28, r24
  if (ret > 0) {
     c46:	88 23       	and	r24, r24
     c48:	11 f1       	breq	.+68     	; 0xc8e <_Z18check_card_and_actv+0x54>
    sys_state = READ_RTC;
     c4a:	80 e1       	ldi	r24, 0x10	; 16
     c4c:	80 93 cf 02 	sts	0x02CF, r24	; 0x8002cf <sys_state>
    DO_KNOWN_BEEPS;
     c50:	24 e6       	ldi	r18, 0x64	; 100
     c52:	30 e0       	ldi	r19, 0x00	; 0
     c54:	40 e0       	ldi	r20, 0x00	; 0
     c56:	50 e0       	ldi	r21, 0x00	; 0
     c58:	60 e2       	ldi	r22, 0x20	; 32
     c5a:	73 e0       	ldi	r23, 0x03	; 3
     c5c:	83 e0       	ldi	r24, 0x03	; 3
     c5e:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <_Z4tonehjm>
     c62:	64 e6       	ldi	r22, 0x64	; 100
     c64:	70 e0       	ldi	r23, 0x00	; 0
     c66:	80 e0       	ldi	r24, 0x00	; 0
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <delay>
     c6e:	24 e6       	ldi	r18, 0x64	; 100
     c70:	30 e0       	ldi	r19, 0x00	; 0
     c72:	40 e0       	ldi	r20, 0x00	; 0
     c74:	50 e0       	ldi	r21, 0x00	; 0
     c76:	60 e2       	ldi	r22, 0x20	; 32
     c78:	73 e0       	ldi	r23, 0x03	; 3
     c7a:	83 e0       	ldi	r24, 0x03	; 3
     c7c:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <_Z4tonehjm>
     c80:	64 e6       	ldi	r22, 0x64	; 100
     c82:	70 e0       	ldi	r23, 0x00	; 0
     c84:	80 e0       	ldi	r24, 0x00	; 0
     c86:	90 e0       	ldi	r25, 0x00	; 0
     c88:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <delay>
     c8c:	03 c0       	rjmp	.+6      	; 0xc94 <_Z18check_card_and_actv+0x5a>
  } else {
    sys_state = UNKNOWN_CARD;
     c8e:	89 e8       	ldi	r24, 0x89	; 137
     c90:	80 93 cf 02 	sts	0x02CF, r24	; 0x8002cf <sys_state>
  }
  return ret;
     c94:	81 e0       	ldi	r24, 0x01	; 1
     c96:	c1 11       	cpse	r28, r1
     c98:	01 c0       	rjmp	.+2      	; 0xc9c <_Z18check_card_and_actv+0x62>
     c9a:	80 e0       	ldi	r24, 0x00	; 0
}
     c9c:	cf 91       	pop	r28
     c9e:	08 95       	ret

00000ca0 <_Z12open_barrierv>:

void open_barrier() {
  digitalWrite(BARRERA, 1);
     ca0:	61 e0       	ldi	r22, 0x01	; 1
     ca2:	84 e0       	ldi	r24, 0x04	; 4
     ca4:	0e 94 cd 10 	call	0x219a	; 0x219a <digitalWrite>
  delay(8000); //wait until the barrier acknowledges the open command
     ca8:	60 e4       	ldi	r22, 0x40	; 64
     caa:	7f e1       	ldi	r23, 0x1F	; 31
     cac:	80 e0       	ldi	r24, 0x00	; 0
     cae:	90 e0       	ldi	r25, 0x00	; 0
     cb0:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <delay>
  digitalWrite(BARRERA, 0); //release Barrier switch
     cb4:	60 e0       	ldi	r22, 0x00	; 0
     cb6:	84 e0       	ldi	r24, 0x04	; 4
     cb8:	0c 94 cd 10 	jmp	0x219a	; 0x219a <digitalWrite>

00000cbc <_Z18check_elapsed_timev>:
}

bool check_elapsed_time() {
     cbc:	cf 93       	push	r28
     cbe:	df 93       	push	r29
     cc0:	cd b7       	in	r28, 0x3d	; 61
     cc2:	de b7       	in	r29, 0x3e	; 62
     cc4:	2a 97       	sbiw	r28, 0x0a	; 10
     cc6:	0f b6       	in	r0, 0x3f	; 63
     cc8:	f8 94       	cli
     cca:	de bf       	out	0x3e, r29	; 62
     ccc:	0f be       	out	0x3f, r0	; 63
     cce:	cd bf       	out	0x3d, r28	; 61
  DateTime current = rtc.now();
     cd0:	68 ea       	ldi	r22, 0xA8	; 168
     cd2:	72 e0       	ldi	r23, 0x02	; 2
     cd4:	ce 01       	movw	r24, r28
     cd6:	01 96       	adiw	r24, 0x01	; 1
     cd8:	0e 94 94 04 	call	0x928	; 0x928 <_ZN8ElcanRtc3nowEv>
  TimeSpan diff_time = (current - timerStarted);
     cdc:	43 ec       	ldi	r20, 0xC3	; 195
     cde:	52 e0       	ldi	r21, 0x02	; 2
     ce0:	be 01       	movw	r22, r28
     ce2:	6f 5f       	subi	r22, 0xFF	; 255
     ce4:	7f 4f       	sbci	r23, 0xFF	; 255
     ce6:	ce 01       	movw	r24, r28
     ce8:	07 96       	adiw	r24, 0x07	; 7
     cea:	0e 94 51 19 	call	0x32a2	; 0x32a2 <_ZN8DateTimemiERKS_>
  if (diff_time.totalseconds() >= WAITING_TIME) {
     cee:	81 e0       	ldi	r24, 0x01	; 1
     cf0:	4f 81       	ldd	r20, Y+7	; 0x07
     cf2:	58 85       	ldd	r21, Y+8	; 0x08
     cf4:	69 85       	ldd	r22, Y+9	; 0x09
     cf6:	7a 85       	ldd	r23, Y+10	; 0x0a
     cf8:	4a 30       	cpi	r20, 0x0A	; 10
     cfa:	51 05       	cpc	r21, r1
     cfc:	61 05       	cpc	r22, r1
     cfe:	71 05       	cpc	r23, r1
     d00:	0c f4       	brge	.+2      	; 0xd04 <_Z18check_elapsed_timev+0x48>
     d02:	80 e0       	ldi	r24, 0x00	; 0
    return true;
  }
  return false;
}
     d04:	2a 96       	adiw	r28, 0x0a	; 10
     d06:	0f b6       	in	r0, 0x3f	; 63
     d08:	f8 94       	cli
     d0a:	de bf       	out	0x3e, r29	; 62
     d0c:	0f be       	out	0x3f, r0	; 63
     d0e:	cd bf       	out	0x3d, r28	; 61
     d10:	df 91       	pop	r29
     d12:	cf 91       	pop	r28
     d14:	08 95       	ret

00000d16 <_Z10check_wifiv>:
#endif
    erase_card(pos);
  }
}

void check_wifi() {
     d16:	0f 93       	push	r16
     d18:	1f 93       	push	r17
  byte polled;
  if (millis() - lastPoll > POLLING_INTERVAL) {
     d1a:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <millis>
     d1e:	00 91 bb 02 	lds	r16, 0x02BB	; 0x8002bb <lastPoll>
     d22:	10 91 bc 02 	lds	r17, 0x02BC	; 0x8002bc <lastPoll+0x1>
     d26:	20 91 bd 02 	lds	r18, 0x02BD	; 0x8002bd <lastPoll+0x2>
     d2a:	30 91 be 02 	lds	r19, 0x02BE	; 0x8002be <lastPoll+0x3>
     d2e:	dc 01       	movw	r26, r24
     d30:	cb 01       	movw	r24, r22
     d32:	80 1b       	sub	r24, r16
     d34:	91 0b       	sbc	r25, r17
     d36:	a2 0b       	sbc	r26, r18
     d38:	b3 0b       	sbc	r27, r19
     d3a:	89 3e       	cpi	r24, 0xE9	; 233
     d3c:	93 40       	sbci	r25, 0x03	; 3
     d3e:	a1 05       	cpc	r26, r1
     d40:	b1 05       	cpc	r27, r1
     d42:	b8 f0       	brcs	.+46     	; 0xd72 <_Z10check_wifiv+0x5c>
    polled = wifi.poll();
     d44:	89 ea       	ldi	r24, 0xA9	; 169
     d46:	92 e0       	ldi	r25, 0x02	; 2
     d48:	0e 94 77 03 	call	0x6ee	; 0x6ee <_ZN9ElcanWifi4pollEv>
    switch(polled) {
     d4c:	82 35       	cpi	r24, 0x52	; 82
     d4e:	21 f0       	breq	.+8      	; 0xd58 <_Z10check_wifiv+0x42>
     d50:	84 35       	cpi	r24, 0x54	; 84
     d52:	29 f4       	brne	.+10     	; 0xd5e <_Z10check_wifiv+0x48>
      case 'T':
        sys_state = GET_TAG_DATA;
     d54:	8b ea       	ldi	r24, 0xAB	; 171
     d56:	01 c0       	rjmp	.+2      	; 0xd5a <_Z10check_wifiv+0x44>
        break;
      case 'R':
        sys_state = ADJUST_TIME;
     d58:	81 ec       	ldi	r24, 0xC1	; 193
     d5a:	80 93 cf 02 	sts	0x02CF, r24	; 0x8002cf <sys_state>
        break;
    }
    lastPoll = millis();
     d5e:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <millis>
     d62:	60 93 bb 02 	sts	0x02BB, r22	; 0x8002bb <lastPoll>
     d66:	70 93 bc 02 	sts	0x02BC, r23	; 0x8002bc <lastPoll+0x1>
     d6a:	80 93 bd 02 	sts	0x02BD, r24	; 0x8002bd <lastPoll+0x2>
     d6e:	90 93 be 02 	sts	0x02BE, r25	; 0x8002be <lastPoll+0x3>
  }
}
     d72:	1f 91       	pop	r17
     d74:	0f 91       	pop	r16
     d76:	08 95       	ret

00000d78 <_Z19tag_string_to_bytesPcPhS0_>:

char tag_string_to_bytes(char *tagstring, byte *tag_uid, byte *remove) {
     d78:	af 92       	push	r10
     d7a:	bf 92       	push	r11
     d7c:	cf 92       	push	r12
     d7e:	df 92       	push	r13
     d80:	ef 92       	push	r14
     d82:	ff 92       	push	r15
     d84:	0f 93       	push	r16
     d86:	1f 93       	push	r17
     d88:	cf 93       	push	r28
     d8a:	df 93       	push	r29
     d8c:	00 d0       	rcall	.+0      	; 0xd8e <_Z19tag_string_to_bytesPcPhS0_+0x16>
     d8e:	00 d0       	rcall	.+0      	; 0xd90 <_Z19tag_string_to_bytesPcPhS0_+0x18>
     d90:	cd b7       	in	r28, 0x3d	; 61
     d92:	de b7       	in	r29, 0x3e	; 62
     d94:	8c 01       	movw	r16, r24
     d96:	5b 01       	movw	r10, r22
     d98:	6a 01       	movw	r12, r20
  char posBuf[4];
  char tmp;
  memset(posBuf,0,sizeof(posBuf));
     d9a:	ce 01       	movw	r24, r28
     d9c:	01 96       	adiw	r24, 0x01	; 1
     d9e:	7c 01       	movw	r14, r24
     da0:	84 e0       	ldi	r24, 0x04	; 4
     da2:	f7 01       	movw	r30, r14
     da4:	11 92       	st	Z+, r1
     da6:	8a 95       	dec	r24
     da8:	e9 f7       	brne	.-6      	; 0xda4 <_Z19tag_string_to_bytesPcPhS0_+0x2c>
  hex_string_to_byte_array(tagstring, posBuf, TAG_UID_START, TAG_UID_END);
     daa:	28 e0       	ldi	r18, 0x08	; 8
     dac:	40 e0       	ldi	r20, 0x00	; 0
     dae:	b7 01       	movw	r22, r14
     db0:	c8 01       	movw	r24, r16
     db2:	0e 94 a6 01 	call	0x34c	; 0x34c <_Z24hex_string_to_byte_arrayPcS_cc>
  memcpy(tag_uid, posBuf, sizeof(posBuf));
     db6:	89 81       	ldd	r24, Y+1	; 0x01
     db8:	9a 81       	ldd	r25, Y+2	; 0x02
     dba:	ab 81       	ldd	r26, Y+3	; 0x03
     dbc:	bc 81       	ldd	r27, Y+4	; 0x04
     dbe:	f5 01       	movw	r30, r10
     dc0:	80 83       	st	Z, r24
     dc2:	91 83       	std	Z+1, r25	; 0x01
     dc4:	a2 83       	std	Z+2, r26	; 0x02
     dc6:	b3 83       	std	Z+3, r27	; 0x03
  hex_string_to_byte_array(tagstring, posBuf, TAG_POS_START, TAG_POS_END);
     dc8:	2a e0       	ldi	r18, 0x0A	; 10
     dca:	48 e0       	ldi	r20, 0x08	; 8
     dcc:	b7 01       	movw	r22, r14
     dce:	c8 01       	movw	r24, r16
     dd0:	0e 94 a6 01 	call	0x34c	; 0x34c <_Z24hex_string_to_byte_arrayPcS_cc>
  tmp = posBuf[0]; //after converting the pos HEX to bin, it'll use 1 byte only.
     dd4:	89 81       	ldd	r24, Y+1	; 0x01
  remove[0] = tagstring[TAG_REM_START];
     dd6:	f8 01       	movw	r30, r16
     dd8:	92 85       	ldd	r25, Z+10	; 0x0a
     dda:	f6 01       	movw	r30, r12
     ddc:	90 83       	st	Z, r25
  return tmp;
}
     dde:	0f 90       	pop	r0
     de0:	0f 90       	pop	r0
     de2:	0f 90       	pop	r0
     de4:	0f 90       	pop	r0
     de6:	df 91       	pop	r29
     de8:	cf 91       	pop	r28
     dea:	1f 91       	pop	r17
     dec:	0f 91       	pop	r16
     dee:	ff 90       	pop	r15
     df0:	ef 90       	pop	r14
     df2:	df 90       	pop	r13
     df4:	cf 90       	pop	r12
     df6:	bf 90       	pop	r11
     df8:	af 90       	pop	r10
     dfa:	08 95       	ret

00000dfc <_Z12get_tag_datav>:
  ElcanLcd.show_message("Acceso negado,  Informando...");
  send_intrussion_attemp_to_server();
  DO_INTRUSSION_BEEPS;
}

void get_tag_data() {
     dfc:	0f 93       	push	r16
     dfe:	1f 93       	push	r17
     e00:	cf 93       	push	r28
     e02:	df 93       	push	r29
     e04:	cd b7       	in	r28, 0x3d	; 61
     e06:	de b7       	in	r29, 0x3e	; 62
     e08:	65 97       	sbiw	r28, 0x15	; 21
     e0a:	0f b6       	in	r0, 0x3f	; 63
     e0c:	f8 94       	cli
     e0e:	de bf       	out	0x3e, r29	; 62
     e10:	0f be       	out	0x3f, r0	; 63
     e12:	cd bf       	out	0x3d, r28	; 61
  char tagPacket[TAG_PACKET_SIZE];
  byte pos;
  byte result[4];
  byte remov;

  memset(tagPacket, 0, sizeof(tagPacket));
     e14:	8e 01       	movw	r16, r28
     e16:	0f 5f       	subi	r16, 0xFF	; 255
     e18:	1f 4f       	sbci	r17, 0xFF	; 255
     e1a:	8b e0       	ldi	r24, 0x0B	; 11
     e1c:	f8 01       	movw	r30, r16
     e1e:	11 92       	st	Z+, r1
     e20:	8a 95       	dec	r24
     e22:	e9 f7       	brne	.-6      	; 0xe1e <_Z12get_tag_datav+0x22>
  wifi.readCardData(tagPacket, sizeof(tagPacket));
     e24:	4b e0       	ldi	r20, 0x0B	; 11
     e26:	b8 01       	movw	r22, r16
     e28:	89 ea       	ldi	r24, 0xA9	; 169
     e2a:	92 e0       	ldi	r25, 0x02	; 2
     e2c:	0e 94 42 03 	call	0x684	; 0x684 <_ZN9ElcanWifi12readCardDataEPcc>
  struct card_block card;
  pos = tag_string_to_bytes(tagPacket, result, &remov);
     e30:	ae 01       	movw	r20, r28
     e32:	4b 5e       	subi	r20, 0xEB	; 235
     e34:	5f 4f       	sbci	r21, 0xFF	; 255
     e36:	be 01       	movw	r22, r28
     e38:	6f 5e       	subi	r22, 0xEF	; 239
     e3a:	7f 4f       	sbci	r23, 0xFF	; 255
     e3c:	c8 01       	movw	r24, r16
     e3e:	0e 94 bc 06 	call	0xd78	; 0xd78 <_Z19tag_string_to_bytesPcPhS0_>
     e42:	18 2f       	mov	r17, r24
  memcpy(card.card_uid, result, sizeof(result));
     e44:	89 89       	ldd	r24, Y+17	; 0x11
     e46:	9a 89       	ldd	r25, Y+18	; 0x12
     e48:	ab 89       	ldd	r26, Y+19	; 0x13
     e4a:	bc 89       	ldd	r27, Y+20	; 0x14
     e4c:	8c 87       	std	Y+12, r24	; 0x0c
     e4e:	9d 87       	std	Y+13, r25	; 0x0d
     e50:	ae 87       	std	Y+14, r26	; 0x0e
     e52:	bf 87       	std	Y+15, r27	; 0x0f
  card.card_number = pos;
     e54:	18 8b       	std	Y+16, r17	; 0x10
  if (remov == '0') {
     e56:	8d 89       	ldd	r24, Y+21	; 0x15
     e58:	80 33       	cpi	r24, 0x30	; 48
     e5a:	09 f5       	brne	.+66     	; 0xe9e <_Z12get_tag_datav+0xa2>
#ifdef DEBUG
    Serial.print("#Storing @ ");
     e5c:	6c e8       	ldi	r22, 0x8C	; 140
     e5e:	71 e0       	ldi	r23, 0x01	; 1
     e60:	80 ed       	ldi	r24, 0xD0	; 208
     e62:	92 e0       	ldi	r25, 0x02	; 2
     e64:	0e 94 ed 0a 	call	0x15da	; 0x15da <_ZN5Print5printEPKc>
    Serial.println(pos);
     e68:	4a e0       	ldi	r20, 0x0A	; 10
     e6a:	50 e0       	ldi	r21, 0x00	; 0
     e6c:	61 2f       	mov	r22, r17
     e6e:	80 ed       	ldi	r24, 0xD0	; 208
     e70:	92 e0       	ldi	r25, 0x02	; 2
     e72:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <_ZN5Print7printlnEhi>
#endif
    delay(400);
     e76:	60 e9       	ldi	r22, 0x90	; 144
     e78:	71 e0       	ldi	r23, 0x01	; 1
     e7a:	80 e0       	ldi	r24, 0x00	; 0
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <delay>
    if (!store_card(card, pos)) {
     e82:	21 2f       	mov	r18, r17
     e84:	4c 85       	ldd	r20, Y+12	; 0x0c
     e86:	5d 85       	ldd	r21, Y+13	; 0x0d
     e88:	6e 85       	ldd	r22, Y+14	; 0x0e
     e8a:	7f 85       	ldd	r23, Y+15	; 0x0f
     e8c:	88 89       	ldd	r24, Y+16	; 0x10
     e8e:	0e 94 49 01 	call	0x292	; 0x292 <_Z10store_card10card_blockc>
     e92:	81 11       	cpse	r24, r1
     e94:	14 c0       	rjmp	.+40     	; 0xebe <_Z12get_tag_datav+0xc2>
      sys_state = ERROR_INVALID;
     e96:	87 e0       	ldi	r24, 0x07	; 7
     e98:	80 93 cf 02 	sts	0x02CF, r24	; 0x8002cf <sys_state>
     e9c:	10 c0       	rjmp	.+32     	; 0xebe <_Z12get_tag_datav+0xc2>
    }
  } else {
#ifdef DEBUG
    Serial.println("#Erasing @ ");
     e9e:	68 e9       	ldi	r22, 0x98	; 152
     ea0:	71 e0       	ldi	r23, 0x01	; 1
     ea2:	80 ed       	ldi	r24, 0xD0	; 208
     ea4:	92 e0       	ldi	r25, 0x02	; 2
     ea6:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <_ZN5Print7printlnEPKc>
    Serial.println(pos);
     eaa:	4a e0       	ldi	r20, 0x0A	; 10
     eac:	50 e0       	ldi	r21, 0x00	; 0
     eae:	61 2f       	mov	r22, r17
     eb0:	80 ed       	ldi	r24, 0xD0	; 208
     eb2:	92 e0       	ldi	r25, 0x02	; 2
     eb4:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <_ZN5Print7printlnEhi>
#endif
    erase_card(pos);
     eb8:	81 2f       	mov	r24, r17
     eba:	0e 94 86 01 	call	0x30c	; 0x30c <_Z10erase_cardc>
  }
}
     ebe:	65 96       	adiw	r28, 0x15	; 21
     ec0:	0f b6       	in	r0, 0x3f	; 63
     ec2:	f8 94       	cli
     ec4:	de bf       	out	0x3e, r29	; 62
     ec6:	0f be       	out	0x3f, r0	; 63
     ec8:	cd bf       	out	0x3d, r28	; 61
     eca:	df 91       	pop	r29
     ecc:	cf 91       	pop	r28
     ece:	1f 91       	pop	r17
     ed0:	0f 91       	pop	r16
     ed2:	08 95       	ret

00000ed4 <_GLOBAL__sub_I_sys_state>:
#include "eepromblock.h"
#include "definitions.h"

char sys_state;
char measuredWeight[7]; // Stores weight in ram
DateTime enteringTime;  //last time readed on the RTC
     ed4:	40 e0       	ldi	r20, 0x00	; 0
     ed6:	50 e0       	ldi	r21, 0x00	; 0
     ed8:	ba 01       	movw	r22, r20
     eda:	89 ec       	ldi	r24, 0xC9	; 201
     edc:	92 e0       	ldi	r25, 0x02	; 2
     ede:	0e 94 0d 18 	call	0x301a	; 0x301a <_ZN8DateTimeC1Em>
DateTime timerStarted;
     ee2:	40 e0       	ldi	r20, 0x00	; 0
     ee4:	50 e0       	ldi	r21, 0x00	; 0
     ee6:	ba 01       	movw	r22, r20
     ee8:	83 ec       	ldi	r24, 0xC3	; 195
     eea:	92 e0       	ldi	r25, 0x02	; 2
     eec:	0e 94 0d 18 	call	0x301a	; 0x301a <_ZN8DateTimeC1Em>
long backlightStart;
long lastPoll;
ElcanLCDManager ElcanLcd(LCD_ADDRESS, 16, 2);
     ef0:	22 e0       	ldi	r18, 0x02	; 2
     ef2:	40 e1       	ldi	r20, 0x10	; 16
     ef4:	6f e3       	ldi	r22, 0x3F	; 63
     ef6:	8b ea       	ldi	r24, 0xAB	; 171
     ef8:	92 e0       	ldi	r25, 0x02	; 2
     efa:	0e 94 c9 01 	call	0x392	; 0x392 <_ZN15ElcanLCDManagerC1Eccc>
ElcanWifi wifi;
     efe:	89 ea       	ldi	r24, 0xA9	; 169
     f00:	92 e0       	ldi	r25, 0x02	; 2
     f02:	0e 94 33 03 	call	0x666	; 0x666 <_ZN9ElcanWifiC1Ev>
ElcanRtc rtc;
     f06:	88 ea       	ldi	r24, 0xA8	; 168
     f08:	92 e0       	ldi	r25, 0x02	; 2
     f0a:	0e 94 63 04 	call	0x8c6	; 0x8c6 <_ZN8ElcanRtcC1Ev>
RfidManager rfid;
     f0e:	84 e9       	ldi	r24, 0x94	; 148
     f10:	92 e0       	ldi	r25, 0x02	; 2
     f12:	0c 94 df 03 	jmp	0x7be	; 0x7be <_ZN11RfidManagerC1Ev>

00000f16 <_Z32send_intrussion_attemp_to_serverv>:
  Serial.println(tmp);
#endif
  wifi.sendEntry(tmp);
}

void send_intrussion_attemp_to_server(){
     f16:	ef 92       	push	r14
     f18:	ff 92       	push	r15
     f1a:	0f 93       	push	r16
     f1c:	1f 93       	push	r17
     f1e:	cf 93       	push	r28
     f20:	df 93       	push	r29
     f22:	cd b7       	in	r28, 0x3d	; 61
     f24:	de b7       	in	r29, 0x3e	; 62
     f26:	cb 54       	subi	r28, 0x4B	; 75
     f28:	d1 09       	sbc	r29, r1
     f2a:	0f b6       	in	r0, 0x3f	; 63
     f2c:	f8 94       	cli
     f2e:	de bf       	out	0x3e, r29	; 62
     f30:	0f be       	out	0x3f, r0	; 63
     f32:	cd bf       	out	0x3d, r28	; 61
  char tmp[48];
  char timestr[21];
  DateTime stamp = rtc.now();
     f34:	68 ea       	ldi	r22, 0xA8	; 168
     f36:	72 e0       	ldi	r23, 0x02	; 2
     f38:	ce 01       	movw	r24, r28
     f3a:	8a 5b       	subi	r24, 0xBA	; 186
     f3c:	9f 4f       	sbci	r25, 0xFF	; 255
     f3e:	0e 94 94 04 	call	0x928	; 0x928 <_ZN8ElcanRtc3nowEv>
  sprintf(tmp, "%02x%02x%02x%02x", rfid.readCard[0], rfid.readCard[1], rfid.readCard[2], rfid.readCard[3]);
     f42:	e4 e9       	ldi	r30, 0x94	; 148
     f44:	f2 e0       	ldi	r31, 0x02	; 2
     f46:	83 89       	ldd	r24, Z+19	; 0x13
     f48:	1f 92       	push	r1
     f4a:	8f 93       	push	r24
     f4c:	82 89       	ldd	r24, Z+18	; 0x12
     f4e:	1f 92       	push	r1
     f50:	8f 93       	push	r24
     f52:	81 89       	ldd	r24, Z+17	; 0x11
     f54:	1f 92       	push	r1
     f56:	8f 93       	push	r24
     f58:	80 89       	ldd	r24, Z+16	; 0x10
     f5a:	1f 92       	push	r1
     f5c:	8f 93       	push	r24
     f5e:	84 ea       	ldi	r24, 0xA4	; 164
     f60:	91 e0       	ldi	r25, 0x01	; 1
     f62:	9f 93       	push	r25
     f64:	8f 93       	push	r24
     f66:	8e 01       	movw	r16, r28
     f68:	0f 5f       	subi	r16, 0xFF	; 255
     f6a:	1f 4f       	sbci	r17, 0xFF	; 255
     f6c:	1f 93       	push	r17
     f6e:	0f 93       	push	r16
     f70:	0e 94 72 1f 	call	0x3ee4	; 0x3ee4 <sprintf>
  strcat(tmp, "*");
     f74:	69 e4       	ldi	r22, 0x49	; 73
     f76:	72 e0       	ldi	r23, 0x02	; 2
     f78:	c8 01       	movw	r24, r16
     f7a:	0e 94 38 1f 	call	0x3e70	; 0x3e70 <strcat>
  sprintf(timestr, "%04d-%02d-%02d %02d:%02d:%02d", stamp.year(), stamp.month(),
    stamp.day(), stamp.hour(), stamp.minute(), stamp.second());
     f7e:	2c 96       	adiw	r28, 0x0c	; 12
     f80:	8f ad       	ldd	r24, Y+63	; 0x3f
     f82:	2c 97       	sbiw	r28, 0x0c	; 12
     f84:	1f 92       	push	r1
     f86:	8f 93       	push	r24
     f88:	2b 96       	adiw	r28, 0x0b	; 11
     f8a:	8f ad       	ldd	r24, Y+63	; 0x3f
     f8c:	2b 97       	sbiw	r28, 0x0b	; 11
     f8e:	1f 92       	push	r1
     f90:	8f 93       	push	r24
     f92:	2a 96       	adiw	r28, 0x0a	; 10
     f94:	8f ad       	ldd	r24, Y+63	; 0x3f
     f96:	2a 97       	sbiw	r28, 0x0a	; 10
     f98:	1f 92       	push	r1
     f9a:	8f 93       	push	r24
     f9c:	29 96       	adiw	r28, 0x09	; 9
     f9e:	8f ad       	ldd	r24, Y+63	; 0x3f
     fa0:	29 97       	sbiw	r28, 0x09	; 9
     fa2:	1f 92       	push	r1
     fa4:	8f 93       	push	r24
     fa6:	28 96       	adiw	r28, 0x08	; 8
     fa8:	8f ad       	ldd	r24, Y+63	; 0x3f
     faa:	28 97       	sbiw	r28, 0x08	; 8
     fac:	1f 92       	push	r1
     fae:	8f 93       	push	r24
     fb0:	27 96       	adiw	r28, 0x07	; 7
     fb2:	8f ad       	ldd	r24, Y+63	; 0x3f
     fb4:	27 97       	sbiw	r28, 0x07	; 7
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	80 53       	subi	r24, 0x30	; 48
     fba:	98 4f       	sbci	r25, 0xF8	; 248
     fbc:	9f 93       	push	r25
     fbe:	8f 93       	push	r24
     fc0:	85 eb       	ldi	r24, 0xB5	; 181
     fc2:	91 e0       	ldi	r25, 0x01	; 1
     fc4:	9f 93       	push	r25
     fc6:	8f 93       	push	r24
     fc8:	7e 01       	movw	r14, r28
     fca:	81 e3       	ldi	r24, 0x31	; 49
     fcc:	e8 0e       	add	r14, r24
     fce:	f1 1c       	adc	r15, r1
     fd0:	ff 92       	push	r15
     fd2:	ef 92       	push	r14
     fd4:	0e 94 72 1f 	call	0x3ee4	; 0x3ee4 <sprintf>
  strcat(tmp, timestr);
     fd8:	b7 01       	movw	r22, r14
     fda:	c8 01       	movw	r24, r16
     fdc:	0e 94 38 1f 	call	0x3e70	; 0x3e70 <strcat>
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
     fe0:	41 e0       	ldi	r20, 0x01	; 1
     fe2:	50 e0       	ldi	r21, 0x00	; 0
     fe4:	69 e0       	ldi	r22, 0x09	; 9
     fe6:	71 e0       	ldi	r23, 0x01	; 1
     fe8:	80 ed       	ldi	r24, 0xD0	; 208
     fea:	92 e0       	ldi	r25, 0x02	; 2
     fec:	0e 94 9f 0a 	call	0x153e	; 0x153e <_ZN5Print5writeEPKhj>
#ifdef DEBUG
  Serial.write("#");
  Serial.println(tmp);
     ff0:	b8 01       	movw	r22, r16
     ff2:	80 ed       	ldi	r24, 0xD0	; 208
     ff4:	92 e0       	ldi	r25, 0x02	; 2
     ff6:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <_ZN5Print7printlnEPKc>
#endif
  wifi.sendIntrussionAttemp(tmp);
     ffa:	b8 01       	movw	r22, r16
     ffc:	89 ea       	ldi	r24, 0xA9	; 169
     ffe:	92 e0       	ldi	r25, 0x02	; 2
    1000:	0e 94 93 03 	call	0x726	; 0x726 <_ZN9ElcanWifi20sendIntrussionAttempEPc>
}
    1004:	0f b6       	in	r0, 0x3f	; 63
    1006:	f8 94       	cli
    1008:	de bf       	out	0x3e, r29	; 62
    100a:	0f be       	out	0x3f, r0	; 63
    100c:	cd bf       	out	0x3d, r28	; 61
    100e:	c5 5b       	subi	r28, 0xB5	; 181
    1010:	df 4f       	sbci	r29, 0xFF	; 255
    1012:	0f b6       	in	r0, 0x3f	; 63
    1014:	f8 94       	cli
    1016:	de bf       	out	0x3e, r29	; 62
    1018:	0f be       	out	0x3f, r0	; 63
    101a:	cd bf       	out	0x3d, r28	; 61
    101c:	df 91       	pop	r29
    101e:	cf 91       	pop	r28
    1020:	1f 91       	pop	r17
    1022:	0f 91       	pop	r16
    1024:	ff 90       	pop	r15
    1026:	ef 90       	pop	r14
    1028:	08 95       	ret

0000102a <_Z12alertUnknownv>:

void alertUnknown() {
    102a:	cf 93       	push	r28
  ElcanLcd.show_message("Acceso negado,  Informando...");
    102c:	63 ed       	ldi	r22, 0xD3	; 211
    102e:	71 e0       	ldi	r23, 0x01	; 1
    1030:	8b ea       	ldi	r24, 0xAB	; 171
    1032:	92 e0       	ldi	r25, 0x02	; 2
    1034:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <_ZN15ElcanLCDManager12show_messageEPc>
  send_intrussion_attemp_to_server();
    1038:	0e 94 8b 07 	call	0xf16	; 0xf16 <_Z32send_intrussion_attemp_to_serverv>
    103c:	c3 e0       	ldi	r28, 0x03	; 3
  DO_INTRUSSION_BEEPS;
    103e:	28 ec       	ldi	r18, 0xC8	; 200
    1040:	30 e0       	ldi	r19, 0x00	; 0
    1042:	40 e0       	ldi	r20, 0x00	; 0
    1044:	50 e0       	ldi	r21, 0x00	; 0
    1046:	6c ed       	ldi	r22, 0xDC	; 220
    1048:	75 e0       	ldi	r23, 0x05	; 5
    104a:	83 e0       	ldi	r24, 0x03	; 3
    104c:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <_Z4tonehjm>
    1050:	66 e9       	ldi	r22, 0x96	; 150
    1052:	70 e0       	ldi	r23, 0x00	; 0
    1054:	80 e0       	ldi	r24, 0x00	; 0
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <delay>
    105c:	c1 50       	subi	r28, 0x01	; 1
    105e:	79 f7       	brne	.-34     	; 0x103e <_Z12alertUnknownv+0x14>
}
    1060:	cf 91       	pop	r28
    1062:	08 95       	ret

00001064 <loop>:
#else
  ElcanLcd.show_message("Initialized...");
#endif
}

void loop() {
    1064:	0f 93       	push	r16
    1066:	1f 93       	push	r17
    1068:	cf 93       	push	r28
    106a:	df 93       	push	r29
    106c:	cd b7       	in	r28, 0x3d	; 61
    106e:	de b7       	in	r29, 0x3e	; 62
    1070:	6c 97       	sbiw	r28, 0x1c	; 28
    1072:	0f b6       	in	r0, 0x3f	; 63
    1074:	f8 94       	cli
    1076:	de bf       	out	0x3e, r29	; 62
    1078:	0f be       	out	0x3f, r0	; 63
    107a:	cd bf       	out	0x3d, r28	; 61
  char dateString[22];
  DateTime tstamp;
    107c:	40 e0       	ldi	r20, 0x00	; 0
    107e:	50 e0       	ldi	r21, 0x00	; 0
    1080:	ba 01       	movw	r22, r20
    1082:	ce 01       	movw	r24, r28
    1084:	47 96       	adiw	r24, 0x17	; 23
    1086:	0e 94 0d 18 	call	0x301a	; 0x301a <_ZN8DateTimeC1Em>
  bool tmp;
  ElcanLcd.check_light();
    108a:	8b ea       	ldi	r24, 0xAB	; 171
    108c:	92 e0       	ldi	r25, 0x02	; 2
    108e:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <_ZN15ElcanLCDManager11check_lightEv>
  switch(sys_state) {
    1092:	60 91 cf 02 	lds	r22, 0x02CF	; 0x8002cf <sys_state>
    1096:	60 31       	cpi	r22, 0x10	; 16
    1098:	09 f4       	brne	.+2      	; 0x109c <loop+0x38>
    109a:	6a c0       	rjmp	.+212    	; 0x1170 <loop+0x10c>
    109c:	88 f4       	brcc	.+34     	; 0x10c0 <loop+0x5c>
    109e:	66 30       	cpi	r22, 0x06	; 6
    10a0:	38 f4       	brcc	.+14     	; 0x10b0 <loop+0x4c>
    10a2:	64 30       	cpi	r22, 0x04	; 4
    10a4:	70 f5       	brcc	.+92     	; 0x1102 <loop+0x9e>
    10a6:	61 30       	cpi	r22, 0x01	; 1
    10a8:	89 f1       	breq	.+98     	; 0x110c <loop+0xa8>
    10aa:	62 30       	cpi	r22, 0x02	; 2
    10ac:	51 f1       	breq	.+84     	; 0x1102 <loop+0x9e>
    10ae:	a5 c0       	rjmp	.+330    	; 0x11fa <loop+0x196>
    10b0:	67 30       	cpi	r22, 0x07	; 7
    10b2:	39 f1       	breq	.+78     	; 0x1102 <loop+0x9e>
    10b4:	68 30       	cpi	r22, 0x08	; 8
    10b6:	09 f0       	breq	.+2      	; 0x10ba <loop+0x56>
    10b8:	a0 c0       	rjmp	.+320    	; 0x11fa <loop+0x196>
      } else {
        check_wifi();
      }
      break;
    case READ_RFID:
      check_card_and_act(); //checks the card and if its valid, it starts the sequence
    10ba:	0e 94 1d 06 	call	0xc3a	; 0xc3a <_Z18check_card_and_actv>
      break;
    10be:	9d c0       	rjmp	.+314    	; 0x11fa <loop+0x196>
void loop() {
  char dateString[22];
  DateTime tstamp;
  bool tmp;
  ElcanLcd.check_light();
  switch(sys_state) {
    10c0:	69 38       	cpi	r22, 0x89	; 137
    10c2:	09 f4       	brne	.+2      	; 0x10c6 <loop+0x62>
    10c4:	90 c0       	rjmp	.+288    	; 0x11e6 <loop+0x182>
    10c6:	88 f4       	brcc	.+34     	; 0x10ea <loop+0x86>
    10c8:	60 34       	cpi	r22, 0x40	; 64
    10ca:	09 f4       	brne	.+2      	; 0x10ce <loop+0x6a>
    10cc:	7f c0       	rjmp	.+254    	; 0x11cc <loop+0x168>
    10ce:	60 38       	cpi	r22, 0x80	; 128
    10d0:	09 f4       	brne	.+2      	; 0x10d4 <loop+0x70>
    10d2:	65 c0       	rjmp	.+202    	; 0x119e <loop+0x13a>
    10d4:	60 32       	cpi	r22, 0x20	; 32
    10d6:	09 f0       	breq	.+2      	; 0x10da <loop+0x76>
    10d8:	90 c0       	rjmp	.+288    	; 0x11fa <loop+0x196>
      ElcanLcd.show_message("Acceso permitido");
      enteringTime = rtc.now();
      sys_state = READ_WEIGHT;
      break;
    case READ_WEIGHT:
      ElcanLcd.show_message("Espere por favor...");
    10da:	6b e1       	ldi	r22, 0x1B	; 27
    10dc:	72 e0       	ldi	r23, 0x02	; 2
    10de:	8b ea       	ldi	r24, 0xAB	; 171
    10e0:	92 e0       	ldi	r25, 0x02	; 2
    10e2:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <_ZN15ElcanLCDManager12show_messageEPc>
 #ifdef WITH_WEIGHT
      scale.get_weight(measuredWeight);
 #endif
      sys_state = WRITE_RECORD;
    10e6:	80 e8       	ldi	r24, 0x80	; 128
    10e8:	86 c0       	rjmp	.+268    	; 0x11f6 <loop+0x192>
void loop() {
  char dateString[22];
  DateTime tstamp;
  bool tmp;
  ElcanLcd.check_light();
  switch(sys_state) {
    10ea:	61 3c       	cpi	r22, 0xC1	; 193
    10ec:	09 f4       	brne	.+2      	; 0x10f0 <loop+0x8c>
    10ee:	7e c0       	rjmp	.+252    	; 0x11ec <loop+0x188>
    10f0:	6a 3f       	cpi	r22, 0xFA	; 250
    10f2:	09 f4       	brne	.+2      	; 0x10f6 <loop+0x92>
    10f4:	65 c0       	rjmp	.+202    	; 0x11c0 <loop+0x15c>
    10f6:	6b 3a       	cpi	r22, 0xAB	; 171
    10f8:	09 f0       	breq	.+2      	; 0x10fc <loop+0x98>
    10fa:	7f c0       	rjmp	.+254    	; 0x11fa <loop+0x196>
    case UNKNOWN_CARD:
      alertUnknown();
      sys_state = READY;
      break;
    case GET_TAG_DATA:
      get_tag_data();
    10fc:	0e 94 fe 06 	call	0xdfc	; 0xdfc <_Z12get_tag_datav>
    1100:	79 c0       	rjmp	.+242    	; 0x11f4 <loop+0x190>
  switch(sys_state) {
    case ERROR_WIFI:
    case ERROR_RFID:
    case ERROR_RTC:
    case ERROR_INVALID:
      ElcanLcd.show_error(sys_state);
    1102:	8b ea       	ldi	r24, 0xAB	; 171
    1104:	92 e0       	ldi	r25, 0x02	; 2
    1106:	0e 94 0e 02 	call	0x41c	; 0x41c <_ZN15ElcanLCDManager10show_errorEc>
      break;
    110a:	77 c0       	rjmp	.+238    	; 0x11fa <loop+0x196>
    case READY:
      sprintf(dateString, "%02d/%02d/%04d %02d:%02d", tstamp.day(), tstamp.month(),
      tstamp.year(), tstamp.hour(), tstamp.minute());
    110c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    110e:	1f 92       	push	r1
    1110:	8f 93       	push	r24
    1112:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1114:	1f 92       	push	r1
    1116:	8f 93       	push	r24
    1118:	8f 89       	ldd	r24, Y+23	; 0x17
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	80 53       	subi	r24, 0x30	; 48
    111e:	98 4f       	sbci	r25, 0xF8	; 248
    1120:	9f 93       	push	r25
    1122:	8f 93       	push	r24
    1124:	88 8d       	ldd	r24, Y+24	; 0x18
    1126:	1f 92       	push	r1
    1128:	8f 93       	push	r24
    112a:	89 8d       	ldd	r24, Y+25	; 0x19
    112c:	1f 92       	push	r1
    112e:	8f 93       	push	r24
    1130:	81 ef       	ldi	r24, 0xF1	; 241
    1132:	91 e0       	ldi	r25, 0x01	; 1
    1134:	9f 93       	push	r25
    1136:	8f 93       	push	r24
    1138:	8e 01       	movw	r16, r28
    113a:	0f 5f       	subi	r16, 0xFF	; 255
    113c:	1f 4f       	sbci	r17, 0xFF	; 255
    113e:	1f 93       	push	r17
    1140:	0f 93       	push	r16
    1142:	0e 94 72 1f 	call	0x3ee4	; 0x3ee4 <sprintf>
      ElcanLcd.show_ready(dateString);
    1146:	b8 01       	movw	r22, r16
    1148:	8b ea       	ldi	r24, 0xAB	; 171
    114a:	92 e0       	ldi	r25, 0x02	; 2
    114c:	0e 94 60 02 	call	0x4c0	; 0x4c0 <_ZN15ElcanLCDManager10show_readyEPc>
      if (rfid.getID()) {
    1150:	84 e9       	ldi	r24, 0x94	; 148
    1152:	92 e0       	ldi	r25, 0x02	; 2
    1154:	0e 94 1f 04 	call	0x83e	; 0x83e <_ZN11RfidManager5getIDEv>
    1158:	0f b6       	in	r0, 0x3f	; 63
    115a:	f8 94       	cli
    115c:	de bf       	out	0x3e, r29	; 62
    115e:	0f be       	out	0x3f, r0	; 63
    1160:	cd bf       	out	0x3d, r28	; 61
    1162:	88 23       	and	r24, r24
    1164:	11 f0       	breq	.+4      	; 0x116a <loop+0x106>
        sys_state = READ_RFID;
    1166:	88 e0       	ldi	r24, 0x08	; 8
    1168:	46 c0       	rjmp	.+140    	; 0x11f6 <loop+0x192>
      } else {
        check_wifi();
    116a:	0e 94 8b 06 	call	0xd16	; 0xd16 <_Z10check_wifiv>
    116e:	45 c0       	rjmp	.+138    	; 0x11fa <loop+0x196>
      break;
    case READ_RFID:
      check_card_and_act(); //checks the card and if its valid, it starts the sequence
      break;
    case READ_RTC:
      ElcanLcd.show_message("Acceso permitido");
    1170:	6a e0       	ldi	r22, 0x0A	; 10
    1172:	72 e0       	ldi	r23, 0x02	; 2
    1174:	8b ea       	ldi	r24, 0xAB	; 171
    1176:	92 e0       	ldi	r25, 0x02	; 2
    1178:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <_ZN15ElcanLCDManager12show_messageEPc>
      enteringTime = rtc.now();
    117c:	68 ea       	ldi	r22, 0xA8	; 168
    117e:	72 e0       	ldi	r23, 0x02	; 2
    1180:	ce 01       	movw	r24, r28
    1182:	01 96       	adiw	r24, 0x01	; 1
    1184:	0e 94 94 04 	call	0x928	; 0x928 <_ZN8ElcanRtc3nowEv>
    1188:	86 e0       	ldi	r24, 0x06	; 6
    118a:	fe 01       	movw	r30, r28
    118c:	31 96       	adiw	r30, 0x01	; 1
    118e:	a9 ec       	ldi	r26, 0xC9	; 201
    1190:	b2 e0       	ldi	r27, 0x02	; 2
    1192:	01 90       	ld	r0, Z+
    1194:	0d 92       	st	X+, r0
    1196:	8a 95       	dec	r24
    1198:	e1 f7       	brne	.-8      	; 0x1192 <loop+0x12e>
      sys_state = READ_WEIGHT;
    119a:	80 e2       	ldi	r24, 0x20	; 32
    119c:	2c c0       	rjmp	.+88     	; 0x11f6 <loop+0x192>
      break;
    case WRITE_RECORD:
#ifdef WITH_WIFI    
      send_to_server();
#endif
      timerStarted = rtc.now();
    119e:	68 ea       	ldi	r22, 0xA8	; 168
    11a0:	72 e0       	ldi	r23, 0x02	; 2
    11a2:	ce 01       	movw	r24, r28
    11a4:	01 96       	adiw	r24, 0x01	; 1
    11a6:	0e 94 94 04 	call	0x928	; 0x928 <_ZN8ElcanRtc3nowEv>
    11aa:	86 e0       	ldi	r24, 0x06	; 6
    11ac:	fe 01       	movw	r30, r28
    11ae:	31 96       	adiw	r30, 0x01	; 1
    11b0:	a3 ec       	ldi	r26, 0xC3	; 195
    11b2:	b2 e0       	ldi	r27, 0x02	; 2
    11b4:	01 90       	ld	r0, Z+
    11b6:	0d 92       	st	X+, r0
    11b8:	8a 95       	dec	r24
    11ba:	e1 f7       	brne	.-8      	; 0x11b4 <loop+0x150>
      sys_state = TIMED_WAIT;
    11bc:	8a ef       	ldi	r24, 0xFA	; 250
    11be:	1b c0       	rjmp	.+54     	; 0x11f6 <loop+0x192>
      break;
    case TIMED_WAIT:
      if (check_elapsed_time()) {
    11c0:	0e 94 5e 06 	call	0xcbc	; 0xcbc <_Z18check_elapsed_timev>
    11c4:	88 23       	and	r24, r24
    11c6:	c9 f0       	breq	.+50     	; 0x11fa <loop+0x196>
        sys_state = OPEN_BARRIER;
    11c8:	80 e4       	ldi	r24, 0x40	; 64
    11ca:	15 c0       	rjmp	.+42     	; 0x11f6 <loop+0x192>
      }
      break;
    case OPEN_BARRIER:
      ElcanLcd.show_message("Avance...");
    11cc:	6f e2       	ldi	r22, 0x2F	; 47
    11ce:	72 e0       	ldi	r23, 0x02	; 2
    11d0:	8b ea       	ldi	r24, 0xAB	; 171
    11d2:	92 e0       	ldi	r25, 0x02	; 2
    11d4:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <_ZN15ElcanLCDManager12show_messageEPc>
      open_barrier();
    11d8:	0e 94 50 06 	call	0xca0	; 0xca0 <_Z12open_barrierv>
      ElcanLcd.light_on();
    11dc:	8b ea       	ldi	r24, 0xAB	; 171
    11de:	92 e0       	ldi	r25, 0x02	; 2
    11e0:	0e 94 10 03 	call	0x620	; 0x620 <_ZN15ElcanLCDManager8light_onEv>
    11e4:	07 c0       	rjmp	.+14     	; 0x11f4 <loop+0x190>
      sys_state = READY;
      break;
    case UNKNOWN_CARD:
      alertUnknown();
    11e6:	0e 94 15 08 	call	0x102a	; 0x102a <_Z12alertUnknownv>
    11ea:	04 c0       	rjmp	.+8      	; 0x11f4 <loop+0x190>
    case GET_TAG_DATA:
      get_tag_data();
      sys_state = READY;
      break;
    case ADJUST_TIME:
      rtc.adjust_from_serial();
    11ec:	88 ea       	ldi	r24, 0xA8	; 168
    11ee:	92 e0       	ldi	r25, 0x02	; 2
    11f0:	0e 94 4e 05 	call	0xa9c	; 0xa9c <_ZN8ElcanRtc18adjust_from_serialEv>
      sys_state = READY;
    11f4:	81 e0       	ldi	r24, 0x01	; 1
    11f6:	80 93 cf 02 	sts	0x02CF, r24	; 0x8002cf <sys_state>
      break;
  }
}
    11fa:	6c 96       	adiw	r28, 0x1c	; 28
    11fc:	0f b6       	in	r0, 0x3f	; 63
    11fe:	f8 94       	cli
    1200:	de bf       	out	0x3e, r29	; 62
    1202:	0f be       	out	0x3f, r0	; 63
    1204:	cd bf       	out	0x3d, r28	; 61
    1206:	df 91       	pop	r29
    1208:	cf 91       	pop	r28
    120a:	1f 91       	pop	r17
    120c:	0f 91       	pop	r16
    120e:	08 95       	ret

00001210 <_Z9substringPcS_ii>:
﻿void substring(char src[], char dst[], int p, int l) {
    1210:	41 50       	subi	r20, 0x01	; 1
    1212:	51 09       	sbc	r21, r1
    1214:	fc 01       	movw	r30, r24
    1216:	e4 0f       	add	r30, r20
    1218:	f5 1f       	adc	r31, r21
    121a:	db 01       	movw	r26, r22
	int c = 0;	
	while (c < l) {
    121c:	ad 01       	movw	r20, r26
    121e:	46 1b       	sub	r20, r22
    1220:	57 0b       	sbc	r21, r23
    1222:	42 17       	cp	r20, r18
    1224:	53 07       	cpc	r21, r19
    1226:	1c f4       	brge	.+6      	; 0x122e <_Z9substringPcS_ii+0x1e>
		dst[c] = src[p+c-1];
    1228:	41 91       	ld	r20, Z+
    122a:	4d 93       	st	X+, r20
﻿void substring(char src[], char dst[], int p, int l) {
	int c = 0;	
	while (c < l) {
    122c:	f7 cf       	rjmp	.-18     	; 0x121c <_Z9substringPcS_ii+0xc>
		dst[c] = src[p+c-1];
		c++;
	}
	src[c] = '\0';
    122e:	37 ff       	sbrs	r19, 7
    1230:	02 c0       	rjmp	.+4      	; 0x1236 <_Z9substringPcS_ii+0x26>
    1232:	20 e0       	ldi	r18, 0x00	; 0
    1234:	30 e0       	ldi	r19, 0x00	; 0
    1236:	fc 01       	movw	r30, r24
    1238:	e2 0f       	add	r30, r18
    123a:	f3 1f       	adc	r31, r19
    123c:	10 82       	st	Z, r1
    123e:	08 95       	ret

00001240 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    1240:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    1242:	91 8d       	ldd	r25, Z+25	; 0x19
    1244:	22 8d       	ldd	r18, Z+26	; 0x1a
    1246:	89 2f       	mov	r24, r25
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	80 5c       	subi	r24, 0xC0	; 192
    124c:	9f 4f       	sbci	r25, 0xFF	; 255
    124e:	82 1b       	sub	r24, r18
    1250:	91 09       	sbc	r25, r1
}
    1252:	8f 73       	andi	r24, 0x3F	; 63
    1254:	99 27       	eor	r25, r25
    1256:	08 95       	ret

00001258 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    1258:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    125a:	91 8d       	ldd	r25, Z+25	; 0x19
    125c:	82 8d       	ldd	r24, Z+26	; 0x1a
    125e:	98 17       	cp	r25, r24
    1260:	31 f0       	breq	.+12     	; 0x126e <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    1262:	82 8d       	ldd	r24, Z+26	; 0x1a
    1264:	e8 0f       	add	r30, r24
    1266:	f1 1d       	adc	r31, r1
    1268:	85 8d       	ldd	r24, Z+29	; 0x1d
    126a:	90 e0       	ldi	r25, 0x00	; 0
    126c:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    126e:	8f ef       	ldi	r24, 0xFF	; 255
    1270:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    1272:	08 95       	ret

00001274 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    1274:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    1276:	91 8d       	ldd	r25, Z+25	; 0x19
    1278:	82 8d       	ldd	r24, Z+26	; 0x1a
    127a:	98 17       	cp	r25, r24
    127c:	61 f0       	breq	.+24     	; 0x1296 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    127e:	82 8d       	ldd	r24, Z+26	; 0x1a
    1280:	df 01       	movw	r26, r30
    1282:	a8 0f       	add	r26, r24
    1284:	b1 1d       	adc	r27, r1
    1286:	5d 96       	adiw	r26, 0x1d	; 29
    1288:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    128a:	92 8d       	ldd	r25, Z+26	; 0x1a
    128c:	9f 5f       	subi	r25, 0xFF	; 255
    128e:	9f 73       	andi	r25, 0x3F	; 63
    1290:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1296:	8f ef       	ldi	r24, 0xFF	; 255
    1298:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    129a:	08 95       	ret

0000129c <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    129c:	fc 01       	movw	r30, r24
    129e:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
    12a0:	44 8d       	ldd	r20, Z+28	; 0x1c
    12a2:	25 2f       	mov	r18, r21
    12a4:	30 e0       	ldi	r19, 0x00	; 0
    12a6:	84 2f       	mov	r24, r20
    12a8:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    12aa:	82 1b       	sub	r24, r18
    12ac:	93 0b       	sbc	r25, r19
    12ae:	54 17       	cp	r21, r20
    12b0:	10 f0       	brcs	.+4      	; 0x12b6 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    12b2:	cf 96       	adiw	r24, 0x3f	; 63
    12b4:	08 95       	ret
  return tail - head - 1;
    12b6:	01 97       	sbiw	r24, 0x01	; 1
}
    12b8:	08 95       	ret

000012ba <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    12ba:	88 e5       	ldi	r24, 0x58	; 88
    12bc:	9a e0       	ldi	r25, 0x0A	; 10
    12be:	89 2b       	or	r24, r25
    12c0:	49 f0       	breq	.+18     	; 0x12d4 <_Z14serialEventRunv+0x1a>
    12c2:	80 e0       	ldi	r24, 0x00	; 0
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	89 2b       	or	r24, r25
    12c8:	29 f0       	breq	.+10     	; 0x12d4 <_Z14serialEventRunv+0x1a>
    12ca:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <_Z17Serial0_availablev>
    12ce:	81 11       	cpse	r24, r1
    12d0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    12d4:	08 95       	ret

000012d6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    12d6:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    12d8:	84 8d       	ldd	r24, Z+28	; 0x1c
    12da:	df 01       	movw	r26, r30
    12dc:	a8 0f       	add	r26, r24
    12de:	b1 1d       	adc	r27, r1
    12e0:	a3 5a       	subi	r26, 0xA3	; 163
    12e2:	bf 4f       	sbci	r27, 0xFF	; 255
    12e4:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    12e6:	84 8d       	ldd	r24, Z+28	; 0x1c
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	01 96       	adiw	r24, 0x01	; 1
    12ec:	8f 73       	andi	r24, 0x3F	; 63
    12ee:	99 27       	eor	r25, r25
    12f0:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    12f2:	a6 89       	ldd	r26, Z+22	; 0x16
    12f4:	b7 89       	ldd	r27, Z+23	; 0x17
    12f6:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    12f8:	a0 89       	ldd	r26, Z+16	; 0x10
    12fa:	b1 89       	ldd	r27, Z+17	; 0x11
    12fc:	8c 91       	ld	r24, X
    12fe:	83 70       	andi	r24, 0x03	; 3
    1300:	80 64       	ori	r24, 0x40	; 64
    1302:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    1304:	93 8d       	ldd	r25, Z+27	; 0x1b
    1306:	84 8d       	ldd	r24, Z+28	; 0x1c
    1308:	98 13       	cpse	r25, r24
    130a:	06 c0       	rjmp	.+12     	; 0x1318 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    130c:	02 88       	ldd	r0, Z+18	; 0x12
    130e:	f3 89       	ldd	r31, Z+19	; 0x13
    1310:	e0 2d       	mov	r30, r0
    1312:	80 81       	ld	r24, Z
    1314:	8f 7d       	andi	r24, 0xDF	; 223
    1316:	80 83       	st	Z, r24
    1318:	08 95       	ret

0000131a <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    131a:	ef 92       	push	r14
    131c:	ff 92       	push	r15
    131e:	0f 93       	push	r16
    1320:	1f 93       	push	r17
    1322:	cf 93       	push	r28
    1324:	df 93       	push	r29
    1326:	ec 01       	movw	r28, r24
  _written = true;
    1328:	81 e0       	ldi	r24, 0x01	; 1
    132a:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    132c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    132e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1330:	98 13       	cpse	r25, r24
    1332:	05 c0       	rjmp	.+10     	; 0x133e <_ZN14HardwareSerial5writeEh+0x24>
    1334:	e8 89       	ldd	r30, Y+16	; 0x10
    1336:	f9 89       	ldd	r31, Y+17	; 0x11
    1338:	80 81       	ld	r24, Z
    133a:	85 fd       	sbrc	r24, 5
    133c:	26 c0       	rjmp	.+76     	; 0x138a <_ZN14HardwareSerial5writeEh+0x70>
    133e:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    1340:	0b 8d       	ldd	r16, Y+27	; 0x1b
    1342:	10 e0       	ldi	r17, 0x00	; 0
    1344:	0f 5f       	subi	r16, 0xFF	; 255
    1346:	1f 4f       	sbci	r17, 0xFF	; 255
    1348:	0f 73       	andi	r16, 0x3F	; 63
    134a:	11 27       	eor	r17, r17
    134c:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    134e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1350:	e8 12       	cpse	r14, r24
    1352:	0c c0       	rjmp	.+24     	; 0x136c <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    1354:	0f b6       	in	r0, 0x3f	; 63
    1356:	07 fc       	sbrc	r0, 7
    1358:	fa cf       	rjmp	.-12     	; 0x134e <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    135a:	e8 89       	ldd	r30, Y+16	; 0x10
    135c:	f9 89       	ldd	r31, Y+17	; 0x11
    135e:	80 81       	ld	r24, Z
    1360:	85 ff       	sbrs	r24, 5
    1362:	f5 cf       	rjmp	.-22     	; 0x134e <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    1364:	ce 01       	movw	r24, r28
    1366:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    136a:	f1 cf       	rjmp	.-30     	; 0x134e <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    136c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    136e:	fe 01       	movw	r30, r28
    1370:	e8 0f       	add	r30, r24
    1372:	f1 1d       	adc	r31, r1
    1374:	e3 5a       	subi	r30, 0xA3	; 163
    1376:	ff 4f       	sbci	r31, 0xFF	; 255
    1378:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    137a:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    137c:	f8 94       	cli
    _tx_buffer_head = i;
    137e:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    1380:	ea 89       	ldd	r30, Y+18	; 0x12
    1382:	fb 89       	ldd	r31, Y+19	; 0x13
    1384:	80 81       	ld	r24, Z
    1386:	80 62       	ori	r24, 0x20	; 32
    1388:	0a c0       	rjmp	.+20     	; 0x139e <_ZN14HardwareSerial5writeEh+0x84>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    138a:	9f b7       	in	r25, 0x3f	; 63
    138c:	f8 94       	cli
      *_udr = c;
    138e:	ee 89       	ldd	r30, Y+22	; 0x16
    1390:	ff 89       	ldd	r31, Y+23	; 0x17
    1392:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    1394:	e8 89       	ldd	r30, Y+16	; 0x10
    1396:	f9 89       	ldd	r31, Y+17	; 0x11
    1398:	80 81       	ld	r24, Z
    139a:	83 70       	andi	r24, 0x03	; 3
    139c:	80 64       	ori	r24, 0x40	; 64
    139e:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    13a0:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
    13a2:	81 e0       	ldi	r24, 0x01	; 1
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	df 91       	pop	r29
    13a8:	cf 91       	pop	r28
    13aa:	1f 91       	pop	r17
    13ac:	0f 91       	pop	r16
    13ae:	ff 90       	pop	r15
    13b0:	ef 90       	pop	r14
    13b2:	08 95       	ret

000013b4 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    13b4:	cf 93       	push	r28
    13b6:	df 93       	push	r29
    13b8:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    13ba:	88 8d       	ldd	r24, Y+24	; 0x18
    13bc:	88 23       	and	r24, r24
    13be:	c9 f0       	breq	.+50     	; 0x13f2 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    13c0:	ea 89       	ldd	r30, Y+18	; 0x12
    13c2:	fb 89       	ldd	r31, Y+19	; 0x13
    13c4:	80 81       	ld	r24, Z
    13c6:	85 fd       	sbrc	r24, 5
    13c8:	05 c0       	rjmp	.+10     	; 0x13d4 <_ZN14HardwareSerial5flushEv+0x20>
    13ca:	a8 89       	ldd	r26, Y+16	; 0x10
    13cc:	b9 89       	ldd	r27, Y+17	; 0x11
    13ce:	8c 91       	ld	r24, X
    13d0:	86 fd       	sbrc	r24, 6
    13d2:	0f c0       	rjmp	.+30     	; 0x13f2 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    13d4:	0f b6       	in	r0, 0x3f	; 63
    13d6:	07 fc       	sbrc	r0, 7
    13d8:	f5 cf       	rjmp	.-22     	; 0x13c4 <_ZN14HardwareSerial5flushEv+0x10>
    13da:	80 81       	ld	r24, Z
    13dc:	85 ff       	sbrs	r24, 5
    13de:	f2 cf       	rjmp	.-28     	; 0x13c4 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    13e0:	a8 89       	ldd	r26, Y+16	; 0x10
    13e2:	b9 89       	ldd	r27, Y+17	; 0x11
    13e4:	8c 91       	ld	r24, X
    13e6:	85 ff       	sbrs	r24, 5
    13e8:	ed cf       	rjmp	.-38     	; 0x13c4 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    13ea:	ce 01       	movw	r24, r28
    13ec:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    13f0:	e7 cf       	rjmp	.-50     	; 0x13c0 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    13f2:	df 91       	pop	r29
    13f4:	cf 91       	pop	r28
    13f6:	08 95       	ret

000013f8 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    13f8:	80 e0       	ldi	r24, 0x00	; 0
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	08 95       	ret

000013fe <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    13fe:	08 95       	ret

00001400 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    1400:	1f 92       	push	r1
    1402:	0f 92       	push	r0
    1404:	0f b6       	in	r0, 0x3f	; 63
    1406:	0f 92       	push	r0
    1408:	11 24       	eor	r1, r1
    140a:	2f 93       	push	r18
    140c:	8f 93       	push	r24
    140e:	9f 93       	push	r25
    1410:	ef 93       	push	r30
    1412:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    1414:	e0 91 e0 02 	lds	r30, 0x02E0	; 0x8002e0 <Serial+0x10>
    1418:	f0 91 e1 02 	lds	r31, 0x02E1	; 0x8002e1 <Serial+0x11>
    141c:	80 81       	ld	r24, Z
    141e:	e0 91 e6 02 	lds	r30, 0x02E6	; 0x8002e6 <Serial+0x16>
    1422:	f0 91 e7 02 	lds	r31, 0x02E7	; 0x8002e7 <Serial+0x17>
    1426:	82 fd       	sbrc	r24, 2
    1428:	12 c0       	rjmp	.+36     	; 0x144e <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    142a:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    142c:	80 91 e9 02 	lds	r24, 0x02E9	; 0x8002e9 <Serial+0x19>
    1430:	8f 5f       	subi	r24, 0xFF	; 255
    1432:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    1434:	20 91 ea 02 	lds	r18, 0x02EA	; 0x8002ea <Serial+0x1a>
    1438:	82 17       	cp	r24, r18
    143a:	51 f0       	breq	.+20     	; 0x1450 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    143c:	e0 91 e9 02 	lds	r30, 0x02E9	; 0x8002e9 <Serial+0x19>
    1440:	f0 e0       	ldi	r31, 0x00	; 0
    1442:	e0 53       	subi	r30, 0x30	; 48
    1444:	fd 4f       	sbci	r31, 0xFD	; 253
    1446:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    1448:	80 93 e9 02 	sts	0x02E9, r24	; 0x8002e9 <Serial+0x19>
    144c:	01 c0       	rjmp	.+2      	; 0x1450 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    144e:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    1450:	ff 91       	pop	r31
    1452:	ef 91       	pop	r30
    1454:	9f 91       	pop	r25
    1456:	8f 91       	pop	r24
    1458:	2f 91       	pop	r18
    145a:	0f 90       	pop	r0
    145c:	0f be       	out	0x3f, r0	; 63
    145e:	0f 90       	pop	r0
    1460:	1f 90       	pop	r1
    1462:	18 95       	reti

00001464 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    1464:	1f 92       	push	r1
    1466:	0f 92       	push	r0
    1468:	0f b6       	in	r0, 0x3f	; 63
    146a:	0f 92       	push	r0
    146c:	11 24       	eor	r1, r1
    146e:	2f 93       	push	r18
    1470:	3f 93       	push	r19
    1472:	4f 93       	push	r20
    1474:	5f 93       	push	r21
    1476:	6f 93       	push	r22
    1478:	7f 93       	push	r23
    147a:	8f 93       	push	r24
    147c:	9f 93       	push	r25
    147e:	af 93       	push	r26
    1480:	bf 93       	push	r27
    1482:	ef 93       	push	r30
    1484:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    1486:	80 ed       	ldi	r24, 0xD0	; 208
    1488:	92 e0       	ldi	r25, 0x02	; 2
    148a:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    148e:	ff 91       	pop	r31
    1490:	ef 91       	pop	r30
    1492:	bf 91       	pop	r27
    1494:	af 91       	pop	r26
    1496:	9f 91       	pop	r25
    1498:	8f 91       	pop	r24
    149a:	7f 91       	pop	r23
    149c:	6f 91       	pop	r22
    149e:	5f 91       	pop	r21
    14a0:	4f 91       	pop	r20
    14a2:	3f 91       	pop	r19
    14a4:	2f 91       	pop	r18
    14a6:	0f 90       	pop	r0
    14a8:	0f be       	out	0x3f, r0	; 63
    14aa:	0f 90       	pop	r0
    14ac:	1f 90       	pop	r1
    14ae:	18 95       	reti

000014b0 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    14b0:	80 ed       	ldi	r24, 0xD0	; 208
    14b2:	92 e0       	ldi	r25, 0x02	; 2
    14b4:	0e 94 20 09 	call	0x1240	; 0x1240 <_ZN14HardwareSerial9availableEv>
    14b8:	21 e0       	ldi	r18, 0x01	; 1
    14ba:	89 2b       	or	r24, r25
    14bc:	09 f4       	brne	.+2      	; 0x14c0 <_Z17Serial0_availablev+0x10>
    14be:	20 e0       	ldi	r18, 0x00	; 0
}
    14c0:	82 2f       	mov	r24, r18
    14c2:	08 95       	ret

000014c4 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    14c4:	e0 ed       	ldi	r30, 0xD0	; 208
    14c6:	f2 e0       	ldi	r31, 0x02	; 2
    14c8:	13 82       	std	Z+3, r1	; 0x03
    14ca:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    14cc:	88 ee       	ldi	r24, 0xE8	; 232
    14ce:	93 e0       	ldi	r25, 0x03	; 3
    14d0:	a0 e0       	ldi	r26, 0x00	; 0
    14d2:	b0 e0       	ldi	r27, 0x00	; 0
    14d4:	84 83       	std	Z+4, r24	; 0x04
    14d6:	95 83       	std	Z+5, r25	; 0x05
    14d8:	a6 83       	std	Z+6, r26	; 0x06
    14da:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    14dc:	8f e4       	ldi	r24, 0x4F	; 79
    14de:	92 e0       	ldi	r25, 0x02	; 2
    14e0:	91 83       	std	Z+1, r25	; 0x01
    14e2:	80 83       	st	Z, r24
    14e4:	85 ec       	ldi	r24, 0xC5	; 197
    14e6:	90 e0       	ldi	r25, 0x00	; 0
    14e8:	95 87       	std	Z+13, r25	; 0x0d
    14ea:	84 87       	std	Z+12, r24	; 0x0c
    14ec:	84 ec       	ldi	r24, 0xC4	; 196
    14ee:	90 e0       	ldi	r25, 0x00	; 0
    14f0:	97 87       	std	Z+15, r25	; 0x0f
    14f2:	86 87       	std	Z+14, r24	; 0x0e
    14f4:	80 ec       	ldi	r24, 0xC0	; 192
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	91 8b       	std	Z+17, r25	; 0x11
    14fa:	80 8b       	std	Z+16, r24	; 0x10
    14fc:	81 ec       	ldi	r24, 0xC1	; 193
    14fe:	90 e0       	ldi	r25, 0x00	; 0
    1500:	93 8b       	std	Z+19, r25	; 0x13
    1502:	82 8b       	std	Z+18, r24	; 0x12
    1504:	82 ec       	ldi	r24, 0xC2	; 194
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	95 8b       	std	Z+21, r25	; 0x15
    150a:	84 8b       	std	Z+20, r24	; 0x14
    150c:	86 ec       	ldi	r24, 0xC6	; 198
    150e:	90 e0       	ldi	r25, 0x00	; 0
    1510:	97 8b       	std	Z+23, r25	; 0x17
    1512:	86 8b       	std	Z+22, r24	; 0x16
    1514:	11 8e       	std	Z+25, r1	; 0x19
    1516:	12 8e       	std	Z+26, r1	; 0x1a
    1518:	13 8e       	std	Z+27, r1	; 0x1b
    151a:	14 8e       	std	Z+28, r1	; 0x1c
    151c:	08 95       	ret

0000151e <initVariant>:
    151e:	08 95       	ret

00001520 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    1520:	0e 94 2d 10 	call	0x205a	; 0x205a <init>

	initVariant();
    1524:	0e 94 8f 0a 	call	0x151e	; 0x151e <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    1528:	0e 94 d0 05 	call	0xba0	; 0xba0 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    152c:	cd e5       	ldi	r28, 0x5D	; 93
    152e:	d9 e0       	ldi	r29, 0x09	; 9
#endif
	
	setup();
    
	for (;;) {
		loop();
    1530:	0e 94 32 08 	call	0x1064	; 0x1064 <loop>
		if (serialEventRun) serialEventRun();
    1534:	20 97       	sbiw	r28, 0x00	; 0
    1536:	e1 f3       	breq	.-8      	; 0x1530 <main+0x10>
    1538:	0e 94 5d 09 	call	0x12ba	; 0x12ba <_Z14serialEventRunv>
    153c:	f9 cf       	rjmp	.-14     	; 0x1530 <main+0x10>

0000153e <_ZN5Print5writeEPKhj>:
size_t Print::println(unsigned int num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    153e:	cf 92       	push	r12
    1540:	df 92       	push	r13
    1542:	ef 92       	push	r14
    1544:	ff 92       	push	r15
    1546:	0f 93       	push	r16
    1548:	1f 93       	push	r17
    154a:	cf 93       	push	r28
    154c:	df 93       	push	r29
    154e:	6c 01       	movw	r12, r24
    1550:	7a 01       	movw	r14, r20
    1552:	8b 01       	movw	r16, r22
    1554:	c0 e0       	ldi	r28, 0x00	; 0
    1556:	d0 e0       	ldi	r29, 0x00	; 0
    1558:	ce 15       	cp	r28, r14
    155a:	df 05       	cpc	r29, r15
    155c:	81 f0       	breq	.+32     	; 0x157e <_ZN5Print5writeEPKhj+0x40>
    155e:	d8 01       	movw	r26, r16
    1560:	6d 91       	ld	r22, X+
    1562:	8d 01       	movw	r16, r26
    1564:	d6 01       	movw	r26, r12
    1566:	ed 91       	ld	r30, X+
    1568:	fc 91       	ld	r31, X
    156a:	01 90       	ld	r0, Z+
    156c:	f0 81       	ld	r31, Z
    156e:	e0 2d       	mov	r30, r0
    1570:	c6 01       	movw	r24, r12
    1572:	09 95       	icall
    1574:	89 2b       	or	r24, r25
    1576:	11 f0       	breq	.+4      	; 0x157c <_ZN5Print5writeEPKhj+0x3e>
    1578:	21 96       	adiw	r28, 0x01	; 1
    157a:	ee cf       	rjmp	.-36     	; 0x1558 <_ZN5Print5writeEPKhj+0x1a>
    157c:	7e 01       	movw	r14, r28
    157e:	c7 01       	movw	r24, r14
    1580:	df 91       	pop	r29
    1582:	cf 91       	pop	r28
    1584:	1f 91       	pop	r17
    1586:	0f 91       	pop	r16
    1588:	ff 90       	pop	r15
    158a:	ef 90       	pop	r14
    158c:	df 90       	pop	r13
    158e:	cf 90       	pop	r12
    1590:	08 95       	ret

00001592 <_ZN5Print5printEPK19__FlashStringHelper>:
    1592:	ef 92       	push	r14
    1594:	ff 92       	push	r15
    1596:	0f 93       	push	r16
    1598:	1f 93       	push	r17
    159a:	cf 93       	push	r28
    159c:	df 93       	push	r29
    159e:	8c 01       	movw	r16, r24
    15a0:	7b 01       	movw	r14, r22
    15a2:	c0 e0       	ldi	r28, 0x00	; 0
    15a4:	d0 e0       	ldi	r29, 0x00	; 0
    15a6:	f7 01       	movw	r30, r14
    15a8:	ec 0f       	add	r30, r28
    15aa:	fd 1f       	adc	r31, r29
    15ac:	64 91       	lpm	r22, Z
    15ae:	66 23       	and	r22, r22
    15b0:	61 f0       	breq	.+24     	; 0x15ca <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    15b2:	d8 01       	movw	r26, r16
    15b4:	ed 91       	ld	r30, X+
    15b6:	fc 91       	ld	r31, X
    15b8:	01 90       	ld	r0, Z+
    15ba:	f0 81       	ld	r31, Z
    15bc:	e0 2d       	mov	r30, r0
    15be:	c8 01       	movw	r24, r16
    15c0:	09 95       	icall
    15c2:	89 2b       	or	r24, r25
    15c4:	11 f0       	breq	.+4      	; 0x15ca <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    15c6:	21 96       	adiw	r28, 0x01	; 1
    15c8:	ee cf       	rjmp	.-36     	; 0x15a6 <_ZN5Print5printEPK19__FlashStringHelper+0x14>
    15ca:	ce 01       	movw	r24, r28
    15cc:	df 91       	pop	r29
    15ce:	cf 91       	pop	r28
    15d0:	1f 91       	pop	r17
    15d2:	0f 91       	pop	r16
    15d4:	ff 90       	pop	r15
    15d6:	ef 90       	pop	r14
    15d8:	08 95       	ret

000015da <_ZN5Print5printEPKc>:
    15da:	0c 94 1e 03 	jmp	0x63c	; 0x63c <_ZN5Print5writeEPKc>

000015de <_ZN5Print5printEc>:
    15de:	dc 01       	movw	r26, r24
    15e0:	ed 91       	ld	r30, X+
    15e2:	fc 91       	ld	r31, X
    15e4:	01 90       	ld	r0, Z+
    15e6:	f0 81       	ld	r31, Z
    15e8:	e0 2d       	mov	r30, r0
    15ea:	09 94       	ijmp

000015ec <_ZN5Print7printlnEv>:
    15ec:	61 e6       	ldi	r22, 0x61	; 97
    15ee:	71 e0       	ldi	r23, 0x01	; 1
    15f0:	0c 94 1e 03 	jmp	0x63c	; 0x63c <_ZN5Print5writeEPKc>

000015f4 <_ZN5Print7printlnEPKc>:
    15f4:	0f 93       	push	r16
    15f6:	1f 93       	push	r17
    15f8:	cf 93       	push	r28
    15fa:	df 93       	push	r29
    15fc:	ec 01       	movw	r28, r24
    15fe:	0e 94 1e 03 	call	0x63c	; 0x63c <_ZN5Print5writeEPKc>
    1602:	8c 01       	movw	r16, r24
    1604:	ce 01       	movw	r24, r28
    1606:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <_ZN5Print7printlnEv>
    160a:	80 0f       	add	r24, r16
    160c:	91 1f       	adc	r25, r17
    160e:	df 91       	pop	r29
    1610:	cf 91       	pop	r28
    1612:	1f 91       	pop	r17
    1614:	0f 91       	pop	r16
    1616:	08 95       	ret

00001618 <_ZN5Print11printNumberEmh>:
    1618:	8f 92       	push	r8
    161a:	9f 92       	push	r9
    161c:	af 92       	push	r10
    161e:	bf 92       	push	r11
    1620:	ef 92       	push	r14
    1622:	ff 92       	push	r15
    1624:	0f 93       	push	r16
    1626:	1f 93       	push	r17
    1628:	cf 93       	push	r28
    162a:	df 93       	push	r29
    162c:	cd b7       	in	r28, 0x3d	; 61
    162e:	de b7       	in	r29, 0x3e	; 62
    1630:	a1 97       	sbiw	r28, 0x21	; 33
    1632:	0f b6       	in	r0, 0x3f	; 63
    1634:	f8 94       	cli
    1636:	de bf       	out	0x3e, r29	; 62
    1638:	0f be       	out	0x3f, r0	; 63
    163a:	cd bf       	out	0x3d, r28	; 61
    163c:	7c 01       	movw	r14, r24
    163e:	fa 01       	movw	r30, r20
    1640:	cb 01       	movw	r24, r22
    1642:	19 a2       	std	Y+33, r1	; 0x21
    1644:	22 30       	cpi	r18, 0x02	; 2
    1646:	08 f4       	brcc	.+2      	; 0x164a <_ZN5Print11printNumberEmh+0x32>
    1648:	2a e0       	ldi	r18, 0x0A	; 10
    164a:	8e 01       	movw	r16, r28
    164c:	0f 5d       	subi	r16, 0xDF	; 223
    164e:	1f 4f       	sbci	r17, 0xFF	; 255
    1650:	82 2e       	mov	r8, r18
    1652:	91 2c       	mov	r9, r1
    1654:	a1 2c       	mov	r10, r1
    1656:	b1 2c       	mov	r11, r1
    1658:	bf 01       	movw	r22, r30
    165a:	a5 01       	movw	r20, r10
    165c:	94 01       	movw	r18, r8
    165e:	0e 94 9b 1e 	call	0x3d36	; 0x3d36 <__udivmodsi4>
    1662:	f9 01       	movw	r30, r18
    1664:	ca 01       	movw	r24, r20
    1666:	01 50       	subi	r16, 0x01	; 1
    1668:	11 09       	sbc	r17, r1
    166a:	6a 30       	cpi	r22, 0x0A	; 10
    166c:	10 f4       	brcc	.+4      	; 0x1672 <_ZN5Print11printNumberEmh+0x5a>
    166e:	60 5d       	subi	r22, 0xD0	; 208
    1670:	01 c0       	rjmp	.+2      	; 0x1674 <_ZN5Print11printNumberEmh+0x5c>
    1672:	69 5c       	subi	r22, 0xC9	; 201
    1674:	d8 01       	movw	r26, r16
    1676:	6c 93       	st	X, r22
    1678:	23 2b       	or	r18, r19
    167a:	24 2b       	or	r18, r20
    167c:	25 2b       	or	r18, r21
    167e:	61 f7       	brne	.-40     	; 0x1658 <_ZN5Print11printNumberEmh+0x40>
    1680:	b8 01       	movw	r22, r16
    1682:	c7 01       	movw	r24, r14
    1684:	0e 94 1e 03 	call	0x63c	; 0x63c <_ZN5Print5writeEPKc>
    1688:	a1 96       	adiw	r28, 0x21	; 33
    168a:	0f b6       	in	r0, 0x3f	; 63
    168c:	f8 94       	cli
    168e:	de bf       	out	0x3e, r29	; 62
    1690:	0f be       	out	0x3f, r0	; 63
    1692:	cd bf       	out	0x3d, r28	; 61
    1694:	df 91       	pop	r29
    1696:	cf 91       	pop	r28
    1698:	1f 91       	pop	r17
    169a:	0f 91       	pop	r16
    169c:	ff 90       	pop	r15
    169e:	ef 90       	pop	r14
    16a0:	bf 90       	pop	r11
    16a2:	af 90       	pop	r10
    16a4:	9f 90       	pop	r9
    16a6:	8f 90       	pop	r8
    16a8:	08 95       	ret

000016aa <_ZN5Print5printEmi>:
    16aa:	21 15       	cp	r18, r1
    16ac:	31 05       	cpc	r19, r1
    16ae:	41 f4       	brne	.+16     	; 0x16c0 <_ZN5Print5printEmi+0x16>
    16b0:	dc 01       	movw	r26, r24
    16b2:	ed 91       	ld	r30, X+
    16b4:	fc 91       	ld	r31, X
    16b6:	01 90       	ld	r0, Z+
    16b8:	f0 81       	ld	r31, Z
    16ba:	e0 2d       	mov	r30, r0
    16bc:	64 2f       	mov	r22, r20
    16be:	09 94       	ijmp
    16c0:	0c 94 0c 0b 	jmp	0x1618	; 0x1618 <_ZN5Print11printNumberEmh>

000016c4 <_ZN5Print5printEhi>:
    16c4:	9a 01       	movw	r18, r20
    16c6:	46 2f       	mov	r20, r22
    16c8:	50 e0       	ldi	r21, 0x00	; 0
    16ca:	60 e0       	ldi	r22, 0x00	; 0
    16cc:	70 e0       	ldi	r23, 0x00	; 0
    16ce:	0c 94 55 0b 	jmp	0x16aa	; 0x16aa <_ZN5Print5printEmi>

000016d2 <_ZN5Print7printlnEhi>:
    16d2:	0f 93       	push	r16
    16d4:	1f 93       	push	r17
    16d6:	cf 93       	push	r28
    16d8:	df 93       	push	r29
    16da:	ec 01       	movw	r28, r24
    16dc:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <_ZN5Print5printEhi>
    16e0:	8c 01       	movw	r16, r24
    16e2:	ce 01       	movw	r24, r28
    16e4:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <_ZN5Print7printlnEv>
    16e8:	80 0f       	add	r24, r16
    16ea:	91 1f       	adc	r25, r17
    16ec:	df 91       	pop	r29
    16ee:	cf 91       	pop	r28
    16f0:	1f 91       	pop	r17
    16f2:	0f 91       	pop	r16
    16f4:	08 95       	ret

000016f6 <_ZN5Print5printEji>:
    16f6:	9a 01       	movw	r18, r20
    16f8:	ab 01       	movw	r20, r22
    16fa:	60 e0       	ldi	r22, 0x00	; 0
    16fc:	70 e0       	ldi	r23, 0x00	; 0
    16fe:	0c 94 55 0b 	jmp	0x16aa	; 0x16aa <_ZN5Print5printEmi>

00001702 <_ZN5Print7printlnEmi>:
  n += println();
  return n;
}

size_t Print::println(unsigned long num, int base)
{
    1702:	0f 93       	push	r16
    1704:	1f 93       	push	r17
    1706:	cf 93       	push	r28
    1708:	df 93       	push	r29
    170a:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    170c:	0e 94 55 0b 	call	0x16aa	; 0x16aa <_ZN5Print5printEmi>
    1710:	8c 01       	movw	r16, r24
  n += println();
    1712:	ce 01       	movw	r24, r28
    1714:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <_ZN5Print7printlnEv>
  return n;
}
    1718:	80 0f       	add	r24, r16
    171a:	91 1f       	adc	r25, r17
    171c:	df 91       	pop	r29
    171e:	cf 91       	pop	r28
    1720:	1f 91       	pop	r17
    1722:	0f 91       	pop	r16
    1724:	08 95       	ret

00001726 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
    1726:	cf 92       	push	r12
    1728:	df 92       	push	r13
    172a:	ef 92       	push	r14
    172c:	ff 92       	push	r15
    172e:	0f 93       	push	r16
    1730:	1f 93       	push	r17
    1732:	cf 93       	push	r28
    1734:	df 93       	push	r29
  if (base == 0) {
    1736:	21 15       	cp	r18, r1
    1738:	31 05       	cpc	r19, r1
    173a:	81 f4       	brne	.+32     	; 0x175c <_ZN5Print5printEli+0x36>
    return write(n);
    173c:	dc 01       	movw	r26, r24
    173e:	ed 91       	ld	r30, X+
    1740:	fc 91       	ld	r31, X
    1742:	01 90       	ld	r0, Z+
    1744:	f0 81       	ld	r31, Z
    1746:	e0 2d       	mov	r30, r0
    1748:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    174a:	df 91       	pop	r29
    174c:	cf 91       	pop	r28
    174e:	1f 91       	pop	r17
    1750:	0f 91       	pop	r16
    1752:	ff 90       	pop	r15
    1754:	ef 90       	pop	r14
    1756:	df 90       	pop	r13
    1758:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
    175a:	09 94       	ijmp
  } else if (base == 10) {
    175c:	2a 30       	cpi	r18, 0x0A	; 10
    175e:	31 05       	cpc	r19, r1
    1760:	01 f5       	brne	.+64     	; 0x17a2 <_ZN5Print5printEli+0x7c>
    if (n < 0) {
    1762:	77 ff       	sbrs	r23, 7
    1764:	1d c0       	rjmp	.+58     	; 0x17a0 <_ZN5Print5printEli+0x7a>
    1766:	6a 01       	movw	r12, r20
    1768:	7b 01       	movw	r14, r22
    176a:	ec 01       	movw	r28, r24
      int t = print('-');
    176c:	6d e2       	ldi	r22, 0x2D	; 45
    176e:	0e 94 ef 0a 	call	0x15de	; 0x15de <_ZN5Print5printEc>
    1772:	8c 01       	movw	r16, r24
      n = -n;
      return printNumber(n, 10) + t;
    1774:	44 27       	eor	r20, r20
    1776:	55 27       	eor	r21, r21
    1778:	ba 01       	movw	r22, r20
    177a:	4c 19       	sub	r20, r12
    177c:	5d 09       	sbc	r21, r13
    177e:	6e 09       	sbc	r22, r14
    1780:	7f 09       	sbc	r23, r15
    1782:	2a e0       	ldi	r18, 0x0A	; 10
    1784:	ce 01       	movw	r24, r28
    1786:	0e 94 0c 0b 	call	0x1618	; 0x1618 <_ZN5Print11printNumberEmh>
    178a:	80 0f       	add	r24, r16
    178c:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    178e:	df 91       	pop	r29
    1790:	cf 91       	pop	r28
    1792:	1f 91       	pop	r17
    1794:	0f 91       	pop	r16
    1796:	ff 90       	pop	r15
    1798:	ef 90       	pop	r14
    179a:	df 90       	pop	r13
    179c:	cf 90       	pop	r12
    179e:	08 95       	ret
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
    17a0:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
  }
}
    17a2:	df 91       	pop	r29
    17a4:	cf 91       	pop	r28
    17a6:	1f 91       	pop	r17
    17a8:	0f 91       	pop	r16
    17aa:	ff 90       	pop	r15
    17ac:	ef 90       	pop	r14
    17ae:	df 90       	pop	r13
    17b0:	cf 90       	pop	r12
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
    17b2:	0c 94 0c 0b 	jmp	0x1618	; 0x1618 <_ZN5Print11printNumberEmh>

000017b6 <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
    17b6:	9a 01       	movw	r18, r20
  return print((long) n, base);
    17b8:	ab 01       	movw	r20, r22
    17ba:	77 0f       	add	r23, r23
    17bc:	66 0b       	sbc	r22, r22
    17be:	77 0b       	sbc	r23, r23
    17c0:	0c 94 93 0b 	jmp	0x1726	; 0x1726 <_ZN5Print5printEli>

000017c4 <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
    17c4:	0f 93       	push	r16
    17c6:	1f 93       	push	r17
    17c8:	cf 93       	push	r28
    17ca:	df 93       	push	r29
    17cc:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    17ce:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <_ZN5Print5printEii>
    17d2:	8c 01       	movw	r16, r24
  n += println();
    17d4:	ce 01       	movw	r24, r28
    17d6:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <_ZN5Print7printlnEv>
  return n;
}
    17da:	80 0f       	add	r24, r16
    17dc:	91 1f       	adc	r25, r17
    17de:	df 91       	pop	r29
    17e0:	cf 91       	pop	r28
    17e2:	1f 91       	pop	r17
    17e4:	0f 91       	pop	r16
    17e6:	08 95       	ret

000017e8 <_ZN6Stream9timedReadEv>:
    if (c < 0) break;
    *buffer++ = (char)c;
    count++;
  }
  return count;
}
    17e8:	0f 93       	push	r16
    17ea:	1f 93       	push	r17
    17ec:	cf 93       	push	r28
    17ee:	df 93       	push	r29
    17f0:	ec 01       	movw	r28, r24
    17f2:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <millis>
    17f6:	68 87       	std	Y+8, r22	; 0x08
    17f8:	79 87       	std	Y+9, r23	; 0x09
    17fa:	8a 87       	std	Y+10, r24	; 0x0a
    17fc:	9b 87       	std	Y+11, r25	; 0x0b
    17fe:	e8 81       	ld	r30, Y
    1800:	f9 81       	ldd	r31, Y+1	; 0x01
    1802:	02 84       	ldd	r0, Z+10	; 0x0a
    1804:	f3 85       	ldd	r31, Z+11	; 0x0b
    1806:	e0 2d       	mov	r30, r0
    1808:	ce 01       	movw	r24, r28
    180a:	09 95       	icall
    180c:	97 ff       	sbrs	r25, 7
    180e:	17 c0       	rjmp	.+46     	; 0x183e <_ZN6Stream9timedReadEv+0x56>
    1810:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <millis>
    1814:	08 85       	ldd	r16, Y+8	; 0x08
    1816:	19 85       	ldd	r17, Y+9	; 0x09
    1818:	2a 85       	ldd	r18, Y+10	; 0x0a
    181a:	3b 85       	ldd	r19, Y+11	; 0x0b
    181c:	dc 01       	movw	r26, r24
    181e:	cb 01       	movw	r24, r22
    1820:	80 1b       	sub	r24, r16
    1822:	91 0b       	sbc	r25, r17
    1824:	a2 0b       	sbc	r26, r18
    1826:	b3 0b       	sbc	r27, r19
    1828:	0c 81       	ldd	r16, Y+4	; 0x04
    182a:	1d 81       	ldd	r17, Y+5	; 0x05
    182c:	2e 81       	ldd	r18, Y+6	; 0x06
    182e:	3f 81       	ldd	r19, Y+7	; 0x07
    1830:	80 17       	cp	r24, r16
    1832:	91 07       	cpc	r25, r17
    1834:	a2 07       	cpc	r26, r18
    1836:	b3 07       	cpc	r27, r19
    1838:	10 f3       	brcs	.-60     	; 0x17fe <_ZN6Stream9timedReadEv+0x16>
    183a:	8f ef       	ldi	r24, 0xFF	; 255
    183c:	9f ef       	ldi	r25, 0xFF	; 255
    183e:	df 91       	pop	r29
    1840:	cf 91       	pop	r28
    1842:	1f 91       	pop	r17
    1844:	0f 91       	pop	r16
    1846:	08 95       	ret

00001848 <_ZN6Stream14readBytesUntilEcPcj>:
// as readBytes with terminator character
// terminates if length characters have been read, timeout, or if the terminator character  detected
// returns the number of characters placed in the buffer (0 means no valid data found)

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
    1848:	af 92       	push	r10
    184a:	bf 92       	push	r11
    184c:	cf 92       	push	r12
    184e:	df 92       	push	r13
    1850:	ef 92       	push	r14
    1852:	ff 92       	push	r15
    1854:	0f 93       	push	r16
    1856:	1f 93       	push	r17
    1858:	cf 93       	push	r28
    185a:	df 93       	push	r29
  if (length < 1) return 0;
    185c:	21 15       	cp	r18, r1
    185e:	31 05       	cpc	r19, r1
    1860:	c1 f0       	breq	.+48     	; 0x1892 <_ZN6Stream14readBytesUntilEcPcj+0x4a>
    1862:	89 01       	movw	r16, r18
    1864:	5c 01       	movw	r10, r24
    1866:	6a 01       	movw	r12, r20
    1868:	c0 e0       	ldi	r28, 0x00	; 0
    186a:	d0 e0       	ldi	r29, 0x00	; 0
  size_t index = 0;
  while (index < length) {
    int c = timedRead();
    if (c < 0 || c == terminator) break;
    186c:	e6 2e       	mov	r14, r22
    186e:	f1 2c       	mov	r15, r1
size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
  if (length < 1) return 0;
  size_t index = 0;
  while (index < length) {
    int c = timedRead();
    1870:	c5 01       	movw	r24, r10
    1872:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <_ZN6Stream9timedReadEv>
    if (c < 0 || c == terminator) break;
    1876:	97 fd       	sbrc	r25, 7
    1878:	0f c0       	rjmp	.+30     	; 0x1898 <_ZN6Stream14readBytesUntilEcPcj+0x50>
    187a:	8e 15       	cp	r24, r14
    187c:	9f 05       	cpc	r25, r15
    187e:	61 f0       	breq	.+24     	; 0x1898 <_ZN6Stream14readBytesUntilEcPcj+0x50>
    *buffer++ = (char)c;
    1880:	f6 01       	movw	r30, r12
    1882:	81 93       	st	Z+, r24
    1884:	6f 01       	movw	r12, r30
    index++;
    1886:	21 96       	adiw	r28, 0x01	; 1

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
  if (length < 1) return 0;
  size_t index = 0;
  while (index < length) {
    1888:	0c 17       	cp	r16, r28
    188a:	1d 07       	cpc	r17, r29
    188c:	89 f7       	brne	.-30     	; 0x1870 <_ZN6Stream14readBytesUntilEcPcj+0x28>
    188e:	c8 01       	movw	r24, r16
    1890:	04 c0       	rjmp	.+8      	; 0x189a <_ZN6Stream14readBytesUntilEcPcj+0x52>
// terminates if length characters have been read, timeout, or if the terminator character  detected
// returns the number of characters placed in the buffer (0 means no valid data found)

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
  if (length < 1) return 0;
    1892:	80 e0       	ldi	r24, 0x00	; 0
    1894:	90 e0       	ldi	r25, 0x00	; 0
    1896:	01 c0       	rjmp	.+2      	; 0x189a <_ZN6Stream14readBytesUntilEcPcj+0x52>
    1898:	ce 01       	movw	r24, r28
    if (c < 0 || c == terminator) break;
    *buffer++ = (char)c;
    index++;
  }
  return index; // return number of characters, not including null terminator
}
    189a:	df 91       	pop	r29
    189c:	cf 91       	pop	r28
    189e:	1f 91       	pop	r17
    18a0:	0f 91       	pop	r16
    18a2:	ff 90       	pop	r15
    18a4:	ef 90       	pop	r14
    18a6:	df 90       	pop	r13
    18a8:	cf 90       	pop	r12
    18aa:	bf 90       	pop	r11
    18ac:	af 90       	pop	r10
    18ae:	08 95       	ret

000018b0 <_Z4tonehjm>:


// frequency (in hertz) and duration (in milliseconds).

void tone(uint8_t _pin, unsigned int frequency, unsigned long duration)
{
    18b0:	4f 92       	push	r4
    18b2:	5f 92       	push	r5
    18b4:	6f 92       	push	r6
    18b6:	7f 92       	push	r7
    18b8:	8f 92       	push	r8
    18ba:	9f 92       	push	r9
    18bc:	af 92       	push	r10
    18be:	bf 92       	push	r11
    18c0:	cf 92       	push	r12
    18c2:	df 92       	push	r13
    18c4:	ef 92       	push	r14
    18c6:	ff 92       	push	r15
    18c8:	0f 93       	push	r16
    18ca:	1f 93       	push	r17
    18cc:	cf 93       	push	r28
    18ce:	df 93       	push	r29
    18d0:	00 d0       	rcall	.+0      	; 0x18d2 <_Z4tonehjm+0x22>
    18d2:	00 d0       	rcall	.+0      	; 0x18d4 <_Z4tonehjm+0x24>
    18d4:	1f 92       	push	r1
    18d6:	cd b7       	in	r28, 0x3d	; 61
    18d8:	de b7       	in	r29, 0x3e	; 62
    18da:	8b 01       	movw	r16, r22
    18dc:	29 01       	movw	r4, r18
    18de:	3a 01       	movw	r6, r20
{
  int8_t _timer = -1;

  // if we're already using the pin, the timer should be configured.  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == _pin) {
    18e0:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
    18e4:	89 17       	cp	r24, r25
    18e6:	21 f0       	breq	.+8      	; 0x18f0 <_Z4tonehjm+0x40>
    }
  }
  
  // search for an unused timer.
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == 255) {
    18e8:	9f 3f       	cpi	r25, 0xFF	; 255
    18ea:	09 f0       	breq	.+2      	; 0x18ee <_Z4tonehjm+0x3e>
    18ec:	4d c2       	rjmp	.+1178   	; 0x1d88 <_Z4tonehjm+0x4d8>
    18ee:	05 c0       	rjmp	.+10     	; 0x18fa <_Z4tonehjm+0x4a>
  int8_t _timer = -1;

  // if we're already using the pin, the timer should be configured.  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == _pin) {
      return pgm_read_byte(tone_pin_to_timer_PGM + i);
    18f0:	ee e8       	ldi	r30, 0x8E	; 142
    18f2:	f0 e0       	ldi	r31, 0x00	; 0
    18f4:	24 91       	lpm	r18, Z
    18f6:	2d 83       	std	Y+5, r18	; 0x05
    18f8:	84 c0       	rjmp	.+264    	; 0x1a02 <_Z4tonehjm+0x152>
  }
  
  // search for an unused timer.
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == 255) {
      tone_pins[i] = _pin;
    18fa:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
    18fe:	ee e8       	ldi	r30, 0x8E	; 142
    1900:	f0 e0       	ldi	r31, 0x00	; 0
    1902:	94 91       	lpm	r25, Z
    1904:	9d 83       	std	Y+5, r25	; 0x05
      break;
    }
  }
  
  if (_timer != -1)
    1906:	9f 3f       	cpi	r25, 0xFF	; 255
    1908:	09 f4       	brne	.+2      	; 0x190c <_Z4tonehjm+0x5c>
    190a:	3e c2       	rjmp	.+1148   	; 0x1d88 <_Z4tonehjm+0x4d8>
  {
    // Set timer specific stuff
    // All timers in CTC mode
    // 8 bit timers will require changing prescalar values,
    // whereas 16 bit timers are set to either ck/1 or ck/64 prescalar
    switch (_timer)
    190c:	91 30       	cpi	r25, 0x01	; 1
    190e:	09 f4       	brne	.+2      	; 0x1912 <_Z4tonehjm+0x62>
    1910:	4d c0       	rjmp	.+154    	; 0x19ac <_Z4tonehjm+0xfc>
    1912:	58 f1       	brcs	.+86     	; 0x196a <_Z4tonehjm+0xba>
    1914:	92 30       	cpi	r25, 0x02	; 2
    1916:	09 f0       	breq	.+2      	; 0x191a <_Z4tonehjm+0x6a>
    1918:	74 c0       	rjmp	.+232    	; 0x1a02 <_Z4tonehjm+0x152>
      #endif

      #if defined(TCCR2A) && defined(TCCR2B)
      case 2:
        // 8 bit timer
        TCCR2A = 0;
    191a:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
        TCCR2B = 0;
    191e:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
        bitWrite(TCCR2A, WGM21, 1);
    1922:	90 91 b0 00 	lds	r25, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1926:	92 60       	ori	r25, 0x02	; 2
    1928:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
        bitWrite(TCCR2B, CS20, 1);
    192c:	90 91 b1 00 	lds	r25, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    1930:	91 60       	ori	r25, 0x01	; 1
    1932:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
        timer2_pin_port = portOutputRegister(digitalPinToPort(_pin));
    1936:	28 2f       	mov	r18, r24
    1938:	30 e0       	ldi	r19, 0x00	; 0
    193a:	f9 01       	movw	r30, r18
    193c:	e9 54       	subi	r30, 0x49	; 73
    193e:	ff 4f       	sbci	r31, 0xFF	; 255
    1940:	e4 91       	lpm	r30, Z
    1942:	f0 e0       	ldi	r31, 0x00	; 0
    1944:	ee 0f       	add	r30, r30
    1946:	ff 1f       	adc	r31, r31
    1948:	eb 52       	subi	r30, 0x2B	; 43
    194a:	ff 4f       	sbci	r31, 0xFF	; 255
    194c:	45 91       	lpm	r20, Z+
    194e:	54 91       	lpm	r21, Z
    1950:	50 93 6f 03 	sts	0x036F, r21	; 0x80036f <timer2_pin_port+0x1>
    1954:	40 93 6e 03 	sts	0x036E, r20	; 0x80036e <timer2_pin_port>
        timer2_pin_mask = digitalPinToBitMask(_pin);
    1958:	f9 01       	movw	r30, r18
    195a:	ed 55       	subi	r30, 0x5D	; 93
    195c:	ff 4f       	sbci	r31, 0xFF	; 255
    195e:	e4 91       	lpm	r30, Z
    1960:	e0 93 6d 03 	sts	0x036D, r30	; 0x80036d <timer2_pin_mask>
    1964:	92 e0       	ldi	r25, 0x02	; 2
    1966:	9d 83       	std	Y+5, r25	; 0x05
    1968:	0b c2       	rjmp	.+1046   	; 0x1d80 <_Z4tonehjm+0x4d0>
    switch (_timer)
    {
      #if defined(TCCR0A) && defined(TCCR0B) && defined(WGM01)
      case 0:
        // 8 bit timer
        TCCR0A = 0;
    196a:	14 bc       	out	0x24, r1	; 36
        TCCR0B = 0;
    196c:	15 bc       	out	0x25, r1	; 37
        bitWrite(TCCR0A, WGM01, 1);
    196e:	94 b5       	in	r25, 0x24	; 36
    1970:	92 60       	ori	r25, 0x02	; 2
    1972:	94 bd       	out	0x24, r25	; 36
        bitWrite(TCCR0B, CS00, 1);
    1974:	95 b5       	in	r25, 0x25	; 37
    1976:	91 60       	ori	r25, 0x01	; 1
    1978:	95 bd       	out	0x25, r25	; 37
        timer0_pin_port = portOutputRegister(digitalPinToPort(_pin));
    197a:	28 2f       	mov	r18, r24
    197c:	30 e0       	ldi	r19, 0x00	; 0
    197e:	f9 01       	movw	r30, r18
    1980:	e9 54       	subi	r30, 0x49	; 73
    1982:	ff 4f       	sbci	r31, 0xFF	; 255
    1984:	e4 91       	lpm	r30, Z
    1986:	f0 e0       	ldi	r31, 0x00	; 0
    1988:	ee 0f       	add	r30, r30
    198a:	ff 1f       	adc	r31, r31
    198c:	eb 52       	subi	r30, 0x2B	; 43
    198e:	ff 4f       	sbci	r31, 0xFF	; 255
    1990:	45 91       	lpm	r20, Z+
    1992:	54 91       	lpm	r21, Z
    1994:	50 93 7d 03 	sts	0x037D, r21	; 0x80037d <timer0_pin_port+0x1>
    1998:	40 93 7c 03 	sts	0x037C, r20	; 0x80037c <timer0_pin_port>
        timer0_pin_mask = digitalPinToBitMask(_pin);
    199c:	f9 01       	movw	r30, r18
    199e:	ed 55       	subi	r30, 0x5D	; 93
    19a0:	ff 4f       	sbci	r31, 0xFF	; 255
    19a2:	e4 91       	lpm	r30, Z
    19a4:	e0 93 7b 03 	sts	0x037B, r30	; 0x80037b <timer0_pin_mask>
    19a8:	1d 82       	std	Y+5, r1	; 0x05
    19aa:	ea c1       	rjmp	.+980    	; 0x1d80 <_Z4tonehjm+0x4d0>
      #endif

      #if defined(TCCR1A) && defined(TCCR1B) && defined(WGM12)
      case 1:
        // 16 bit timer
        TCCR1A = 0;
    19ac:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
        TCCR1B = 0;
    19b0:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
        bitWrite(TCCR1B, WGM12, 1);
    19b4:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    19b8:	98 60       	ori	r25, 0x08	; 8
    19ba:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
        bitWrite(TCCR1B, CS10, 1);
    19be:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    19c2:	91 60       	ori	r25, 0x01	; 1
    19c4:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
        timer1_pin_port = portOutputRegister(digitalPinToPort(_pin));
    19c8:	28 2f       	mov	r18, r24
    19ca:	30 e0       	ldi	r19, 0x00	; 0
    19cc:	f9 01       	movw	r30, r18
    19ce:	e9 54       	subi	r30, 0x49	; 73
    19d0:	ff 4f       	sbci	r31, 0xFF	; 255
    19d2:	e4 91       	lpm	r30, Z
    19d4:	f0 e0       	ldi	r31, 0x00	; 0
    19d6:	ee 0f       	add	r30, r30
    19d8:	ff 1f       	adc	r31, r31
    19da:	eb 52       	subi	r30, 0x2B	; 43
    19dc:	ff 4f       	sbci	r31, 0xFF	; 255
    19de:	45 91       	lpm	r20, Z+
    19e0:	54 91       	lpm	r21, Z
    19e2:	50 93 76 03 	sts	0x0376, r21	; 0x800376 <timer1_pin_port+0x1>
    19e6:	40 93 75 03 	sts	0x0375, r20	; 0x800375 <timer1_pin_port>
        timer1_pin_mask = digitalPinToBitMask(_pin);
    19ea:	f9 01       	movw	r30, r18
    19ec:	ed 55       	subi	r30, 0x5D	; 93
    19ee:	ff 4f       	sbci	r31, 0xFF	; 255
    19f0:	e4 91       	lpm	r30, Z
    19f2:	e0 93 74 03 	sts	0x0374, r30	; 0x800374 <timer1_pin_mask>
  _timer = toneBegin(_pin);

  if (_timer >= 0)
  {
    // Set the pinMode as OUTPUT
    pinMode(_pin, OUTPUT);
    19f6:	61 e0       	ldi	r22, 0x01	; 1
    19f8:	0e 94 91 10 	call	0x2122	; 0x2122 <pinMode>
    19fc:	21 e0       	ldi	r18, 0x01	; 1
    19fe:	2d 83       	std	Y+5, r18	; 0x05
    1a00:	89 c0       	rjmp	.+274    	; 0x1b14 <_Z4tonehjm+0x264>
  uint32_t ocr = 0;
  int8_t _timer;

  _timer = toneBegin(_pin);

  if (_timer >= 0)
    1a02:	2d 81       	ldd	r18, Y+5	; 0x05
    1a04:	27 fd       	sbrc	r18, 7
    1a06:	c0 c1       	rjmp	.+896    	; 0x1d88 <_Z4tonehjm+0x4d8>
  {
    // Set the pinMode as OUTPUT
    pinMode(_pin, OUTPUT);
    1a08:	61 e0       	ldi	r22, 0x01	; 1
    1a0a:	0e 94 91 10 	call	0x2122	; 0x2122 <pinMode>
    
    // if we are using an 8 bit timer, scan through prescalars to find the best fit
    if (_timer == 0 || _timer == 2)
    1a0e:	8d 81       	ldd	r24, Y+5	; 0x05
    1a10:	8d 7f       	andi	r24, 0xFD	; 253
    1a12:	09 f0       	breq	.+2      	; 0x1a16 <_Z4tonehjm+0x166>
    1a14:	7f c0       	rjmp	.+254    	; 0x1b14 <_Z4tonehjm+0x264>
    {
      ocr = F_CPU / frequency / 2 - 1;
    1a16:	48 01       	movw	r8, r16
    1a18:	a1 2c       	mov	r10, r1
    1a1a:	b1 2c       	mov	r11, r1
    1a1c:	60 e0       	ldi	r22, 0x00	; 0
    1a1e:	72 e1       	ldi	r23, 0x12	; 18
    1a20:	8a e7       	ldi	r24, 0x7A	; 122
    1a22:	90 e0       	ldi	r25, 0x00	; 0
    1a24:	a5 01       	movw	r20, r10
    1a26:	94 01       	movw	r18, r8
    1a28:	0e 94 bd 1e 	call	0x3d7a	; 0x3d7a <__divmodsi4>
    1a2c:	29 83       	std	Y+1, r18	; 0x01
    1a2e:	3a 83       	std	Y+2, r19	; 0x02
    1a30:	4b 83       	std	Y+3, r20	; 0x03
    1a32:	5c 83       	std	Y+4, r21	; 0x04
    1a34:	69 01       	movw	r12, r18
    1a36:	7a 01       	movw	r14, r20
    1a38:	81 e0       	ldi	r24, 0x01	; 1
    1a3a:	c8 1a       	sub	r12, r24
    1a3c:	d1 08       	sbc	r13, r1
    1a3e:	e1 08       	sbc	r14, r1
    1a40:	f1 08       	sbc	r15, r1
      prescalarbits = 0b001;  // ck/1: same for both timers
      if (ocr > 255)
    1a42:	9f ef       	ldi	r25, 0xFF	; 255
    1a44:	c9 16       	cp	r12, r25
    1a46:	d1 04       	cpc	r13, r1
    1a48:	e1 04       	cpc	r14, r1
    1a4a:	f1 04       	cpc	r15, r1
    1a4c:	09 f0       	breq	.+2      	; 0x1a50 <_Z4tonehjm+0x1a0>
    1a4e:	08 f4       	brcc	.+2      	; 0x1a52 <_Z4tonehjm+0x1a2>
    1a50:	4e c0       	rjmp	.+156    	; 0x1aee <_Z4tonehjm+0x23e>
      {
        ocr = F_CPU / frequency / 2 / 8 - 1;
    1a52:	60 e4       	ldi	r22, 0x40	; 64
    1a54:	72 e4       	ldi	r23, 0x42	; 66
    1a56:	8f e0       	ldi	r24, 0x0F	; 15
    1a58:	90 e0       	ldi	r25, 0x00	; 0
    1a5a:	a5 01       	movw	r20, r10
    1a5c:	94 01       	movw	r18, r8
    1a5e:	0e 94 bd 1e 	call	0x3d7a	; 0x3d7a <__divmodsi4>
    1a62:	69 01       	movw	r12, r18
    1a64:	7a 01       	movw	r14, r20
    1a66:	81 e0       	ldi	r24, 0x01	; 1
    1a68:	c8 1a       	sub	r12, r24
    1a6a:	d1 08       	sbc	r13, r1
    1a6c:	e1 08       	sbc	r14, r1
    1a6e:	f1 08       	sbc	r15, r1
        prescalarbits = 0b010;  // ck/8: same for both timers

        if (_timer == 2 && ocr > 255)
    1a70:	9d 81       	ldd	r25, Y+5	; 0x05
    1a72:	92 30       	cpi	r25, 0x02	; 2
    1a74:	09 f5       	brne	.+66     	; 0x1ab8 <_Z4tonehjm+0x208>
    1a76:	2f ef       	ldi	r18, 0xFF	; 255
    1a78:	c2 16       	cp	r12, r18
    1a7a:	d1 04       	cpc	r13, r1
    1a7c:	e1 04       	cpc	r14, r1
    1a7e:	f1 04       	cpc	r15, r1
    1a80:	09 f0       	breq	.+2      	; 0x1a84 <_Z4tonehjm+0x1d4>
    1a82:	08 f4       	brcc	.+2      	; 0x1a86 <_Z4tonehjm+0x1d6>
    1a84:	44 c1       	rjmp	.+648    	; 0x1d0e <_Z4tonehjm+0x45e>
        {
          ocr = F_CPU / frequency / 2 / 32 - 1;
    1a86:	60 e9       	ldi	r22, 0x90	; 144
    1a88:	70 ed       	ldi	r23, 0xD0	; 208
    1a8a:	83 e0       	ldi	r24, 0x03	; 3
    1a8c:	90 e0       	ldi	r25, 0x00	; 0
    1a8e:	a5 01       	movw	r20, r10
    1a90:	94 01       	movw	r18, r8
    1a92:	0e 94 bd 1e 	call	0x3d7a	; 0x3d7a <__divmodsi4>
    1a96:	69 01       	movw	r12, r18
    1a98:	7a 01       	movw	r14, r20
    1a9a:	81 e0       	ldi	r24, 0x01	; 1
    1a9c:	c8 1a       	sub	r12, r24
    1a9e:	d1 08       	sbc	r13, r1
    1aa0:	e1 08       	sbc	r14, r1
    1aa2:	f1 08       	sbc	r15, r1
          prescalarbits = 0b011;
        }

        if (ocr > 255)
    1aa4:	9f ef       	ldi	r25, 0xFF	; 255
    1aa6:	c9 16       	cp	r12, r25
    1aa8:	d1 04       	cpc	r13, r1
    1aaa:	e1 04       	cpc	r14, r1
    1aac:	f1 04       	cpc	r15, r1
    1aae:	11 f0       	breq	.+4      	; 0x1ab4 <_Z4tonehjm+0x204>
    1ab0:	08 f0       	brcs	.+2      	; 0x1ab4 <_Z4tonehjm+0x204>
    1ab2:	ba c0       	rjmp	.+372    	; 0x1c28 <_Z4tonehjm+0x378>
        prescalarbits = 0b010;  // ck/8: same for both timers

        if (_timer == 2 && ocr > 255)
        {
          ocr = F_CPU / frequency / 2 / 32 - 1;
          prescalarbits = 0b011;
    1ab4:	83 e0       	ldi	r24, 0x03	; 3
    1ab6:	27 c0       	rjmp	.+78     	; 0x1b06 <_Z4tonehjm+0x256>
        }

        if (ocr > 255)
    1ab8:	2f ef       	ldi	r18, 0xFF	; 255
    1aba:	c2 16       	cp	r12, r18
    1abc:	d1 04       	cpc	r13, r1
    1abe:	e1 04       	cpc	r14, r1
    1ac0:	f1 04       	cpc	r15, r1
    1ac2:	b9 f0       	breq	.+46     	; 0x1af2 <_Z4tonehjm+0x242>
    1ac4:	b0 f0       	brcs	.+44     	; 0x1af2 <_Z4tonehjm+0x242>
        {
          ocr = F_CPU / frequency / 2 / 64 - 1;
    1ac6:	68 e4       	ldi	r22, 0x48	; 72
    1ac8:	78 ee       	ldi	r23, 0xE8	; 232
    1aca:	81 e0       	ldi	r24, 0x01	; 1
    1acc:	90 e0       	ldi	r25, 0x00	; 0
    1ace:	a5 01       	movw	r20, r10
    1ad0:	94 01       	movw	r18, r8
    1ad2:	0e 94 bd 1e 	call	0x3d7a	; 0x3d7a <__divmodsi4>
    1ad6:	69 01       	movw	r12, r18
    1ad8:	7a 01       	movw	r14, r20
    1ada:	81 e0       	ldi	r24, 0x01	; 1
    1adc:	c8 1a       	sub	r12, r24
    1ade:	d1 08       	sbc	r13, r1
    1ae0:	e1 08       	sbc	r14, r1
    1ae2:	f1 08       	sbc	r15, r1
          prescalarbits = _timer == 0 ? 0b011 : 0b100;
    1ae4:	9d 81       	ldd	r25, Y+5	; 0x05
    1ae6:	99 23       	and	r25, r25
    1ae8:	09 f4       	brne	.+2      	; 0x1aec <_Z4tonehjm+0x23c>
    1aea:	13 c1       	rjmp	.+550    	; 0x1d12 <_Z4tonehjm+0x462>
    1aec:	dc c0       	rjmp	.+440    	; 0x1ca6 <_Z4tonehjm+0x3f6>
    
    // if we are using an 8 bit timer, scan through prescalars to find the best fit
    if (_timer == 0 || _timer == 2)
    {
      ocr = F_CPU / frequency / 2 - 1;
      prescalarbits = 0b001;  // ck/1: same for both timers
    1aee:	81 e0       	ldi	r24, 0x01	; 1
    1af0:	01 c0       	rjmp	.+2      	; 0x1af4 <_Z4tonehjm+0x244>
      if (ocr > 255)
      {
        ocr = F_CPU / frequency / 2 / 8 - 1;
        prescalarbits = 0b010;  // ck/8: same for both timers
    1af2:	82 e0       	ldi	r24, 0x02	; 2
          }
        }
      }

#if defined(TCCR0B)
      if (_timer == 0)
    1af4:	9d 81       	ldd	r25, Y+5	; 0x05
    1af6:	91 11       	cpse	r25, r1
    1af8:	06 c0       	rjmp	.+12     	; 0x1b06 <_Z4tonehjm+0x256>
      {
        TCCR0B = (TCCR0B & 0b11111000) | prescalarbits;
    1afa:	95 b5       	in	r25, 0x25	; 37
    1afc:	98 7f       	andi	r25, 0xF8	; 248
    1afe:	89 2b       	or	r24, r25
    1b00:	85 bd       	out	0x25, r24	; 37
    1b02:	44 c0       	rjmp	.+136    	; 0x1b8c <_Z4tonehjm+0x2dc>
          prescalarbits = _timer == 0 ? 0b011 : 0b100;

          if (_timer == 2 && ocr > 255)
          {
            ocr = F_CPU / frequency / 2 / 128 - 1;
            prescalarbits = 0b101;
    1b04:	85 e0       	ldi	r24, 0x05	; 5
      }
      else
#endif
#if defined(TCCR2B)
      {
        TCCR2B = (TCCR2B & 0b11111000) | prescalarbits;
    1b06:	90 91 b1 00 	lds	r25, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    1b0a:	98 7f       	andi	r25, 0xF8	; 248
    1b0c:	89 2b       	or	r24, r25
    1b0e:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    1b12:	3c c0       	rjmp	.+120    	; 0x1b8c <_Z4tonehjm+0x2dc>
#endif
    }
    else
    {
      // two choices for the 16 bit timers: ck/1 or ck/64
      ocr = F_CPU / frequency / 2 - 1;
    1b14:	48 01       	movw	r8, r16
    1b16:	a1 2c       	mov	r10, r1
    1b18:	b1 2c       	mov	r11, r1
    1b1a:	60 e0       	ldi	r22, 0x00	; 0
    1b1c:	72 e1       	ldi	r23, 0x12	; 18
    1b1e:	8a e7       	ldi	r24, 0x7A	; 122
    1b20:	90 e0       	ldi	r25, 0x00	; 0
    1b22:	a5 01       	movw	r20, r10
    1b24:	94 01       	movw	r18, r8
    1b26:	0e 94 bd 1e 	call	0x3d7a	; 0x3d7a <__divmodsi4>
    1b2a:	69 01       	movw	r12, r18
    1b2c:	7a 01       	movw	r14, r20
    1b2e:	81 e0       	ldi	r24, 0x01	; 1
    1b30:	c8 1a       	sub	r12, r24
    1b32:	d1 08       	sbc	r13, r1
    1b34:	e1 08       	sbc	r14, r1
    1b36:	f1 08       	sbc	r15, r1

      prescalarbits = 0b001;
      if (ocr > 0xffff)
    1b38:	c1 14       	cp	r12, r1
    1b3a:	d1 04       	cpc	r13, r1
    1b3c:	91 e0       	ldi	r25, 0x01	; 1
    1b3e:	e9 06       	cpc	r14, r25
    1b40:	f1 04       	cpc	r15, r1
    1b42:	88 f0       	brcs	.+34     	; 0x1b66 <_Z4tonehjm+0x2b6>
      {
        ocr = F_CPU / frequency / 2 / 64 - 1;
    1b44:	68 e4       	ldi	r22, 0x48	; 72
    1b46:	78 ee       	ldi	r23, 0xE8	; 232
    1b48:	81 e0       	ldi	r24, 0x01	; 1
    1b4a:	90 e0       	ldi	r25, 0x00	; 0
    1b4c:	a5 01       	movw	r20, r10
    1b4e:	94 01       	movw	r18, r8
    1b50:	0e 94 bd 1e 	call	0x3d7a	; 0x3d7a <__divmodsi4>
    1b54:	69 01       	movw	r12, r18
    1b56:	7a 01       	movw	r14, r20
    1b58:	81 e0       	ldi	r24, 0x01	; 1
    1b5a:	c8 1a       	sub	r12, r24
    1b5c:	d1 08       	sbc	r13, r1
    1b5e:	e1 08       	sbc	r14, r1
    1b60:	f1 08       	sbc	r15, r1
        prescalarbits = 0b011;
    1b62:	83 e0       	ldi	r24, 0x03	; 3
    1b64:	01 c0       	rjmp	.+2      	; 0x1b68 <_Z4tonehjm+0x2b8>
    else
    {
      // two choices for the 16 bit timers: ck/1 or ck/64
      ocr = F_CPU / frequency / 2 - 1;

      prescalarbits = 0b001;
    1b66:	81 e0       	ldi	r24, 0x01	; 1
      {
        ocr = F_CPU / frequency / 2 / 64 - 1;
        prescalarbits = 0b011;
      }

      if (_timer == 1)
    1b68:	9d 81       	ldd	r25, Y+5	; 0x05
    1b6a:	91 30       	cpi	r25, 0x01	; 1
    1b6c:	79 f4       	brne	.+30     	; 0x1b8c <_Z4tonehjm+0x2dc>
      {
#if defined(TCCR1B)
        TCCR1B = (TCCR1B & 0b11111000) | prescalarbits;
    1b6e:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1b72:	98 7f       	andi	r25, 0xF8	; 248
    1b74:	89 2b       	or	r24, r25
    1b76:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>

    }
    

    // Calculate the toggle count
    if (duration > 0)
    1b7a:	41 14       	cp	r4, r1
    1b7c:	51 04       	cpc	r5, r1
    1b7e:	61 04       	cpc	r6, r1
    1b80:	71 04       	cpc	r7, r1
    1b82:	49 f4       	brne	.+18     	; 0x1b96 <_Z4tonehjm+0x2e6>
    {
      toggle_count = 2 * frequency * duration / 1000;
    }
    else
    {
      toggle_count = -1;
    1b84:	2f ef       	ldi	r18, 0xFF	; 255
    1b86:	3f ef       	ldi	r19, 0xFF	; 255
    1b88:	a9 01       	movw	r20, r18
    1b8a:	2c c0       	rjmp	.+88     	; 0x1be4 <_Z4tonehjm+0x334>

    }
    

    // Calculate the toggle count
    if (duration > 0)
    1b8c:	41 14       	cp	r4, r1
    1b8e:	51 04       	cpc	r5, r1
    1b90:	61 04       	cpc	r6, r1
    1b92:	71 04       	cpc	r7, r1
    1b94:	71 f0       	breq	.+28     	; 0x1bb2 <_Z4tonehjm+0x302>
    {
      toggle_count = 2 * frequency * duration / 1000;
    1b96:	d8 01       	movw	r26, r16
    1b98:	aa 0f       	add	r26, r26
    1b9a:	bb 1f       	adc	r27, r27
    1b9c:	a3 01       	movw	r20, r6
    1b9e:	92 01       	movw	r18, r4
    1ba0:	0e 94 f1 1e 	call	0x3de2	; 0x3de2 <__muluhisi3>
    1ba4:	28 ee       	ldi	r18, 0xE8	; 232
    1ba6:	33 e0       	ldi	r19, 0x03	; 3
    1ba8:	40 e0       	ldi	r20, 0x00	; 0
    1baa:	50 e0       	ldi	r21, 0x00	; 0
    1bac:	0e 94 9b 1e 	call	0x3d36	; 0x3d36 <__udivmodsi4>
    1bb0:	03 c0       	rjmp	.+6      	; 0x1bb8 <_Z4tonehjm+0x308>
    }
    else
    {
      toggle_count = -1;
    1bb2:	2f ef       	ldi	r18, 0xFF	; 255
    1bb4:	3f ef       	ldi	r19, 0xFF	; 255
    1bb6:	a9 01       	movw	r20, r18
    }

    // Set the OCR for the given timer,
    // set the toggle count,
    // then turn on the interrupts
    switch (_timer)
    1bb8:	8d 81       	ldd	r24, Y+5	; 0x05
    1bba:	81 30       	cpi	r24, 0x01	; 1
    1bbc:	99 f0       	breq	.+38     	; 0x1be4 <_Z4tonehjm+0x334>
    1bbe:	82 30       	cpi	r24, 0x02	; 2
    1bc0:	19 f1       	breq	.+70     	; 0x1c08 <_Z4tonehjm+0x358>
    1bc2:	81 11       	cpse	r24, r1
    1bc4:	e1 c0       	rjmp	.+450    	; 0x1d88 <_Z4tonehjm+0x4d8>
    {

#if defined(OCR0A) && defined(TIMSK0) && defined(OCIE0A)
      case 0:
        OCR0A = ocr;
    1bc6:	c7 bc       	out	0x27, r12	; 39
        timer0_toggle_count = toggle_count;
    1bc8:	20 93 7e 03 	sts	0x037E, r18	; 0x80037e <timer0_toggle_count>
    1bcc:	30 93 7f 03 	sts	0x037F, r19	; 0x80037f <timer0_toggle_count+0x1>
    1bd0:	40 93 80 03 	sts	0x0380, r20	; 0x800380 <timer0_toggle_count+0x2>
    1bd4:	50 93 81 03 	sts	0x0381, r21	; 0x800381 <timer0_toggle_count+0x3>
        bitWrite(TIMSK0, OCIE0A, 1);
    1bd8:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
    1bdc:	82 60       	ori	r24, 0x02	; 2
    1bde:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
        break;
    1be2:	d2 c0       	rjmp	.+420    	; 0x1d88 <_Z4tonehjm+0x4d8>
#endif

      case 1:
#if defined(OCR1A) && defined(TIMSK1) && defined(OCIE1A)
        OCR1A = ocr;
    1be4:	d0 92 89 00 	sts	0x0089, r13	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1be8:	c0 92 88 00 	sts	0x0088, r12	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
        timer1_toggle_count = toggle_count;
    1bec:	20 93 77 03 	sts	0x0377, r18	; 0x800377 <timer1_toggle_count>
    1bf0:	30 93 78 03 	sts	0x0378, r19	; 0x800378 <timer1_toggle_count+0x1>
    1bf4:	40 93 79 03 	sts	0x0379, r20	; 0x800379 <timer1_toggle_count+0x2>
    1bf8:	50 93 7a 03 	sts	0x037A, r21	; 0x80037a <timer1_toggle_count+0x3>
        bitWrite(TIMSK1, OCIE1A, 1);
    1bfc:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    1c00:	82 60       	ori	r24, 0x02	; 2
    1c02:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
        // this combination is for at least the ATmega32
        OCR1A = ocr;
        timer1_toggle_count = toggle_count;
        bitWrite(TIMSK, OCIE1A, 1);
#endif
        break;
    1c06:	c0 c0       	rjmp	.+384    	; 0x1d88 <_Z4tonehjm+0x4d8>

#if defined(OCR2A) && defined(TIMSK2) && defined(OCIE2A)
      case 2:
        OCR2A = ocr;
    1c08:	c0 92 b3 00 	sts	0x00B3, r12	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
        timer2_toggle_count = toggle_count;
    1c0c:	20 93 70 03 	sts	0x0370, r18	; 0x800370 <timer2_toggle_count>
    1c10:	30 93 71 03 	sts	0x0371, r19	; 0x800371 <timer2_toggle_count+0x1>
    1c14:	40 93 72 03 	sts	0x0372, r20	; 0x800372 <timer2_toggle_count+0x2>
    1c18:	50 93 73 03 	sts	0x0373, r21	; 0x800373 <timer2_toggle_count+0x3>
        bitWrite(TIMSK2, OCIE2A, 1);
    1c1c:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
    1c20:	82 60       	ori	r24, 0x02	; 2
    1c22:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
        break;
#endif

    }
  }
}
    1c26:	b0 c0       	rjmp	.+352    	; 0x1d88 <_Z4tonehjm+0x4d8>
          prescalarbits = 0b011;
        }

        if (ocr > 255)
        {
          ocr = F_CPU / frequency / 2 / 64 - 1;
    1c28:	68 e4       	ldi	r22, 0x48	; 72
    1c2a:	78 ee       	ldi	r23, 0xE8	; 232
    1c2c:	81 e0       	ldi	r24, 0x01	; 1
    1c2e:	90 e0       	ldi	r25, 0x00	; 0
    1c30:	a5 01       	movw	r20, r10
    1c32:	94 01       	movw	r18, r8
    1c34:	0e 94 bd 1e 	call	0x3d7a	; 0x3d7a <__divmodsi4>
    1c38:	69 01       	movw	r12, r18
    1c3a:	7a 01       	movw	r14, r20
    1c3c:	91 e0       	ldi	r25, 0x01	; 1
    1c3e:	c9 1a       	sub	r12, r25
    1c40:	d1 08       	sbc	r13, r1
    1c42:	e1 08       	sbc	r14, r1
    1c44:	f1 08       	sbc	r15, r1
          prescalarbits = _timer == 0 ? 0b011 : 0b100;

          if (_timer == 2 && ocr > 255)
    1c46:	2f ef       	ldi	r18, 0xFF	; 255
    1c48:	c2 16       	cp	r12, r18
    1c4a:	d1 04       	cpc	r13, r1
    1c4c:	e1 04       	cpc	r14, r1
    1c4e:	f1 04       	cpc	r15, r1
    1c50:	41 f1       	breq	.+80     	; 0x1ca2 <_Z4tonehjm+0x3f2>
    1c52:	38 f1       	brcs	.+78     	; 0x1ca2 <_Z4tonehjm+0x3f2>
          {
            ocr = F_CPU / frequency / 2 / 128 - 1;
    1c54:	64 e2       	ldi	r22, 0x24	; 36
    1c56:	74 ef       	ldi	r23, 0xF4	; 244
    1c58:	80 e0       	ldi	r24, 0x00	; 0
    1c5a:	90 e0       	ldi	r25, 0x00	; 0
    1c5c:	a5 01       	movw	r20, r10
    1c5e:	94 01       	movw	r18, r8
    1c60:	0e 94 bd 1e 	call	0x3d7a	; 0x3d7a <__divmodsi4>
    1c64:	69 01       	movw	r12, r18
    1c66:	7a 01       	movw	r14, r20
    1c68:	81 e0       	ldi	r24, 0x01	; 1
    1c6a:	c8 1a       	sub	r12, r24
    1c6c:	d1 08       	sbc	r13, r1
    1c6e:	e1 08       	sbc	r14, r1
    1c70:	f1 08       	sbc	r15, r1
            prescalarbits = 0b101;
          }

          if (ocr > 255)
    1c72:	9f ef       	ldi	r25, 0xFF	; 255
    1c74:	c9 16       	cp	r12, r25
    1c76:	d1 04       	cpc	r13, r1
    1c78:	e1 04       	cpc	r14, r1
    1c7a:	f1 04       	cpc	r15, r1
    1c7c:	09 f0       	breq	.+2      	; 0x1c80 <_Z4tonehjm+0x3d0>
    1c7e:	08 f4       	brcc	.+2      	; 0x1c82 <_Z4tonehjm+0x3d2>
    1c80:	41 cf       	rjmp	.-382    	; 0x1b04 <_Z4tonehjm+0x254>
          {
            ocr = F_CPU / frequency / 2 / 256 - 1;
    1c82:	62 e1       	ldi	r22, 0x12	; 18
    1c84:	7a e7       	ldi	r23, 0x7A	; 122
    1c86:	80 e0       	ldi	r24, 0x00	; 0
    1c88:	90 e0       	ldi	r25, 0x00	; 0
    1c8a:	a5 01       	movw	r20, r10
    1c8c:	94 01       	movw	r18, r8
    1c8e:	0e 94 bd 1e 	call	0x3d7a	; 0x3d7a <__divmodsi4>
    1c92:	69 01       	movw	r12, r18
    1c94:	7a 01       	movw	r14, r20
    1c96:	81 e0       	ldi	r24, 0x01	; 1
    1c98:	c8 1a       	sub	r12, r24
    1c9a:	d1 08       	sbc	r13, r1
    1c9c:	e1 08       	sbc	r14, r1
    1c9e:	f1 08       	sbc	r15, r1
    1ca0:	19 c0       	rjmp	.+50     	; 0x1cd4 <_Z4tonehjm+0x424>
        }

        if (ocr > 255)
        {
          ocr = F_CPU / frequency / 2 / 64 - 1;
          prescalarbits = _timer == 0 ? 0b011 : 0b100;
    1ca2:	84 e0       	ldi	r24, 0x04	; 4
    1ca4:	30 cf       	rjmp	.-416    	; 0x1b06 <_Z4tonehjm+0x256>
          {
            ocr = F_CPU / frequency / 2 / 128 - 1;
            prescalarbits = 0b101;
          }

          if (ocr > 255)
    1ca6:	2f ef       	ldi	r18, 0xFF	; 255
    1ca8:	c2 16       	cp	r12, r18
    1caa:	d1 04       	cpc	r13, r1
    1cac:	e1 04       	cpc	r14, r1
    1cae:	f1 04       	cpc	r15, r1
    1cb0:	09 f0       	breq	.+2      	; 0x1cb4 <_Z4tonehjm+0x404>
    1cb2:	08 f4       	brcc	.+2      	; 0x1cb6 <_Z4tonehjm+0x406>
    1cb4:	63 c0       	rjmp	.+198    	; 0x1d7c <_Z4tonehjm+0x4cc>
          {
            ocr = F_CPU / frequency / 2 / 256 - 1;
    1cb6:	62 e1       	ldi	r22, 0x12	; 18
    1cb8:	7a e7       	ldi	r23, 0x7A	; 122
    1cba:	80 e0       	ldi	r24, 0x00	; 0
    1cbc:	90 e0       	ldi	r25, 0x00	; 0
    1cbe:	a5 01       	movw	r20, r10
    1cc0:	94 01       	movw	r18, r8
    1cc2:	0e 94 bd 1e 	call	0x3d7a	; 0x3d7a <__divmodsi4>
    1cc6:	69 01       	movw	r12, r18
    1cc8:	7a 01       	movw	r14, r20
    1cca:	91 e0       	ldi	r25, 0x01	; 1
    1ccc:	c9 1a       	sub	r12, r25
    1cce:	d1 08       	sbc	r13, r1
    1cd0:	e1 08       	sbc	r14, r1
    1cd2:	f1 08       	sbc	r15, r1
            prescalarbits = _timer == 0 ? 0b100 : 0b110;
            if (ocr > 255)
    1cd4:	8f ef       	ldi	r24, 0xFF	; 255
    1cd6:	c8 16       	cp	r12, r24
    1cd8:	d1 04       	cpc	r13, r1
    1cda:	e1 04       	cpc	r14, r1
    1cdc:	f1 04       	cpc	r15, r1
    1cde:	a9 f0       	breq	.+42     	; 0x1d0a <_Z4tonehjm+0x45a>
    1ce0:	a0 f0       	brcs	.+40     	; 0x1d0a <_Z4tonehjm+0x45a>
            {
              // can't do any better than /1024
              ocr = F_CPU / frequency / 2 / 1024 - 1;
    1ce2:	89 81       	ldd	r24, Y+1	; 0x01
    1ce4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ce6:	ab 81       	ldd	r26, Y+3	; 0x03
    1ce8:	bc 81       	ldd	r27, Y+4	; 0x04
    1cea:	2a e0       	ldi	r18, 0x0A	; 10
    1cec:	b5 95       	asr	r27
    1cee:	a7 95       	ror	r26
    1cf0:	97 95       	ror	r25
    1cf2:	87 95       	ror	r24
    1cf4:	2a 95       	dec	r18
    1cf6:	d1 f7       	brne	.-12     	; 0x1cec <_Z4tonehjm+0x43c>
    1cf8:	6c 01       	movw	r12, r24
    1cfa:	7d 01       	movw	r14, r26
    1cfc:	21 e0       	ldi	r18, 0x01	; 1
    1cfe:	c2 1a       	sub	r12, r18
    1d00:	d1 08       	sbc	r13, r1
    1d02:	e1 08       	sbc	r14, r1
    1d04:	f1 08       	sbc	r15, r1
              prescalarbits = _timer == 0 ? 0b101 : 0b111;
    1d06:	87 e0       	ldi	r24, 0x07	; 7
    1d08:	fe ce       	rjmp	.-516    	; 0x1b06 <_Z4tonehjm+0x256>
          }

          if (ocr > 255)
          {
            ocr = F_CPU / frequency / 2 / 256 - 1;
            prescalarbits = _timer == 0 ? 0b100 : 0b110;
    1d0a:	86 e0       	ldi	r24, 0x06	; 6
    1d0c:	fc ce       	rjmp	.-520    	; 0x1b06 <_Z4tonehjm+0x256>
      ocr = F_CPU / frequency / 2 - 1;
      prescalarbits = 0b001;  // ck/1: same for both timers
      if (ocr > 255)
      {
        ocr = F_CPU / frequency / 2 / 8 - 1;
        prescalarbits = 0b010;  // ck/8: same for both timers
    1d0e:	82 e0       	ldi	r24, 0x02	; 2
    1d10:	fa ce       	rjmp	.-524    	; 0x1b06 <_Z4tonehjm+0x256>
          {
            ocr = F_CPU / frequency / 2 / 128 - 1;
            prescalarbits = 0b101;
          }

          if (ocr > 255)
    1d12:	8f ef       	ldi	r24, 0xFF	; 255
    1d14:	c8 16       	cp	r12, r24
    1d16:	d1 04       	cpc	r13, r1
    1d18:	e1 04       	cpc	r14, r1
    1d1a:	f1 04       	cpc	r15, r1
    1d1c:	69 f1       	breq	.+90     	; 0x1d78 <_Z4tonehjm+0x4c8>
    1d1e:	60 f1       	brcs	.+88     	; 0x1d78 <_Z4tonehjm+0x4c8>
          {
            ocr = F_CPU / frequency / 2 / 256 - 1;
    1d20:	62 e1       	ldi	r22, 0x12	; 18
    1d22:	7a e7       	ldi	r23, 0x7A	; 122
    1d24:	80 e0       	ldi	r24, 0x00	; 0
    1d26:	90 e0       	ldi	r25, 0x00	; 0
    1d28:	a5 01       	movw	r20, r10
    1d2a:	94 01       	movw	r18, r8
    1d2c:	0e 94 bd 1e 	call	0x3d7a	; 0x3d7a <__divmodsi4>
    1d30:	69 01       	movw	r12, r18
    1d32:	7a 01       	movw	r14, r20
    1d34:	91 e0       	ldi	r25, 0x01	; 1
    1d36:	c9 1a       	sub	r12, r25
    1d38:	d1 08       	sbc	r13, r1
    1d3a:	e1 08       	sbc	r14, r1
    1d3c:	f1 08       	sbc	r15, r1
            prescalarbits = _timer == 0 ? 0b100 : 0b110;
            if (ocr > 255)
    1d3e:	2f ef       	ldi	r18, 0xFF	; 255
    1d40:	c2 16       	cp	r12, r18
    1d42:	d1 04       	cpc	r13, r1
    1d44:	e1 04       	cpc	r14, r1
    1d46:	f1 04       	cpc	r15, r1
    1d48:	a9 f0       	breq	.+42     	; 0x1d74 <_Z4tonehjm+0x4c4>
    1d4a:	a0 f0       	brcs	.+40     	; 0x1d74 <_Z4tonehjm+0x4c4>
            {
              // can't do any better than /1024
              ocr = F_CPU / frequency / 2 / 1024 - 1;
    1d4c:	89 81       	ldd	r24, Y+1	; 0x01
    1d4e:	9a 81       	ldd	r25, Y+2	; 0x02
    1d50:	ab 81       	ldd	r26, Y+3	; 0x03
    1d52:	bc 81       	ldd	r27, Y+4	; 0x04
    1d54:	3a e0       	ldi	r19, 0x0A	; 10
    1d56:	b5 95       	asr	r27
    1d58:	a7 95       	ror	r26
    1d5a:	97 95       	ror	r25
    1d5c:	87 95       	ror	r24
    1d5e:	3a 95       	dec	r19
    1d60:	d1 f7       	brne	.-12     	; 0x1d56 <_Z4tonehjm+0x4a6>
    1d62:	6c 01       	movw	r12, r24
    1d64:	7d 01       	movw	r14, r26
    1d66:	21 e0       	ldi	r18, 0x01	; 1
    1d68:	c2 1a       	sub	r12, r18
    1d6a:	d1 08       	sbc	r13, r1
    1d6c:	e1 08       	sbc	r14, r1
    1d6e:	f1 08       	sbc	r15, r1
              prescalarbits = _timer == 0 ? 0b101 : 0b111;
    1d70:	85 e0       	ldi	r24, 0x05	; 5
    1d72:	c3 ce       	rjmp	.-634    	; 0x1afa <_Z4tonehjm+0x24a>
          }

          if (ocr > 255)
          {
            ocr = F_CPU / frequency / 2 / 256 - 1;
            prescalarbits = _timer == 0 ? 0b100 : 0b110;
    1d74:	84 e0       	ldi	r24, 0x04	; 4
    1d76:	c1 ce       	rjmp	.-638    	; 0x1afa <_Z4tonehjm+0x24a>
        }

        if (ocr > 255)
        {
          ocr = F_CPU / frequency / 2 / 64 - 1;
          prescalarbits = _timer == 0 ? 0b011 : 0b100;
    1d78:	83 e0       	ldi	r24, 0x03	; 3
    1d7a:	bf ce       	rjmp	.-642    	; 0x1afa <_Z4tonehjm+0x24a>
    1d7c:	84 e0       	ldi	r24, 0x04	; 4
    1d7e:	ba ce       	rjmp	.-652    	; 0x1af4 <_Z4tonehjm+0x244>
  _timer = toneBegin(_pin);

  if (_timer >= 0)
  {
    // Set the pinMode as OUTPUT
    pinMode(_pin, OUTPUT);
    1d80:	61 e0       	ldi	r22, 0x01	; 1
    1d82:	0e 94 91 10 	call	0x2122	; 0x2122 <pinMode>
    1d86:	47 ce       	rjmp	.-882    	; 0x1a16 <_Z4tonehjm+0x166>
        break;
#endif

    }
  }
}
    1d88:	0f 90       	pop	r0
    1d8a:	0f 90       	pop	r0
    1d8c:	0f 90       	pop	r0
    1d8e:	0f 90       	pop	r0
    1d90:	0f 90       	pop	r0
    1d92:	df 91       	pop	r29
    1d94:	cf 91       	pop	r28
    1d96:	1f 91       	pop	r17
    1d98:	0f 91       	pop	r16
    1d9a:	ff 90       	pop	r15
    1d9c:	ef 90       	pop	r14
    1d9e:	df 90       	pop	r13
    1da0:	cf 90       	pop	r12
    1da2:	bf 90       	pop	r11
    1da4:	af 90       	pop	r10
    1da6:	9f 90       	pop	r9
    1da8:	8f 90       	pop	r8
    1daa:	7f 90       	pop	r7
    1dac:	6f 90       	pop	r6
    1dae:	5f 90       	pop	r5
    1db0:	4f 90       	pop	r4
    1db2:	08 95       	ret

00001db4 <_Z12disableTimerh>:
// XXX: this function only works properly for timer 2 (the only one we use
// currently).  for the others, it should end the tone, but won't restore
// proper PWM functionality for the timer.
void disableTimer(uint8_t _timer)
{
  switch (_timer)
    1db4:	81 30       	cpi	r24, 0x01	; 1
    1db6:	39 f0       	breq	.+14     	; 0x1dc6 <_Z12disableTimerh+0x12>
    1db8:	18 f0       	brcs	.+6      	; 0x1dc0 <_Z12disableTimerh+0xc>
    1dba:	82 30       	cpi	r24, 0x02	; 2
    1dbc:	51 f0       	breq	.+20     	; 0x1dd2 <_Z12disableTimerh+0x1e>
    1dbe:	08 95       	ret
  {
    case 0:
      #if defined(TIMSK0)
        TIMSK0 = 0;
    1dc0:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
      #elif defined(TIMSK)
        TIMSK = 0; // atmega32
      #endif
      break;
    1dc4:	08 95       	ret

#if defined(TIMSK1) && defined(OCIE1A)
    case 1:
      bitWrite(TIMSK1, OCIE1A, 0);
    1dc6:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    1dca:	8d 7f       	andi	r24, 0xFD	; 253
    1dcc:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
      break;
    1dd0:	08 95       	ret
#endif

    case 2:
      #if defined(TIMSK2) && defined(OCIE2A)
        bitWrite(TIMSK2, OCIE2A, 0); // disable interrupt
    1dd2:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
    1dd6:	8d 7f       	andi	r24, 0xFD	; 253
    1dd8:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
      #endif
      #if defined(TCCR2A) && defined(WGM20)
        TCCR2A = (1 << WGM20);
    1ddc:	81 e0       	ldi	r24, 0x01	; 1
    1dde:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
      #endif
      #if defined(TCCR2B) && defined(CS22)
        TCCR2B = (TCCR2B & 0b11111000) | (1 << CS22);
    1de2:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    1de6:	88 7f       	andi	r24, 0xF8	; 248
    1de8:	84 60       	ori	r24, 0x04	; 4
    1dea:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
      #endif
      #if defined(OCR2A)
        OCR2A = 0;
    1dee:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    1df2:	08 95       	ret

00001df4 <_Z6noToneh>:
  }
}


void noTone(uint8_t _pin)
{
    1df4:	cf 93       	push	r28
    1df6:	c8 2f       	mov	r28, r24
  int8_t _timer = -1;
  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == _pin) {
    1df8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    1dfc:	c8 13       	cpse	r28, r24
    1dfe:	07 c0       	rjmp	.+14     	; 0x1e0e <_Z6noToneh+0x1a>
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
    1e00:	ee e8       	ldi	r30, 0x8E	; 142
    1e02:	f0 e0       	ldi	r31, 0x00	; 0
    1e04:	84 91       	lpm	r24, Z
      tone_pins[i] = 255;
    1e06:	9f ef       	ldi	r25, 0xFF	; 255
    1e08:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <__data_start>
      break;
    1e0c:	01 c0       	rjmp	.+2      	; 0x1e10 <_Z6noToneh+0x1c>
}


void noTone(uint8_t _pin)
{
  int8_t _timer = -1;
    1e0e:	8f ef       	ldi	r24, 0xFF	; 255
      tone_pins[i] = 255;
      break;
    }
  }
  
  disableTimer(_timer);
    1e10:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <_Z12disableTimerh>

  digitalWrite(_pin, 0);
    1e14:	60 e0       	ldi	r22, 0x00	; 0
    1e16:	8c 2f       	mov	r24, r28
}
    1e18:	cf 91       	pop	r28
    }
  }
  
  disableTimer(_timer);

  digitalWrite(_pin, 0);
    1e1a:	0c 94 cd 10 	jmp	0x219a	; 0x219a <digitalWrite>

00001e1e <__vector_7>:
#endif


#ifdef USE_TIMER2
ISR(TIMER2_COMPA_vect)
{
    1e1e:	1f 92       	push	r1
    1e20:	0f 92       	push	r0
    1e22:	0f b6       	in	r0, 0x3f	; 63
    1e24:	0f 92       	push	r0
    1e26:	11 24       	eor	r1, r1
    1e28:	2f 93       	push	r18
    1e2a:	3f 93       	push	r19
    1e2c:	4f 93       	push	r20
    1e2e:	5f 93       	push	r21
    1e30:	6f 93       	push	r22
    1e32:	7f 93       	push	r23
    1e34:	8f 93       	push	r24
    1e36:	9f 93       	push	r25
    1e38:	af 93       	push	r26
    1e3a:	bf 93       	push	r27
    1e3c:	ef 93       	push	r30
    1e3e:	ff 93       	push	r31

  if (timer2_toggle_count != 0)
    1e40:	80 91 70 03 	lds	r24, 0x0370	; 0x800370 <timer2_toggle_count>
    1e44:	90 91 71 03 	lds	r25, 0x0371	; 0x800371 <timer2_toggle_count+0x1>
    1e48:	a0 91 72 03 	lds	r26, 0x0372	; 0x800372 <timer2_toggle_count+0x2>
    1e4c:	b0 91 73 03 	lds	r27, 0x0373	; 0x800373 <timer2_toggle_count+0x3>
    1e50:	89 2b       	or	r24, r25
    1e52:	8a 2b       	or	r24, r26
    1e54:	8b 2b       	or	r24, r27
    1e56:	51 f1       	breq	.+84     	; 0x1eac <__vector_7+0x8e>
  {
    // toggle the pin
    *timer2_pin_port ^= timer2_pin_mask;
    1e58:	90 91 6d 03 	lds	r25, 0x036D	; 0x80036d <timer2_pin_mask>
    1e5c:	e0 91 6e 03 	lds	r30, 0x036E	; 0x80036e <timer2_pin_port>
    1e60:	f0 91 6f 03 	lds	r31, 0x036F	; 0x80036f <timer2_pin_port+0x1>
    1e64:	80 81       	ld	r24, Z
    1e66:	89 27       	eor	r24, r25
    1e68:	80 83       	st	Z, r24

    if (timer2_toggle_count > 0)
    1e6a:	80 91 70 03 	lds	r24, 0x0370	; 0x800370 <timer2_toggle_count>
    1e6e:	90 91 71 03 	lds	r25, 0x0371	; 0x800371 <timer2_toggle_count+0x1>
    1e72:	a0 91 72 03 	lds	r26, 0x0372	; 0x800372 <timer2_toggle_count+0x2>
    1e76:	b0 91 73 03 	lds	r27, 0x0373	; 0x800373 <timer2_toggle_count+0x3>
    1e7a:	18 16       	cp	r1, r24
    1e7c:	19 06       	cpc	r1, r25
    1e7e:	1a 06       	cpc	r1, r26
    1e80:	1b 06       	cpc	r1, r27
    1e82:	c4 f4       	brge	.+48     	; 0x1eb4 <__vector_7+0x96>
      timer2_toggle_count--;
    1e84:	80 91 70 03 	lds	r24, 0x0370	; 0x800370 <timer2_toggle_count>
    1e88:	90 91 71 03 	lds	r25, 0x0371	; 0x800371 <timer2_toggle_count+0x1>
    1e8c:	a0 91 72 03 	lds	r26, 0x0372	; 0x800372 <timer2_toggle_count+0x2>
    1e90:	b0 91 73 03 	lds	r27, 0x0373	; 0x800373 <timer2_toggle_count+0x3>
    1e94:	01 97       	sbiw	r24, 0x01	; 1
    1e96:	a1 09       	sbc	r26, r1
    1e98:	b1 09       	sbc	r27, r1
    1e9a:	80 93 70 03 	sts	0x0370, r24	; 0x800370 <timer2_toggle_count>
    1e9e:	90 93 71 03 	sts	0x0371, r25	; 0x800371 <timer2_toggle_count+0x1>
    1ea2:	a0 93 72 03 	sts	0x0372, r26	; 0x800372 <timer2_toggle_count+0x2>
    1ea6:	b0 93 73 03 	sts	0x0373, r27	; 0x800373 <timer2_toggle_count+0x3>
    1eaa:	04 c0       	rjmp	.+8      	; 0x1eb4 <__vector_7+0x96>
  else
  {
    // need to call noTone() so that the tone_pins[] entry is reset, so the
    // timer gets initialized next time we call tone().
    // XXX: this assumes timer 2 is always the first one used.
    noTone(tone_pins[0]);
    1eac:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    1eb0:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <_Z6noToneh>
//    disableTimer(2);
//    *timer2_pin_port &= ~(timer2_pin_mask);  // keep pin low after stop
  }
}
    1eb4:	ff 91       	pop	r31
    1eb6:	ef 91       	pop	r30
    1eb8:	bf 91       	pop	r27
    1eba:	af 91       	pop	r26
    1ebc:	9f 91       	pop	r25
    1ebe:	8f 91       	pop	r24
    1ec0:	7f 91       	pop	r23
    1ec2:	6f 91       	pop	r22
    1ec4:	5f 91       	pop	r21
    1ec6:	4f 91       	pop	r20
    1ec8:	3f 91       	pop	r19
    1eca:	2f 91       	pop	r18
    1ecc:	0f 90       	pop	r0
    1ece:	0f be       	out	0x3f, r0	; 63
    1ed0:	0f 90       	pop	r0
    1ed2:	1f 90       	pop	r1
    1ed4:	18 95       	reti

00001ed6 <__vector_16>:
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    1ed6:	1f 92       	push	r1
    1ed8:	0f 92       	push	r0
    1eda:	0f b6       	in	r0, 0x3f	; 63
    1edc:	0f 92       	push	r0
    1ede:	11 24       	eor	r1, r1
    1ee0:	2f 93       	push	r18
    1ee2:	3f 93       	push	r19
    1ee4:	8f 93       	push	r24
    1ee6:	9f 93       	push	r25
    1ee8:	af 93       	push	r26
    1eea:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    1eec:	80 91 83 03 	lds	r24, 0x0383	; 0x800383 <timer0_millis>
    1ef0:	90 91 84 03 	lds	r25, 0x0384	; 0x800384 <timer0_millis+0x1>
    1ef4:	a0 91 85 03 	lds	r26, 0x0385	; 0x800385 <timer0_millis+0x2>
    1ef8:	b0 91 86 03 	lds	r27, 0x0386	; 0x800386 <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    1efc:	30 91 82 03 	lds	r19, 0x0382	; 0x800382 <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    1f00:	23 e0       	ldi	r18, 0x03	; 3
    1f02:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    1f04:	2d 37       	cpi	r18, 0x7D	; 125
    1f06:	20 f4       	brcc	.+8      	; 0x1f10 <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    1f08:	01 96       	adiw	r24, 0x01	; 1
    1f0a:	a1 1d       	adc	r26, r1
    1f0c:	b1 1d       	adc	r27, r1
    1f0e:	05 c0       	rjmp	.+10     	; 0x1f1a <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    1f10:	26 e8       	ldi	r18, 0x86	; 134
    1f12:	23 0f       	add	r18, r19
		m += 1;
    1f14:	02 96       	adiw	r24, 0x02	; 2
    1f16:	a1 1d       	adc	r26, r1
    1f18:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    1f1a:	20 93 82 03 	sts	0x0382, r18	; 0x800382 <timer0_fract>
	timer0_millis = m;
    1f1e:	80 93 83 03 	sts	0x0383, r24	; 0x800383 <timer0_millis>
    1f22:	90 93 84 03 	sts	0x0384, r25	; 0x800384 <timer0_millis+0x1>
    1f26:	a0 93 85 03 	sts	0x0385, r26	; 0x800385 <timer0_millis+0x2>
    1f2a:	b0 93 86 03 	sts	0x0386, r27	; 0x800386 <timer0_millis+0x3>
	timer0_overflow_count++;
    1f2e:	80 91 87 03 	lds	r24, 0x0387	; 0x800387 <timer0_overflow_count>
    1f32:	90 91 88 03 	lds	r25, 0x0388	; 0x800388 <timer0_overflow_count+0x1>
    1f36:	a0 91 89 03 	lds	r26, 0x0389	; 0x800389 <timer0_overflow_count+0x2>
    1f3a:	b0 91 8a 03 	lds	r27, 0x038A	; 0x80038a <timer0_overflow_count+0x3>
    1f3e:	01 96       	adiw	r24, 0x01	; 1
    1f40:	a1 1d       	adc	r26, r1
    1f42:	b1 1d       	adc	r27, r1
    1f44:	80 93 87 03 	sts	0x0387, r24	; 0x800387 <timer0_overflow_count>
    1f48:	90 93 88 03 	sts	0x0388, r25	; 0x800388 <timer0_overflow_count+0x1>
    1f4c:	a0 93 89 03 	sts	0x0389, r26	; 0x800389 <timer0_overflow_count+0x2>
    1f50:	b0 93 8a 03 	sts	0x038A, r27	; 0x80038a <timer0_overflow_count+0x3>
}
    1f54:	bf 91       	pop	r27
    1f56:	af 91       	pop	r26
    1f58:	9f 91       	pop	r25
    1f5a:	8f 91       	pop	r24
    1f5c:	3f 91       	pop	r19
    1f5e:	2f 91       	pop	r18
    1f60:	0f 90       	pop	r0
    1f62:	0f be       	out	0x3f, r0	; 63
    1f64:	0f 90       	pop	r0
    1f66:	1f 90       	pop	r1
    1f68:	18 95       	reti

00001f6a <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    1f6a:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    1f6c:	f8 94       	cli
	m = timer0_millis;
    1f6e:	60 91 83 03 	lds	r22, 0x0383	; 0x800383 <timer0_millis>
    1f72:	70 91 84 03 	lds	r23, 0x0384	; 0x800384 <timer0_millis+0x1>
    1f76:	80 91 85 03 	lds	r24, 0x0385	; 0x800385 <timer0_millis+0x2>
    1f7a:	90 91 86 03 	lds	r25, 0x0386	; 0x800386 <timer0_millis+0x3>
	SREG = oldSREG;
    1f7e:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    1f80:	08 95       	ret

00001f82 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    1f82:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    1f84:	f8 94       	cli
	m = timer0_overflow_count;
    1f86:	80 91 87 03 	lds	r24, 0x0387	; 0x800387 <timer0_overflow_count>
    1f8a:	90 91 88 03 	lds	r25, 0x0388	; 0x800388 <timer0_overflow_count+0x1>
    1f8e:	a0 91 89 03 	lds	r26, 0x0389	; 0x800389 <timer0_overflow_count+0x2>
    1f92:	b0 91 8a 03 	lds	r27, 0x038A	; 0x80038a <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    1f96:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    1f98:	a8 9b       	sbis	0x15, 0	; 21
    1f9a:	05 c0       	rjmp	.+10     	; 0x1fa6 <micros+0x24>
    1f9c:	2f 3f       	cpi	r18, 0xFF	; 255
    1f9e:	19 f0       	breq	.+6      	; 0x1fa6 <micros+0x24>
		m++;
    1fa0:	01 96       	adiw	r24, 0x01	; 1
    1fa2:	a1 1d       	adc	r26, r1
    1fa4:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    1fa6:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    1fa8:	ba 2f       	mov	r27, r26
    1faa:	a9 2f       	mov	r26, r25
    1fac:	98 2f       	mov	r25, r24
    1fae:	88 27       	eor	r24, r24
    1fb0:	82 0f       	add	r24, r18
    1fb2:	91 1d       	adc	r25, r1
    1fb4:	a1 1d       	adc	r26, r1
    1fb6:	b1 1d       	adc	r27, r1
    1fb8:	bc 01       	movw	r22, r24
    1fba:	cd 01       	movw	r24, r26
    1fbc:	42 e0       	ldi	r20, 0x02	; 2
    1fbe:	66 0f       	add	r22, r22
    1fc0:	77 1f       	adc	r23, r23
    1fc2:	88 1f       	adc	r24, r24
    1fc4:	99 1f       	adc	r25, r25
    1fc6:	4a 95       	dec	r20
    1fc8:	d1 f7       	brne	.-12     	; 0x1fbe <micros+0x3c>
}
    1fca:	08 95       	ret

00001fcc <delay>:

void delay(unsigned long ms)
{
    1fcc:	8f 92       	push	r8
    1fce:	9f 92       	push	r9
    1fd0:	af 92       	push	r10
    1fd2:	bf 92       	push	r11
    1fd4:	cf 92       	push	r12
    1fd6:	df 92       	push	r13
    1fd8:	ef 92       	push	r14
    1fda:	ff 92       	push	r15
    1fdc:	6b 01       	movw	r12, r22
    1fde:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    1fe0:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <micros>
    1fe4:	4b 01       	movw	r8, r22
    1fe6:	5c 01       	movw	r10, r24

	while (ms > 0) {
    1fe8:	c1 14       	cp	r12, r1
    1fea:	d1 04       	cpc	r13, r1
    1fec:	e1 04       	cpc	r14, r1
    1fee:	f1 04       	cpc	r15, r1
    1ff0:	01 f1       	breq	.+64     	; 0x2032 <delay+0x66>
		yield();
    1ff2:	0e 94 63 1c 	call	0x38c6	; 0x38c6 <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
    1ff6:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <micros>
    1ffa:	dc 01       	movw	r26, r24
    1ffc:	cb 01       	movw	r24, r22
    1ffe:	88 19       	sub	r24, r8
    2000:	99 09       	sbc	r25, r9
    2002:	aa 09       	sbc	r26, r10
    2004:	bb 09       	sbc	r27, r11
    2006:	88 3e       	cpi	r24, 0xE8	; 232
    2008:	93 40       	sbci	r25, 0x03	; 3
    200a:	a1 05       	cpc	r26, r1
    200c:	b1 05       	cpc	r27, r1
    200e:	60 f3       	brcs	.-40     	; 0x1fe8 <delay+0x1c>
			ms--;
    2010:	21 e0       	ldi	r18, 0x01	; 1
    2012:	c2 1a       	sub	r12, r18
    2014:	d1 08       	sbc	r13, r1
    2016:	e1 08       	sbc	r14, r1
    2018:	f1 08       	sbc	r15, r1
			start += 1000;
    201a:	88 ee       	ldi	r24, 0xE8	; 232
    201c:	88 0e       	add	r8, r24
    201e:	83 e0       	ldi	r24, 0x03	; 3
    2020:	98 1e       	adc	r9, r24
    2022:	a1 1c       	adc	r10, r1
    2024:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    2026:	c1 14       	cp	r12, r1
    2028:	d1 04       	cpc	r13, r1
    202a:	e1 04       	cpc	r14, r1
    202c:	f1 04       	cpc	r15, r1
    202e:	19 f7       	brne	.-58     	; 0x1ff6 <delay+0x2a>
    2030:	db cf       	rjmp	.-74     	; 0x1fe8 <delay+0x1c>
			ms--;
			start += 1000;
		}
	}
}
    2032:	ff 90       	pop	r15
    2034:	ef 90       	pop	r14
    2036:	df 90       	pop	r13
    2038:	cf 90       	pop	r12
    203a:	bf 90       	pop	r11
    203c:	af 90       	pop	r10
    203e:	9f 90       	pop	r9
    2040:	8f 90       	pop	r8
    2042:	08 95       	ret

00002044 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    2044:	82 30       	cpi	r24, 0x02	; 2
    2046:	91 05       	cpc	r25, r1
    2048:	38 f0       	brcs	.+14     	; 0x2058 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    204a:	88 0f       	add	r24, r24
    204c:	99 1f       	adc	r25, r25
    204e:	88 0f       	add	r24, r24
    2050:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    2052:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    2054:	01 97       	sbiw	r24, 0x01	; 1
    2056:	f1 f7       	brne	.-4      	; 0x2054 <delayMicroseconds+0x10>
    2058:	08 95       	ret

0000205a <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    205a:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    205c:	84 b5       	in	r24, 0x24	; 36
    205e:	82 60       	ori	r24, 0x02	; 2
    2060:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    2062:	84 b5       	in	r24, 0x24	; 36
    2064:	81 60       	ori	r24, 0x01	; 1
    2066:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    2068:	85 b5       	in	r24, 0x25	; 37
    206a:	82 60       	ori	r24, 0x02	; 2
    206c:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    206e:	85 b5       	in	r24, 0x25	; 37
    2070:	81 60       	ori	r24, 0x01	; 1
    2072:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    2074:	ee e6       	ldi	r30, 0x6E	; 110
    2076:	f0 e0       	ldi	r31, 0x00	; 0
    2078:	80 81       	ld	r24, Z
    207a:	81 60       	ori	r24, 0x01	; 1
    207c:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    207e:	e1 e8       	ldi	r30, 0x81	; 129
    2080:	f0 e0       	ldi	r31, 0x00	; 0
    2082:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    2084:	80 81       	ld	r24, Z
    2086:	82 60       	ori	r24, 0x02	; 2
    2088:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    208a:	80 81       	ld	r24, Z
    208c:	81 60       	ori	r24, 0x01	; 1
    208e:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    2090:	e0 e8       	ldi	r30, 0x80	; 128
    2092:	f0 e0       	ldi	r31, 0x00	; 0
    2094:	80 81       	ld	r24, Z
    2096:	81 60       	ori	r24, 0x01	; 1
    2098:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    209a:	e1 eb       	ldi	r30, 0xB1	; 177
    209c:	f0 e0       	ldi	r31, 0x00	; 0
    209e:	80 81       	ld	r24, Z
    20a0:	84 60       	ori	r24, 0x04	; 4
    20a2:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    20a4:	e0 eb       	ldi	r30, 0xB0	; 176
    20a6:	f0 e0       	ldi	r31, 0x00	; 0
    20a8:	80 81       	ld	r24, Z
    20aa:	81 60       	ori	r24, 0x01	; 1
    20ac:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    20ae:	ea e7       	ldi	r30, 0x7A	; 122
    20b0:	f0 e0       	ldi	r31, 0x00	; 0
    20b2:	80 81       	ld	r24, Z
    20b4:	84 60       	ori	r24, 0x04	; 4
    20b6:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    20b8:	80 81       	ld	r24, Z
    20ba:	82 60       	ori	r24, 0x02	; 2
    20bc:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    20be:	80 81       	ld	r24, Z
    20c0:	81 60       	ori	r24, 0x01	; 1
    20c2:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    20c4:	80 81       	ld	r24, Z
    20c6:	80 68       	ori	r24, 0x80	; 128
    20c8:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    20ca:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    20ce:	08 95       	ret

000020d0 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    20d0:	83 30       	cpi	r24, 0x03	; 3
    20d2:	81 f0       	breq	.+32     	; 0x20f4 <turnOffPWM+0x24>
    20d4:	28 f4       	brcc	.+10     	; 0x20e0 <turnOffPWM+0x10>
    20d6:	81 30       	cpi	r24, 0x01	; 1
    20d8:	99 f0       	breq	.+38     	; 0x2100 <turnOffPWM+0x30>
    20da:	82 30       	cpi	r24, 0x02	; 2
    20dc:	a1 f0       	breq	.+40     	; 0x2106 <turnOffPWM+0x36>
    20de:	08 95       	ret
    20e0:	87 30       	cpi	r24, 0x07	; 7
    20e2:	a9 f0       	breq	.+42     	; 0x210e <turnOffPWM+0x3e>
    20e4:	88 30       	cpi	r24, 0x08	; 8
    20e6:	b9 f0       	breq	.+46     	; 0x2116 <turnOffPWM+0x46>
    20e8:	84 30       	cpi	r24, 0x04	; 4
    20ea:	d1 f4       	brne	.+52     	; 0x2120 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    20ec:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    20f0:	8f 7d       	andi	r24, 0xDF	; 223
    20f2:	03 c0       	rjmp	.+6      	; 0x20fa <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    20f4:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    20f8:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    20fa:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    20fe:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    2100:	84 b5       	in	r24, 0x24	; 36
    2102:	8f 77       	andi	r24, 0x7F	; 127
    2104:	02 c0       	rjmp	.+4      	; 0x210a <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    2106:	84 b5       	in	r24, 0x24	; 36
    2108:	8f 7d       	andi	r24, 0xDF	; 223
    210a:	84 bd       	out	0x24, r24	; 36
    210c:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    210e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2112:	8f 77       	andi	r24, 0x7F	; 127
    2114:	03 c0       	rjmp	.+6      	; 0x211c <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    2116:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    211a:	8f 7d       	andi	r24, 0xDF	; 223
    211c:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2120:	08 95       	ret

00002122 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    2122:	cf 93       	push	r28
    2124:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    2126:	90 e0       	ldi	r25, 0x00	; 0
    2128:	fc 01       	movw	r30, r24
    212a:	ed 55       	subi	r30, 0x5D	; 93
    212c:	ff 4f       	sbci	r31, 0xFF	; 255
    212e:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    2130:	fc 01       	movw	r30, r24
    2132:	e9 54       	subi	r30, 0x49	; 73
    2134:	ff 4f       	sbci	r31, 0xFF	; 255
    2136:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    2138:	88 23       	and	r24, r24
    213a:	61 f1       	breq	.+88     	; 0x2194 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    213c:	90 e0       	ldi	r25, 0x00	; 0
    213e:	88 0f       	add	r24, r24
    2140:	99 1f       	adc	r25, r25
    2142:	fc 01       	movw	r30, r24
    2144:	e1 52       	subi	r30, 0x21	; 33
    2146:	ff 4f       	sbci	r31, 0xFF	; 255
    2148:	c5 91       	lpm	r28, Z+
    214a:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    214c:	fc 01       	movw	r30, r24
    214e:	eb 52       	subi	r30, 0x2B	; 43
    2150:	ff 4f       	sbci	r31, 0xFF	; 255
    2152:	a5 91       	lpm	r26, Z+
    2154:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    2156:	61 11       	cpse	r22, r1
    2158:	09 c0       	rjmp	.+18     	; 0x216c <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    215a:	9f b7       	in	r25, 0x3f	; 63
                cli();
    215c:	f8 94       	cli
		*reg &= ~bit;
    215e:	88 81       	ld	r24, Y
    2160:	20 95       	com	r18
    2162:	82 23       	and	r24, r18
    2164:	88 83       	st	Y, r24
		*out &= ~bit;
    2166:	ec 91       	ld	r30, X
    2168:	2e 23       	and	r18, r30
    216a:	0b c0       	rjmp	.+22     	; 0x2182 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    216c:	62 30       	cpi	r22, 0x02	; 2
    216e:	61 f4       	brne	.+24     	; 0x2188 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    2170:	9f b7       	in	r25, 0x3f	; 63
                cli();
    2172:	f8 94       	cli
		*reg &= ~bit;
    2174:	88 81       	ld	r24, Y
    2176:	32 2f       	mov	r19, r18
    2178:	30 95       	com	r19
    217a:	83 23       	and	r24, r19
    217c:	88 83       	st	Y, r24
		*out |= bit;
    217e:	ec 91       	ld	r30, X
    2180:	2e 2b       	or	r18, r30
    2182:	2c 93       	st	X, r18
		SREG = oldSREG;
    2184:	9f bf       	out	0x3f, r25	; 63
    2186:	06 c0       	rjmp	.+12     	; 0x2194 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    2188:	8f b7       	in	r24, 0x3f	; 63
                cli();
    218a:	f8 94       	cli
		*reg |= bit;
    218c:	e8 81       	ld	r30, Y
    218e:	2e 2b       	or	r18, r30
    2190:	28 83       	st	Y, r18
		SREG = oldSREG;
    2192:	8f bf       	out	0x3f, r24	; 63
	}
}
    2194:	df 91       	pop	r29
    2196:	cf 91       	pop	r28
    2198:	08 95       	ret

0000219a <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    219a:	1f 93       	push	r17
    219c:	cf 93       	push	r28
    219e:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    21a0:	28 2f       	mov	r18, r24
    21a2:	30 e0       	ldi	r19, 0x00	; 0
    21a4:	f9 01       	movw	r30, r18
    21a6:	e1 57       	subi	r30, 0x71	; 113
    21a8:	ff 4f       	sbci	r31, 0xFF	; 255
    21aa:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    21ac:	f9 01       	movw	r30, r18
    21ae:	ed 55       	subi	r30, 0x5D	; 93
    21b0:	ff 4f       	sbci	r31, 0xFF	; 255
    21b2:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    21b4:	f9 01       	movw	r30, r18
    21b6:	e9 54       	subi	r30, 0x49	; 73
    21b8:	ff 4f       	sbci	r31, 0xFF	; 255
    21ba:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    21bc:	cc 23       	and	r28, r28
    21be:	c1 f0       	breq	.+48     	; 0x21f0 <digitalWrite+0x56>
    21c0:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    21c2:	81 11       	cpse	r24, r1
    21c4:	0e 94 68 10 	call	0x20d0	; 0x20d0 <turnOffPWM>

	out = portOutputRegister(port);
    21c8:	ec 2f       	mov	r30, r28
    21ca:	f0 e0       	ldi	r31, 0x00	; 0
    21cc:	ee 0f       	add	r30, r30
    21ce:	ff 1f       	adc	r31, r31
    21d0:	eb 52       	subi	r30, 0x2B	; 43
    21d2:	ff 4f       	sbci	r31, 0xFF	; 255
    21d4:	a5 91       	lpm	r26, Z+
    21d6:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    21d8:	9f b7       	in	r25, 0x3f	; 63
	cli();
    21da:	f8 94       	cli

	if (val == LOW) {
    21dc:	11 11       	cpse	r17, r1
    21de:	04 c0       	rjmp	.+8      	; 0x21e8 <digitalWrite+0x4e>
		*out &= ~bit;
    21e0:	8c 91       	ld	r24, X
    21e2:	d0 95       	com	r29
    21e4:	d8 23       	and	r29, r24
    21e6:	02 c0       	rjmp	.+4      	; 0x21ec <digitalWrite+0x52>
	} else {
		*out |= bit;
    21e8:	ec 91       	ld	r30, X
    21ea:	de 2b       	or	r29, r30
    21ec:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    21ee:	9f bf       	out	0x3f, r25	; 63
}
    21f0:	df 91       	pop	r29
    21f2:	cf 91       	pop	r28
    21f4:	1f 91       	pop	r17
    21f6:	08 95       	ret

000021f8 <digitalRead>:

int digitalRead(uint8_t pin)
{
    21f8:	cf 93       	push	r28
    21fa:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    21fc:	28 2f       	mov	r18, r24
    21fe:	30 e0       	ldi	r19, 0x00	; 0
    2200:	f9 01       	movw	r30, r18
    2202:	e1 57       	subi	r30, 0x71	; 113
    2204:	ff 4f       	sbci	r31, 0xFF	; 255
    2206:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    2208:	f9 01       	movw	r30, r18
    220a:	ed 55       	subi	r30, 0x5D	; 93
    220c:	ff 4f       	sbci	r31, 0xFF	; 255
    220e:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    2210:	f9 01       	movw	r30, r18
    2212:	e9 54       	subi	r30, 0x49	; 73
    2214:	ff 4f       	sbci	r31, 0xFF	; 255
    2216:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    2218:	cc 23       	and	r28, r28
    221a:	91 f0       	breq	.+36     	; 0x2240 <digitalRead+0x48>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    221c:	81 11       	cpse	r24, r1
    221e:	0e 94 68 10 	call	0x20d0	; 0x20d0 <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    2222:	ec 2f       	mov	r30, r28
    2224:	f0 e0       	ldi	r31, 0x00	; 0
    2226:	ee 0f       	add	r30, r30
    2228:	ff 1f       	adc	r31, r31
    222a:	e5 53       	subi	r30, 0x35	; 53
    222c:	ff 4f       	sbci	r31, 0xFF	; 255
    222e:	a5 91       	lpm	r26, Z+
    2230:	b4 91       	lpm	r27, Z
    2232:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    2234:	ed 23       	and	r30, r29
    2236:	81 e0       	ldi	r24, 0x01	; 1
    2238:	90 e0       	ldi	r25, 0x00	; 0
    223a:	21 f4       	brne	.+8      	; 0x2244 <digitalRead+0x4c>
    223c:	80 e0       	ldi	r24, 0x00	; 0
    223e:	02 c0       	rjmp	.+4      	; 0x2244 <digitalRead+0x4c>
    2240:	80 e0       	ldi	r24, 0x00	; 0
    2242:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    2244:	df 91       	pop	r29
    2246:	cf 91       	pop	r28
    2248:	08 95       	ret

0000224a <_ZN17LiquidCrystal_I2CC1Ev>:
void LiquidCrystal_I2C::blink_off(){
	noBlink();
}

void LiquidCrystal_I2C::load_custom_character(uint8_t char_num, uint8_t *rows){
		createChar(char_num, rows);
    224a:	fc 01       	movw	r30, r24
    224c:	13 82       	std	Z+3, r1	; 0x03
    224e:	12 82       	std	Z+2, r1	; 0x02
    2250:	8d e6       	ldi	r24, 0x6D	; 109
    2252:	92 e0       	ldi	r25, 0x02	; 2
    2254:	91 83       	std	Z+1, r25	; 0x01
    2256:	80 83       	st	Z, r24
    2258:	13 86       	std	Z+11, r1	; 0x0b
    225a:	08 95       	ret

0000225c <_ZN17LiquidCrystal_I2C13expanderWriteEh>:
    225c:	1f 93       	push	r17
    225e:	cf 93       	push	r28
    2260:	df 93       	push	r29
    2262:	ec 01       	movw	r28, r24
    2264:	16 2f       	mov	r17, r22
    2266:	6c 81       	ldd	r22, Y+4	; 0x04
    2268:	8f e8       	ldi	r24, 0x8F	; 143
    226a:	93 e0       	ldi	r25, 0x03	; 3
    226c:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <_ZN7TwoWire17beginTransmissionEh>
    2270:	6b 85       	ldd	r22, Y+11	; 0x0b
    2272:	61 2b       	or	r22, r17
    2274:	8f e8       	ldi	r24, 0x8F	; 143
    2276:	93 e0       	ldi	r25, 0x03	; 3
    2278:	0e 94 82 1b 	call	0x3704	; 0x3704 <_ZN7TwoWire5writeEh>
    227c:	8f e8       	ldi	r24, 0x8F	; 143
    227e:	93 e0       	ldi	r25, 0x03	; 3
    2280:	df 91       	pop	r29
    2282:	cf 91       	pop	r28
    2284:	1f 91       	pop	r17
    2286:	0c 94 5c 1c 	jmp	0x38b8	; 0x38b8 <_ZN7TwoWire15endTransmissionEv>

0000228a <_ZN17LiquidCrystal_I2C11noBacklightEv>:
    228a:	fc 01       	movw	r30, r24
    228c:	13 86       	std	Z+11, r1	; 0x0b
    228e:	60 e0       	ldi	r22, 0x00	; 0
    2290:	0c 94 2e 11 	jmp	0x225c	; 0x225c <_ZN17LiquidCrystal_I2C13expanderWriteEh>

00002294 <_ZN17LiquidCrystal_I2C9backlightEv>:
    2294:	28 e0       	ldi	r18, 0x08	; 8
    2296:	fc 01       	movw	r30, r24
    2298:	23 87       	std	Z+11, r18	; 0x0b
    229a:	60 e0       	ldi	r22, 0x00	; 0
    229c:	0c 94 2e 11 	jmp	0x225c	; 0x225c <_ZN17LiquidCrystal_I2C13expanderWriteEh>

000022a0 <_ZN17LiquidCrystal_I2C11pulseEnableEh>:
    22a0:	0f 93       	push	r16
    22a2:	1f 93       	push	r17
    22a4:	cf 93       	push	r28
    22a6:	8c 01       	movw	r16, r24
    22a8:	c6 2f       	mov	r28, r22
    22aa:	64 60       	ori	r22, 0x04	; 4
    22ac:	0e 94 2e 11 	call	0x225c	; 0x225c <_ZN17LiquidCrystal_I2C13expanderWriteEh>
    22b0:	81 e0       	ldi	r24, 0x01	; 1
    22b2:	90 e0       	ldi	r25, 0x00	; 0
    22b4:	0e 94 22 10 	call	0x2044	; 0x2044 <delayMicroseconds>
    22b8:	6c 2f       	mov	r22, r28
    22ba:	6b 7f       	andi	r22, 0xFB	; 251
    22bc:	c8 01       	movw	r24, r16
    22be:	0e 94 2e 11 	call	0x225c	; 0x225c <_ZN17LiquidCrystal_I2C13expanderWriteEh>
    22c2:	82 e3       	ldi	r24, 0x32	; 50
    22c4:	90 e0       	ldi	r25, 0x00	; 0
    22c6:	cf 91       	pop	r28
    22c8:	1f 91       	pop	r17
    22ca:	0f 91       	pop	r16
    22cc:	0c 94 22 10 	jmp	0x2044	; 0x2044 <delayMicroseconds>

000022d0 <_ZN17LiquidCrystal_I2C10write4bitsEh>:
    22d0:	1f 93       	push	r17
    22d2:	cf 93       	push	r28
    22d4:	df 93       	push	r29
    22d6:	ec 01       	movw	r28, r24
    22d8:	16 2f       	mov	r17, r22
    22da:	0e 94 2e 11 	call	0x225c	; 0x225c <_ZN17LiquidCrystal_I2C13expanderWriteEh>
    22de:	61 2f       	mov	r22, r17
    22e0:	ce 01       	movw	r24, r28
    22e2:	df 91       	pop	r29
    22e4:	cf 91       	pop	r28
    22e6:	1f 91       	pop	r17
    22e8:	0c 94 50 11 	jmp	0x22a0	; 0x22a0 <_ZN17LiquidCrystal_I2C11pulseEnableEh>

000022ec <_ZN17LiquidCrystal_I2C4sendEhh>:
    22ec:	0f 93       	push	r16
    22ee:	1f 93       	push	r17
    22f0:	cf 93       	push	r28
    22f2:	df 93       	push	r29
    22f4:	8c 01       	movw	r16, r24
    22f6:	c6 2f       	mov	r28, r22
    22f8:	d4 2f       	mov	r29, r20
    22fa:	60 7f       	andi	r22, 0xF0	; 240
    22fc:	64 2b       	or	r22, r20
    22fe:	0e 94 68 11 	call	0x22d0	; 0x22d0 <_ZN17LiquidCrystal_I2C10write4bitsEh>
    2302:	80 e1       	ldi	r24, 0x10	; 16
    2304:	c8 9f       	mul	r28, r24
    2306:	b0 01       	movw	r22, r0
    2308:	11 24       	eor	r1, r1
    230a:	6d 2b       	or	r22, r29
    230c:	c8 01       	movw	r24, r16
    230e:	df 91       	pop	r29
    2310:	cf 91       	pop	r28
    2312:	1f 91       	pop	r17
    2314:	0f 91       	pop	r16
    2316:	0c 94 68 11 	jmp	0x22d0	; 0x22d0 <_ZN17LiquidCrystal_I2C10write4bitsEh>

0000231a <_ZN17LiquidCrystal_I2C7commandEh>:
    231a:	40 e0       	ldi	r20, 0x00	; 0
    231c:	0c 94 76 11 	jmp	0x22ec	; 0x22ec <_ZN17LiquidCrystal_I2C4sendEhh>

00002320 <_ZN17LiquidCrystal_I2C5clearEv>:
    2320:	61 e0       	ldi	r22, 0x01	; 1
    2322:	0e 94 8d 11 	call	0x231a	; 0x231a <_ZN17LiquidCrystal_I2C7commandEh>
    2326:	80 ed       	ldi	r24, 0xD0	; 208
    2328:	97 e0       	ldi	r25, 0x07	; 7
    232a:	0c 94 22 10 	jmp	0x2044	; 0x2044 <delayMicroseconds>

0000232e <_ZN17LiquidCrystal_I2C4homeEv>:
    232e:	62 e0       	ldi	r22, 0x02	; 2
    2330:	0e 94 8d 11 	call	0x231a	; 0x231a <_ZN17LiquidCrystal_I2C7commandEh>
    2334:	80 ed       	ldi	r24, 0xD0	; 208
    2336:	97 e0       	ldi	r25, 0x07	; 7
    2338:	0c 94 22 10 	jmp	0x2044	; 0x2044 <delayMicroseconds>

0000233c <_ZN17LiquidCrystal_I2C9setCursorEhh>:
    233c:	cf 93       	push	r28
    233e:	df 93       	push	r29
    2340:	cd b7       	in	r28, 0x3d	; 61
    2342:	de b7       	in	r29, 0x3e	; 62
    2344:	28 97       	sbiw	r28, 0x08	; 8
    2346:	0f b6       	in	r0, 0x3f	; 63
    2348:	f8 94       	cli
    234a:	de bf       	out	0x3e, r29	; 62
    234c:	0f be       	out	0x3f, r0	; 63
    234e:	cd bf       	out	0x3d, r28	; 61
    2350:	9c 01       	movw	r18, r24
    2352:	88 e0       	ldi	r24, 0x08	; 8
    2354:	e1 e0       	ldi	r30, 0x01	; 1
    2356:	f1 e0       	ldi	r31, 0x01	; 1
    2358:	de 01       	movw	r26, r28
    235a:	11 96       	adiw	r26, 0x01	; 1
    235c:	01 90       	ld	r0, Z+
    235e:	0d 92       	st	X+, r0
    2360:	8a 95       	dec	r24
    2362:	e1 f7       	brne	.-8      	; 0x235c <_ZN17LiquidCrystal_I2C9setCursorEhh+0x20>
    2364:	f9 01       	movw	r30, r18
    2366:	80 85       	ldd	r24, Z+8	; 0x08
    2368:	84 17       	cp	r24, r20
    236a:	10 f4       	brcc	.+4      	; 0x2370 <_ZN17LiquidCrystal_I2C9setCursorEhh+0x34>
    236c:	4f ef       	ldi	r20, 0xFF	; 255
    236e:	48 0f       	add	r20, r24
    2370:	fe 01       	movw	r30, r28
    2372:	31 96       	adiw	r30, 0x01	; 1
    2374:	e4 0f       	add	r30, r20
    2376:	f1 1d       	adc	r31, r1
    2378:	e4 0f       	add	r30, r20
    237a:	f1 1d       	adc	r31, r1
    237c:	90 81       	ld	r25, Z
    237e:	69 0f       	add	r22, r25
    2380:	60 68       	ori	r22, 0x80	; 128
    2382:	c9 01       	movw	r24, r18
    2384:	28 96       	adiw	r28, 0x08	; 8
    2386:	0f b6       	in	r0, 0x3f	; 63
    2388:	f8 94       	cli
    238a:	de bf       	out	0x3e, r29	; 62
    238c:	0f be       	out	0x3f, r0	; 63
    238e:	cd bf       	out	0x3d, r28	; 61
    2390:	df 91       	pop	r29
    2392:	cf 91       	pop	r28
    2394:	0c 94 8d 11 	jmp	0x231a	; 0x231a <_ZN17LiquidCrystal_I2C7commandEh>

00002398 <_ZN17LiquidCrystal_I2C7displayEv>:
    2398:	fc 01       	movw	r30, r24
    239a:	66 81       	ldd	r22, Z+6	; 0x06
    239c:	26 2f       	mov	r18, r22
    239e:	24 60       	ori	r18, 0x04	; 4
    23a0:	26 83       	std	Z+6, r18	; 0x06
    23a2:	6c 60       	ori	r22, 0x0C	; 12
    23a4:	0c 94 8d 11 	jmp	0x231a	; 0x231a <_ZN17LiquidCrystal_I2C7commandEh>

000023a8 <_ZN17LiquidCrystal_I2C5writeEh>:

#include "Arduino.h"

#define printIIC(args)	Wire.write(args)
inline size_t LiquidCrystal_I2C::write(uint8_t value) {
	send(value, Rs);
    23a8:	41 e0       	ldi	r20, 0x01	; 1
    23aa:	0e 94 76 11 	call	0x22ec	; 0x22ec <_ZN17LiquidCrystal_I2C4sendEhh>
	return 1;
}
    23ae:	81 e0       	ldi	r24, 0x01	; 1
    23b0:	90 e0       	ldi	r25, 0x00	; 0
    23b2:	08 95       	ret

000023b4 <_ZN17LiquidCrystal_I2C5beginEhhh>:
	Wire.begin();
	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
	begin(_cols, _rows);  
}

void LiquidCrystal_I2C::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) {
    23b4:	cf 93       	push	r28
    23b6:	df 93       	push	r29
    23b8:	ec 01       	movw	r28, r24
	if (lines > 1) {
    23ba:	42 30       	cpi	r20, 0x02	; 2
    23bc:	18 f0       	brcs	.+6      	; 0x23c4 <_ZN17LiquidCrystal_I2C5beginEhhh+0x10>
		_displayfunction |= LCD_2LINE;
    23be:	8d 81       	ldd	r24, Y+5	; 0x05
    23c0:	88 60       	ori	r24, 0x08	; 8
    23c2:	8d 83       	std	Y+5, r24	; 0x05
	}
	_numlines = lines;
    23c4:	48 87       	std	Y+8, r20	; 0x08

	// for some 1 line displays you can select a 10 pixel high font
	if ((dotsize != 0) && (lines == 1)) {
    23c6:	22 23       	and	r18, r18
    23c8:	29 f0       	breq	.+10     	; 0x23d4 <_ZN17LiquidCrystal_I2C5beginEhhh+0x20>
    23ca:	41 30       	cpi	r20, 0x01	; 1
    23cc:	19 f4       	brne	.+6      	; 0x23d4 <_ZN17LiquidCrystal_I2C5beginEhhh+0x20>
		_displayfunction |= LCD_5x10DOTS;
    23ce:	8d 81       	ldd	r24, Y+5	; 0x05
    23d0:	84 60       	ori	r24, 0x04	; 4
    23d2:	8d 83       	std	Y+5, r24	; 0x05
	}

	// SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
	// according to datasheet, we need at least 40ms after power rises above 2.7V
	// before sending commands. Arduino can turn on way befer 4.5V so we'll wait 50
	delay(50); 
    23d4:	62 e3       	ldi	r22, 0x32	; 50
    23d6:	70 e0       	ldi	r23, 0x00	; 0
    23d8:	80 e0       	ldi	r24, 0x00	; 0
    23da:	90 e0       	ldi	r25, 0x00	; 0
    23dc:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <delay>
  
	// Now we pull both RS and R/W low to begin commands
	expanderWrite(_backlightval);	// reset expanderand turn backlight off (Bit 8 =1)
    23e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    23e2:	ce 01       	movw	r24, r28
    23e4:	0e 94 2e 11 	call	0x225c	; 0x225c <_ZN17LiquidCrystal_I2C13expanderWriteEh>
	delay(1000);
    23e8:	68 ee       	ldi	r22, 0xE8	; 232
    23ea:	73 e0       	ldi	r23, 0x03	; 3
    23ec:	80 e0       	ldi	r24, 0x00	; 0
    23ee:	90 e0       	ldi	r25, 0x00	; 0
    23f0:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <delay>
  	//put the LCD into 4 bit mode
	// this is according to the hitachi HD44780 datasheet
	// figure 24, pg 46
	
	  // we start in 8bit mode, try to set 4 bit mode
   write4bits(0x03 << 4);
    23f4:	60 e3       	ldi	r22, 0x30	; 48
    23f6:	ce 01       	movw	r24, r28
    23f8:	0e 94 68 11 	call	0x22d0	; 0x22d0 <_ZN17LiquidCrystal_I2C10write4bitsEh>
   delayMicroseconds(4500); // wait min 4.1ms
    23fc:	84 e9       	ldi	r24, 0x94	; 148
    23fe:	91 e1       	ldi	r25, 0x11	; 17
    2400:	0e 94 22 10 	call	0x2044	; 0x2044 <delayMicroseconds>
   
   // second try
   write4bits(0x03 << 4);
    2404:	60 e3       	ldi	r22, 0x30	; 48
    2406:	ce 01       	movw	r24, r28
    2408:	0e 94 68 11 	call	0x22d0	; 0x22d0 <_ZN17LiquidCrystal_I2C10write4bitsEh>
   delayMicroseconds(4500); // wait min 4.1ms
    240c:	84 e9       	ldi	r24, 0x94	; 148
    240e:	91 e1       	ldi	r25, 0x11	; 17
    2410:	0e 94 22 10 	call	0x2044	; 0x2044 <delayMicroseconds>
   
   // third go!
   write4bits(0x03 << 4); 
    2414:	60 e3       	ldi	r22, 0x30	; 48
    2416:	ce 01       	movw	r24, r28
    2418:	0e 94 68 11 	call	0x22d0	; 0x22d0 <_ZN17LiquidCrystal_I2C10write4bitsEh>
   delayMicroseconds(150);
    241c:	86 e9       	ldi	r24, 0x96	; 150
    241e:	90 e0       	ldi	r25, 0x00	; 0
    2420:	0e 94 22 10 	call	0x2044	; 0x2044 <delayMicroseconds>
   
   // finally, set to 4-bit interface
   write4bits(0x02 << 4); 
    2424:	60 e2       	ldi	r22, 0x20	; 32
    2426:	ce 01       	movw	r24, r28
    2428:	0e 94 68 11 	call	0x22d0	; 0x22d0 <_ZN17LiquidCrystal_I2C10write4bitsEh>


	// set # lines, font size, etc.
	command(LCD_FUNCTIONSET | _displayfunction);  
    242c:	6d 81       	ldd	r22, Y+5	; 0x05
    242e:	60 62       	ori	r22, 0x20	; 32
    2430:	ce 01       	movw	r24, r28
    2432:	0e 94 8d 11 	call	0x231a	; 0x231a <_ZN17LiquidCrystal_I2C7commandEh>
	
	// turn the display on with no cursor or blinking default
	_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
    2436:	84 e0       	ldi	r24, 0x04	; 4
    2438:	8e 83       	std	Y+6, r24	; 0x06
	display();
    243a:	ce 01       	movw	r24, r28
    243c:	0e 94 cc 11 	call	0x2398	; 0x2398 <_ZN17LiquidCrystal_I2C7displayEv>
	
	// clear it off
	clear();
    2440:	ce 01       	movw	r24, r28
    2442:	0e 94 90 11 	call	0x2320	; 0x2320 <_ZN17LiquidCrystal_I2C5clearEv>
	
	// Initialize to default text direction (for roman languages)
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
    2446:	82 e0       	ldi	r24, 0x02	; 2
    2448:	8f 83       	std	Y+7, r24	; 0x07
	
	// set the entry mode
	command(LCD_ENTRYMODESET | _displaymode);
    244a:	66 e0       	ldi	r22, 0x06	; 6
    244c:	ce 01       	movw	r24, r28
    244e:	0e 94 8d 11 	call	0x231a	; 0x231a <_ZN17LiquidCrystal_I2C7commandEh>
	
	home();
    2452:	ce 01       	movw	r24, r28
  
}
    2454:	df 91       	pop	r29
    2456:	cf 91       	pop	r28
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
	
	// set the entry mode
	command(LCD_ENTRYMODESET | _displaymode);
	
	home();
    2458:	0c 94 97 11 	jmp	0x232e	; 0x232e <_ZN17LiquidCrystal_I2C4homeEv>

0000245c <_ZN17LiquidCrystal_I2C9init_privEv>:
  _rows = lcd_rows;
	init_priv();
}

void LiquidCrystal_I2C::init_priv()
{
    245c:	cf 93       	push	r28
    245e:	df 93       	push	r29
    2460:	ec 01       	movw	r28, r24
	Wire.begin();
    2462:	8f e8       	ldi	r24, 0x8F	; 143
    2464:	93 e0       	ldi	r25, 0x03	; 3
    2466:	0e 94 c1 1b 	call	0x3782	; 0x3782 <_ZN7TwoWire5beginEv>
	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
    246a:	1d 82       	std	Y+5, r1	; 0x05
	begin(_cols, _rows);  
    246c:	20 e0       	ldi	r18, 0x00	; 0
    246e:	4a 85       	ldd	r20, Y+10	; 0x0a
    2470:	69 85       	ldd	r22, Y+9	; 0x09
    2472:	ce 01       	movw	r24, r28
}
    2474:	df 91       	pop	r29
    2476:	cf 91       	pop	r28

void LiquidCrystal_I2C::init_priv()
{
	Wire.begin();
	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
	begin(_cols, _rows);  
    2478:	0c 94 da 11 	jmp	0x23b4	; 0x23b4 <_ZN17LiquidCrystal_I2C5beginEhhh>

0000247c <_ZN17LiquidCrystal_I2C4initEhhh>:

  _backlightval = LCD_NOBACKLIGHT;
}

void LiquidCrystal_I2C::init(uint8_t lcd_Addr,uint8_t lcd_cols,uint8_t lcd_rows){
  _Addr = lcd_Addr;
    247c:	fc 01       	movw	r30, r24
    247e:	64 83       	std	Z+4, r22	; 0x04
  _cols = lcd_cols;
    2480:	41 87       	std	Z+9, r20	; 0x09
  _rows = lcd_rows;
    2482:	22 87       	std	Z+10, r18	; 0x0a
	init_priv();
    2484:	0c 94 2e 12 	jmp	0x245c	; 0x245c <_ZN17LiquidCrystal_I2C9init_privEv>

00002488 <_ZN7MFRC52219PICC_ReadCardSerialEv>:
 * @return STATUS_OK on success, STATUS_??? otherwise.
 */
MFRC522::StatusCode MFRC522::PICC_WakeupA(	byte *bufferATQA,	///< The buffer to store the ATQA (Answer to request) in
											byte *bufferSize	///< Buffer size, at least two bytes. Also number of bytes returned if STATUS_OK.
										) {
	return PICC_REQA_or_WUPA(PICC_CMD_WUPA, bufferATQA, bufferSize);
    2488:	bc 01       	movw	r22, r24
    248a:	6e 5f       	subi	r22, 0xFE	; 254
    248c:	7f 4f       	sbci	r23, 0xFF	; 255
    248e:	dc 01       	movw	r26, r24
    2490:	ed 91       	ld	r30, X+
    2492:	fc 91       	ld	r31, X
    2494:	01 90       	ld	r0, Z+
    2496:	f0 81       	ld	r31, Z
    2498:	e0 2d       	mov	r30, r0
    249a:	40 e0       	ldi	r20, 0x00	; 0
    249c:	09 95       	icall
    249e:	91 e0       	ldi	r25, 0x01	; 1
    24a0:	81 11       	cpse	r24, r1
    24a2:	90 e0       	ldi	r25, 0x00	; 0
    24a4:	89 2f       	mov	r24, r25
    24a6:	08 95       	ret

000024a8 <_ZN8SPIClass16beginTransactionE11SPISettings>:
    24a8:	20 91 8d 03 	lds	r18, 0x038D	; 0x80038d <_ZN8SPIClass13interruptModeE>
    24ac:	22 23       	and	r18, r18
    24ae:	99 f0       	breq	.+38     	; 0x24d6 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
    24b0:	4f b7       	in	r20, 0x3f	; 63
    24b2:	f8 94       	cli
    24b4:	20 91 8d 03 	lds	r18, 0x038D	; 0x80038d <_ZN8SPIClass13interruptModeE>
    24b8:	21 30       	cpi	r18, 0x01	; 1
    24ba:	59 f4       	brne	.+22     	; 0x24d2 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2a>
    24bc:	2d b3       	in	r18, 0x1d	; 29
    24be:	20 93 8b 03 	sts	0x038B, r18	; 0x80038b <_ZN8SPIClass13interruptSaveE>
    24c2:	3d b3       	in	r19, 0x1d	; 29
    24c4:	20 91 8c 03 	lds	r18, 0x038C	; 0x80038c <_ZN8SPIClass13interruptMaskE>
    24c8:	20 95       	com	r18
    24ca:	23 23       	and	r18, r19
    24cc:	2d bb       	out	0x1d, r18	; 29
    24ce:	4f bf       	out	0x3f, r20	; 63
    24d0:	02 c0       	rjmp	.+4      	; 0x24d6 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
    24d2:	40 93 8b 03 	sts	0x038B, r20	; 0x80038b <_ZN8SPIClass13interruptSaveE>
    24d6:	8c bd       	out	0x2c, r24	; 44
    24d8:	9d bd       	out	0x2d, r25	; 45
    24da:	08 95       	ret

000024dc <_ZN8SPIClass8transferEh>:
    24dc:	8e bd       	out	0x2e, r24	; 46
    24de:	00 00       	nop
    24e0:	0d b4       	in	r0, 0x2d	; 45
    24e2:	07 fe       	sbrs	r0, 7
    24e4:	fd cf       	rjmp	.-6      	; 0x24e0 <_ZN8SPIClass8transferEh+0x4>
    24e6:	8e b5       	in	r24, 0x2e	; 46
    24e8:	08 95       	ret

000024ea <_ZN8SPIClass14endTransactionEv>:
    24ea:	80 91 8d 03 	lds	r24, 0x038D	; 0x80038d <_ZN8SPIClass13interruptModeE>
    24ee:	88 23       	and	r24, r24
    24f0:	61 f0       	breq	.+24     	; 0x250a <_ZN8SPIClass14endTransactionEv+0x20>
    24f2:	9f b7       	in	r25, 0x3f	; 63
    24f4:	f8 94       	cli
    24f6:	20 91 8d 03 	lds	r18, 0x038D	; 0x80038d <_ZN8SPIClass13interruptModeE>
    24fa:	80 91 8b 03 	lds	r24, 0x038B	; 0x80038b <_ZN8SPIClass13interruptSaveE>
    24fe:	21 30       	cpi	r18, 0x01	; 1
    2500:	19 f4       	brne	.+6      	; 0x2508 <_ZN8SPIClass14endTransactionEv+0x1e>
    2502:	8d bb       	out	0x1d, r24	; 29
    2504:	9f bf       	out	0x3f, r25	; 63
    2506:	08 95       	ret
    2508:	8f bf       	out	0x3f, r24	; 63
    250a:	08 95       	ret

0000250c <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh.part.1.constprop.8>:
    250c:	af 92       	push	r10
    250e:	bf 92       	push	r11
    2510:	cf 92       	push	r12
    2512:	df 92       	push	r13
    2514:	ef 92       	push	r14
    2516:	ff 92       	push	r15
    2518:	0f 93       	push	r16
    251a:	1f 93       	push	r17
    251c:	cf 93       	push	r28
    251e:	df 93       	push	r29
    2520:	6c 01       	movw	r12, r24
    2522:	a4 2e       	mov	r10, r20
    2524:	79 01       	movw	r14, r18
    2526:	60 68       	ori	r22, 0x80	; 128
    2528:	b6 2e       	mov	r11, r22
    252a:	83 e5       	ldi	r24, 0x53	; 83
    252c:	90 e0       	ldi	r25, 0x00	; 0
    252e:	0e 94 54 12 	call	0x24a8	; 0x24a8 <_ZN8SPIClass16beginTransactionE11SPISettings>
    2532:	60 e0       	ldi	r22, 0x00	; 0
    2534:	f6 01       	movw	r30, r12
    2536:	86 85       	ldd	r24, Z+14	; 0x0e
    2538:	0e 94 cd 10 	call	0x219a	; 0x219a <digitalWrite>
    253c:	aa 94       	dec	r10
    253e:	8b 2d       	mov	r24, r11
    2540:	0e 94 6e 12 	call	0x24dc	; 0x24dc <_ZN8SPIClass8transferEh>
    2544:	00 23       	and	r16, r16
    2546:	a1 f0       	breq	.+40     	; 0x2570 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh.part.1.constprop.8+0x64>
    2548:	cf ef       	ldi	r28, 0xFF	; 255
    254a:	d0 e0       	ldi	r29, 0x00	; 0
    254c:	01 c0       	rjmp	.+2      	; 0x2550 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh.part.1.constprop.8+0x44>
    254e:	cc 0f       	add	r28, r28
    2550:	0a 95       	dec	r16
    2552:	ea f7       	brpl	.-6      	; 0x254e <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh.part.1.constprop.8+0x42>
    2554:	8b 2d       	mov	r24, r11
    2556:	0e 94 6e 12 	call	0x24dc	; 0x24dc <_ZN8SPIClass8transferEh>
    255a:	2c 2f       	mov	r18, r28
    255c:	20 95       	com	r18
    255e:	f7 01       	movw	r30, r14
    2560:	90 81       	ld	r25, Z
    2562:	92 23       	and	r25, r18
    2564:	8c 23       	and	r24, r28
    2566:	89 2b       	or	r24, r25
    2568:	f7 01       	movw	r30, r14
    256a:	80 83       	st	Z, r24
    256c:	11 e0       	ldi	r17, 0x01	; 1
    256e:	01 c0       	rjmp	.+2      	; 0x2572 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh.part.1.constprop.8+0x66>
    2570:	10 e0       	ldi	r17, 0x00	; 0
    2572:	81 2f       	mov	r24, r17
    2574:	90 e0       	ldi	r25, 0x00	; 0
    2576:	e7 01       	movw	r28, r14
    2578:	c8 0f       	add	r28, r24
    257a:	d9 1f       	adc	r29, r25
    257c:	1a 15       	cp	r17, r10
    257e:	30 f4       	brcc	.+12     	; 0x258c <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh.part.1.constprop.8+0x80>
    2580:	8b 2d       	mov	r24, r11
    2582:	0e 94 6e 12 	call	0x24dc	; 0x24dc <_ZN8SPIClass8transferEh>
    2586:	88 83       	st	Y, r24
    2588:	1f 5f       	subi	r17, 0xFF	; 255
    258a:	f3 cf       	rjmp	.-26     	; 0x2572 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh.part.1.constprop.8+0x66>
    258c:	80 e0       	ldi	r24, 0x00	; 0
    258e:	0e 94 6e 12 	call	0x24dc	; 0x24dc <_ZN8SPIClass8transferEh>
    2592:	88 83       	st	Y, r24
    2594:	61 e0       	ldi	r22, 0x01	; 1
    2596:	f6 01       	movw	r30, r12
    2598:	86 85       	ldd	r24, Z+14	; 0x0e
    259a:	0e 94 cd 10 	call	0x219a	; 0x219a <digitalWrite>
    259e:	df 91       	pop	r29
    25a0:	cf 91       	pop	r28
    25a2:	1f 91       	pop	r17
    25a4:	0f 91       	pop	r16
    25a6:	ff 90       	pop	r15
    25a8:	ef 90       	pop	r14
    25aa:	df 90       	pop	r13
    25ac:	cf 90       	pop	r12
    25ae:	bf 90       	pop	r11
    25b0:	af 90       	pop	r10
    25b2:	0c 94 75 12 	jmp	0x24ea	; 0x24ea <_ZN8SPIClass14endTransactionEv>

000025b6 <_ZN7MFRC522C1Ev>:
    25b6:	fc 01       	movw	r30, r24
    25b8:	89 e7       	ldi	r24, 0x79	; 121
    25ba:	92 e0       	ldi	r25, 0x02	; 2
    25bc:	91 83       	std	Z+1, r25	; 0x01
    25be:	80 83       	st	Z, r24
    25c0:	8a e0       	ldi	r24, 0x0A	; 10
    25c2:	86 87       	std	Z+14, r24	; 0x0e
    25c4:	8f ef       	ldi	r24, 0xFF	; 255
    25c6:	87 87       	std	Z+15, r24	; 0x0f
    25c8:	08 95       	ret

000025ca <_ZN7MFRC522C1Ehh>:
    25ca:	fc 01       	movw	r30, r24
    25cc:	89 e7       	ldi	r24, 0x79	; 121
    25ce:	92 e0       	ldi	r25, 0x02	; 2
    25d0:	91 83       	std	Z+1, r25	; 0x01
    25d2:	80 83       	st	Z, r24
    25d4:	66 87       	std	Z+14, r22	; 0x0e
    25d6:	47 87       	std	Z+15, r20	; 0x0f
    25d8:	08 95       	ret

000025da <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>:
    25da:	0f 93       	push	r16
    25dc:	1f 93       	push	r17
    25de:	cf 93       	push	r28
    25e0:	df 93       	push	r29
    25e2:	ec 01       	movw	r28, r24
    25e4:	06 2f       	mov	r16, r22
    25e6:	14 2f       	mov	r17, r20
    25e8:	83 e5       	ldi	r24, 0x53	; 83
    25ea:	90 e0       	ldi	r25, 0x00	; 0
    25ec:	0e 94 54 12 	call	0x24a8	; 0x24a8 <_ZN8SPIClass16beginTransactionE11SPISettings>
    25f0:	60 e0       	ldi	r22, 0x00	; 0
    25f2:	8e 85       	ldd	r24, Y+14	; 0x0e
    25f4:	0e 94 cd 10 	call	0x219a	; 0x219a <digitalWrite>
    25f8:	80 2f       	mov	r24, r16
    25fa:	0e 94 6e 12 	call	0x24dc	; 0x24dc <_ZN8SPIClass8transferEh>
    25fe:	81 2f       	mov	r24, r17
    2600:	0e 94 6e 12 	call	0x24dc	; 0x24dc <_ZN8SPIClass8transferEh>
    2604:	61 e0       	ldi	r22, 0x01	; 1
    2606:	8e 85       	ldd	r24, Y+14	; 0x0e
    2608:	0e 94 cd 10 	call	0x219a	; 0x219a <digitalWrite>
    260c:	df 91       	pop	r29
    260e:	cf 91       	pop	r28
    2610:	1f 91       	pop	r17
    2612:	0f 91       	pop	r16
    2614:	0c 94 75 12 	jmp	0x24ea	; 0x24ea <_ZN8SPIClass14endTransactionEv>

00002618 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEhPh>:
    2618:	df 92       	push	r13
    261a:	ef 92       	push	r14
    261c:	ff 92       	push	r15
    261e:	0f 93       	push	r16
    2620:	1f 93       	push	r17
    2622:	cf 93       	push	r28
    2624:	df 93       	push	r29
    2626:	8c 01       	movw	r16, r24
    2628:	c6 2f       	mov	r28, r22
    262a:	f4 2e       	mov	r15, r20
    262c:	d2 2e       	mov	r13, r18
    262e:	e3 2e       	mov	r14, r19
    2630:	83 e5       	ldi	r24, 0x53	; 83
    2632:	90 e0       	ldi	r25, 0x00	; 0
    2634:	0e 94 54 12 	call	0x24a8	; 0x24a8 <_ZN8SPIClass16beginTransactionE11SPISettings>
    2638:	60 e0       	ldi	r22, 0x00	; 0
    263a:	f8 01       	movw	r30, r16
    263c:	86 85       	ldd	r24, Z+14	; 0x0e
    263e:	0e 94 cd 10 	call	0x219a	; 0x219a <digitalWrite>
    2642:	8c 2f       	mov	r24, r28
    2644:	0e 94 6e 12 	call	0x24dc	; 0x24dc <_ZN8SPIClass8transferEh>
    2648:	cd 2d       	mov	r28, r13
    264a:	de 2d       	mov	r29, r14
    264c:	ce 01       	movw	r24, r28
    264e:	8f 0d       	add	r24, r15
    2650:	91 1d       	adc	r25, r1
    2652:	7c 01       	movw	r14, r24
    2654:	ec 16       	cp	r14, r28
    2656:	fd 06       	cpc	r15, r29
    2658:	21 f0       	breq	.+8      	; 0x2662 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEhPh+0x4a>
    265a:	89 91       	ld	r24, Y+
    265c:	0e 94 6e 12 	call	0x24dc	; 0x24dc <_ZN8SPIClass8transferEh>
    2660:	f9 cf       	rjmp	.-14     	; 0x2654 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEhPh+0x3c>
    2662:	61 e0       	ldi	r22, 0x01	; 1
    2664:	f8 01       	movw	r30, r16
    2666:	86 85       	ldd	r24, Z+14	; 0x0e
    2668:	0e 94 cd 10 	call	0x219a	; 0x219a <digitalWrite>
    266c:	df 91       	pop	r29
    266e:	cf 91       	pop	r28
    2670:	1f 91       	pop	r17
    2672:	0f 91       	pop	r16
    2674:	ff 90       	pop	r15
    2676:	ef 90       	pop	r14
    2678:	df 90       	pop	r13
    267a:	0c 94 75 12 	jmp	0x24ea	; 0x24ea <_ZN8SPIClass14endTransactionEv>

0000267e <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>:
    267e:	1f 93       	push	r17
    2680:	cf 93       	push	r28
    2682:	df 93       	push	r29
    2684:	ec 01       	movw	r28, r24
    2686:	16 2f       	mov	r17, r22
    2688:	83 e5       	ldi	r24, 0x53	; 83
    268a:	90 e0       	ldi	r25, 0x00	; 0
    268c:	0e 94 54 12 	call	0x24a8	; 0x24a8 <_ZN8SPIClass16beginTransactionE11SPISettings>
    2690:	60 e0       	ldi	r22, 0x00	; 0
    2692:	8e 85       	ldd	r24, Y+14	; 0x0e
    2694:	0e 94 cd 10 	call	0x219a	; 0x219a <digitalWrite>
    2698:	81 2f       	mov	r24, r17
    269a:	80 68       	ori	r24, 0x80	; 128
    269c:	0e 94 6e 12 	call	0x24dc	; 0x24dc <_ZN8SPIClass8transferEh>
    26a0:	80 e0       	ldi	r24, 0x00	; 0
    26a2:	0e 94 6e 12 	call	0x24dc	; 0x24dc <_ZN8SPIClass8transferEh>
    26a6:	18 2f       	mov	r17, r24
    26a8:	61 e0       	ldi	r22, 0x01	; 1
    26aa:	8e 85       	ldd	r24, Y+14	; 0x0e
    26ac:	0e 94 cd 10 	call	0x219a	; 0x219a <digitalWrite>
    26b0:	0e 94 75 12 	call	0x24ea	; 0x24ea <_ZN8SPIClass14endTransactionEv>
    26b4:	81 2f       	mov	r24, r17
    26b6:	df 91       	pop	r29
    26b8:	cf 91       	pop	r28
    26ba:	1f 91       	pop	r17
    26bc:	08 95       	ret

000026be <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh>:
    26be:	0f 93       	push	r16
    26c0:	41 11       	cpse	r20, r1
    26c2:	0e 94 86 12 	call	0x250c	; 0x250c <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh.part.1.constprop.8>
    26c6:	0f 91       	pop	r16
    26c8:	08 95       	ret

000026ca <_ZN7MFRC52222PCD_SetRegisterBitMaskENS_12PCD_RegisterEh>:
    26ca:	0f 93       	push	r16
    26cc:	1f 93       	push	r17
    26ce:	cf 93       	push	r28
    26d0:	df 93       	push	r29
    26d2:	8c 01       	movw	r16, r24
    26d4:	d6 2f       	mov	r29, r22
    26d6:	c4 2f       	mov	r28, r20
    26d8:	0e 94 3f 13 	call	0x267e	; 0x267e <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    26dc:	48 2f       	mov	r20, r24
    26de:	4c 2b       	or	r20, r28
    26e0:	6d 2f       	mov	r22, r29
    26e2:	c8 01       	movw	r24, r16
    26e4:	df 91       	pop	r29
    26e6:	cf 91       	pop	r28
    26e8:	1f 91       	pop	r17
    26ea:	0f 91       	pop	r16
    26ec:	0c 94 ed 12 	jmp	0x25da	; 0x25da <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>

000026f0 <_ZN7MFRC52224PCD_ClearRegisterBitMaskENS_12PCD_RegisterEh>:
    26f0:	0f 93       	push	r16
    26f2:	1f 93       	push	r17
    26f4:	cf 93       	push	r28
    26f6:	df 93       	push	r29
    26f8:	8c 01       	movw	r16, r24
    26fa:	d6 2f       	mov	r29, r22
    26fc:	c4 2f       	mov	r28, r20
    26fe:	0e 94 3f 13 	call	0x267e	; 0x267e <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    2702:	c0 95       	com	r28
    2704:	4c 2f       	mov	r20, r28
    2706:	48 23       	and	r20, r24
    2708:	6d 2f       	mov	r22, r29
    270a:	c8 01       	movw	r24, r16
    270c:	df 91       	pop	r29
    270e:	cf 91       	pop	r28
    2710:	1f 91       	pop	r17
    2712:	0f 91       	pop	r16
    2714:	0c 94 ed 12 	jmp	0x25da	; 0x25da <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>

00002718 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>:
    2718:	cf 92       	push	r12
    271a:	df 92       	push	r13
    271c:	ef 92       	push	r14
    271e:	ff 92       	push	r15
    2720:	0f 93       	push	r16
    2722:	1f 93       	push	r17
    2724:	cf 93       	push	r28
    2726:	df 93       	push	r29
    2728:	ec 01       	movw	r28, r24
    272a:	6b 01       	movw	r12, r22
    272c:	14 2f       	mov	r17, r20
    272e:	79 01       	movw	r14, r18
    2730:	40 e0       	ldi	r20, 0x00	; 0
    2732:	62 e0       	ldi	r22, 0x02	; 2
    2734:	0e 94 ed 12 	call	0x25da	; 0x25da <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    2738:	44 e0       	ldi	r20, 0x04	; 4
    273a:	6a e0       	ldi	r22, 0x0A	; 10
    273c:	ce 01       	movw	r24, r28
    273e:	0e 94 ed 12 	call	0x25da	; 0x25da <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    2742:	40 e8       	ldi	r20, 0x80	; 128
    2744:	64 e1       	ldi	r22, 0x14	; 20
    2746:	ce 01       	movw	r24, r28
    2748:	0e 94 ed 12 	call	0x25da	; 0x25da <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    274c:	96 01       	movw	r18, r12
    274e:	41 2f       	mov	r20, r17
    2750:	62 e1       	ldi	r22, 0x12	; 18
    2752:	ce 01       	movw	r24, r28
    2754:	0e 94 0c 13 	call	0x2618	; 0x2618 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEhPh>
    2758:	43 e0       	ldi	r20, 0x03	; 3
    275a:	62 e0       	ldi	r22, 0x02	; 2
    275c:	ce 01       	movw	r24, r28
    275e:	0e 94 ed 12 	call	0x25da	; 0x25da <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    2762:	08 e8       	ldi	r16, 0x88	; 136
    2764:	13 e1       	ldi	r17, 0x13	; 19
    2766:	6a e0       	ldi	r22, 0x0A	; 10
    2768:	ce 01       	movw	r24, r28
    276a:	0e 94 3f 13 	call	0x267e	; 0x267e <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    276e:	82 ff       	sbrs	r24, 2
    2770:	13 c0       	rjmp	.+38     	; 0x2798 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x80>
    2772:	40 e0       	ldi	r20, 0x00	; 0
    2774:	62 e0       	ldi	r22, 0x02	; 2
    2776:	ce 01       	movw	r24, r28
    2778:	0e 94 ed 12 	call	0x25da	; 0x25da <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    277c:	64 e4       	ldi	r22, 0x44	; 68
    277e:	ce 01       	movw	r24, r28
    2780:	0e 94 3f 13 	call	0x267e	; 0x267e <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    2784:	f7 01       	movw	r30, r14
    2786:	80 83       	st	Z, r24
    2788:	62 e4       	ldi	r22, 0x42	; 66
    278a:	ce 01       	movw	r24, r28
    278c:	0e 94 3f 13 	call	0x267e	; 0x267e <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    2790:	f7 01       	movw	r30, r14
    2792:	81 83       	std	Z+1, r24	; 0x01
    2794:	80 e0       	ldi	r24, 0x00	; 0
    2796:	04 c0       	rjmp	.+8      	; 0x27a0 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x88>
    2798:	01 50       	subi	r16, 0x01	; 1
    279a:	11 09       	sbc	r17, r1
    279c:	21 f7       	brne	.-56     	; 0x2766 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x4e>
    279e:	83 e0       	ldi	r24, 0x03	; 3
    27a0:	df 91       	pop	r29
    27a2:	cf 91       	pop	r28
    27a4:	1f 91       	pop	r17
    27a6:	0f 91       	pop	r16
    27a8:	ff 90       	pop	r15
    27aa:	ef 90       	pop	r14
    27ac:	df 90       	pop	r13
    27ae:	cf 90       	pop	r12
    27b0:	08 95       	ret

000027b2 <_ZN7MFRC5229PCD_ResetEv>:
    27b2:	0f 93       	push	r16
    27b4:	1f 93       	push	r17
    27b6:	cf 93       	push	r28
    27b8:	8c 01       	movw	r16, r24
    27ba:	4f e0       	ldi	r20, 0x0F	; 15
    27bc:	62 e0       	ldi	r22, 0x02	; 2
    27be:	0e 94 ed 12 	call	0x25da	; 0x25da <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    27c2:	c3 e0       	ldi	r28, 0x03	; 3
    27c4:	62 e3       	ldi	r22, 0x32	; 50
    27c6:	70 e0       	ldi	r23, 0x00	; 0
    27c8:	80 e0       	ldi	r24, 0x00	; 0
    27ca:	90 e0       	ldi	r25, 0x00	; 0
    27cc:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <delay>
    27d0:	62 e0       	ldi	r22, 0x02	; 2
    27d2:	c8 01       	movw	r24, r16
    27d4:	0e 94 3f 13 	call	0x267e	; 0x267e <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    27d8:	84 ff       	sbrs	r24, 4
    27da:	02 c0       	rjmp	.+4      	; 0x27e0 <_ZN7MFRC5229PCD_ResetEv+0x2e>
    27dc:	c1 50       	subi	r28, 0x01	; 1
    27de:	91 f7       	brne	.-28     	; 0x27c4 <_ZN7MFRC5229PCD_ResetEv+0x12>
    27e0:	cf 91       	pop	r28
    27e2:	1f 91       	pop	r17
    27e4:	0f 91       	pop	r16
    27e6:	08 95       	ret

000027e8 <_ZN7MFRC52213PCD_AntennaOnEv>:
    27e8:	cf 93       	push	r28
    27ea:	df 93       	push	r29
    27ec:	ec 01       	movw	r28, r24
    27ee:	68 e2       	ldi	r22, 0x28	; 40
    27f0:	0e 94 3f 13 	call	0x267e	; 0x267e <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    27f4:	98 2f       	mov	r25, r24
    27f6:	93 70       	andi	r25, 0x03	; 3
    27f8:	93 30       	cpi	r25, 0x03	; 3
    27fa:	41 f0       	breq	.+16     	; 0x280c <_ZN7MFRC52213PCD_AntennaOnEv+0x24>
    27fc:	48 2f       	mov	r20, r24
    27fe:	43 60       	ori	r20, 0x03	; 3
    2800:	68 e2       	ldi	r22, 0x28	; 40
    2802:	ce 01       	movw	r24, r28
    2804:	df 91       	pop	r29
    2806:	cf 91       	pop	r28
    2808:	0c 94 ed 12 	jmp	0x25da	; 0x25da <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    280c:	df 91       	pop	r29
    280e:	cf 91       	pop	r28
    2810:	08 95       	ret

00002812 <_ZN7MFRC5228PCD_InitEv>:
    2812:	cf 93       	push	r28
    2814:	df 93       	push	r29
    2816:	ec 01       	movw	r28, r24
    2818:	61 e0       	ldi	r22, 0x01	; 1
    281a:	8e 85       	ldd	r24, Y+14	; 0x0e
    281c:	0e 94 91 10 	call	0x2122	; 0x2122 <pinMode>
    2820:	61 e0       	ldi	r22, 0x01	; 1
    2822:	8e 85       	ldd	r24, Y+14	; 0x0e
    2824:	0e 94 cd 10 	call	0x219a	; 0x219a <digitalWrite>
    2828:	8f 85       	ldd	r24, Y+15	; 0x0f
    282a:	8f 3f       	cpi	r24, 0xFF	; 255
    282c:	09 f4       	brne	.+2      	; 0x2830 <_ZN7MFRC5228PCD_InitEv+0x1e>
    282e:	51 c0       	rjmp	.+162    	; 0x28d2 <_ZN7MFRC5228PCD_InitEv+0xc0>
    2830:	60 e0       	ldi	r22, 0x00	; 0
    2832:	0e 94 91 10 	call	0x2122	; 0x2122 <pinMode>
    2836:	8f 85       	ldd	r24, Y+15	; 0x0f
    2838:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <digitalRead>
    283c:	89 2b       	or	r24, r25
    283e:	09 f0       	breq	.+2      	; 0x2842 <_ZN7MFRC5228PCD_InitEv+0x30>
    2840:	48 c0       	rjmp	.+144    	; 0x28d2 <_ZN7MFRC5228PCD_InitEv+0xc0>
    2842:	61 e0       	ldi	r22, 0x01	; 1
    2844:	8f 85       	ldd	r24, Y+15	; 0x0f
    2846:	0e 94 91 10 	call	0x2122	; 0x2122 <pinMode>
    284a:	60 e0       	ldi	r22, 0x00	; 0
    284c:	8f 85       	ldd	r24, Y+15	; 0x0f
    284e:	0e 94 cd 10 	call	0x219a	; 0x219a <digitalWrite>
    2852:	82 e0       	ldi	r24, 0x02	; 2
    2854:	90 e0       	ldi	r25, 0x00	; 0
    2856:	0e 94 22 10 	call	0x2044	; 0x2044 <delayMicroseconds>
    285a:	61 e0       	ldi	r22, 0x01	; 1
    285c:	8f 85       	ldd	r24, Y+15	; 0x0f
    285e:	0e 94 cd 10 	call	0x219a	; 0x219a <digitalWrite>
    2862:	62 e3       	ldi	r22, 0x32	; 50
    2864:	70 e0       	ldi	r23, 0x00	; 0
    2866:	80 e0       	ldi	r24, 0x00	; 0
    2868:	90 e0       	ldi	r25, 0x00	; 0
    286a:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <delay>
    286e:	40 e0       	ldi	r20, 0x00	; 0
    2870:	64 e2       	ldi	r22, 0x24	; 36
    2872:	ce 01       	movw	r24, r28
    2874:	0e 94 ed 12 	call	0x25da	; 0x25da <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    2878:	40 e0       	ldi	r20, 0x00	; 0
    287a:	66 e2       	ldi	r22, 0x26	; 38
    287c:	ce 01       	movw	r24, r28
    287e:	0e 94 ed 12 	call	0x25da	; 0x25da <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    2882:	46 e2       	ldi	r20, 0x26	; 38
    2884:	68 e4       	ldi	r22, 0x48	; 72
    2886:	ce 01       	movw	r24, r28
    2888:	0e 94 ed 12 	call	0x25da	; 0x25da <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    288c:	40 e8       	ldi	r20, 0x80	; 128
    288e:	64 e5       	ldi	r22, 0x54	; 84
    2890:	ce 01       	movw	r24, r28
    2892:	0e 94 ed 12 	call	0x25da	; 0x25da <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    2896:	49 ea       	ldi	r20, 0xA9	; 169
    2898:	66 e5       	ldi	r22, 0x56	; 86
    289a:	ce 01       	movw	r24, r28
    289c:	0e 94 ed 12 	call	0x25da	; 0x25da <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    28a0:	43 e0       	ldi	r20, 0x03	; 3
    28a2:	68 e5       	ldi	r22, 0x58	; 88
    28a4:	ce 01       	movw	r24, r28
    28a6:	0e 94 ed 12 	call	0x25da	; 0x25da <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    28aa:	48 ee       	ldi	r20, 0xE8	; 232
    28ac:	6a e5       	ldi	r22, 0x5A	; 90
    28ae:	ce 01       	movw	r24, r28
    28b0:	0e 94 ed 12 	call	0x25da	; 0x25da <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    28b4:	40 e4       	ldi	r20, 0x40	; 64
    28b6:	6a e2       	ldi	r22, 0x2A	; 42
    28b8:	ce 01       	movw	r24, r28
    28ba:	0e 94 ed 12 	call	0x25da	; 0x25da <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    28be:	4d e3       	ldi	r20, 0x3D	; 61
    28c0:	62 e2       	ldi	r22, 0x22	; 34
    28c2:	ce 01       	movw	r24, r28
    28c4:	0e 94 ed 12 	call	0x25da	; 0x25da <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    28c8:	ce 01       	movw	r24, r28
    28ca:	df 91       	pop	r29
    28cc:	cf 91       	pop	r28
    28ce:	0c 94 f4 13 	jmp	0x27e8	; 0x27e8 <_ZN7MFRC52213PCD_AntennaOnEv>
    28d2:	ce 01       	movw	r24, r28
    28d4:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <_ZN7MFRC5229PCD_ResetEv>
    28d8:	ca cf       	rjmp	.-108    	; 0x286e <_ZN7MFRC5228PCD_InitEv+0x5c>

000028da <_ZN7MFRC52218PCD_GetAntennaGainEv>:
    28da:	6c e4       	ldi	r22, 0x4C	; 76
    28dc:	0e 94 3f 13 	call	0x267e	; 0x267e <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    28e0:	80 77       	andi	r24, 0x70	; 112
    28e2:	08 95       	ret

000028e4 <_ZN7MFRC52218PCD_SetAntennaGainEh>:
    28e4:	0f 93       	push	r16
    28e6:	1f 93       	push	r17
    28e8:	cf 93       	push	r28
    28ea:	8c 01       	movw	r16, r24
    28ec:	c6 2f       	mov	r28, r22
    28ee:	0e 94 6d 14 	call	0x28da	; 0x28da <_ZN7MFRC52218PCD_GetAntennaGainEv>
    28f2:	8c 17       	cp	r24, r28
    28f4:	71 f0       	breq	.+28     	; 0x2912 <_ZN7MFRC52218PCD_SetAntennaGainEh+0x2e>
    28f6:	40 e7       	ldi	r20, 0x70	; 112
    28f8:	6c e4       	ldi	r22, 0x4C	; 76
    28fa:	c8 01       	movw	r24, r16
    28fc:	0e 94 78 13 	call	0x26f0	; 0x26f0 <_ZN7MFRC52224PCD_ClearRegisterBitMaskENS_12PCD_RegisterEh>
    2900:	4c 2f       	mov	r20, r28
    2902:	40 77       	andi	r20, 0x70	; 112
    2904:	6c e4       	ldi	r22, 0x4C	; 76
    2906:	c8 01       	movw	r24, r16
    2908:	cf 91       	pop	r28
    290a:	1f 91       	pop	r17
    290c:	0f 91       	pop	r16
    290e:	0c 94 65 13 	jmp	0x26ca	; 0x26ca <_ZN7MFRC52222PCD_SetRegisterBitMaskENS_12PCD_RegisterEh>
    2912:	cf 91       	pop	r28
    2914:	1f 91       	pop	r17
    2916:	0f 91       	pop	r16
    2918:	08 95       	ret

0000291a <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>:
    291a:	3f 92       	push	r3
    291c:	4f 92       	push	r4
    291e:	5f 92       	push	r5
    2920:	6f 92       	push	r6
    2922:	7f 92       	push	r7
    2924:	8f 92       	push	r8
    2926:	9f 92       	push	r9
    2928:	af 92       	push	r10
    292a:	bf 92       	push	r11
    292c:	cf 92       	push	r12
    292e:	df 92       	push	r13
    2930:	ef 92       	push	r14
    2932:	ff 92       	push	r15
    2934:	0f 93       	push	r16
    2936:	1f 93       	push	r17
    2938:	cf 93       	push	r28
    293a:	df 93       	push	r29
    293c:	00 d0       	rcall	.+0      	; 0x293e <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24>
    293e:	cd b7       	in	r28, 0x3d	; 61
    2940:	de b7       	in	r29, 0x3e	; 62
    2942:	3c 01       	movw	r6, r24
    2944:	16 2f       	mov	r17, r22
    2946:	94 2e       	mov	r9, r20
    2948:	29 01       	movw	r4, r18
    294a:	a1 14       	cp	r10, r1
    294c:	b1 04       	cpc	r11, r1
    294e:	19 f0       	breq	.+6      	; 0x2956 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x3c>
    2950:	f5 01       	movw	r30, r10
    2952:	40 81       	ld	r20, Z
    2954:	01 c0       	rjmp	.+2      	; 0x2958 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x3e>
    2956:	40 e0       	ldi	r20, 0x00	; 0
    2958:	34 2e       	mov	r3, r20
    295a:	f0 e1       	ldi	r31, 0x10	; 16
    295c:	8f 9e       	mul	r8, r31
    295e:	30 0c       	add	r3, r0
    2960:	11 24       	eor	r1, r1
    2962:	40 e0       	ldi	r20, 0x00	; 0
    2964:	62 e0       	ldi	r22, 0x02	; 2
    2966:	c3 01       	movw	r24, r6
    2968:	0e 94 ed 12 	call	0x25da	; 0x25da <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    296c:	4f e7       	ldi	r20, 0x7F	; 127
    296e:	68 e0       	ldi	r22, 0x08	; 8
    2970:	c3 01       	movw	r24, r6
    2972:	0e 94 ed 12 	call	0x25da	; 0x25da <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    2976:	40 e8       	ldi	r20, 0x80	; 128
    2978:	64 e1       	ldi	r22, 0x14	; 20
    297a:	c3 01       	movw	r24, r6
    297c:	0e 94 ed 12 	call	0x25da	; 0x25da <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    2980:	92 01       	movw	r18, r4
    2982:	40 2f       	mov	r20, r16
    2984:	62 e1       	ldi	r22, 0x12	; 18
    2986:	c3 01       	movw	r24, r6
    2988:	0e 94 0c 13 	call	0x2618	; 0x2618 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEhPh>
    298c:	43 2d       	mov	r20, r3
    298e:	6a e1       	ldi	r22, 0x1A	; 26
    2990:	c3 01       	movw	r24, r6
    2992:	0e 94 ed 12 	call	0x25da	; 0x25da <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    2996:	41 2f       	mov	r20, r17
    2998:	62 e0       	ldi	r22, 0x02	; 2
    299a:	c3 01       	movw	r24, r6
    299c:	0e 94 ed 12 	call	0x25da	; 0x25da <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    29a0:	1c 30       	cpi	r17, 0x0C	; 12
    29a2:	29 f4       	brne	.+10     	; 0x29ae <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x94>
    29a4:	40 e8       	ldi	r20, 0x80	; 128
    29a6:	6a e1       	ldi	r22, 0x1A	; 26
    29a8:	c3 01       	movw	r24, r6
    29aa:	0e 94 65 13 	call	0x26ca	; 0x26ca <_ZN7MFRC52222PCD_SetRegisterBitMaskENS_12PCD_RegisterEh>
    29ae:	00 ed       	ldi	r16, 0xD0	; 208
    29b0:	17 e0       	ldi	r17, 0x07	; 7
    29b2:	68 e0       	ldi	r22, 0x08	; 8
    29b4:	c3 01       	movw	r24, r6
    29b6:	0e 94 3f 13 	call	0x267e	; 0x267e <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    29ba:	98 2f       	mov	r25, r24
    29bc:	99 21       	and	r25, r9
    29be:	39 f4       	brne	.+14     	; 0x29ce <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xb4>
    29c0:	80 fd       	sbrc	r24, 0
    29c2:	03 c0       	rjmp	.+6      	; 0x29ca <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xb0>
    29c4:	01 50       	subi	r16, 0x01	; 1
    29c6:	11 09       	sbc	r17, r1
    29c8:	a1 f7       	brne	.-24     	; 0x29b2 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x98>
    29ca:	83 e0       	ldi	r24, 0x03	; 3
    29cc:	65 c0       	rjmp	.+202    	; 0x2a98 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x17e>
    29ce:	6c e0       	ldi	r22, 0x0C	; 12
    29d0:	c3 01       	movw	r24, r6
    29d2:	0e 94 3f 13 	call	0x267e	; 0x267e <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    29d6:	18 2f       	mov	r17, r24
    29d8:	83 71       	andi	r24, 0x13	; 19
    29da:	09 f0       	breq	.+2      	; 0x29de <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xc4>
    29dc:	5a c0       	rjmp	.+180    	; 0x2a92 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x178>
    29de:	e1 14       	cp	r14, r1
    29e0:	f1 04       	cpc	r15, r1
    29e2:	f9 f0       	breq	.+62     	; 0x2a22 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x108>
    29e4:	c1 14       	cp	r12, r1
    29e6:	d1 04       	cpc	r13, r1
    29e8:	e1 f0       	breq	.+56     	; 0x2a22 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x108>
    29ea:	64 e1       	ldi	r22, 0x14	; 20
    29ec:	c3 01       	movw	r24, r6
    29ee:	0e 94 3f 13 	call	0x267e	; 0x267e <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    29f2:	f6 01       	movw	r30, r12
    29f4:	90 81       	ld	r25, Z
    29f6:	98 17       	cp	r25, r24
    29f8:	08 f4       	brcc	.+2      	; 0x29fc <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xe2>
    29fa:	45 c0       	rjmp	.+138    	; 0x2a86 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x16c>
    29fc:	80 83       	st	Z, r24
    29fe:	08 2d       	mov	r16, r8
    2a00:	97 01       	movw	r18, r14
    2a02:	48 2f       	mov	r20, r24
    2a04:	62 e1       	ldi	r22, 0x12	; 18
    2a06:	c3 01       	movw	r24, r6
    2a08:	0e 94 5f 13 	call	0x26be	; 0x26be <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh>
    2a0c:	68 e1       	ldi	r22, 0x18	; 24
    2a0e:	c3 01       	movw	r24, r6
    2a10:	0e 94 3f 13 	call	0x267e	; 0x267e <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    2a14:	87 70       	andi	r24, 0x07	; 7
    2a16:	a1 14       	cp	r10, r1
    2a18:	b1 04       	cpc	r11, r1
    2a1a:	21 f0       	breq	.+8      	; 0x2a24 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x10a>
    2a1c:	f5 01       	movw	r30, r10
    2a1e:	80 83       	st	Z, r24
    2a20:	01 c0       	rjmp	.+2      	; 0x2a24 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x10a>
    2a22:	80 e0       	ldi	r24, 0x00	; 0
    2a24:	13 fd       	sbrc	r17, 3
    2a26:	31 c0       	rjmp	.+98     	; 0x2a8a <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x170>
    2a28:	e1 14       	cp	r14, r1
    2a2a:	f1 04       	cpc	r15, r1
    2a2c:	81 f1       	breq	.+96     	; 0x2a8e <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x174>
    2a2e:	c1 14       	cp	r12, r1
    2a30:	d1 04       	cpc	r13, r1
    2a32:	69 f1       	breq	.+90     	; 0x2a8e <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x174>
    2a34:	9e 89       	ldd	r25, Y+22	; 0x16
    2a36:	99 23       	and	r25, r25
    2a38:	51 f1       	breq	.+84     	; 0x2a8e <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x174>
    2a3a:	f6 01       	movw	r30, r12
    2a3c:	40 81       	ld	r20, Z
    2a3e:	41 30       	cpi	r20, 0x01	; 1
    2a40:	21 f4       	brne	.+8      	; 0x2a4a <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x130>
    2a42:	84 30       	cpi	r24, 0x04	; 4
    2a44:	41 f5       	brne	.+80     	; 0x2a96 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x17c>
    2a46:	8f ef       	ldi	r24, 0xFF	; 255
    2a48:	27 c0       	rjmp	.+78     	; 0x2a98 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x17e>
    2a4a:	42 30       	cpi	r20, 0x02	; 2
    2a4c:	20 f1       	brcs	.+72     	; 0x2a96 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x17c>
    2a4e:	81 11       	cpse	r24, r1
    2a50:	22 c0       	rjmp	.+68     	; 0x2a96 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x17c>
    2a52:	42 50       	subi	r20, 0x02	; 2
    2a54:	9e 01       	movw	r18, r28
    2a56:	2f 5f       	subi	r18, 0xFF	; 255
    2a58:	3f 4f       	sbci	r19, 0xFF	; 255
    2a5a:	b7 01       	movw	r22, r14
    2a5c:	c3 01       	movw	r24, r6
    2a5e:	0e 94 8c 13 	call	0x2718	; 0x2718 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
    2a62:	81 11       	cpse	r24, r1
    2a64:	19 c0       	rjmp	.+50     	; 0x2a98 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x17e>
    2a66:	f6 01       	movw	r30, r12
    2a68:	80 81       	ld	r24, Z
    2a6a:	e8 0e       	add	r14, r24
    2a6c:	f1 1c       	adc	r15, r1
    2a6e:	f7 01       	movw	r30, r14
    2a70:	32 97       	sbiw	r30, 0x02	; 2
    2a72:	90 81       	ld	r25, Z
    2a74:	89 81       	ldd	r24, Y+1	; 0x01
    2a76:	98 13       	cpse	r25, r24
    2a78:	0e c0       	rjmp	.+28     	; 0x2a96 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x17c>
    2a7a:	31 96       	adiw	r30, 0x01	; 1
    2a7c:	90 81       	ld	r25, Z
    2a7e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a80:	98 13       	cpse	r25, r24
    2a82:	09 c0       	rjmp	.+18     	; 0x2a96 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x17c>
    2a84:	04 c0       	rjmp	.+8      	; 0x2a8e <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x174>
    2a86:	84 e0       	ldi	r24, 0x04	; 4
    2a88:	07 c0       	rjmp	.+14     	; 0x2a98 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x17e>
    2a8a:	82 e0       	ldi	r24, 0x02	; 2
    2a8c:	05 c0       	rjmp	.+10     	; 0x2a98 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x17e>
    2a8e:	80 e0       	ldi	r24, 0x00	; 0
    2a90:	03 c0       	rjmp	.+6      	; 0x2a98 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x17e>
    2a92:	81 e0       	ldi	r24, 0x01	; 1
    2a94:	01 c0       	rjmp	.+2      	; 0x2a98 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x17e>
    2a96:	87 e0       	ldi	r24, 0x07	; 7
    2a98:	0f 90       	pop	r0
    2a9a:	0f 90       	pop	r0
    2a9c:	df 91       	pop	r29
    2a9e:	cf 91       	pop	r28
    2aa0:	1f 91       	pop	r17
    2aa2:	0f 91       	pop	r16
    2aa4:	ff 90       	pop	r15
    2aa6:	ef 90       	pop	r14
    2aa8:	df 90       	pop	r13
    2aaa:	cf 90       	pop	r12
    2aac:	bf 90       	pop	r11
    2aae:	af 90       	pop	r10
    2ab0:	9f 90       	pop	r9
    2ab2:	8f 90       	pop	r8
    2ab4:	7f 90       	pop	r7
    2ab6:	6f 90       	pop	r6
    2ab8:	5f 90       	pop	r5
    2aba:	4f 90       	pop	r4
    2abc:	3f 90       	pop	r3
    2abe:	08 95       	ret

00002ac0 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>:
    2ac0:	8f 92       	push	r8
    2ac2:	af 92       	push	r10
    2ac4:	bf 92       	push	r11
    2ac6:	cf 92       	push	r12
    2ac8:	df 92       	push	r13
    2aca:	ef 92       	push	r14
    2acc:	ff 92       	push	r15
    2ace:	0f 93       	push	r16
    2ad0:	1f 93       	push	r17
    2ad2:	af 92       	push	r10
    2ad4:	8c 2c       	mov	r8, r12
    2ad6:	57 01       	movw	r10, r14
    2ad8:	68 01       	movw	r12, r16
    2ada:	79 01       	movw	r14, r18
    2adc:	04 2f       	mov	r16, r20
    2ade:	9b 01       	movw	r18, r22
    2ae0:	40 e3       	ldi	r20, 0x30	; 48
    2ae2:	6c e0       	ldi	r22, 0x0C	; 12
    2ae4:	0e 94 8d 14 	call	0x291a	; 0x291a <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>
    2ae8:	0f 90       	pop	r0
    2aea:	1f 91       	pop	r17
    2aec:	0f 91       	pop	r16
    2aee:	ff 90       	pop	r15
    2af0:	ef 90       	pop	r14
    2af2:	df 90       	pop	r13
    2af4:	cf 90       	pop	r12
    2af6:	bf 90       	pop	r11
    2af8:	af 90       	pop	r10
    2afa:	8f 90       	pop	r8
    2afc:	08 95       	ret

00002afe <_ZN7MFRC52211PICC_SelectEPNS_3UidEh>:
    2afe:	2f 92       	push	r2
    2b00:	3f 92       	push	r3
    2b02:	4f 92       	push	r4
    2b04:	5f 92       	push	r5
    2b06:	6f 92       	push	r6
    2b08:	7f 92       	push	r7
    2b0a:	8f 92       	push	r8
    2b0c:	9f 92       	push	r9
    2b0e:	af 92       	push	r10
    2b10:	bf 92       	push	r11
    2b12:	cf 92       	push	r12
    2b14:	df 92       	push	r13
    2b16:	ef 92       	push	r14
    2b18:	ff 92       	push	r15
    2b1a:	0f 93       	push	r16
    2b1c:	1f 93       	push	r17
    2b1e:	cf 93       	push	r28
    2b20:	df 93       	push	r29
    2b22:	cd b7       	in	r28, 0x3d	; 61
    2b24:	de b7       	in	r29, 0x3e	; 62
    2b26:	2c 97       	sbiw	r28, 0x0c	; 12
    2b28:	0f b6       	in	r0, 0x3f	; 63
    2b2a:	f8 94       	cli
    2b2c:	de bf       	out	0x3e, r29	; 62
    2b2e:	0f be       	out	0x3f, r0	; 63
    2b30:	cd bf       	out	0x3d, r28	; 61
    2b32:	41 35       	cpi	r20, 0x51	; 81
    2b34:	08 f0       	brcs	.+2      	; 0x2b38 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x3a>
    2b36:	05 c1       	rjmp	.+522    	; 0x2d42 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x244>
    2b38:	34 2e       	mov	r3, r20
    2b3a:	3b 01       	movw	r6, r22
    2b3c:	4c 01       	movw	r8, r24
    2b3e:	40 e8       	ldi	r20, 0x80	; 128
    2b40:	6c e1       	ldi	r22, 0x1C	; 28
    2b42:	0e 94 78 13 	call	0x26f0	; 0x26f0 <_ZN7MFRC52224PCD_ClearRegisterBitMaskENS_12PCD_RegisterEh>
    2b46:	22 24       	eor	r2, r2
    2b48:	23 94       	inc	r2
    2b4a:	32 e0       	ldi	r19, 0x02	; 2
    2b4c:	23 16       	cp	r2, r19
    2b4e:	91 f0       	breq	.+36     	; 0x2b74 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x76>
    2b50:	83 e0       	ldi	r24, 0x03	; 3
    2b52:	28 16       	cp	r2, r24
    2b54:	e1 f0       	breq	.+56     	; 0x2b8e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x90>
    2b56:	91 e0       	ldi	r25, 0x01	; 1
    2b58:	29 12       	cpse	r2, r25
    2b5a:	f7 c0       	rjmp	.+494    	; 0x2d4a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x24c>
    2b5c:	83 e9       	ldi	r24, 0x93	; 147
    2b5e:	89 83       	std	Y+1, r24	; 0x01
    2b60:	33 20       	and	r3, r3
    2b62:	d1 f0       	breq	.+52     	; 0x2b98 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x9a>
    2b64:	81 e0       	ldi	r24, 0x01	; 1
    2b66:	f3 01       	movw	r30, r6
    2b68:	90 81       	ld	r25, Z
    2b6a:	95 30       	cpi	r25, 0x05	; 5
    2b6c:	08 f4       	brcc	.+2      	; 0x2b70 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x72>
    2b6e:	80 e0       	ldi	r24, 0x00	; 0
    2b70:	b1 2c       	mov	r11, r1
    2b72:	17 c0       	rjmp	.+46     	; 0x2ba2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xa4>
    2b74:	f5 e9       	ldi	r31, 0x95	; 149
    2b76:	f9 83       	std	Y+1, r31	; 0x01
    2b78:	33 20       	and	r3, r3
    2b7a:	81 f0       	breq	.+32     	; 0x2b9c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x9e>
    2b7c:	81 e0       	ldi	r24, 0x01	; 1
    2b7e:	f3 01       	movw	r30, r6
    2b80:	90 81       	ld	r25, Z
    2b82:	98 30       	cpi	r25, 0x08	; 8
    2b84:	08 f4       	brcc	.+2      	; 0x2b88 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x8a>
    2b86:	80 e0       	ldi	r24, 0x00	; 0
    2b88:	43 e0       	ldi	r20, 0x03	; 3
    2b8a:	b4 2e       	mov	r11, r20
    2b8c:	0a c0       	rjmp	.+20     	; 0x2ba2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xa4>
    2b8e:	87 e9       	ldi	r24, 0x97	; 151
    2b90:	89 83       	std	Y+1, r24	; 0x01
    2b92:	36 e0       	ldi	r19, 0x06	; 6
    2b94:	b3 2e       	mov	r11, r19
    2b96:	04 c0       	rjmp	.+8      	; 0x2ba0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xa2>
    2b98:	b1 2c       	mov	r11, r1
    2b9a:	02 c0       	rjmp	.+4      	; 0x2ba0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xa2>
    2b9c:	23 e0       	ldi	r18, 0x03	; 3
    2b9e:	b2 2e       	mov	r11, r18
    2ba0:	80 e0       	ldi	r24, 0x00	; 0
    2ba2:	d3 2c       	mov	r13, r3
    2ba4:	f8 e0       	ldi	r31, 0x08	; 8
    2ba6:	bf 9e       	mul	r11, r31
    2ba8:	d0 18       	sub	r13, r0
    2baa:	11 24       	eor	r1, r1
    2bac:	d7 fc       	sbrc	r13, 7
    2bae:	d1 2c       	mov	r13, r1
    2bb0:	88 23       	and	r24, r24
    2bb2:	21 f0       	breq	.+8      	; 0x2bbc <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xbe>
    2bb4:	98 e8       	ldi	r25, 0x88	; 136
    2bb6:	9b 83       	std	Y+3, r25	; 0x03
    2bb8:	33 e0       	ldi	r19, 0x03	; 3
    2bba:	01 c0       	rjmp	.+2      	; 0x2bbe <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xc0>
    2bbc:	32 e0       	ldi	r19, 0x02	; 2
    2bbe:	21 e0       	ldi	r18, 0x01	; 1
    2bc0:	9d 2d       	mov	r25, r13
    2bc2:	97 70       	andi	r25, 0x07	; 7
    2bc4:	09 f4       	brne	.+2      	; 0x2bc8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xca>
    2bc6:	20 e0       	ldi	r18, 0x00	; 0
    2bc8:	9d 2d       	mov	r25, r13
    2bca:	95 95       	asr	r25
    2bcc:	95 95       	asr	r25
    2bce:	95 95       	asr	r25
    2bd0:	29 0f       	add	r18, r25
    2bd2:	31 f4       	brne	.+12     	; 0x2be0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xe2>
    2bd4:	88 23       	and	r24, r24
    2bd6:	09 f4       	brne	.+2      	; 0x2bda <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xdc>
    2bd8:	91 c0       	rjmp	.+290    	; 0x2cfc <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1fe>
    2bda:	38 e0       	ldi	r19, 0x08	; 8
    2bdc:	d3 0e       	add	r13, r19
    2bde:	8e c0       	rjmp	.+284    	; 0x2cfc <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1fe>
    2be0:	81 11       	cpse	r24, r1
    2be2:	02 c0       	rjmp	.+4      	; 0x2be8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xea>
    2be4:	94 e0       	ldi	r25, 0x04	; 4
    2be6:	01 c0       	rjmp	.+2      	; 0x2bea <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xec>
    2be8:	93 e0       	ldi	r25, 0x03	; 3
    2bea:	29 17       	cp	r18, r25
    2bec:	08 f4       	brcc	.+2      	; 0x2bf0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xf2>
    2bee:	92 2f       	mov	r25, r18
    2bf0:	eb 2d       	mov	r30, r11
    2bf2:	f0 e0       	ldi	r31, 0x00	; 0
    2bf4:	31 96       	adiw	r30, 0x01	; 1
    2bf6:	e6 0d       	add	r30, r6
    2bf8:	f7 1d       	adc	r31, r7
    2bfa:	23 2f       	mov	r18, r19
    2bfc:	41 91       	ld	r20, Z+
    2bfe:	a1 e0       	ldi	r26, 0x01	; 1
    2c00:	b0 e0       	ldi	r27, 0x00	; 0
    2c02:	ac 0f       	add	r26, r28
    2c04:	bd 1f       	adc	r27, r29
    2c06:	a2 0f       	add	r26, r18
    2c08:	b1 1d       	adc	r27, r1
    2c0a:	4c 93       	st	X, r20
    2c0c:	2f 5f       	subi	r18, 0xFF	; 255
    2c0e:	42 2f       	mov	r20, r18
    2c10:	43 1b       	sub	r20, r19
    2c12:	49 17       	cp	r20, r25
    2c14:	98 f3       	brcs	.-26     	; 0x2bfc <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xfe>
    2c16:	de cf       	rjmp	.-68     	; 0x2bd4 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xd6>
    2c18:	81 11       	cpse	r24, r1
    2c1a:	dd c0       	rjmp	.+442    	; 0x2dd6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2d8>
    2c1c:	9f e1       	ldi	r25, 0x1F	; 31
    2c1e:	9d 15       	cp	r25, r13
    2c20:	0c f4       	brge	.+2      	; 0x2c24 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x126>
    2c22:	95 c0       	rjmp	.+298    	; 0x2d4e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x250>
    2c24:	80 e2       	ldi	r24, 0x20	; 32
    2c26:	d8 2e       	mov	r13, r24
    2c28:	90 e7       	ldi	r25, 0x70	; 112
    2c2a:	9a 83       	std	Y+2, r25	; 0x02
    2c2c:	9b 81       	ldd	r25, Y+3	; 0x03
    2c2e:	8c 81       	ldd	r24, Y+4	; 0x04
    2c30:	89 27       	eor	r24, r25
    2c32:	9d 81       	ldd	r25, Y+5	; 0x05
    2c34:	89 27       	eor	r24, r25
    2c36:	9e 81       	ldd	r25, Y+6	; 0x06
    2c38:	89 27       	eor	r24, r25
    2c3a:	8f 83       	std	Y+7, r24	; 0x07
    2c3c:	9e 01       	movw	r18, r28
    2c3e:	28 5f       	subi	r18, 0xF8	; 248
    2c40:	3f 4f       	sbci	r19, 0xFF	; 255
    2c42:	47 e0       	ldi	r20, 0x07	; 7
    2c44:	be 01       	movw	r22, r28
    2c46:	6f 5f       	subi	r22, 0xFF	; 255
    2c48:	7f 4f       	sbci	r23, 0xFF	; 255
    2c4a:	c4 01       	movw	r24, r8
    2c4c:	0e 94 8c 13 	call	0x2718	; 0x2718 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
    2c50:	81 11       	cpse	r24, r1
    2c52:	c1 c0       	rjmp	.+386    	; 0x2dd6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2d8>
    2c54:	1b 86       	std	Y+11, r1	; 0x0b
    2c56:	e3 e0       	ldi	r30, 0x03	; 3
    2c58:	ea 87       	std	Y+10, r30	; 0x0a
    2c5a:	ce 01       	movw	r24, r28
    2c5c:	07 96       	adiw	r24, 0x07	; 7
    2c5e:	2c 01       	movw	r4, r24
    2c60:	99 e0       	ldi	r25, 0x09	; 9
    2c62:	9c 87       	std	Y+12, r25	; 0x0c
    2c64:	cb 84       	ldd	r12, Y+11	; 0x0b
    2c66:	4c 2d       	mov	r20, r12
    2c68:	42 95       	swap	r20
    2c6a:	40 7f       	andi	r20, 0xF0	; 240
    2c6c:	4c 0d       	add	r20, r12
    2c6e:	6a e1       	ldi	r22, 0x1A	; 26
    2c70:	c4 01       	movw	r24, r8
    2c72:	0e 94 ed 12 	call	0x25da	; 0x25da <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    2c76:	a1 2c       	mov	r10, r1
    2c78:	ce 01       	movw	r24, r28
    2c7a:	0b 96       	adiw	r24, 0x0b	; 11
    2c7c:	7c 01       	movw	r14, r24
    2c7e:	8e 01       	movw	r16, r28
    2c80:	06 5f       	subi	r16, 0xF6	; 246
    2c82:	1f 4f       	sbci	r17, 0xFF	; 255
    2c84:	92 01       	movw	r18, r4
    2c86:	4c 85       	ldd	r20, Y+12	; 0x0c
    2c88:	be 01       	movw	r22, r28
    2c8a:	6f 5f       	subi	r22, 0xFF	; 255
    2c8c:	7f 4f       	sbci	r23, 0xFF	; 255
    2c8e:	c4 01       	movw	r24, r8
    2c90:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
    2c94:	82 30       	cpi	r24, 0x02	; 2
    2c96:	09 f0       	breq	.+2      	; 0x2c9a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x19c>
    2c98:	bf cf       	rjmp	.-130    	; 0x2c18 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x11a>
    2c9a:	6c e1       	ldi	r22, 0x1C	; 28
    2c9c:	c4 01       	movw	r24, r8
    2c9e:	0e 94 3f 13 	call	0x267e	; 0x267e <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    2ca2:	85 fd       	sbrc	r24, 5
    2ca4:	50 c0       	rjmp	.+160    	; 0x2d46 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x248>
    2ca6:	8f 71       	andi	r24, 0x1F	; 31
    2ca8:	09 f4       	brne	.+2      	; 0x2cac <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1ae>
    2caa:	80 e2       	ldi	r24, 0x20	; 32
    2cac:	28 2f       	mov	r18, r24
    2cae:	30 e0       	ldi	r19, 0x00	; 0
    2cb0:	4d 2d       	mov	r20, r13
    2cb2:	dd 0c       	add	r13, r13
    2cb4:	55 0b       	sbc	r21, r21
    2cb6:	42 17       	cp	r20, r18
    2cb8:	53 07       	cpc	r21, r19
    2cba:	0c f0       	brlt	.+2      	; 0x2cbe <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1c0>
    2cbc:	46 c0       	rjmp	.+140    	; 0x2d4a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x24c>
    2cbe:	d8 2e       	mov	r13, r24
    2cc0:	85 95       	asr	r24
    2cc2:	85 95       	asr	r24
    2cc4:	85 95       	asr	r24
    2cc6:	91 e0       	ldi	r25, 0x01	; 1
    2cc8:	98 0f       	add	r25, r24
    2cca:	42 2f       	mov	r20, r18
    2ccc:	47 70       	andi	r20, 0x07	; 7
    2cce:	81 e0       	ldi	r24, 0x01	; 1
    2cd0:	09 f4       	brne	.+2      	; 0x2cd4 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1d6>
    2cd2:	80 e0       	ldi	r24, 0x00	; 0
    2cd4:	89 0f       	add	r24, r25
    2cd6:	e1 e0       	ldi	r30, 0x01	; 1
    2cd8:	f0 e0       	ldi	r31, 0x00	; 0
    2cda:	ec 0f       	add	r30, r28
    2cdc:	fd 1f       	adc	r31, r29
    2cde:	e8 0f       	add	r30, r24
    2ce0:	f1 1d       	adc	r31, r1
    2ce2:	21 50       	subi	r18, 0x01	; 1
    2ce4:	31 09       	sbc	r19, r1
    2ce6:	27 70       	andi	r18, 0x07	; 7
    2ce8:	33 27       	eor	r19, r19
    2cea:	81 e0       	ldi	r24, 0x01	; 1
    2cec:	90 e0       	ldi	r25, 0x00	; 0
    2cee:	01 c0       	rjmp	.+2      	; 0x2cf2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1f4>
    2cf0:	88 0f       	add	r24, r24
    2cf2:	2a 95       	dec	r18
    2cf4:	ea f7       	brpl	.-6      	; 0x2cf0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1f2>
    2cf6:	90 81       	ld	r25, Z
    2cf8:	89 2b       	or	r24, r25
    2cfa:	80 83       	st	Z, r24
    2cfc:	8f e1       	ldi	r24, 0x1F	; 31
    2cfe:	8d 15       	cp	r24, r13
    2d00:	0c f4       	brge	.+2      	; 0x2d04 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x206>
    2d02:	92 cf       	rjmp	.-220    	; 0x2c28 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x12a>
    2d04:	9d 2d       	mov	r25, r13
    2d06:	97 70       	andi	r25, 0x07	; 7
    2d08:	9b 87       	std	Y+11, r25	; 0x0b
    2d0a:	8d 2d       	mov	r24, r13
    2d0c:	85 95       	asr	r24
    2d0e:	85 95       	asr	r24
    2d10:	85 95       	asr	r24
    2d12:	8e 5f       	subi	r24, 0xFE	; 254
    2d14:	29 2f       	mov	r18, r25
    2d16:	e0 e1       	ldi	r30, 0x10	; 16
    2d18:	8e 9f       	mul	r24, r30
    2d1a:	20 0d       	add	r18, r0
    2d1c:	11 24       	eor	r1, r1
    2d1e:	2a 83       	std	Y+2, r18	; 0x02
    2d20:	21 e0       	ldi	r18, 0x01	; 1
    2d22:	91 11       	cpse	r25, r1
    2d24:	01 c0       	rjmp	.+2      	; 0x2d28 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x22a>
    2d26:	20 e0       	ldi	r18, 0x00	; 0
    2d28:	28 0f       	add	r18, r24
    2d2a:	2c 87       	std	Y+12, r18	; 0x0c
    2d2c:	44 24       	eor	r4, r4
    2d2e:	43 94       	inc	r4
    2d30:	51 2c       	mov	r5, r1
    2d32:	4c 0e       	add	r4, r28
    2d34:	5d 1e       	adc	r5, r29
    2d36:	48 0e       	add	r4, r24
    2d38:	51 1c       	adc	r5, r1
    2d3a:	f9 e0       	ldi	r31, 0x09	; 9
    2d3c:	f8 1b       	sub	r31, r24
    2d3e:	fa 87       	std	Y+10, r31	; 0x0a
    2d40:	91 cf       	rjmp	.-222    	; 0x2c64 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x166>
    2d42:	86 e0       	ldi	r24, 0x06	; 6
    2d44:	48 c0       	rjmp	.+144    	; 0x2dd6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2d8>
    2d46:	82 e0       	ldi	r24, 0x02	; 2
    2d48:	46 c0       	rjmp	.+140    	; 0x2dd6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2d8>
    2d4a:	85 e0       	ldi	r24, 0x05	; 5
    2d4c:	44 c0       	rjmp	.+136    	; 0x2dd6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2d8>
    2d4e:	8b 81       	ldd	r24, Y+3	; 0x03
    2d50:	88 38       	cpi	r24, 0x88	; 136
    2d52:	f1 f1       	breq	.+124    	; 0x2dd0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2d2>
    2d54:	82 e0       	ldi	r24, 0x02	; 2
    2d56:	94 e0       	ldi	r25, 0x04	; 4
    2d58:	eb 2d       	mov	r30, r11
    2d5a:	f0 e0       	ldi	r31, 0x00	; 0
    2d5c:	31 96       	adiw	r30, 0x01	; 1
    2d5e:	e6 0d       	add	r30, r6
    2d60:	f7 1d       	adc	r31, r7
    2d62:	98 0f       	add	r25, r24
    2d64:	a1 e0       	ldi	r26, 0x01	; 1
    2d66:	b0 e0       	ldi	r27, 0x00	; 0
    2d68:	ac 0f       	add	r26, r28
    2d6a:	bd 1f       	adc	r27, r29
    2d6c:	a8 0f       	add	r26, r24
    2d6e:	b1 1d       	adc	r27, r1
    2d70:	2c 91       	ld	r18, X
    2d72:	21 93       	st	Z+, r18
    2d74:	8f 5f       	subi	r24, 0xFF	; 255
    2d76:	98 13       	cpse	r25, r24
    2d78:	f5 cf       	rjmp	.-22     	; 0x2d64 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x266>
    2d7a:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d7c:	83 30       	cpi	r24, 0x03	; 3
    2d7e:	21 f5       	brne	.+72     	; 0x2dc8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2ca>
    2d80:	8b 85       	ldd	r24, Y+11	; 0x0b
    2d82:	81 11       	cpse	r24, r1
    2d84:	21 c0       	rjmp	.+66     	; 0x2dc8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2ca>
    2d86:	9e 01       	movw	r18, r28
    2d88:	2d 5f       	subi	r18, 0xFD	; 253
    2d8a:	3f 4f       	sbci	r19, 0xFF	; 255
    2d8c:	41 e0       	ldi	r20, 0x01	; 1
    2d8e:	b2 01       	movw	r22, r4
    2d90:	c4 01       	movw	r24, r8
    2d92:	0e 94 8c 13 	call	0x2718	; 0x2718 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
    2d96:	81 11       	cpse	r24, r1
    2d98:	1e c0       	rjmp	.+60     	; 0x2dd6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2d8>
    2d9a:	9b 81       	ldd	r25, Y+3	; 0x03
    2d9c:	f2 01       	movw	r30, r4
    2d9e:	81 81       	ldd	r24, Z+1	; 0x01
    2da0:	98 13       	cpse	r25, r24
    2da2:	14 c0       	rjmp	.+40     	; 0x2dcc <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2ce>
    2da4:	9c 81       	ldd	r25, Y+4	; 0x04
    2da6:	82 81       	ldd	r24, Z+2	; 0x02
    2da8:	98 13       	cpse	r25, r24
    2daa:	10 c0       	rjmp	.+32     	; 0x2dcc <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2ce>
    2dac:	80 81       	ld	r24, Z
    2dae:	82 ff       	sbrs	r24, 2
    2db0:	02 c0       	rjmp	.+4      	; 0x2db6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2b8>
    2db2:	23 94       	inc	r2
    2db4:	ca ce       	rjmp	.-620    	; 0x2b4a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x4c>
    2db6:	f3 01       	movw	r30, r6
    2db8:	83 87       	std	Z+11, r24	; 0x0b
    2dba:	82 2d       	mov	r24, r2
    2dbc:	88 0f       	add	r24, r24
    2dbe:	82 0d       	add	r24, r2
    2dc0:	8f 5f       	subi	r24, 0xFF	; 255
    2dc2:	80 83       	st	Z, r24
    2dc4:	80 e0       	ldi	r24, 0x00	; 0
    2dc6:	07 c0       	rjmp	.+14     	; 0x2dd6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2d8>
    2dc8:	81 e0       	ldi	r24, 0x01	; 1
    2dca:	05 c0       	rjmp	.+10     	; 0x2dd6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2d8>
    2dcc:	87 e0       	ldi	r24, 0x07	; 7
    2dce:	03 c0       	rjmp	.+6      	; 0x2dd6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2d8>
    2dd0:	83 e0       	ldi	r24, 0x03	; 3
    2dd2:	93 e0       	ldi	r25, 0x03	; 3
    2dd4:	c1 cf       	rjmp	.-126    	; 0x2d58 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x25a>
    2dd6:	2c 96       	adiw	r28, 0x0c	; 12
    2dd8:	0f b6       	in	r0, 0x3f	; 63
    2dda:	f8 94       	cli
    2ddc:	de bf       	out	0x3e, r29	; 62
    2dde:	0f be       	out	0x3f, r0	; 63
    2de0:	cd bf       	out	0x3d, r28	; 61
    2de2:	df 91       	pop	r29
    2de4:	cf 91       	pop	r28
    2de6:	1f 91       	pop	r17
    2de8:	0f 91       	pop	r16
    2dea:	ff 90       	pop	r15
    2dec:	ef 90       	pop	r14
    2dee:	df 90       	pop	r13
    2df0:	cf 90       	pop	r12
    2df2:	bf 90       	pop	r11
    2df4:	af 90       	pop	r10
    2df6:	9f 90       	pop	r9
    2df8:	8f 90       	pop	r8
    2dfa:	7f 90       	pop	r7
    2dfc:	6f 90       	pop	r6
    2dfe:	5f 90       	pop	r5
    2e00:	4f 90       	pop	r4
    2e02:	3f 90       	pop	r3
    2e04:	2f 90       	pop	r2
    2e06:	08 95       	ret

00002e08 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_>:
    2e08:	4f 92       	push	r4
    2e0a:	5f 92       	push	r5
    2e0c:	6f 92       	push	r6
    2e0e:	7f 92       	push	r7
    2e10:	8f 92       	push	r8
    2e12:	9f 92       	push	r9
    2e14:	af 92       	push	r10
    2e16:	cf 92       	push	r12
    2e18:	ef 92       	push	r14
    2e1a:	ff 92       	push	r15
    2e1c:	0f 93       	push	r16
    2e1e:	1f 93       	push	r17
    2e20:	cf 93       	push	r28
    2e22:	df 93       	push	r29
    2e24:	00 d0       	rcall	.+0      	; 0x2e26 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x1e>
    2e26:	cd b7       	in	r28, 0x3d	; 61
    2e28:	de b7       	in	r29, 0x3e	; 62
    2e2a:	6a 83       	std	Y+2, r22	; 0x02
    2e2c:	41 15       	cp	r20, r1
    2e2e:	51 05       	cpc	r21, r1
    2e30:	39 f1       	breq	.+78     	; 0x2e80 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x78>
    2e32:	f9 01       	movw	r30, r18
    2e34:	60 81       	ld	r22, Z
    2e36:	62 30       	cpi	r22, 0x02	; 2
    2e38:	18 f1       	brcs	.+70     	; 0x2e80 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x78>
    2e3a:	49 01       	movw	r8, r18
    2e3c:	2a 01       	movw	r4, r20
    2e3e:	3c 01       	movw	r6, r24
    2e40:	40 e8       	ldi	r20, 0x80	; 128
    2e42:	6c e1       	ldi	r22, 0x1C	; 28
    2e44:	0e 94 78 13 	call	0x26f0	; 0x26f0 <_ZN7MFRC52224PCD_ClearRegisterBitMaskENS_12PCD_RegisterEh>
    2e48:	87 e0       	ldi	r24, 0x07	; 7
    2e4a:	89 83       	std	Y+1, r24	; 0x01
    2e4c:	a1 2c       	mov	r10, r1
    2e4e:	c1 2c       	mov	r12, r1
    2e50:	ce 01       	movw	r24, r28
    2e52:	01 96       	adiw	r24, 0x01	; 1
    2e54:	7c 01       	movw	r14, r24
    2e56:	84 01       	movw	r16, r8
    2e58:	92 01       	movw	r18, r4
    2e5a:	41 e0       	ldi	r20, 0x01	; 1
    2e5c:	be 01       	movw	r22, r28
    2e5e:	6e 5f       	subi	r22, 0xFE	; 254
    2e60:	7f 4f       	sbci	r23, 0xFF	; 255
    2e62:	c3 01       	movw	r24, r6
    2e64:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
    2e68:	81 11       	cpse	r24, r1
    2e6a:	0d c0       	rjmp	.+26     	; 0x2e86 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x7e>
    2e6c:	f4 01       	movw	r30, r8
    2e6e:	80 81       	ld	r24, Z
    2e70:	82 30       	cpi	r24, 0x02	; 2
    2e72:	41 f4       	brne	.+16     	; 0x2e84 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x7c>
    2e74:	81 e0       	ldi	r24, 0x01	; 1
    2e76:	99 81       	ldd	r25, Y+1	; 0x01
    2e78:	91 11       	cpse	r25, r1
    2e7a:	05 c0       	rjmp	.+10     	; 0x2e86 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x7e>
    2e7c:	80 e0       	ldi	r24, 0x00	; 0
    2e7e:	03 c0       	rjmp	.+6      	; 0x2e86 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x7e>
    2e80:	84 e0       	ldi	r24, 0x04	; 4
    2e82:	01 c0       	rjmp	.+2      	; 0x2e86 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x7e>
    2e84:	81 e0       	ldi	r24, 0x01	; 1
    2e86:	0f 90       	pop	r0
    2e88:	0f 90       	pop	r0
    2e8a:	df 91       	pop	r29
    2e8c:	cf 91       	pop	r28
    2e8e:	1f 91       	pop	r17
    2e90:	0f 91       	pop	r16
    2e92:	ff 90       	pop	r15
    2e94:	ef 90       	pop	r14
    2e96:	cf 90       	pop	r12
    2e98:	af 90       	pop	r10
    2e9a:	9f 90       	pop	r9
    2e9c:	8f 90       	pop	r8
    2e9e:	7f 90       	pop	r7
    2ea0:	6f 90       	pop	r6
    2ea2:	5f 90       	pop	r5
    2ea4:	4f 90       	pop	r4
    2ea6:	08 95       	ret

00002ea8 <_ZN7MFRC52213PICC_RequestAEPhS0_>:
    2ea8:	9a 01       	movw	r18, r20
    2eaa:	ab 01       	movw	r20, r22
    2eac:	66 e2       	ldi	r22, 0x26	; 38
    2eae:	0c 94 04 17 	jmp	0x2e08	; 0x2e08 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_>

00002eb2 <_ZN7MFRC52221PICC_IsNewCardPresentEv>:
    2eb2:	0f 93       	push	r16
    2eb4:	1f 93       	push	r17
    2eb6:	cf 93       	push	r28
    2eb8:	df 93       	push	r29
    2eba:	00 d0       	rcall	.+0      	; 0x2ebc <_ZN7MFRC52221PICC_IsNewCardPresentEv+0xa>
    2ebc:	1f 92       	push	r1
    2ebe:	cd b7       	in	r28, 0x3d	; 61
    2ec0:	de b7       	in	r29, 0x3e	; 62
    2ec2:	8c 01       	movw	r16, r24
    2ec4:	82 e0       	ldi	r24, 0x02	; 2
    2ec6:	8b 83       	std	Y+3, r24	; 0x03
    2ec8:	40 e0       	ldi	r20, 0x00	; 0
    2eca:	64 e2       	ldi	r22, 0x24	; 36
    2ecc:	c8 01       	movw	r24, r16
    2ece:	0e 94 ed 12 	call	0x25da	; 0x25da <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    2ed2:	40 e0       	ldi	r20, 0x00	; 0
    2ed4:	66 e2       	ldi	r22, 0x26	; 38
    2ed6:	c8 01       	movw	r24, r16
    2ed8:	0e 94 ed 12 	call	0x25da	; 0x25da <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    2edc:	46 e2       	ldi	r20, 0x26	; 38
    2ede:	68 e4       	ldi	r22, 0x48	; 72
    2ee0:	c8 01       	movw	r24, r16
    2ee2:	0e 94 ed 12 	call	0x25da	; 0x25da <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    2ee6:	ae 01       	movw	r20, r28
    2ee8:	4d 5f       	subi	r20, 0xFD	; 253
    2eea:	5f 4f       	sbci	r21, 0xFF	; 255
    2eec:	be 01       	movw	r22, r28
    2eee:	6f 5f       	subi	r22, 0xFF	; 255
    2ef0:	7f 4f       	sbci	r23, 0xFF	; 255
    2ef2:	c8 01       	movw	r24, r16
    2ef4:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <_ZN7MFRC52213PICC_RequestAEPhS0_>
    2ef8:	98 2f       	mov	r25, r24
    2efa:	81 e0       	ldi	r24, 0x01	; 1
    2efc:	99 23       	and	r25, r25
    2efe:	19 f0       	breq	.+6      	; 0x2f06 <_ZN7MFRC52221PICC_IsNewCardPresentEv+0x54>
    2f00:	92 30       	cpi	r25, 0x02	; 2
    2f02:	09 f0       	breq	.+2      	; 0x2f06 <_ZN7MFRC52221PICC_IsNewCardPresentEv+0x54>
    2f04:	80 e0       	ldi	r24, 0x00	; 0
    2f06:	0f 90       	pop	r0
    2f08:	0f 90       	pop	r0
    2f0a:	0f 90       	pop	r0
    2f0c:	df 91       	pop	r29
    2f0e:	cf 91       	pop	r28
    2f10:	1f 91       	pop	r17
    2f12:	0f 91       	pop	r16
    2f14:	08 95       	ret

00002f16 <_ZN7MFRC52210PICC_HaltAEv>:
/**
 * Instructs a PICC in state ACTIVE(*) to go to state HALT.
 *
 * @return STATUS_OK on success, STATUS_??? otherwise.
 */ 
MFRC522::StatusCode MFRC522::PICC_HaltA() {
    2f16:	8f 92       	push	r8
    2f18:	9f 92       	push	r9
    2f1a:	af 92       	push	r10
    2f1c:	cf 92       	push	r12
    2f1e:	ef 92       	push	r14
    2f20:	ff 92       	push	r15
    2f22:	0f 93       	push	r16
    2f24:	1f 93       	push	r17
    2f26:	cf 93       	push	r28
    2f28:	df 93       	push	r29
    2f2a:	00 d0       	rcall	.+0      	; 0x2f2c <_ZN7MFRC52210PICC_HaltAEv+0x16>
    2f2c:	00 d0       	rcall	.+0      	; 0x2f2e <_ZN7MFRC52210PICC_HaltAEv+0x18>
    2f2e:	cd b7       	in	r28, 0x3d	; 61
    2f30:	de b7       	in	r29, 0x3e	; 62
    2f32:	4c 01       	movw	r8, r24
	MFRC522::StatusCode result;
	byte buffer[4];
	
	// Build command buffer
	buffer[0] = PICC_CMD_HLTA;
    2f34:	80 e5       	ldi	r24, 0x50	; 80
    2f36:	89 83       	std	Y+1, r24	; 0x01
	buffer[1] = 0;
    2f38:	1a 82       	std	Y+2, r1	; 0x02
	// Calculate CRC_A
	result = PCD_CalculateCRC(buffer, 2, &buffer[2]);
    2f3a:	9e 01       	movw	r18, r28
    2f3c:	2d 5f       	subi	r18, 0xFD	; 253
    2f3e:	3f 4f       	sbci	r19, 0xFF	; 255
    2f40:	42 e0       	ldi	r20, 0x02	; 2
    2f42:	be 01       	movw	r22, r28
    2f44:	6f 5f       	subi	r22, 0xFF	; 255
    2f46:	7f 4f       	sbci	r23, 0xFF	; 255
    2f48:	c4 01       	movw	r24, r8
    2f4a:	0e 94 8c 13 	call	0x2718	; 0x2718 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
	if (result != STATUS_OK) {
    2f4e:	81 11       	cpse	r24, r1
    2f50:	16 c0       	rjmp	.+44     	; 0x2f7e <_ZN7MFRC52210PICC_HaltAEv+0x68>
	// Send the command.
	// The standard says:
	//		If the PICC responds with any modulation during a period of 1 ms after the end of the frame containing the
	//		HLTA command, this response shall be interpreted as 'not acknowledge'.
	// We interpret that this way: Only STATUS_TIMEOUT is a success.
	result = PCD_TransceiveData(buffer, sizeof(buffer), nullptr, 0);
    2f52:	a1 2c       	mov	r10, r1
    2f54:	c1 2c       	mov	r12, r1
    2f56:	e1 2c       	mov	r14, r1
    2f58:	f1 2c       	mov	r15, r1
    2f5a:	00 e0       	ldi	r16, 0x00	; 0
    2f5c:	10 e0       	ldi	r17, 0x00	; 0
    2f5e:	20 e0       	ldi	r18, 0x00	; 0
    2f60:	30 e0       	ldi	r19, 0x00	; 0
    2f62:	44 e0       	ldi	r20, 0x04	; 4
    2f64:	be 01       	movw	r22, r28
    2f66:	6f 5f       	subi	r22, 0xFF	; 255
    2f68:	7f 4f       	sbci	r23, 0xFF	; 255
    2f6a:	c4 01       	movw	r24, r8
    2f6c:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
	if (result == STATUS_TIMEOUT) {
    2f70:	83 30       	cpi	r24, 0x03	; 3
    2f72:	21 f0       	breq	.+8      	; 0x2f7c <_ZN7MFRC52210PICC_HaltAEv+0x66>
		return STATUS_OK;
	}
	if (result == STATUS_OK) { // That is ironically NOT ok in this case ;-)
    2f74:	81 11       	cpse	r24, r1
    2f76:	03 c0       	rjmp	.+6      	; 0x2f7e <_ZN7MFRC52210PICC_HaltAEv+0x68>
		return STATUS_ERROR;
    2f78:	81 e0       	ldi	r24, 0x01	; 1
    2f7a:	01 c0       	rjmp	.+2      	; 0x2f7e <_ZN7MFRC52210PICC_HaltAEv+0x68>
	//		If the PICC responds with any modulation during a period of 1 ms after the end of the frame containing the
	//		HLTA command, this response shall be interpreted as 'not acknowledge'.
	// We interpret that this way: Only STATUS_TIMEOUT is a success.
	result = PCD_TransceiveData(buffer, sizeof(buffer), nullptr, 0);
	if (result == STATUS_TIMEOUT) {
		return STATUS_OK;
    2f7c:	80 e0       	ldi	r24, 0x00	; 0
	}
	if (result == STATUS_OK) { // That is ironically NOT ok in this case ;-)
		return STATUS_ERROR;
	}
	return result;
} // End PICC_HaltA()
    2f7e:	0f 90       	pop	r0
    2f80:	0f 90       	pop	r0
    2f82:	0f 90       	pop	r0
    2f84:	0f 90       	pop	r0
    2f86:	df 91       	pop	r29
    2f88:	cf 91       	pop	r28
    2f8a:	1f 91       	pop	r17
    2f8c:	0f 91       	pop	r16
    2f8e:	ff 90       	pop	r15
    2f90:	ef 90       	pop	r14
    2f92:	cf 90       	pop	r12
    2f94:	af 90       	pop	r10
    2f96:	9f 90       	pop	r9
    2f98:	8f 90       	pop	r8
    2f9a:	08 95       	ret

00002f9c <_ZL9date2daysjhh>:

static void write_i2c_register(uint8_t addr, uint8_t reg, uint8_t val) {
  Wire.beginTransmission(addr);
  Wire._I2C_WRITE((byte)reg);
  Wire._I2C_WRITE((byte)val);
  Wire.endTransmission();
    2f9c:	80 3d       	cpi	r24, 0xD0	; 208
    2f9e:	27 e0       	ldi	r18, 0x07	; 7
    2fa0:	92 07       	cpc	r25, r18
    2fa2:	10 f0       	brcs	.+4      	; 0x2fa8 <_ZL9date2daysjhh+0xc>
    2fa4:	80 5d       	subi	r24, 0xD0	; 208
    2fa6:	97 40       	sbci	r25, 0x07	; 7
    2fa8:	50 e0       	ldi	r21, 0x00	; 0
    2faa:	e9 ee       	ldi	r30, 0xE9	; 233
    2fac:	f0 e0       	ldi	r31, 0x00	; 0
    2fae:	21 e0       	ldi	r18, 0x01	; 1
    2fb0:	26 17       	cp	r18, r22
    2fb2:	30 f4       	brcc	.+12     	; 0x2fc0 <_ZL9date2daysjhh+0x24>
    2fb4:	34 91       	lpm	r19, Z
    2fb6:	43 0f       	add	r20, r19
    2fb8:	51 1d       	adc	r21, r1
    2fba:	2f 5f       	subi	r18, 0xFF	; 255
    2fbc:	31 96       	adiw	r30, 0x01	; 1
    2fbe:	f8 cf       	rjmp	.-16     	; 0x2fb0 <_ZL9date2daysjhh+0x14>
    2fc0:	63 30       	cpi	r22, 0x03	; 3
    2fc2:	38 f0       	brcs	.+14     	; 0x2fd2 <_ZL9date2daysjhh+0x36>
    2fc4:	9c 01       	movw	r18, r24
    2fc6:	23 70       	andi	r18, 0x03	; 3
    2fc8:	33 27       	eor	r19, r19
    2fca:	23 2b       	or	r18, r19
    2fcc:	11 f4       	brne	.+4      	; 0x2fd2 <_ZL9date2daysjhh+0x36>
    2fce:	4f 5f       	subi	r20, 0xFF	; 255
    2fd0:	5f 4f       	sbci	r21, 0xFF	; 255
    2fd2:	bc 01       	movw	r22, r24
    2fd4:	6d 5f       	subi	r22, 0xFD	; 253
    2fd6:	7f 4f       	sbci	r23, 0xFF	; 255
    2fd8:	76 95       	lsr	r23
    2fda:	67 95       	ror	r22
    2fdc:	76 95       	lsr	r23
    2fde:	67 95       	ror	r22
    2fe0:	ed e6       	ldi	r30, 0x6D	; 109
    2fe2:	f1 e0       	ldi	r31, 0x01	; 1
    2fe4:	8e 9f       	mul	r24, r30
    2fe6:	90 01       	movw	r18, r0
    2fe8:	8f 9f       	mul	r24, r31
    2fea:	30 0d       	add	r19, r0
    2fec:	9e 9f       	mul	r25, r30
    2fee:	30 0d       	add	r19, r0
    2ff0:	11 24       	eor	r1, r1
    2ff2:	c9 01       	movw	r24, r18
    2ff4:	01 97       	sbiw	r24, 0x01	; 1
    2ff6:	86 0f       	add	r24, r22
    2ff8:	97 1f       	adc	r25, r23
    2ffa:	84 0f       	add	r24, r20
    2ffc:	95 1f       	adc	r25, r21
    2ffe:	08 95       	ret

00003000 <_ZL6conv2dPKc>:
    3000:	fc 01       	movw	r30, r24
    3002:	90 81       	ld	r25, Z
    3004:	90 53       	subi	r25, 0x30	; 48
    3006:	9a 30       	cpi	r25, 0x0A	; 10
    3008:	08 f0       	brcs	.+2      	; 0x300c <_ZL6conv2dPKc+0xc>
    300a:	90 e0       	ldi	r25, 0x00	; 0
    300c:	81 81       	ldd	r24, Z+1	; 0x01
    300e:	80 53       	subi	r24, 0x30	; 48
    3010:	2a e0       	ldi	r18, 0x0A	; 10
    3012:	92 9f       	mul	r25, r18
    3014:	80 0d       	add	r24, r0
    3016:	11 24       	eor	r1, r1
    3018:	08 95       	ret

0000301a <_ZN8DateTimeC1Em>:
    301a:	8f 92       	push	r8
    301c:	9f 92       	push	r9
    301e:	af 92       	push	r10
    3020:	bf 92       	push	r11
    3022:	cf 92       	push	r12
    3024:	df 92       	push	r13
    3026:	ef 92       	push	r14
    3028:	ff 92       	push	r15
    302a:	cf 93       	push	r28
    302c:	df 93       	push	r29
    302e:	ec 01       	movw	r28, r24
    3030:	6a 01       	movw	r12, r20
    3032:	7b 01       	movw	r14, r22
    3034:	80 e8       	ldi	r24, 0x80	; 128
    3036:	c8 1a       	sub	r12, r24
    3038:	83 e4       	ldi	r24, 0x43	; 67
    303a:	d8 0a       	sbc	r13, r24
    303c:	8d e6       	ldi	r24, 0x6D	; 109
    303e:	e8 0a       	sbc	r14, r24
    3040:	88 e3       	ldi	r24, 0x38	; 56
    3042:	f8 0a       	sbc	r15, r24
    3044:	8c e3       	ldi	r24, 0x3C	; 60
    3046:	88 2e       	mov	r8, r24
    3048:	91 2c       	mov	r9, r1
    304a:	a1 2c       	mov	r10, r1
    304c:	b1 2c       	mov	r11, r1
    304e:	c7 01       	movw	r24, r14
    3050:	b6 01       	movw	r22, r12
    3052:	a5 01       	movw	r20, r10
    3054:	94 01       	movw	r18, r8
    3056:	0e 94 9b 1e 	call	0x3d36	; 0x3d36 <__udivmodsi4>
    305a:	6d 83       	std	Y+5, r22	; 0x05
    305c:	ca 01       	movw	r24, r20
    305e:	b9 01       	movw	r22, r18
    3060:	a5 01       	movw	r20, r10
    3062:	94 01       	movw	r18, r8
    3064:	0e 94 9b 1e 	call	0x3d36	; 0x3d36 <__udivmodsi4>
    3068:	6c 83       	std	Y+4, r22	; 0x04
    306a:	c7 01       	movw	r24, r14
    306c:	b6 01       	movw	r22, r12
    306e:	20 e1       	ldi	r18, 0x10	; 16
    3070:	3e e0       	ldi	r19, 0x0E	; 14
    3072:	40 e0       	ldi	r20, 0x00	; 0
    3074:	50 e0       	ldi	r21, 0x00	; 0
    3076:	0e 94 9b 1e 	call	0x3d36	; 0x3d36 <__udivmodsi4>
    307a:	ca 01       	movw	r24, r20
    307c:	b9 01       	movw	r22, r18
    307e:	28 e1       	ldi	r18, 0x18	; 24
    3080:	30 e0       	ldi	r19, 0x00	; 0
    3082:	40 e0       	ldi	r20, 0x00	; 0
    3084:	50 e0       	ldi	r21, 0x00	; 0
    3086:	0e 94 9b 1e 	call	0x3d36	; 0x3d36 <__udivmodsi4>
    308a:	6b 83       	std	Y+3, r22	; 0x03
    308c:	c7 01       	movw	r24, r14
    308e:	b6 01       	movw	r22, r12
    3090:	20 e8       	ldi	r18, 0x80	; 128
    3092:	31 e5       	ldi	r19, 0x51	; 81
    3094:	41 e0       	ldi	r20, 0x01	; 1
    3096:	50 e0       	ldi	r21, 0x00	; 0
    3098:	0e 94 9b 1e 	call	0x3d36	; 0x3d36 <__udivmodsi4>
    309c:	18 82       	st	Y, r1
    309e:	48 81       	ld	r20, Y
    30a0:	54 2f       	mov	r21, r20
    30a2:	53 70       	andi	r21, 0x03	; 3
    30a4:	81 e0       	ldi	r24, 0x01	; 1
    30a6:	09 f0       	breq	.+2      	; 0x30aa <_ZN8DateTimeC1Em+0x90>
    30a8:	80 e0       	ldi	r24, 0x00	; 0
    30aa:	90 e0       	ldi	r25, 0x00	; 0
    30ac:	bc 01       	movw	r22, r24
    30ae:	63 59       	subi	r22, 0x93	; 147
    30b0:	7e 4f       	sbci	r23, 0xFE	; 254
    30b2:	26 17       	cp	r18, r22
    30b4:	37 07       	cpc	r19, r23
    30b6:	38 f0       	brcs	.+14     	; 0x30c6 <_ZN8DateTimeC1Em+0xac>
    30b8:	28 1b       	sub	r18, r24
    30ba:	39 0b       	sbc	r19, r25
    30bc:	2d 56       	subi	r18, 0x6D	; 109
    30be:	31 40       	sbci	r19, 0x01	; 1
    30c0:	4f 5f       	subi	r20, 0xFF	; 255
    30c2:	48 83       	st	Y, r20
    30c4:	ec cf       	rjmp	.-40     	; 0x309e <_ZN8DateTimeC1Em+0x84>
    30c6:	81 e0       	ldi	r24, 0x01	; 1
    30c8:	89 83       	std	Y+1, r24	; 0x01
    30ca:	89 81       	ldd	r24, Y+1	; 0x01
    30cc:	e8 2f       	mov	r30, r24
    30ce:	f0 e0       	ldi	r31, 0x00	; 0
    30d0:	e8 51       	subi	r30, 0x18	; 24
    30d2:	ff 4f       	sbci	r31, 0xFF	; 255
    30d4:	e4 91       	lpm	r30, Z
    30d6:	51 11       	cpse	r21, r1
    30d8:	03 c0       	rjmp	.+6      	; 0x30e0 <_ZN8DateTimeC1Em+0xc6>
    30da:	82 30       	cpi	r24, 0x02	; 2
    30dc:	09 f4       	brne	.+2      	; 0x30e0 <_ZN8DateTimeC1Em+0xc6>
    30de:	ef 5f       	subi	r30, 0xFF	; 255
    30e0:	f0 e0       	ldi	r31, 0x00	; 0
    30e2:	2e 17       	cp	r18, r30
    30e4:	3f 07       	cpc	r19, r31
    30e6:	20 f0       	brcs	.+8      	; 0x30f0 <_ZN8DateTimeC1Em+0xd6>
    30e8:	2e 1b       	sub	r18, r30
    30ea:	3f 0b       	sbc	r19, r31
    30ec:	8f 5f       	subi	r24, 0xFF	; 255
    30ee:	ec cf       	rjmp	.-40     	; 0x30c8 <_ZN8DateTimeC1Em+0xae>
    30f0:	2f 5f       	subi	r18, 0xFF	; 255
    30f2:	2a 83       	std	Y+2, r18	; 0x02
    30f4:	df 91       	pop	r29
    30f6:	cf 91       	pop	r28
    30f8:	ff 90       	pop	r15
    30fa:	ef 90       	pop	r14
    30fc:	df 90       	pop	r13
    30fe:	cf 90       	pop	r12
    3100:	bf 90       	pop	r11
    3102:	af 90       	pop	r10
    3104:	9f 90       	pop	r9
    3106:	8f 90       	pop	r8
    3108:	08 95       	ret

0000310a <_ZN8DateTimeC1Ejhhhhh>:
    310a:	cf 92       	push	r12
    310c:	ef 92       	push	r14
    310e:	0f 93       	push	r16
    3110:	fc 01       	movw	r30, r24
    3112:	60 3d       	cpi	r22, 0xD0	; 208
    3114:	87 e0       	ldi	r24, 0x07	; 7
    3116:	78 07       	cpc	r23, r24
    3118:	10 f0       	brcs	.+4      	; 0x311e <_ZN8DateTimeC1Ejhhhhh+0x14>
    311a:	60 5d       	subi	r22, 0xD0	; 208
    311c:	77 40       	sbci	r23, 0x07	; 7
    311e:	60 83       	st	Z, r22
    3120:	41 83       	std	Z+1, r20	; 0x01
    3122:	22 83       	std	Z+2, r18	; 0x02
    3124:	03 83       	std	Z+3, r16	; 0x03
    3126:	e4 82       	std	Z+4, r14	; 0x04
    3128:	c5 82       	std	Z+5, r12	; 0x05
    312a:	0f 91       	pop	r16
    312c:	ef 90       	pop	r14
    312e:	cf 90       	pop	r12
    3130:	08 95       	ret

00003132 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_>:
    3132:	ef 92       	push	r14
    3134:	ff 92       	push	r15
    3136:	0f 93       	push	r16
    3138:	1f 93       	push	r17
    313a:	cf 93       	push	r28
    313c:	df 93       	push	r29
    313e:	cd b7       	in	r28, 0x3d	; 61
    3140:	de b7       	in	r29, 0x3e	; 62
    3142:	2b 97       	sbiw	r28, 0x0b	; 11
    3144:	0f b6       	in	r0, 0x3f	; 63
    3146:	f8 94       	cli
    3148:	de bf       	out	0x3e, r29	; 62
    314a:	0f be       	out	0x3f, r0	; 63
    314c:	cd bf       	out	0x3d, r28	; 61
    314e:	8c 01       	movw	r16, r24
    3150:	7a 01       	movw	r14, r20
    3152:	4b e0       	ldi	r20, 0x0B	; 11
    3154:	50 e0       	ldi	r21, 0x00	; 0
    3156:	ce 01       	movw	r24, r28
    3158:	01 96       	adiw	r24, 0x01	; 1
    315a:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <memcpy_P>
    315e:	ce 01       	movw	r24, r28
    3160:	0a 96       	adiw	r24, 0x0a	; 10
    3162:	0e 94 00 18 	call	0x3000	; 0x3000 <_ZL6conv2dPKc>
    3166:	f8 01       	movw	r30, r16
    3168:	80 83       	st	Z, r24
    316a:	e9 81       	ldd	r30, Y+1	; 0x01
    316c:	8e 2f       	mov	r24, r30
    316e:	90 e0       	ldi	r25, 0x00	; 0
    3170:	fc 01       	movw	r30, r24
    3172:	e1 54       	subi	r30, 0x41	; 65
    3174:	f1 09       	sbc	r31, r1
    3176:	e3 31       	cpi	r30, 0x13	; 19
    3178:	f1 05       	cpc	r31, r1
    317a:	48 f5       	brcc	.+82     	; 0x31ce <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x9c>
    317c:	ec 5c       	subi	r30, 0xCC	; 204
    317e:	ff 4f       	sbci	r31, 0xFF	; 255
    3180:	0c 94 dc 1e 	jmp	0x3db8	; 0x3db8 <__tablejump2__>
    3184:	8a 81       	ldd	r24, Y+2	; 0x02
    3186:	81 36       	cpi	r24, 0x61	; 97
    3188:	39 f0       	breq	.+14     	; 0x3198 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x66>
    318a:	8b 81       	ldd	r24, Y+3	; 0x03
    318c:	8e 36       	cpi	r24, 0x6E	; 110
    318e:	11 f0       	breq	.+4      	; 0x3194 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x62>
    3190:	87 e0       	ldi	r24, 0x07	; 7
    3192:	1b c0       	rjmp	.+54     	; 0x31ca <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x98>
    3194:	86 e0       	ldi	r24, 0x06	; 6
    3196:	19 c0       	rjmp	.+50     	; 0x31ca <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x98>
    3198:	81 e0       	ldi	r24, 0x01	; 1
    319a:	17 c0       	rjmp	.+46     	; 0x31ca <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x98>
    319c:	82 e0       	ldi	r24, 0x02	; 2
    319e:	15 c0       	rjmp	.+42     	; 0x31ca <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x98>
    31a0:	8b 81       	ldd	r24, Y+3	; 0x03
    31a2:	82 37       	cpi	r24, 0x72	; 114
    31a4:	11 f0       	breq	.+4      	; 0x31aa <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x78>
    31a6:	88 e0       	ldi	r24, 0x08	; 8
    31a8:	10 c0       	rjmp	.+32     	; 0x31ca <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x98>
    31aa:	84 e0       	ldi	r24, 0x04	; 4
    31ac:	0e c0       	rjmp	.+28     	; 0x31ca <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x98>
    31ae:	8b 81       	ldd	r24, Y+3	; 0x03
    31b0:	82 37       	cpi	r24, 0x72	; 114
    31b2:	11 f0       	breq	.+4      	; 0x31b8 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x86>
    31b4:	85 e0       	ldi	r24, 0x05	; 5
    31b6:	09 c0       	rjmp	.+18     	; 0x31ca <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x98>
    31b8:	83 e0       	ldi	r24, 0x03	; 3
    31ba:	07 c0       	rjmp	.+14     	; 0x31ca <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x98>
    31bc:	89 e0       	ldi	r24, 0x09	; 9
    31be:	05 c0       	rjmp	.+10     	; 0x31ca <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x98>
    31c0:	8a e0       	ldi	r24, 0x0A	; 10
    31c2:	03 c0       	rjmp	.+6      	; 0x31ca <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x98>
    31c4:	8b e0       	ldi	r24, 0x0B	; 11
    31c6:	01 c0       	rjmp	.+2      	; 0x31ca <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x98>
    31c8:	8c e0       	ldi	r24, 0x0C	; 12
    31ca:	f8 01       	movw	r30, r16
    31cc:	81 83       	std	Z+1, r24	; 0x01
    31ce:	ce 01       	movw	r24, r28
    31d0:	05 96       	adiw	r24, 0x05	; 5
    31d2:	0e 94 00 18 	call	0x3000	; 0x3000 <_ZL6conv2dPKc>
    31d6:	f8 01       	movw	r30, r16
    31d8:	82 83       	std	Z+2, r24	; 0x02
    31da:	48 e0       	ldi	r20, 0x08	; 8
    31dc:	50 e0       	ldi	r21, 0x00	; 0
    31de:	b7 01       	movw	r22, r14
    31e0:	ce 01       	movw	r24, r28
    31e2:	01 96       	adiw	r24, 0x01	; 1
    31e4:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <memcpy_P>
    31e8:	ce 01       	movw	r24, r28
    31ea:	01 96       	adiw	r24, 0x01	; 1
    31ec:	0e 94 00 18 	call	0x3000	; 0x3000 <_ZL6conv2dPKc>
    31f0:	f8 01       	movw	r30, r16
    31f2:	83 83       	std	Z+3, r24	; 0x03
    31f4:	ce 01       	movw	r24, r28
    31f6:	04 96       	adiw	r24, 0x04	; 4
    31f8:	0e 94 00 18 	call	0x3000	; 0x3000 <_ZL6conv2dPKc>
    31fc:	f8 01       	movw	r30, r16
    31fe:	84 83       	std	Z+4, r24	; 0x04
    3200:	ce 01       	movw	r24, r28
    3202:	07 96       	adiw	r24, 0x07	; 7
    3204:	0e 94 00 18 	call	0x3000	; 0x3000 <_ZL6conv2dPKc>
    3208:	f8 01       	movw	r30, r16
    320a:	85 83       	std	Z+5, r24	; 0x05
    320c:	2b 96       	adiw	r28, 0x0b	; 11
    320e:	0f b6       	in	r0, 0x3f	; 63
    3210:	f8 94       	cli
    3212:	de bf       	out	0x3e, r29	; 62
    3214:	0f be       	out	0x3f, r0	; 63
    3216:	cd bf       	out	0x3d, r28	; 61
    3218:	df 91       	pop	r29
    321a:	cf 91       	pop	r28
    321c:	1f 91       	pop	r17
    321e:	0f 91       	pop	r16
    3220:	ff 90       	pop	r15
    3222:	ef 90       	pop	r14
    3224:	08 95       	ret

00003226 <_ZNK8DateTime8unixtimeEv>:
    3226:	ef 92       	push	r14
    3228:	ff 92       	push	r15
    322a:	0f 93       	push	r16
    322c:	1f 93       	push	r17
    322e:	cf 93       	push	r28
    3230:	df 93       	push	r29
    3232:	ec 01       	movw	r28, r24
    3234:	88 81       	ld	r24, Y
    3236:	4a 81       	ldd	r20, Y+2	; 0x02
    3238:	69 81       	ldd	r22, Y+1	; 0x01
    323a:	90 e0       	ldi	r25, 0x00	; 0
    323c:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <_ZL9date2daysjhh>
    3240:	9c 01       	movw	r18, r24
    3242:	a8 e1       	ldi	r26, 0x18	; 24
    3244:	b0 e0       	ldi	r27, 0x00	; 0
    3246:	0e 94 e2 1e 	call	0x3dc4	; 0x3dc4 <__umulhisi3>
    324a:	2b 81       	ldd	r18, Y+3	; 0x03
    324c:	7b 01       	movw	r14, r22
    324e:	8c 01       	movw	r16, r24
    3250:	e2 0e       	add	r14, r18
    3252:	f1 1c       	adc	r15, r1
    3254:	01 1d       	adc	r16, r1
    3256:	11 1d       	adc	r17, r1
    3258:	a8 01       	movw	r20, r16
    325a:	97 01       	movw	r18, r14
    325c:	ac e3       	ldi	r26, 0x3C	; 60
    325e:	b0 e0       	ldi	r27, 0x00	; 0
    3260:	0e 94 f1 1e 	call	0x3de2	; 0x3de2 <__muluhisi3>
    3264:	2c 81       	ldd	r18, Y+4	; 0x04
    3266:	7b 01       	movw	r14, r22
    3268:	8c 01       	movw	r16, r24
    326a:	e2 0e       	add	r14, r18
    326c:	f1 1c       	adc	r15, r1
    326e:	01 1d       	adc	r16, r1
    3270:	11 1d       	adc	r17, r1
    3272:	a8 01       	movw	r20, r16
    3274:	97 01       	movw	r18, r14
    3276:	0e 94 f1 1e 	call	0x3de2	; 0x3de2 <__muluhisi3>
    327a:	2d 81       	ldd	r18, Y+5	; 0x05
    327c:	dc 01       	movw	r26, r24
    327e:	cb 01       	movw	r24, r22
    3280:	82 0f       	add	r24, r18
    3282:	91 1d       	adc	r25, r1
    3284:	a1 1d       	adc	r26, r1
    3286:	b1 1d       	adc	r27, r1
    3288:	bc 01       	movw	r22, r24
    328a:	cd 01       	movw	r24, r26
    328c:	60 58       	subi	r22, 0x80	; 128
    328e:	7c 4b       	sbci	r23, 0xBC	; 188
    3290:	82 49       	sbci	r24, 0x92	; 146
    3292:	97 4c       	sbci	r25, 0xC7	; 199
    3294:	df 91       	pop	r29
    3296:	cf 91       	pop	r28
    3298:	1f 91       	pop	r17
    329a:	0f 91       	pop	r16
    329c:	ff 90       	pop	r15
    329e:	ef 90       	pop	r14
    32a0:	08 95       	ret

000032a2 <_ZN8DateTimemiERKS_>:
    32a2:	cf 92       	push	r12
    32a4:	df 92       	push	r13
    32a6:	ef 92       	push	r14
    32a8:	ff 92       	push	r15
    32aa:	0f 93       	push	r16
    32ac:	1f 93       	push	r17
    32ae:	cf 93       	push	r28
    32b0:	df 93       	push	r29
    32b2:	ec 01       	movw	r28, r24
    32b4:	cb 01       	movw	r24, r22
    32b6:	8a 01       	movw	r16, r20
    32b8:	0e 94 13 19 	call	0x3226	; 0x3226 <_ZNK8DateTime8unixtimeEv>
    32bc:	6b 01       	movw	r12, r22
    32be:	7c 01       	movw	r14, r24
    32c0:	c8 01       	movw	r24, r16
    32c2:	0e 94 13 19 	call	0x3226	; 0x3226 <_ZNK8DateTime8unixtimeEv>
    32c6:	c6 1a       	sub	r12, r22
    32c8:	d7 0a       	sbc	r13, r23
    32ca:	e8 0a       	sbc	r14, r24
    32cc:	f9 0a       	sbc	r15, r25
    32ce:	c8 82       	st	Y, r12
    32d0:	d9 82       	std	Y+1, r13	; 0x01
    32d2:	ea 82       	std	Y+2, r14	; 0x02
    32d4:	fb 82       	std	Y+3, r15	; 0x03
    32d6:	ce 01       	movw	r24, r28
    32d8:	df 91       	pop	r29
    32da:	cf 91       	pop	r28
    32dc:	1f 91       	pop	r17
    32de:	0f 91       	pop	r16
    32e0:	ff 90       	pop	r15
    32e2:	ef 90       	pop	r14
    32e4:	df 90       	pop	r13
    32e6:	cf 90       	pop	r12
    32e8:	08 95       	ret

000032ea <_ZN10RTC_DS32315beginEv>:
    32ea:	8f e8       	ldi	r24, 0x8F	; 143
    32ec:	93 e0       	ldi	r25, 0x03	; 3
    32ee:	0e 94 c1 1b 	call	0x3782	; 0x3782 <_ZN7TwoWire5beginEv>
    32f2:	81 e0       	ldi	r24, 0x01	; 1
    32f4:	08 95       	ret

000032f6 <_ZN10RTC_DS32313nowEv>:
    32f6:	cf 92       	push	r12
    32f8:	df 92       	push	r13
    32fa:	ef 92       	push	r14
    32fc:	ff 92       	push	r15
    32fe:	0f 93       	push	r16
    3300:	1f 93       	push	r17
    3302:	cf 93       	push	r28
    3304:	df 93       	push	r29
    3306:	ec 01       	movw	r28, r24
    3308:	68 e6       	ldi	r22, 0x68	; 104
    330a:	70 e0       	ldi	r23, 0x00	; 0
    330c:	8f e8       	ldi	r24, 0x8F	; 143
    330e:	93 e0       	ldi	r25, 0x03	; 3
    3310:	0e 94 dd 1b 	call	0x37ba	; 0x37ba <_ZN7TwoWire17beginTransmissionEi>
    3314:	60 e0       	ldi	r22, 0x00	; 0
    3316:	8f e8       	ldi	r24, 0x8F	; 143
    3318:	93 e0       	ldi	r25, 0x03	; 3
    331a:	0e 94 82 1b 	call	0x3704	; 0x3704 <_ZN7TwoWire5writeEh>
    331e:	8f e8       	ldi	r24, 0x8F	; 143
    3320:	93 e0       	ldi	r25, 0x03	; 3
    3322:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <_ZN7TwoWire15endTransmissionEv>
    3326:	47 e0       	ldi	r20, 0x07	; 7
    3328:	50 e0       	ldi	r21, 0x00	; 0
    332a:	68 e6       	ldi	r22, 0x68	; 104
    332c:	70 e0       	ldi	r23, 0x00	; 0
    332e:	8f e8       	ldi	r24, 0x8F	; 143
    3330:	93 e0       	ldi	r25, 0x03	; 3
    3332:	0e 94 59 1c 	call	0x38b2	; 0x38b2 <_ZN7TwoWire11requestFromEii>
    3336:	8f e8       	ldi	r24, 0x8F	; 143
    3338:	93 e0       	ldi	r25, 0x03	; 3
    333a:	0e 94 fb 1a 	call	0x35f6	; 0x35f6 <_ZN7TwoWire4readEv>
    333e:	8f 77       	andi	r24, 0x7F	; 127
    3340:	98 2f       	mov	r25, r24
    3342:	92 95       	swap	r25
    3344:	9f 70       	andi	r25, 0x0F	; 15
    3346:	1a ef       	ldi	r17, 0xFA	; 250
    3348:	08 2f       	mov	r16, r24
    334a:	91 9f       	mul	r25, r17
    334c:	00 0d       	add	r16, r0
    334e:	11 24       	eor	r1, r1
    3350:	8f e8       	ldi	r24, 0x8F	; 143
    3352:	93 e0       	ldi	r25, 0x03	; 3
    3354:	0e 94 fb 1a 	call	0x35f6	; 0x35f6 <_ZN7TwoWire4readEv>
    3358:	9c 01       	movw	r18, r24
    335a:	33 27       	eor	r19, r19
    335c:	94 e0       	ldi	r25, 0x04	; 4
    335e:	35 95       	asr	r19
    3360:	27 95       	ror	r18
    3362:	9a 95       	dec	r25
    3364:	e1 f7       	brne	.-8      	; 0x335e <_ZN10RTC_DS32313nowEv+0x68>
    3366:	f8 2e       	mov	r15, r24
    3368:	12 9f       	mul	r17, r18
    336a:	f0 0c       	add	r15, r0
    336c:	11 24       	eor	r1, r1
    336e:	8f e8       	ldi	r24, 0x8F	; 143
    3370:	93 e0       	ldi	r25, 0x03	; 3
    3372:	0e 94 fb 1a 	call	0x35f6	; 0x35f6 <_ZN7TwoWire4readEv>
    3376:	9c 01       	movw	r18, r24
    3378:	33 27       	eor	r19, r19
    337a:	44 e0       	ldi	r20, 0x04	; 4
    337c:	35 95       	asr	r19
    337e:	27 95       	ror	r18
    3380:	4a 95       	dec	r20
    3382:	e1 f7       	brne	.-8      	; 0x337c <_ZN10RTC_DS32313nowEv+0x86>
    3384:	e8 2e       	mov	r14, r24
    3386:	12 9f       	mul	r17, r18
    3388:	e0 0c       	add	r14, r0
    338a:	11 24       	eor	r1, r1
    338c:	8f e8       	ldi	r24, 0x8F	; 143
    338e:	93 e0       	ldi	r25, 0x03	; 3
    3390:	0e 94 fb 1a 	call	0x35f6	; 0x35f6 <_ZN7TwoWire4readEv>
    3394:	8f e8       	ldi	r24, 0x8F	; 143
    3396:	93 e0       	ldi	r25, 0x03	; 3
    3398:	0e 94 fb 1a 	call	0x35f6	; 0x35f6 <_ZN7TwoWire4readEv>
    339c:	9c 01       	movw	r18, r24
    339e:	33 27       	eor	r19, r19
    33a0:	54 e0       	ldi	r21, 0x04	; 4
    33a2:	35 95       	asr	r19
    33a4:	27 95       	ror	r18
    33a6:	5a 95       	dec	r21
    33a8:	e1 f7       	brne	.-8      	; 0x33a2 <_ZN10RTC_DS32313nowEv+0xac>
    33aa:	d8 2e       	mov	r13, r24
    33ac:	12 9f       	mul	r17, r18
    33ae:	d0 0c       	add	r13, r0
    33b0:	11 24       	eor	r1, r1
    33b2:	8f e8       	ldi	r24, 0x8F	; 143
    33b4:	93 e0       	ldi	r25, 0x03	; 3
    33b6:	0e 94 fb 1a 	call	0x35f6	; 0x35f6 <_ZN7TwoWire4readEv>
    33ba:	9c 01       	movw	r18, r24
    33bc:	33 27       	eor	r19, r19
    33be:	64 e0       	ldi	r22, 0x04	; 4
    33c0:	35 95       	asr	r19
    33c2:	27 95       	ror	r18
    33c4:	6a 95       	dec	r22
    33c6:	e1 f7       	brne	.-8      	; 0x33c0 <_ZN10RTC_DS32313nowEv+0xca>
    33c8:	c8 2e       	mov	r12, r24
    33ca:	12 9f       	mul	r17, r18
    33cc:	c0 0c       	add	r12, r0
    33ce:	11 24       	eor	r1, r1
    33d0:	8f e8       	ldi	r24, 0x8F	; 143
    33d2:	93 e0       	ldi	r25, 0x03	; 3
    33d4:	0e 94 fb 1a 	call	0x35f6	; 0x35f6 <_ZN7TwoWire4readEv>
    33d8:	9c 01       	movw	r18, r24
    33da:	33 27       	eor	r19, r19
    33dc:	74 e0       	ldi	r23, 0x04	; 4
    33de:	35 95       	asr	r19
    33e0:	27 95       	ror	r18
    33e2:	7a 95       	dec	r23
    33e4:	e1 f7       	brne	.-8      	; 0x33de <_ZN10RTC_DS32313nowEv+0xe8>
    33e6:	12 9f       	mul	r17, r18
    33e8:	80 0d       	add	r24, r0
    33ea:	11 24       	eor	r1, r1
    33ec:	88 83       	st	Y, r24
    33ee:	c9 82       	std	Y+1, r12	; 0x01
    33f0:	da 82       	std	Y+2, r13	; 0x02
    33f2:	eb 82       	std	Y+3, r14	; 0x03
    33f4:	fc 82       	std	Y+4, r15	; 0x04
    33f6:	0d 83       	std	Y+5, r16	; 0x05
    33f8:	ce 01       	movw	r24, r28
    33fa:	df 91       	pop	r29
    33fc:	cf 91       	pop	r28
    33fe:	1f 91       	pop	r17
    3400:	0f 91       	pop	r16
    3402:	ff 90       	pop	r15
    3404:	ef 90       	pop	r14
    3406:	df 90       	pop	r13
    3408:	cf 90       	pop	r12
    340a:	08 95       	ret

0000340c <_ZL17read_i2c_registerhh.constprop.7>:
    340c:	cf 93       	push	r28
    340e:	c8 2f       	mov	r28, r24
    3410:	68 e6       	ldi	r22, 0x68	; 104
    3412:	8f e8       	ldi	r24, 0x8F	; 143
    3414:	93 e0       	ldi	r25, 0x03	; 3
    3416:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <_ZN7TwoWire17beginTransmissionEh>
    341a:	6c 2f       	mov	r22, r28
    341c:	8f e8       	ldi	r24, 0x8F	; 143
    341e:	93 e0       	ldi	r25, 0x03	; 3
    3420:	0e 94 82 1b 	call	0x3704	; 0x3704 <_ZN7TwoWire5writeEh>
    3424:	8f e8       	ldi	r24, 0x8F	; 143
    3426:	93 e0       	ldi	r25, 0x03	; 3
    3428:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <_ZN7TwoWire15endTransmissionEv>
    342c:	41 e0       	ldi	r20, 0x01	; 1
    342e:	68 e6       	ldi	r22, 0x68	; 104
    3430:	8f e8       	ldi	r24, 0x8F	; 143
    3432:	93 e0       	ldi	r25, 0x03	; 3
    3434:	0e 94 56 1c 	call	0x38ac	; 0x38ac <_ZN7TwoWire11requestFromEhh>
    3438:	8f e8       	ldi	r24, 0x8F	; 143
    343a:	93 e0       	ldi	r25, 0x03	; 3
    343c:	0e 94 fb 1a 	call	0x35f6	; 0x35f6 <_ZN7TwoWire4readEv>
    3440:	cf 91       	pop	r28
    3442:	08 95       	ret

00003444 <_ZN10RTC_DS32316adjustERK8DateTime>:

bool RTC_DS3231::lostPower(void) {
  return (read_i2c_register(DS3231_ADDRESS, DS3231_STATUSREG) >> 7);
}

void RTC_DS3231::adjust(const DateTime& dt) {
    3444:	0f 93       	push	r16
    3446:	1f 93       	push	r17
    3448:	cf 93       	push	r28
    344a:	8c 01       	movw	r16, r24
  Wire.beginTransmission(DS3231_ADDRESS);
    344c:	68 e6       	ldi	r22, 0x68	; 104
    344e:	70 e0       	ldi	r23, 0x00	; 0
    3450:	8f e8       	ldi	r24, 0x8F	; 143
    3452:	93 e0       	ldi	r25, 0x03	; 3
    3454:	0e 94 dd 1b 	call	0x37ba	; 0x37ba <_ZN7TwoWire17beginTransmissionEi>
  Wire._I2C_WRITE((byte)0); // start at location 0
    3458:	60 e0       	ldi	r22, 0x00	; 0
    345a:	8f e8       	ldi	r24, 0x8F	; 143
    345c:	93 e0       	ldi	r25, 0x03	; 3
    345e:	0e 94 82 1b 	call	0x3704	; 0x3704 <_ZN7TwoWire5writeEh>
    3462:	f8 01       	movw	r30, r16
    3464:	25 81       	ldd	r18, Z+5	; 0x05
  Wire._I2C_WRITE(bin2bcd(dt.second()));
    3466:	ca e0       	ldi	r28, 0x0A	; 10
    3468:	82 2f       	mov	r24, r18
    346a:	6c 2f       	mov	r22, r28
    346c:	0e 94 8f 1e 	call	0x3d1e	; 0x3d1e <__udivmodqi4>
    3470:	68 2f       	mov	r22, r24
    3472:	66 0f       	add	r22, r22
    3474:	86 0f       	add	r24, r22
    3476:	88 0f       	add	r24, r24
    3478:	68 2f       	mov	r22, r24
    347a:	62 0f       	add	r22, r18
    347c:	8f e8       	ldi	r24, 0x8F	; 143
    347e:	93 e0       	ldi	r25, 0x03	; 3
    3480:	0e 94 82 1b 	call	0x3704	; 0x3704 <_ZN7TwoWire5writeEh>
    3484:	f8 01       	movw	r30, r16
    3486:	24 81       	ldd	r18, Z+4	; 0x04
  Wire._I2C_WRITE(bin2bcd(dt.minute()));
    3488:	82 2f       	mov	r24, r18
    348a:	6c 2f       	mov	r22, r28
    348c:	0e 94 8f 1e 	call	0x3d1e	; 0x3d1e <__udivmodqi4>
    3490:	68 2f       	mov	r22, r24
    3492:	66 0f       	add	r22, r22
    3494:	86 0f       	add	r24, r22
    3496:	88 0f       	add	r24, r24
    3498:	68 2f       	mov	r22, r24
    349a:	62 0f       	add	r22, r18
    349c:	8f e8       	ldi	r24, 0x8F	; 143
    349e:	93 e0       	ldi	r25, 0x03	; 3
    34a0:	0e 94 82 1b 	call	0x3704	; 0x3704 <_ZN7TwoWire5writeEh>
    34a4:	f8 01       	movw	r30, r16
    34a6:	23 81       	ldd	r18, Z+3	; 0x03
  Wire._I2C_WRITE(bin2bcd(dt.hour()));
    34a8:	82 2f       	mov	r24, r18
    34aa:	6c 2f       	mov	r22, r28
    34ac:	0e 94 8f 1e 	call	0x3d1e	; 0x3d1e <__udivmodqi4>
    34b0:	68 2f       	mov	r22, r24
    34b2:	66 0f       	add	r22, r22
    34b4:	86 0f       	add	r24, r22
    34b6:	88 0f       	add	r24, r24
    34b8:	68 2f       	mov	r22, r24
    34ba:	62 0f       	add	r22, r18
    34bc:	8f e8       	ldi	r24, 0x8F	; 143
    34be:	93 e0       	ldi	r25, 0x03	; 3
    34c0:	0e 94 82 1b 	call	0x3704	; 0x3704 <_ZN7TwoWire5writeEh>
  Wire._I2C_WRITE(bin2bcd(0));
    34c4:	60 e0       	ldi	r22, 0x00	; 0
    34c6:	8f e8       	ldi	r24, 0x8F	; 143
    34c8:	93 e0       	ldi	r25, 0x03	; 3
    34ca:	0e 94 82 1b 	call	0x3704	; 0x3704 <_ZN7TwoWire5writeEh>
    34ce:	f8 01       	movw	r30, r16
    34d0:	22 81       	ldd	r18, Z+2	; 0x02
  Wire._I2C_WRITE(bin2bcd(dt.day()));
    34d2:	82 2f       	mov	r24, r18
    34d4:	6c 2f       	mov	r22, r28
    34d6:	0e 94 8f 1e 	call	0x3d1e	; 0x3d1e <__udivmodqi4>
    34da:	68 2f       	mov	r22, r24
    34dc:	66 0f       	add	r22, r22
    34de:	86 0f       	add	r24, r22
    34e0:	88 0f       	add	r24, r24
    34e2:	68 2f       	mov	r22, r24
    34e4:	62 0f       	add	r22, r18
    34e6:	8f e8       	ldi	r24, 0x8F	; 143
    34e8:	93 e0       	ldi	r25, 0x03	; 3
    34ea:	0e 94 82 1b 	call	0x3704	; 0x3704 <_ZN7TwoWire5writeEh>
    34ee:	f8 01       	movw	r30, r16
    34f0:	21 81       	ldd	r18, Z+1	; 0x01
  Wire._I2C_WRITE(bin2bcd(dt.month()));
    34f2:	82 2f       	mov	r24, r18
    34f4:	6c 2f       	mov	r22, r28
    34f6:	0e 94 8f 1e 	call	0x3d1e	; 0x3d1e <__udivmodqi4>
    34fa:	68 2f       	mov	r22, r24
    34fc:	66 0f       	add	r22, r22
    34fe:	86 0f       	add	r24, r22
    3500:	88 0f       	add	r24, r24
    3502:	68 2f       	mov	r22, r24
    3504:	62 0f       	add	r22, r18
    3506:	8f e8       	ldi	r24, 0x8F	; 143
    3508:	93 e0       	ldi	r25, 0x03	; 3
    350a:	0e 94 82 1b 	call	0x3704	; 0x3704 <_ZN7TwoWire5writeEh>
  Wire._I2C_WRITE(bin2bcd(dt.year() - 2000));
    350e:	f8 01       	movw	r30, r16
    3510:	20 81       	ld	r18, Z
    3512:	82 2f       	mov	r24, r18
    3514:	6c 2f       	mov	r22, r28
    3516:	0e 94 8f 1e 	call	0x3d1e	; 0x3d1e <__udivmodqi4>
    351a:	68 2f       	mov	r22, r24
    351c:	66 0f       	add	r22, r22
    351e:	86 0f       	add	r24, r22
    3520:	88 0f       	add	r24, r24
    3522:	68 2f       	mov	r22, r24
    3524:	62 0f       	add	r22, r18
    3526:	8f e8       	ldi	r24, 0x8F	; 143
    3528:	93 e0       	ldi	r25, 0x03	; 3
    352a:	0e 94 82 1b 	call	0x3704	; 0x3704 <_ZN7TwoWire5writeEh>
  Wire.endTransmission();
    352e:	8f e8       	ldi	r24, 0x8F	; 143
    3530:	93 e0       	ldi	r25, 0x03	; 3
    3532:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <_ZN7TwoWire15endTransmissionEv>

  uint8_t statreg = read_i2c_register(DS3231_ADDRESS, DS3231_STATUSREG);
    3536:	8f e0       	ldi	r24, 0x0F	; 15
    3538:	0e 94 06 1a 	call	0x340c	; 0x340c <_ZL17read_i2c_registerhh.constprop.7>
    353c:	c8 2f       	mov	r28, r24
  Wire.requestFrom(addr, (byte)1);
  return Wire._I2C_READ();
}

static void write_i2c_register(uint8_t addr, uint8_t reg, uint8_t val) {
  Wire.beginTransmission(addr);
    353e:	68 e6       	ldi	r22, 0x68	; 104
    3540:	8f e8       	ldi	r24, 0x8F	; 143
    3542:	93 e0       	ldi	r25, 0x03	; 3
    3544:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <_ZN7TwoWire17beginTransmissionEh>
  Wire._I2C_WRITE((byte)reg);
    3548:	6f e0       	ldi	r22, 0x0F	; 15
    354a:	8f e8       	ldi	r24, 0x8F	; 143
    354c:	93 e0       	ldi	r25, 0x03	; 3
    354e:	0e 94 82 1b 	call	0x3704	; 0x3704 <_ZN7TwoWire5writeEh>
  Wire._I2C_WRITE((byte)val);
    3552:	6c 2f       	mov	r22, r28
    3554:	6f 77       	andi	r22, 0x7F	; 127
    3556:	8f e8       	ldi	r24, 0x8F	; 143
    3558:	93 e0       	ldi	r25, 0x03	; 3
    355a:	0e 94 82 1b 	call	0x3704	; 0x3704 <_ZN7TwoWire5writeEh>
  Wire.endTransmission();
    355e:	8f e8       	ldi	r24, 0x8F	; 143
    3560:	93 e0       	ldi	r25, 0x03	; 3
  Wire.endTransmission();

  uint8_t statreg = read_i2c_register(DS3231_ADDRESS, DS3231_STATUSREG);
  statreg &= ~0x80; // flip OSF bit
  write_i2c_register(DS3231_ADDRESS, DS3231_STATUSREG, statreg);
}
    3562:	cf 91       	pop	r28
    3564:	1f 91       	pop	r17
    3566:	0f 91       	pop	r16

static void write_i2c_register(uint8_t addr, uint8_t reg, uint8_t val) {
  Wire.beginTransmission(addr);
  Wire._I2C_WRITE((byte)reg);
  Wire._I2C_WRITE((byte)val);
  Wire.endTransmission();
    3568:	0c 94 5c 1c 	jmp	0x38b8	; 0x38b8 <_ZN7TwoWire15endTransmissionEv>

0000356c <_ZN10RTC_DS32319lostPowerEv>:
  Wire.begin();
  return true;
}

bool RTC_DS3231::lostPower(void) {
  return (read_i2c_register(DS3231_ADDRESS, DS3231_STATUSREG) >> 7);
    356c:	8f e0       	ldi	r24, 0x0F	; 15
    356e:	0e 94 06 1a 	call	0x340c	; 0x340c <_ZL17read_i2c_registerhh.constprop.7>
    3572:	87 fb       	bst	r24, 7
    3574:	88 27       	eor	r24, r24
    3576:	80 f9       	bld	r24, 0
}
    3578:	08 95       	ret

0000357a <_ZN8SPIClass5beginEv>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    357a:	cf 93       	push	r28
  uint8_t sreg = SREG;
    357c:	cf b7       	in	r28, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    357e:	f8 94       	cli
  if (!initialized) {
    3580:	80 91 8e 03 	lds	r24, 0x038E	; 0x80038e <_ZN8SPIClass11initializedE>
    3584:	81 11       	cpse	r24, r1
    3586:	27 c0       	rjmp	.+78     	; 0x35d6 <_ZN8SPIClass5beginEv+0x5c>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    3588:	e1 ec       	ldi	r30, 0xC1	; 193
    358a:	f0 e0       	ldi	r31, 0x00	; 0
    358c:	84 91       	lpm	r24, Z
    uint8_t bit = digitalPinToBitMask(SS);
    358e:	ed ea       	ldi	r30, 0xAD	; 173
    3590:	f0 e0       	ldi	r31, 0x00	; 0
    3592:	94 91       	lpm	r25, Z
    volatile uint8_t *reg = portModeRegister(port);
    3594:	e8 2f       	mov	r30, r24
    3596:	f0 e0       	ldi	r31, 0x00	; 0
    3598:	ee 0f       	add	r30, r30
    359a:	ff 1f       	adc	r31, r31
    359c:	e1 52       	subi	r30, 0x21	; 33
    359e:	ff 4f       	sbci	r31, 0xFF	; 255
    35a0:	a5 91       	lpm	r26, Z+
    35a2:	b4 91       	lpm	r27, Z

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    35a4:	ec 91       	ld	r30, X
    35a6:	e9 23       	and	r30, r25
    35a8:	21 f4       	brne	.+8      	; 0x35b2 <_ZN8SPIClass5beginEv+0x38>
      digitalWrite(SS, HIGH);
    35aa:	61 e0       	ldi	r22, 0x01	; 1
    35ac:	8a e0       	ldi	r24, 0x0A	; 10
    35ae:	0e 94 cd 10 	call	0x219a	; 0x219a <digitalWrite>
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    35b2:	61 e0       	ldi	r22, 0x01	; 1
    35b4:	8a e0       	ldi	r24, 0x0A	; 10
    35b6:	0e 94 91 10 	call	0x2122	; 0x2122 <pinMode>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    35ba:	8c b5       	in	r24, 0x2c	; 44
    35bc:	80 61       	ori	r24, 0x10	; 16
    35be:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
    35c0:	8c b5       	in	r24, 0x2c	; 44
    35c2:	80 64       	ori	r24, 0x40	; 64
    35c4:	8c bd       	out	0x2c, r24	; 44
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    35c6:	61 e0       	ldi	r22, 0x01	; 1
    35c8:	8d e0       	ldi	r24, 0x0D	; 13
    35ca:	0e 94 91 10 	call	0x2122	; 0x2122 <pinMode>
    pinMode(MOSI, OUTPUT);
    35ce:	61 e0       	ldi	r22, 0x01	; 1
    35d0:	8b e0       	ldi	r24, 0x0B	; 11
    35d2:	0e 94 91 10 	call	0x2122	; 0x2122 <pinMode>
  }
  initialized++; // reference count
    35d6:	80 91 8e 03 	lds	r24, 0x038E	; 0x80038e <_ZN8SPIClass11initializedE>
    35da:	8f 5f       	subi	r24, 0xFF	; 255
    35dc:	80 93 8e 03 	sts	0x038E, r24	; 0x80038e <_ZN8SPIClass11initializedE>
  SREG = sreg;
    35e0:	cf bf       	out	0x3f, r28	; 63
}
    35e2:	cf 91       	pop	r28
    35e4:	08 95       	ret

000035e6 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    35e6:	80 91 c3 03 	lds	r24, 0x03C3	; 0x8003c3 <_ZN7TwoWire14rxBufferLengthE>
    35ea:	90 e0       	ldi	r25, 0x00	; 0
    35ec:	20 91 c4 03 	lds	r18, 0x03C4	; 0x8003c4 <_ZN7TwoWire13rxBufferIndexE>
    35f0:	82 1b       	sub	r24, r18
    35f2:	91 09       	sbc	r25, r1
    35f4:	08 95       	ret

000035f6 <_ZN7TwoWire4readEv>:
    35f6:	90 91 c4 03 	lds	r25, 0x03C4	; 0x8003c4 <_ZN7TwoWire13rxBufferIndexE>
    35fa:	80 91 c3 03 	lds	r24, 0x03C3	; 0x8003c3 <_ZN7TwoWire14rxBufferLengthE>
    35fe:	98 17       	cp	r25, r24
    3600:	50 f4       	brcc	.+20     	; 0x3616 <_ZN7TwoWire4readEv+0x20>
    3602:	e9 2f       	mov	r30, r25
    3604:	f0 e0       	ldi	r31, 0x00	; 0
    3606:	eb 53       	subi	r30, 0x3B	; 59
    3608:	fc 4f       	sbci	r31, 0xFC	; 252
    360a:	20 81       	ld	r18, Z
    360c:	30 e0       	ldi	r19, 0x00	; 0
    360e:	9f 5f       	subi	r25, 0xFF	; 255
    3610:	90 93 c4 03 	sts	0x03C4, r25	; 0x8003c4 <_ZN7TwoWire13rxBufferIndexE>
    3614:	02 c0       	rjmp	.+4      	; 0x361a <_ZN7TwoWire4readEv+0x24>
    3616:	2f ef       	ldi	r18, 0xFF	; 255
    3618:	3f ef       	ldi	r19, 0xFF	; 255
    361a:	c9 01       	movw	r24, r18
    361c:	08 95       	ret

0000361e <_ZN7TwoWire4peekEv>:
    361e:	e0 91 c4 03 	lds	r30, 0x03C4	; 0x8003c4 <_ZN7TwoWire13rxBufferIndexE>
    3622:	80 91 c3 03 	lds	r24, 0x03C3	; 0x8003c3 <_ZN7TwoWire14rxBufferLengthE>
    3626:	e8 17       	cp	r30, r24
    3628:	30 f4       	brcc	.+12     	; 0x3636 <_ZN7TwoWire4peekEv+0x18>
    362a:	f0 e0       	ldi	r31, 0x00	; 0
    362c:	eb 53       	subi	r30, 0x3B	; 59
    362e:	fc 4f       	sbci	r31, 0xFC	; 252
    3630:	80 81       	ld	r24, Z
    3632:	90 e0       	ldi	r25, 0x00	; 0
    3634:	08 95       	ret
    3636:	8f ef       	ldi	r24, 0xFF	; 255
    3638:	9f ef       	ldi	r25, 0xFF	; 255
    363a:	08 95       	ret

0000363c <_ZN7TwoWire5flushEv>:
    363c:	08 95       	ret

0000363e <_ZN7TwoWire16onReceiveServiceEPhi>:
    363e:	cf 93       	push	r28
    3640:	df 93       	push	r29
    3642:	ec 01       	movw	r28, r24
    3644:	e0 91 9b 03 	lds	r30, 0x039B	; 0x80039b <_ZN7TwoWire14user_onReceiveE>
    3648:	f0 91 9c 03 	lds	r31, 0x039C	; 0x80039c <_ZN7TwoWire14user_onReceiveE+0x1>
    364c:	30 97       	sbiw	r30, 0x00	; 0
    364e:	f1 f0       	breq	.+60     	; 0x368c <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    3650:	90 91 c4 03 	lds	r25, 0x03C4	; 0x8003c4 <_ZN7TwoWire13rxBufferIndexE>
    3654:	80 91 c3 03 	lds	r24, 0x03C3	; 0x8003c3 <_ZN7TwoWire14rxBufferLengthE>
    3658:	98 17       	cp	r25, r24
    365a:	c0 f0       	brcs	.+48     	; 0x368c <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    365c:	90 e0       	ldi	r25, 0x00	; 0
    365e:	29 2f       	mov	r18, r25
    3660:	30 e0       	ldi	r19, 0x00	; 0
    3662:	26 17       	cp	r18, r22
    3664:	37 07       	cpc	r19, r23
    3666:	54 f4       	brge	.+20     	; 0x367c <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    3668:	de 01       	movw	r26, r28
    366a:	a2 0f       	add	r26, r18
    366c:	b3 1f       	adc	r27, r19
    366e:	4c 91       	ld	r20, X
    3670:	d9 01       	movw	r26, r18
    3672:	ab 53       	subi	r26, 0x3B	; 59
    3674:	bc 4f       	sbci	r27, 0xFC	; 252
    3676:	4c 93       	st	X, r20
    3678:	9f 5f       	subi	r25, 0xFF	; 255
    367a:	f1 cf       	rjmp	.-30     	; 0x365e <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    367c:	10 92 c4 03 	sts	0x03C4, r1	; 0x8003c4 <_ZN7TwoWire13rxBufferIndexE>
    3680:	60 93 c3 03 	sts	0x03C3, r22	; 0x8003c3 <_ZN7TwoWire14rxBufferLengthE>
    3684:	cb 01       	movw	r24, r22
    3686:	df 91       	pop	r29
    3688:	cf 91       	pop	r28
    368a:	09 94       	ijmp
    368c:	df 91       	pop	r29
    368e:	cf 91       	pop	r28
    3690:	08 95       	ret

00003692 <_ZN7TwoWire16onRequestServiceEv>:
    3692:	e0 91 9d 03 	lds	r30, 0x039D	; 0x80039d <_ZN7TwoWire14user_onRequestE>
    3696:	f0 91 9e 03 	lds	r31, 0x039E	; 0x80039e <_ZN7TwoWire14user_onRequestE+0x1>
    369a:	30 97       	sbiw	r30, 0x00	; 0
    369c:	29 f0       	breq	.+10     	; 0x36a8 <_ZN7TwoWire16onRequestServiceEv+0x16>
    369e:	10 92 a1 03 	sts	0x03A1, r1	; 0x8003a1 <_ZN7TwoWire13txBufferIndexE>
    36a2:	10 92 a0 03 	sts	0x03A0, r1	; 0x8003a0 <_ZN7TwoWire14txBufferLengthE>
    36a6:	09 94       	ijmp
    36a8:	08 95       	ret

000036aa <_ZN7TwoWire5writeEPKhj>:
    36aa:	cf 92       	push	r12
    36ac:	df 92       	push	r13
    36ae:	ef 92       	push	r14
    36b0:	ff 92       	push	r15
    36b2:	0f 93       	push	r16
    36b4:	1f 93       	push	r17
    36b6:	cf 93       	push	r28
    36b8:	df 93       	push	r29
    36ba:	7c 01       	movw	r14, r24
    36bc:	cb 01       	movw	r24, r22
    36be:	8a 01       	movw	r16, r20
    36c0:	20 91 9f 03 	lds	r18, 0x039F	; 0x80039f <_ZN7TwoWire12transmittingE>
    36c4:	22 23       	and	r18, r18
    36c6:	89 f0       	breq	.+34     	; 0x36ea <_ZN7TwoWire5writeEPKhj+0x40>
    36c8:	eb 01       	movw	r28, r22
    36ca:	6b 01       	movw	r12, r22
    36cc:	c4 0e       	add	r12, r20
    36ce:	d5 1e       	adc	r13, r21
    36d0:	cc 15       	cp	r28, r12
    36d2:	dd 05       	cpc	r29, r13
    36d4:	69 f0       	breq	.+26     	; 0x36f0 <_ZN7TwoWire5writeEPKhj+0x46>
    36d6:	69 91       	ld	r22, Y+
    36d8:	d7 01       	movw	r26, r14
    36da:	ed 91       	ld	r30, X+
    36dc:	fc 91       	ld	r31, X
    36de:	01 90       	ld	r0, Z+
    36e0:	f0 81       	ld	r31, Z
    36e2:	e0 2d       	mov	r30, r0
    36e4:	c7 01       	movw	r24, r14
    36e6:	09 95       	icall
    36e8:	f3 cf       	rjmp	.-26     	; 0x36d0 <_ZN7TwoWire5writeEPKhj+0x26>
    36ea:	64 2f       	mov	r22, r20
    36ec:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <twi_transmit>
    36f0:	c8 01       	movw	r24, r16
    36f2:	df 91       	pop	r29
    36f4:	cf 91       	pop	r28
    36f6:	1f 91       	pop	r17
    36f8:	0f 91       	pop	r16
    36fa:	ff 90       	pop	r15
    36fc:	ef 90       	pop	r14
    36fe:	df 90       	pop	r13
    3700:	cf 90       	pop	r12
    3702:	08 95       	ret

00003704 <_ZN7TwoWire5writeEh>:
    3704:	cf 93       	push	r28
    3706:	df 93       	push	r29
    3708:	1f 92       	push	r1
    370a:	cd b7       	in	r28, 0x3d	; 61
    370c:	de b7       	in	r29, 0x3e	; 62
    370e:	69 83       	std	Y+1, r22	; 0x01
    3710:	20 91 9f 03 	lds	r18, 0x039F	; 0x80039f <_ZN7TwoWire12transmittingE>
    3714:	22 23       	and	r18, r18
    3716:	d1 f0       	breq	.+52     	; 0x374c <_ZN7TwoWire5writeEh+0x48>
    3718:	20 91 a0 03 	lds	r18, 0x03A0	; 0x8003a0 <_ZN7TwoWire14txBufferLengthE>
    371c:	20 32       	cpi	r18, 0x20	; 32
    371e:	40 f0       	brcs	.+16     	; 0x3730 <_ZN7TwoWire5writeEh+0x2c>
    3720:	21 e0       	ldi	r18, 0x01	; 1
    3722:	30 e0       	ldi	r19, 0x00	; 0
    3724:	fc 01       	movw	r30, r24
    3726:	33 83       	std	Z+3, r19	; 0x03
    3728:	22 83       	std	Z+2, r18	; 0x02
    372a:	80 e0       	ldi	r24, 0x00	; 0
    372c:	90 e0       	ldi	r25, 0x00	; 0
    372e:	15 c0       	rjmp	.+42     	; 0x375a <_ZN7TwoWire5writeEh+0x56>
    3730:	80 91 a1 03 	lds	r24, 0x03A1	; 0x8003a1 <_ZN7TwoWire13txBufferIndexE>
    3734:	e8 2f       	mov	r30, r24
    3736:	f0 e0       	ldi	r31, 0x00	; 0
    3738:	ee 55       	subi	r30, 0x5E	; 94
    373a:	fc 4f       	sbci	r31, 0xFC	; 252
    373c:	99 81       	ldd	r25, Y+1	; 0x01
    373e:	90 83       	st	Z, r25
    3740:	8f 5f       	subi	r24, 0xFF	; 255
    3742:	80 93 a1 03 	sts	0x03A1, r24	; 0x8003a1 <_ZN7TwoWire13txBufferIndexE>
    3746:	80 93 a0 03 	sts	0x03A0, r24	; 0x8003a0 <_ZN7TwoWire14txBufferLengthE>
    374a:	05 c0       	rjmp	.+10     	; 0x3756 <_ZN7TwoWire5writeEh+0x52>
    374c:	61 e0       	ldi	r22, 0x01	; 1
    374e:	ce 01       	movw	r24, r28
    3750:	01 96       	adiw	r24, 0x01	; 1
    3752:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <twi_transmit>
    3756:	81 e0       	ldi	r24, 0x01	; 1
    3758:	90 e0       	ldi	r25, 0x00	; 0
    375a:	0f 90       	pop	r0
    375c:	df 91       	pop	r29
    375e:	cf 91       	pop	r28
    3760:	08 95       	ret

00003762 <_ZN7TwoWireC1Ev>:
    3762:	fc 01       	movw	r30, r24
    3764:	13 82       	std	Z+3, r1	; 0x03
    3766:	12 82       	std	Z+2, r1	; 0x02
    3768:	88 ee       	ldi	r24, 0xE8	; 232
    376a:	93 e0       	ldi	r25, 0x03	; 3
    376c:	a0 e0       	ldi	r26, 0x00	; 0
    376e:	b0 e0       	ldi	r27, 0x00	; 0
    3770:	84 83       	std	Z+4, r24	; 0x04
    3772:	95 83       	std	Z+5, r25	; 0x05
    3774:	a6 83       	std	Z+6, r26	; 0x06
    3776:	b7 83       	std	Z+7, r27	; 0x07
    3778:	83 e8       	ldi	r24, 0x83	; 131
    377a:	92 e0       	ldi	r25, 0x02	; 2
    377c:	91 83       	std	Z+1, r25	; 0x01
    377e:	80 83       	st	Z, r24
    3780:	08 95       	ret

00003782 <_ZN7TwoWire5beginEv>:
    3782:	10 92 c4 03 	sts	0x03C4, r1	; 0x8003c4 <_ZN7TwoWire13rxBufferIndexE>
    3786:	10 92 c3 03 	sts	0x03C3, r1	; 0x8003c3 <_ZN7TwoWire14rxBufferLengthE>
    378a:	10 92 a1 03 	sts	0x03A1, r1	; 0x8003a1 <_ZN7TwoWire13txBufferIndexE>
    378e:	10 92 a0 03 	sts	0x03A0, r1	; 0x8003a0 <_ZN7TwoWire14txBufferLengthE>
    3792:	0e 94 64 1c 	call	0x38c8	; 0x38c8 <twi_init>
    3796:	89 e4       	ldi	r24, 0x49	; 73
    3798:	9b e1       	ldi	r25, 0x1B	; 27
    379a:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <twi_attachSlaveTxEvent>
    379e:	8f e1       	ldi	r24, 0x1F	; 31
    37a0:	9b e1       	ldi	r25, 0x1B	; 27
    37a2:	0c 94 48 1d 	jmp	0x3a90	; 0x3a90 <twi_attachSlaveRxEvent>

000037a6 <_ZN7TwoWire17beginTransmissionEh>:
    37a6:	81 e0       	ldi	r24, 0x01	; 1
    37a8:	80 93 9f 03 	sts	0x039F, r24	; 0x80039f <_ZN7TwoWire12transmittingE>
    37ac:	60 93 c2 03 	sts	0x03C2, r22	; 0x8003c2 <_ZN7TwoWire9txAddressE>
    37b0:	10 92 a1 03 	sts	0x03A1, r1	; 0x8003a1 <_ZN7TwoWire13txBufferIndexE>
    37b4:	10 92 a0 03 	sts	0x03A0, r1	; 0x8003a0 <_ZN7TwoWire14txBufferLengthE>
    37b8:	08 95       	ret

000037ba <_ZN7TwoWire17beginTransmissionEi>:
    37ba:	0c 94 d3 1b 	jmp	0x37a6	; 0x37a6 <_ZN7TwoWire17beginTransmissionEh>

000037be <_ZN7TwoWire15endTransmissionEh>:
    37be:	0f 93       	push	r16
    37c0:	06 2f       	mov	r16, r22
    37c2:	21 e0       	ldi	r18, 0x01	; 1
    37c4:	40 91 a0 03 	lds	r20, 0x03A0	; 0x8003a0 <_ZN7TwoWire14txBufferLengthE>
    37c8:	62 ea       	ldi	r22, 0xA2	; 162
    37ca:	73 e0       	ldi	r23, 0x03	; 3
    37cc:	80 91 c2 03 	lds	r24, 0x03C2	; 0x8003c2 <_ZN7TwoWire9txAddressE>
    37d0:	0e 94 ca 1c 	call	0x3994	; 0x3994 <twi_writeTo>
    37d4:	10 92 a1 03 	sts	0x03A1, r1	; 0x8003a1 <_ZN7TwoWire13txBufferIndexE>
    37d8:	10 92 a0 03 	sts	0x03A0, r1	; 0x8003a0 <_ZN7TwoWire14txBufferLengthE>
    37dc:	10 92 9f 03 	sts	0x039F, r1	; 0x80039f <_ZN7TwoWire12transmittingE>
    37e0:	0f 91       	pop	r16
    37e2:	08 95       	ret

000037e4 <_ZN7TwoWire11requestFromEhhmhh>:
    37e4:	4f 92       	push	r4
    37e6:	5f 92       	push	r5
    37e8:	6f 92       	push	r6
    37ea:	7f 92       	push	r7
    37ec:	af 92       	push	r10
    37ee:	bf 92       	push	r11
    37f0:	cf 92       	push	r12
    37f2:	ef 92       	push	r14
    37f4:	ff 92       	push	r15
    37f6:	0f 93       	push	r16
    37f8:	1f 93       	push	r17
    37fa:	cf 93       	push	r28
    37fc:	df 93       	push	r29
    37fe:	5c 01       	movw	r10, r24
    3800:	f6 2e       	mov	r15, r22
    3802:	d4 2f       	mov	r29, r20
    3804:	28 01       	movw	r4, r16
    3806:	39 01       	movw	r6, r18
    3808:	ee 20       	and	r14, r14
    380a:	21 f1       	breq	.+72     	; 0x3854 <_ZN7TwoWire11requestFromEhhmhh+0x70>
    380c:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <_ZN7TwoWire17beginTransmissionEh>
    3810:	ce 2d       	mov	r28, r14
    3812:	c4 30       	cpi	r28, 0x04	; 4
    3814:	08 f0       	brcs	.+2      	; 0x3818 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    3816:	c3 e0       	ldi	r28, 0x03	; 3
    3818:	c1 50       	subi	r28, 0x01	; 1
    381a:	c0 f0       	brcs	.+48     	; 0x384c <_ZN7TwoWire11requestFromEhhmhh+0x68>
    381c:	28 e0       	ldi	r18, 0x08	; 8
    381e:	c2 9f       	mul	r28, r18
    3820:	c0 01       	movw	r24, r0
    3822:	11 24       	eor	r1, r1
    3824:	a3 01       	movw	r20, r6
    3826:	92 01       	movw	r18, r4
    3828:	04 c0       	rjmp	.+8      	; 0x3832 <_ZN7TwoWire11requestFromEhhmhh+0x4e>
    382a:	56 95       	lsr	r21
    382c:	47 95       	ror	r20
    382e:	37 95       	ror	r19
    3830:	27 95       	ror	r18
    3832:	8a 95       	dec	r24
    3834:	d2 f7       	brpl	.-12     	; 0x382a <_ZN7TwoWire11requestFromEhhmhh+0x46>
    3836:	ca 01       	movw	r24, r20
    3838:	b9 01       	movw	r22, r18
    383a:	d5 01       	movw	r26, r10
    383c:	ed 91       	ld	r30, X+
    383e:	fc 91       	ld	r31, X
    3840:	01 90       	ld	r0, Z+
    3842:	f0 81       	ld	r31, Z
    3844:	e0 2d       	mov	r30, r0
    3846:	c5 01       	movw	r24, r10
    3848:	09 95       	icall
    384a:	e6 cf       	rjmp	.-52     	; 0x3818 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    384c:	60 e0       	ldi	r22, 0x00	; 0
    384e:	c5 01       	movw	r24, r10
    3850:	0e 94 df 1b 	call	0x37be	; 0x37be <_ZN7TwoWire15endTransmissionEh>
    3854:	4d 2f       	mov	r20, r29
    3856:	d1 32       	cpi	r29, 0x21	; 33
    3858:	08 f0       	brcs	.+2      	; 0x385c <_ZN7TwoWire11requestFromEhhmhh+0x78>
    385a:	40 e2       	ldi	r20, 0x20	; 32
    385c:	2c 2d       	mov	r18, r12
    385e:	65 ec       	ldi	r22, 0xC5	; 197
    3860:	73 e0       	ldi	r23, 0x03	; 3
    3862:	8f 2d       	mov	r24, r15
    3864:	0e 94 82 1c 	call	0x3904	; 0x3904 <twi_readFrom>
    3868:	10 92 c4 03 	sts	0x03C4, r1	; 0x8003c4 <_ZN7TwoWire13rxBufferIndexE>
    386c:	80 93 c3 03 	sts	0x03C3, r24	; 0x8003c3 <_ZN7TwoWire14rxBufferLengthE>
    3870:	df 91       	pop	r29
    3872:	cf 91       	pop	r28
    3874:	1f 91       	pop	r17
    3876:	0f 91       	pop	r16
    3878:	ff 90       	pop	r15
    387a:	ef 90       	pop	r14
    387c:	cf 90       	pop	r12
    387e:	bf 90       	pop	r11
    3880:	af 90       	pop	r10
    3882:	7f 90       	pop	r7
    3884:	6f 90       	pop	r6
    3886:	5f 90       	pop	r5
    3888:	4f 90       	pop	r4
    388a:	08 95       	ret

0000388c <_ZN7TwoWire11requestFromEhhh>:
    388c:	cf 92       	push	r12
    388e:	ef 92       	push	r14
    3890:	0f 93       	push	r16
    3892:	1f 93       	push	r17
    3894:	c2 2e       	mov	r12, r18
    3896:	e1 2c       	mov	r14, r1
    3898:	00 e0       	ldi	r16, 0x00	; 0
    389a:	10 e0       	ldi	r17, 0x00	; 0
    389c:	98 01       	movw	r18, r16
    389e:	0e 94 f2 1b 	call	0x37e4	; 0x37e4 <_ZN7TwoWire11requestFromEhhmhh>
    38a2:	1f 91       	pop	r17
    38a4:	0f 91       	pop	r16
    38a6:	ef 90       	pop	r14
    38a8:	cf 90       	pop	r12
    38aa:	08 95       	ret

000038ac <_ZN7TwoWire11requestFromEhh>:
    38ac:	21 e0       	ldi	r18, 0x01	; 1
    38ae:	0c 94 46 1c 	jmp	0x388c	; 0x388c <_ZN7TwoWire11requestFromEhhh>

000038b2 <_ZN7TwoWire11requestFromEii>:
    38b2:	21 e0       	ldi	r18, 0x01	; 1
    38b4:	0c 94 46 1c 	jmp	0x388c	; 0x388c <_ZN7TwoWire11requestFromEhhh>

000038b8 <_ZN7TwoWire15endTransmissionEv>:
    38b8:	61 e0       	ldi	r22, 0x01	; 1
    38ba:	0c 94 df 1b 	jmp	0x37be	; 0x37be <_ZN7TwoWire15endTransmissionEh>

000038be <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    38be:	8f e8       	ldi	r24, 0x8F	; 143
    38c0:	93 e0       	ldi	r25, 0x03	; 3
    38c2:	0c 94 b1 1b 	jmp	0x3762	; 0x3762 <_ZN7TwoWireC1Ev>

000038c6 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    38c6:	08 95       	ret

000038c8 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    38c8:	10 92 52 04 	sts	0x0452, r1	; 0x800452 <twi_state>
    38cc:	81 e0       	ldi	r24, 0x01	; 1
    38ce:	80 93 50 04 	sts	0x0450, r24	; 0x800450 <twi_sendStop>
    38d2:	10 92 4f 04 	sts	0x044F, r1	; 0x80044f <twi_inRepStart>
    38d6:	61 e0       	ldi	r22, 0x01	; 1
    38d8:	82 e1       	ldi	r24, 0x12	; 18
    38da:	0e 94 cd 10 	call	0x219a	; 0x219a <digitalWrite>
    38de:	61 e0       	ldi	r22, 0x01	; 1
    38e0:	83 e1       	ldi	r24, 0x13	; 19
    38e2:	0e 94 cd 10 	call	0x219a	; 0x219a <digitalWrite>
    38e6:	e9 eb       	ldi	r30, 0xB9	; 185
    38e8:	f0 e0       	ldi	r31, 0x00	; 0
    38ea:	80 81       	ld	r24, Z
    38ec:	8e 7f       	andi	r24, 0xFE	; 254
    38ee:	80 83       	st	Z, r24
    38f0:	80 81       	ld	r24, Z
    38f2:	8d 7f       	andi	r24, 0xFD	; 253
    38f4:	80 83       	st	Z, r24
    38f6:	88 e4       	ldi	r24, 0x48	; 72
    38f8:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    38fc:	85 e4       	ldi	r24, 0x45	; 69
    38fe:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    3902:	08 95       	ret

00003904 <twi_readFrom>:
    3904:	41 32       	cpi	r20, 0x21	; 33
    3906:	08 f0       	brcs	.+2      	; 0x390a <twi_readFrom+0x6>
    3908:	43 c0       	rjmp	.+134    	; 0x3990 <twi_readFrom+0x8c>
    390a:	90 91 52 04 	lds	r25, 0x0452	; 0x800452 <twi_state>
    390e:	91 11       	cpse	r25, r1
    3910:	fc cf       	rjmp	.-8      	; 0x390a <twi_readFrom+0x6>
    3912:	91 e0       	ldi	r25, 0x01	; 1
    3914:	90 93 52 04 	sts	0x0452, r25	; 0x800452 <twi_state>
    3918:	20 93 50 04 	sts	0x0450, r18	; 0x800450 <twi_sendStop>
    391c:	2f ef       	ldi	r18, 0xFF	; 255
    391e:	20 93 e5 03 	sts	0x03E5, r18	; 0x8003e5 <twi_error>
    3922:	10 92 2a 04 	sts	0x042A, r1	; 0x80042a <twi_masterBufferIndex>
    3926:	24 0f       	add	r18, r20
    3928:	20 93 29 04 	sts	0x0429, r18	; 0x800429 <twi_masterBufferLength>
    392c:	90 93 51 04 	sts	0x0451, r25	; 0x800451 <twi_slarw>
    3930:	90 91 51 04 	lds	r25, 0x0451	; 0x800451 <twi_slarw>
    3934:	88 0f       	add	r24, r24
    3936:	89 2b       	or	r24, r25
    3938:	80 93 51 04 	sts	0x0451, r24	; 0x800451 <twi_slarw>
    393c:	80 91 4f 04 	lds	r24, 0x044F	; 0x80044f <twi_inRepStart>
    3940:	81 30       	cpi	r24, 0x01	; 1
    3942:	61 f4       	brne	.+24     	; 0x395c <twi_readFrom+0x58>
    3944:	10 92 4f 04 	sts	0x044F, r1	; 0x80044f <twi_inRepStart>
    3948:	80 91 51 04 	lds	r24, 0x0451	; 0x800451 <twi_slarw>
    394c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    3950:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    3954:	83 fd       	sbrc	r24, 3
    3956:	f8 cf       	rjmp	.-16     	; 0x3948 <twi_readFrom+0x44>
    3958:	85 ec       	ldi	r24, 0xC5	; 197
    395a:	01 c0       	rjmp	.+2      	; 0x395e <twi_readFrom+0x5a>
    395c:	85 ee       	ldi	r24, 0xE5	; 229
    395e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    3962:	80 91 52 04 	lds	r24, 0x0452	; 0x800452 <twi_state>
    3966:	81 30       	cpi	r24, 0x01	; 1
    3968:	e1 f3       	breq	.-8      	; 0x3962 <twi_readFrom+0x5e>
    396a:	80 91 2a 04 	lds	r24, 0x042A	; 0x80042a <twi_masterBufferIndex>
    396e:	84 17       	cp	r24, r20
    3970:	10 f4       	brcc	.+4      	; 0x3976 <twi_readFrom+0x72>
    3972:	40 91 2a 04 	lds	r20, 0x042A	; 0x80042a <twi_masterBufferIndex>
    3976:	ab e2       	ldi	r26, 0x2B	; 43
    3978:	b4 e0       	ldi	r27, 0x04	; 4
    397a:	96 2f       	mov	r25, r22
    397c:	fb 01       	movw	r30, r22
    397e:	8e 2f       	mov	r24, r30
    3980:	89 1b       	sub	r24, r25
    3982:	84 17       	cp	r24, r20
    3984:	18 f4       	brcc	.+6      	; 0x398c <twi_readFrom+0x88>
    3986:	8d 91       	ld	r24, X+
    3988:	81 93       	st	Z+, r24
    398a:	f9 cf       	rjmp	.-14     	; 0x397e <twi_readFrom+0x7a>
    398c:	84 2f       	mov	r24, r20
    398e:	08 95       	ret
    3990:	80 e0       	ldi	r24, 0x00	; 0
    3992:	08 95       	ret

00003994 <twi_writeTo>:
    3994:	0f 93       	push	r16
    3996:	41 32       	cpi	r20, 0x21	; 33
    3998:	08 f0       	brcs	.+2      	; 0x399c <twi_writeTo+0x8>
    399a:	4a c0       	rjmp	.+148    	; 0x3a30 <twi_writeTo+0x9c>
    399c:	90 91 52 04 	lds	r25, 0x0452	; 0x800452 <twi_state>
    39a0:	91 11       	cpse	r25, r1
    39a2:	fc cf       	rjmp	.-8      	; 0x399c <twi_writeTo+0x8>
    39a4:	32 e0       	ldi	r19, 0x02	; 2
    39a6:	30 93 52 04 	sts	0x0452, r19	; 0x800452 <twi_state>
    39aa:	00 93 50 04 	sts	0x0450, r16	; 0x800450 <twi_sendStop>
    39ae:	3f ef       	ldi	r19, 0xFF	; 255
    39b0:	30 93 e5 03 	sts	0x03E5, r19	; 0x8003e5 <twi_error>
    39b4:	10 92 2a 04 	sts	0x042A, r1	; 0x80042a <twi_masterBufferIndex>
    39b8:	40 93 29 04 	sts	0x0429, r20	; 0x800429 <twi_masterBufferLength>
    39bc:	56 2f       	mov	r21, r22
    39be:	ab e2       	ldi	r26, 0x2B	; 43
    39c0:	b4 e0       	ldi	r27, 0x04	; 4
    39c2:	fb 01       	movw	r30, r22
    39c4:	3e 2f       	mov	r19, r30
    39c6:	35 1b       	sub	r19, r21
    39c8:	34 17       	cp	r19, r20
    39ca:	18 f4       	brcc	.+6      	; 0x39d2 <twi_writeTo+0x3e>
    39cc:	31 91       	ld	r19, Z+
    39ce:	3d 93       	st	X+, r19
    39d0:	f9 cf       	rjmp	.-14     	; 0x39c4 <twi_writeTo+0x30>
    39d2:	10 92 51 04 	sts	0x0451, r1	; 0x800451 <twi_slarw>
    39d6:	30 91 51 04 	lds	r19, 0x0451	; 0x800451 <twi_slarw>
    39da:	88 0f       	add	r24, r24
    39dc:	83 2b       	or	r24, r19
    39de:	80 93 51 04 	sts	0x0451, r24	; 0x800451 <twi_slarw>
    39e2:	80 91 4f 04 	lds	r24, 0x044F	; 0x80044f <twi_inRepStart>
    39e6:	81 30       	cpi	r24, 0x01	; 1
    39e8:	61 f4       	brne	.+24     	; 0x3a02 <twi_writeTo+0x6e>
    39ea:	10 92 4f 04 	sts	0x044F, r1	; 0x80044f <twi_inRepStart>
    39ee:	80 91 51 04 	lds	r24, 0x0451	; 0x800451 <twi_slarw>
    39f2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    39f6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    39fa:	83 fd       	sbrc	r24, 3
    39fc:	f8 cf       	rjmp	.-16     	; 0x39ee <twi_writeTo+0x5a>
    39fe:	85 ec       	ldi	r24, 0xC5	; 197
    3a00:	01 c0       	rjmp	.+2      	; 0x3a04 <twi_writeTo+0x70>
    3a02:	85 ee       	ldi	r24, 0xE5	; 229
    3a04:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    3a08:	22 23       	and	r18, r18
    3a0a:	21 f0       	breq	.+8      	; 0x3a14 <twi_writeTo+0x80>
    3a0c:	80 91 52 04 	lds	r24, 0x0452	; 0x800452 <twi_state>
    3a10:	82 30       	cpi	r24, 0x02	; 2
    3a12:	d1 f3       	breq	.-12     	; 0x3a08 <twi_writeTo+0x74>
    3a14:	80 91 e5 03 	lds	r24, 0x03E5	; 0x8003e5 <twi_error>
    3a18:	8f 3f       	cpi	r24, 0xFF	; 255
    3a1a:	79 f0       	breq	.+30     	; 0x3a3a <twi_writeTo+0xa6>
    3a1c:	80 91 e5 03 	lds	r24, 0x03E5	; 0x8003e5 <twi_error>
    3a20:	80 32       	cpi	r24, 0x20	; 32
    3a22:	41 f0       	breq	.+16     	; 0x3a34 <twi_writeTo+0xa0>
    3a24:	80 91 e5 03 	lds	r24, 0x03E5	; 0x8003e5 <twi_error>
    3a28:	80 33       	cpi	r24, 0x30	; 48
    3a2a:	31 f0       	breq	.+12     	; 0x3a38 <twi_writeTo+0xa4>
    3a2c:	94 e0       	ldi	r25, 0x04	; 4
    3a2e:	05 c0       	rjmp	.+10     	; 0x3a3a <twi_writeTo+0xa6>
    3a30:	91 e0       	ldi	r25, 0x01	; 1
    3a32:	03 c0       	rjmp	.+6      	; 0x3a3a <twi_writeTo+0xa6>
    3a34:	92 e0       	ldi	r25, 0x02	; 2
    3a36:	01 c0       	rjmp	.+2      	; 0x3a3a <twi_writeTo+0xa6>
    3a38:	93 e0       	ldi	r25, 0x03	; 3
    3a3a:	89 2f       	mov	r24, r25
    3a3c:	0f 91       	pop	r16
    3a3e:	08 95       	ret

00003a40 <twi_transmit>:
    3a40:	40 91 07 04 	lds	r20, 0x0407	; 0x800407 <twi_txBufferLength>
    3a44:	26 2f       	mov	r18, r22
    3a46:	30 e0       	ldi	r19, 0x00	; 0
    3a48:	24 0f       	add	r18, r20
    3a4a:	31 1d       	adc	r19, r1
    3a4c:	21 32       	cpi	r18, 0x21	; 33
    3a4e:	31 05       	cpc	r19, r1
    3a50:	dc f4       	brge	.+54     	; 0x3a88 <twi_transmit+0x48>
    3a52:	20 91 52 04 	lds	r18, 0x0452	; 0x800452 <twi_state>
    3a56:	24 30       	cpi	r18, 0x04	; 4
    3a58:	c9 f4       	brne	.+50     	; 0x3a8c <twi_transmit+0x4c>
    3a5a:	fc 01       	movw	r30, r24
    3a5c:	80 e0       	ldi	r24, 0x00	; 0
    3a5e:	90 e0       	ldi	r25, 0x00	; 0
    3a60:	86 17       	cp	r24, r22
    3a62:	58 f4       	brcc	.+22     	; 0x3a7a <twi_transmit+0x3a>
    3a64:	30 91 07 04 	lds	r19, 0x0407	; 0x800407 <twi_txBufferLength>
    3a68:	21 91       	ld	r18, Z+
    3a6a:	dc 01       	movw	r26, r24
    3a6c:	a7 5f       	subi	r26, 0xF7	; 247
    3a6e:	bb 4f       	sbci	r27, 0xFB	; 251
    3a70:	a3 0f       	add	r26, r19
    3a72:	b1 1d       	adc	r27, r1
    3a74:	2c 93       	st	X, r18
    3a76:	01 96       	adiw	r24, 0x01	; 1
    3a78:	f3 cf       	rjmp	.-26     	; 0x3a60 <twi_transmit+0x20>
    3a7a:	80 91 07 04 	lds	r24, 0x0407	; 0x800407 <twi_txBufferLength>
    3a7e:	68 0f       	add	r22, r24
    3a80:	60 93 07 04 	sts	0x0407, r22	; 0x800407 <twi_txBufferLength>
    3a84:	80 e0       	ldi	r24, 0x00	; 0
    3a86:	08 95       	ret
    3a88:	81 e0       	ldi	r24, 0x01	; 1
    3a8a:	08 95       	ret
    3a8c:	82 e0       	ldi	r24, 0x02	; 2
    3a8e:	08 95       	ret

00003a90 <twi_attachSlaveRxEvent>:
    3a90:	90 93 4c 04 	sts	0x044C, r25	; 0x80044c <twi_onSlaveReceive+0x1>
    3a94:	80 93 4b 04 	sts	0x044B, r24	; 0x80044b <twi_onSlaveReceive>
    3a98:	08 95       	ret

00003a9a <twi_attachSlaveTxEvent>:
    3a9a:	90 93 4e 04 	sts	0x044E, r25	; 0x80044e <twi_onSlaveTransmit+0x1>
    3a9e:	80 93 4d 04 	sts	0x044D, r24	; 0x80044d <twi_onSlaveTransmit>
    3aa2:	08 95       	ret

00003aa4 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    3aa4:	85 ed       	ldi	r24, 0xD5	; 213
    3aa6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    3aaa:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    3aae:	84 fd       	sbrc	r24, 4
    3ab0:	fc cf       	rjmp	.-8      	; 0x3aaa <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    3ab2:	10 92 52 04 	sts	0x0452, r1	; 0x800452 <twi_state>
    3ab6:	08 95       	ret

00003ab8 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    3ab8:	85 ec       	ldi	r24, 0xC5	; 197
    3aba:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // update twi state
  twi_state = TWI_READY;
    3abe:	10 92 52 04 	sts	0x0452, r1	; 0x800452 <twi_state>
    3ac2:	08 95       	ret

00003ac4 <__vector_24>:
}

ISR(TWI_vect)
{
    3ac4:	1f 92       	push	r1
    3ac6:	0f 92       	push	r0
    3ac8:	0f b6       	in	r0, 0x3f	; 63
    3aca:	0f 92       	push	r0
    3acc:	11 24       	eor	r1, r1
    3ace:	2f 93       	push	r18
    3ad0:	3f 93       	push	r19
    3ad2:	4f 93       	push	r20
    3ad4:	5f 93       	push	r21
    3ad6:	6f 93       	push	r22
    3ad8:	7f 93       	push	r23
    3ada:	8f 93       	push	r24
    3adc:	9f 93       	push	r25
    3ade:	af 93       	push	r26
    3ae0:	bf 93       	push	r27
    3ae2:	ef 93       	push	r30
    3ae4:	ff 93       	push	r31
  switch(TW_STATUS){
    3ae6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    3aea:	88 7f       	andi	r24, 0xF8	; 248
    3aec:	80 36       	cpi	r24, 0x60	; 96
    3aee:	09 f4       	brne	.+2      	; 0x3af2 <__vector_24+0x2e>
    3af0:	9e c0       	rjmp	.+316    	; 0x3c2e <__vector_24+0x16a>
    3af2:	78 f5       	brcc	.+94     	; 0x3b52 <__vector_24+0x8e>
    3af4:	88 32       	cpi	r24, 0x28	; 40
    3af6:	09 f4       	brne	.+2      	; 0x3afa <__vector_24+0x36>
    3af8:	5d c0       	rjmp	.+186    	; 0x3bb4 <__vector_24+0xf0>
    3afa:	90 f4       	brcc	.+36     	; 0x3b20 <__vector_24+0x5c>
    3afc:	80 31       	cpi	r24, 0x10	; 16
    3afe:	09 f4       	brne	.+2      	; 0x3b02 <__vector_24+0x3e>
    3b00:	56 c0       	rjmp	.+172    	; 0x3bae <__vector_24+0xea>
    3b02:	38 f4       	brcc	.+14     	; 0x3b12 <__vector_24+0x4e>
    3b04:	88 23       	and	r24, r24
    3b06:	09 f4       	brne	.+2      	; 0x3b0a <__vector_24+0x46>
    3b08:	f5 c0       	rjmp	.+490    	; 0x3cf4 <__vector_24+0x230>
    3b0a:	88 30       	cpi	r24, 0x08	; 8
    3b0c:	09 f4       	brne	.+2      	; 0x3b10 <__vector_24+0x4c>
    3b0e:	4f c0       	rjmp	.+158    	; 0x3bae <__vector_24+0xea>
    3b10:	f5 c0       	rjmp	.+490    	; 0x3cfc <__vector_24+0x238>
    3b12:	88 31       	cpi	r24, 0x18	; 24
    3b14:	09 f4       	brne	.+2      	; 0x3b18 <__vector_24+0x54>
    3b16:	4e c0       	rjmp	.+156    	; 0x3bb4 <__vector_24+0xf0>
    3b18:	80 32       	cpi	r24, 0x20	; 32
    3b1a:	09 f4       	brne	.+2      	; 0x3b1e <__vector_24+0x5a>
    3b1c:	5f c0       	rjmp	.+190    	; 0x3bdc <__vector_24+0x118>
    3b1e:	ee c0       	rjmp	.+476    	; 0x3cfc <__vector_24+0x238>
    3b20:	80 34       	cpi	r24, 0x40	; 64
    3b22:	09 f4       	brne	.+2      	; 0x3b26 <__vector_24+0x62>
    3b24:	6a c0       	rjmp	.+212    	; 0x3bfa <__vector_24+0x136>
    3b26:	58 f4       	brcc	.+22     	; 0x3b3e <__vector_24+0x7a>
    3b28:	80 33       	cpi	r24, 0x30	; 48
    3b2a:	09 f4       	brne	.+2      	; 0x3b2e <__vector_24+0x6a>
    3b2c:	57 c0       	rjmp	.+174    	; 0x3bdc <__vector_24+0x118>
    3b2e:	88 33       	cpi	r24, 0x38	; 56
    3b30:	09 f0       	breq	.+2      	; 0x3b34 <__vector_24+0x70>
    3b32:	e4 c0       	rjmp	.+456    	; 0x3cfc <__vector_24+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    3b34:	80 93 e5 03 	sts	0x03E5, r24	; 0x8003e5 <twi_error>
      twi_releaseBus();
    3b38:	0e 94 5c 1d 	call	0x3ab8	; 0x3ab8 <twi_releaseBus>
      break;
    3b3c:	df c0       	rjmp	.+446    	; 0x3cfc <__vector_24+0x238>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    3b3e:	80 35       	cpi	r24, 0x50	; 80
    3b40:	09 f4       	brne	.+2      	; 0x3b44 <__vector_24+0x80>
    3b42:	4f c0       	rjmp	.+158    	; 0x3be2 <__vector_24+0x11e>
    3b44:	88 35       	cpi	r24, 0x58	; 88
    3b46:	09 f4       	brne	.+2      	; 0x3b4a <__vector_24+0x86>
    3b48:	5d c0       	rjmp	.+186    	; 0x3c04 <__vector_24+0x140>
    3b4a:	88 34       	cpi	r24, 0x48	; 72
    3b4c:	09 f0       	breq	.+2      	; 0x3b50 <__vector_24+0x8c>
    3b4e:	d6 c0       	rjmp	.+428    	; 0x3cfc <__vector_24+0x238>
    3b50:	d3 c0       	rjmp	.+422    	; 0x3cf8 <__vector_24+0x234>
    3b52:	88 39       	cpi	r24, 0x98	; 152
    3b54:	09 f4       	brne	.+2      	; 0x3b58 <__vector_24+0x94>
    3b56:	c4 c0       	rjmp	.+392    	; 0x3ce0 <__vector_24+0x21c>
    3b58:	a8 f4       	brcc	.+42     	; 0x3b84 <__vector_24+0xc0>
    3b5a:	88 37       	cpi	r24, 0x78	; 120
    3b5c:	09 f4       	brne	.+2      	; 0x3b60 <__vector_24+0x9c>
    3b5e:	67 c0       	rjmp	.+206    	; 0x3c2e <__vector_24+0x16a>
    3b60:	38 f4       	brcc	.+14     	; 0x3b70 <__vector_24+0xac>
    3b62:	88 36       	cpi	r24, 0x68	; 104
    3b64:	09 f4       	brne	.+2      	; 0x3b68 <__vector_24+0xa4>
    3b66:	63 c0       	rjmp	.+198    	; 0x3c2e <__vector_24+0x16a>
    3b68:	80 37       	cpi	r24, 0x70	; 112
    3b6a:	09 f4       	brne	.+2      	; 0x3b6e <__vector_24+0xaa>
    3b6c:	60 c0       	rjmp	.+192    	; 0x3c2e <__vector_24+0x16a>
    3b6e:	c6 c0       	rjmp	.+396    	; 0x3cfc <__vector_24+0x238>
    3b70:	88 38       	cpi	r24, 0x88	; 136
    3b72:	09 f4       	brne	.+2      	; 0x3b76 <__vector_24+0xb2>
    3b74:	b5 c0       	rjmp	.+362    	; 0x3ce0 <__vector_24+0x21c>
    3b76:	80 39       	cpi	r24, 0x90	; 144
    3b78:	09 f4       	brne	.+2      	; 0x3b7c <__vector_24+0xb8>
    3b7a:	5f c0       	rjmp	.+190    	; 0x3c3a <__vector_24+0x176>
    3b7c:	80 38       	cpi	r24, 0x80	; 128
    3b7e:	09 f0       	breq	.+2      	; 0x3b82 <__vector_24+0xbe>
    3b80:	bd c0       	rjmp	.+378    	; 0x3cfc <__vector_24+0x238>
    3b82:	5b c0       	rjmp	.+182    	; 0x3c3a <__vector_24+0x176>
    3b84:	80 3b       	cpi	r24, 0xB0	; 176
    3b86:	09 f4       	brne	.+2      	; 0x3b8a <__vector_24+0xc6>
    3b88:	83 c0       	rjmp	.+262    	; 0x3c90 <__vector_24+0x1cc>
    3b8a:	38 f4       	brcc	.+14     	; 0x3b9a <__vector_24+0xd6>
    3b8c:	80 3a       	cpi	r24, 0xA0	; 160
    3b8e:	09 f4       	brne	.+2      	; 0x3b92 <__vector_24+0xce>
    3b90:	66 c0       	rjmp	.+204    	; 0x3c5e <__vector_24+0x19a>
    3b92:	88 3a       	cpi	r24, 0xA8	; 168
    3b94:	09 f4       	brne	.+2      	; 0x3b98 <__vector_24+0xd4>
    3b96:	7c c0       	rjmp	.+248    	; 0x3c90 <__vector_24+0x1cc>
    3b98:	b1 c0       	rjmp	.+354    	; 0x3cfc <__vector_24+0x238>
    3b9a:	80 3c       	cpi	r24, 0xC0	; 192
    3b9c:	09 f4       	brne	.+2      	; 0x3ba0 <__vector_24+0xdc>
    3b9e:	a4 c0       	rjmp	.+328    	; 0x3ce8 <__vector_24+0x224>
    3ba0:	88 3c       	cpi	r24, 0xC8	; 200
    3ba2:	09 f4       	brne	.+2      	; 0x3ba6 <__vector_24+0xe2>
    3ba4:	a1 c0       	rjmp	.+322    	; 0x3ce8 <__vector_24+0x224>
    3ba6:	88 3b       	cpi	r24, 0xB8	; 184
    3ba8:	09 f4       	brne	.+2      	; 0x3bac <__vector_24+0xe8>
    3baa:	87 c0       	rjmp	.+270    	; 0x3cba <__vector_24+0x1f6>
    3bac:	a7 c0       	rjmp	.+334    	; 0x3cfc <__vector_24+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    3bae:	80 91 51 04 	lds	r24, 0x0451	; 0x800451 <twi_slarw>
    3bb2:	10 c0       	rjmp	.+32     	; 0x3bd4 <__vector_24+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    3bb4:	90 91 2a 04 	lds	r25, 0x042A	; 0x80042a <twi_masterBufferIndex>
    3bb8:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <twi_masterBufferLength>
    3bbc:	98 17       	cp	r25, r24
    3bbe:	70 f5       	brcc	.+92     	; 0x3c1c <__vector_24+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    3bc0:	e0 91 2a 04 	lds	r30, 0x042A	; 0x80042a <twi_masterBufferIndex>
    3bc4:	81 e0       	ldi	r24, 0x01	; 1
    3bc6:	8e 0f       	add	r24, r30
    3bc8:	80 93 2a 04 	sts	0x042A, r24	; 0x80042a <twi_masterBufferIndex>
    3bcc:	f0 e0       	ldi	r31, 0x00	; 0
    3bce:	e5 5d       	subi	r30, 0xD5	; 213
    3bd0:	fb 4f       	sbci	r31, 0xFB	; 251
    3bd2:	80 81       	ld	r24, Z
    3bd4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    3bd8:	85 ec       	ldi	r24, 0xC5	; 197
    3bda:	83 c0       	rjmp	.+262    	; 0x3ce2 <__vector_24+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    3bdc:	80 93 e5 03 	sts	0x03E5, r24	; 0x8003e5 <twi_error>
    3be0:	8b c0       	rjmp	.+278    	; 0x3cf8 <__vector_24+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    3be2:	e0 91 2a 04 	lds	r30, 0x042A	; 0x80042a <twi_masterBufferIndex>
    3be6:	81 e0       	ldi	r24, 0x01	; 1
    3be8:	8e 0f       	add	r24, r30
    3bea:	80 93 2a 04 	sts	0x042A, r24	; 0x80042a <twi_masterBufferIndex>
    3bee:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    3bf2:	f0 e0       	ldi	r31, 0x00	; 0
    3bf4:	e5 5d       	subi	r30, 0xD5	; 213
    3bf6:	fb 4f       	sbci	r31, 0xFB	; 251
    3bf8:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    3bfa:	90 91 2a 04 	lds	r25, 0x042A	; 0x80042a <twi_masterBufferIndex>
    3bfe:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <twi_masterBufferLength>
    3c02:	6b c0       	rjmp	.+214    	; 0x3cda <__vector_24+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    3c04:	e0 91 2a 04 	lds	r30, 0x042A	; 0x80042a <twi_masterBufferIndex>
    3c08:	81 e0       	ldi	r24, 0x01	; 1
    3c0a:	8e 0f       	add	r24, r30
    3c0c:	80 93 2a 04 	sts	0x042A, r24	; 0x80042a <twi_masterBufferIndex>
    3c10:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    3c14:	f0 e0       	ldi	r31, 0x00	; 0
    3c16:	e5 5d       	subi	r30, 0xD5	; 213
    3c18:	fb 4f       	sbci	r31, 0xFB	; 251
    3c1a:	80 83       	st	Z, r24
	if (twi_sendStop)
    3c1c:	80 91 50 04 	lds	r24, 0x0450	; 0x800450 <twi_sendStop>
    3c20:	81 11       	cpse	r24, r1
    3c22:	6a c0       	rjmp	.+212    	; 0x3cf8 <__vector_24+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    3c24:	81 e0       	ldi	r24, 0x01	; 1
    3c26:	80 93 4f 04 	sts	0x044F, r24	; 0x80044f <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    3c2a:	84 ea       	ldi	r24, 0xA4	; 164
    3c2c:	5e c0       	rjmp	.+188    	; 0x3cea <__vector_24+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    3c2e:	83 e0       	ldi	r24, 0x03	; 3
    3c30:	80 93 52 04 	sts	0x0452, r24	; 0x800452 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    3c34:	10 92 e6 03 	sts	0x03E6, r1	; 0x8003e6 <twi_rxBufferIndex>
    3c38:	cf cf       	rjmp	.-98     	; 0x3bd8 <__vector_24+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    3c3a:	80 91 e6 03 	lds	r24, 0x03E6	; 0x8003e6 <twi_rxBufferIndex>
    3c3e:	80 32       	cpi	r24, 0x20	; 32
    3c40:	08 f0       	brcs	.+2      	; 0x3c44 <__vector_24+0x180>
    3c42:	4e c0       	rjmp	.+156    	; 0x3ce0 <__vector_24+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    3c44:	e0 91 e6 03 	lds	r30, 0x03E6	; 0x8003e6 <twi_rxBufferIndex>
    3c48:	81 e0       	ldi	r24, 0x01	; 1
    3c4a:	8e 0f       	add	r24, r30
    3c4c:	80 93 e6 03 	sts	0x03E6, r24	; 0x8003e6 <twi_rxBufferIndex>
    3c50:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    3c54:	f0 e0       	ldi	r31, 0x00	; 0
    3c56:	e9 51       	subi	r30, 0x19	; 25
    3c58:	fc 4f       	sbci	r31, 0xFC	; 252
    3c5a:	80 83       	st	Z, r24
    3c5c:	bd cf       	rjmp	.-134    	; 0x3bd8 <__vector_24+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    3c5e:	0e 94 5c 1d 	call	0x3ab8	; 0x3ab8 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    3c62:	80 91 e6 03 	lds	r24, 0x03E6	; 0x8003e6 <twi_rxBufferIndex>
    3c66:	80 32       	cpi	r24, 0x20	; 32
    3c68:	30 f4       	brcc	.+12     	; 0x3c76 <__vector_24+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    3c6a:	e0 91 e6 03 	lds	r30, 0x03E6	; 0x8003e6 <twi_rxBufferIndex>
    3c6e:	f0 e0       	ldi	r31, 0x00	; 0
    3c70:	e9 51       	subi	r30, 0x19	; 25
    3c72:	fc 4f       	sbci	r31, 0xFC	; 252
    3c74:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    3c76:	60 91 e6 03 	lds	r22, 0x03E6	; 0x8003e6 <twi_rxBufferIndex>
    3c7a:	70 e0       	ldi	r23, 0x00	; 0
    3c7c:	e0 91 4b 04 	lds	r30, 0x044B	; 0x80044b <twi_onSlaveReceive>
    3c80:	f0 91 4c 04 	lds	r31, 0x044C	; 0x80044c <twi_onSlaveReceive+0x1>
    3c84:	87 ee       	ldi	r24, 0xE7	; 231
    3c86:	93 e0       	ldi	r25, 0x03	; 3
    3c88:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    3c8a:	10 92 e6 03 	sts	0x03E6, r1	; 0x8003e6 <twi_rxBufferIndex>
      break;
    3c8e:	36 c0       	rjmp	.+108    	; 0x3cfc <__vector_24+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    3c90:	84 e0       	ldi	r24, 0x04	; 4
    3c92:	80 93 52 04 	sts	0x0452, r24	; 0x800452 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    3c96:	10 92 08 04 	sts	0x0408, r1	; 0x800408 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    3c9a:	10 92 07 04 	sts	0x0407, r1	; 0x800407 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    3c9e:	e0 91 4d 04 	lds	r30, 0x044D	; 0x80044d <twi_onSlaveTransmit>
    3ca2:	f0 91 4e 04 	lds	r31, 0x044E	; 0x80044e <twi_onSlaveTransmit+0x1>
    3ca6:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    3ca8:	80 91 07 04 	lds	r24, 0x0407	; 0x800407 <twi_txBufferLength>
    3cac:	81 11       	cpse	r24, r1
    3cae:	05 c0       	rjmp	.+10     	; 0x3cba <__vector_24+0x1f6>
        twi_txBufferLength = 1;
    3cb0:	81 e0       	ldi	r24, 0x01	; 1
    3cb2:	80 93 07 04 	sts	0x0407, r24	; 0x800407 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    3cb6:	10 92 09 04 	sts	0x0409, r1	; 0x800409 <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    3cba:	e0 91 08 04 	lds	r30, 0x0408	; 0x800408 <twi_txBufferIndex>
    3cbe:	81 e0       	ldi	r24, 0x01	; 1
    3cc0:	8e 0f       	add	r24, r30
    3cc2:	80 93 08 04 	sts	0x0408, r24	; 0x800408 <twi_txBufferIndex>
    3cc6:	f0 e0       	ldi	r31, 0x00	; 0
    3cc8:	e7 5f       	subi	r30, 0xF7	; 247
    3cca:	fb 4f       	sbci	r31, 0xFB	; 251
    3ccc:	80 81       	ld	r24, Z
    3cce:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    3cd2:	90 91 08 04 	lds	r25, 0x0408	; 0x800408 <twi_txBufferIndex>
    3cd6:	80 91 07 04 	lds	r24, 0x0407	; 0x800407 <twi_txBufferLength>
    3cda:	98 17       	cp	r25, r24
    3cdc:	08 f4       	brcc	.+2      	; 0x3ce0 <__vector_24+0x21c>
    3cde:	7c cf       	rjmp	.-264    	; 0x3bd8 <__vector_24+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    3ce0:	85 e8       	ldi	r24, 0x85	; 133
    3ce2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    3ce6:	0a c0       	rjmp	.+20     	; 0x3cfc <__vector_24+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    3ce8:	85 ec       	ldi	r24, 0xC5	; 197
    3cea:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    3cee:	10 92 52 04 	sts	0x0452, r1	; 0x800452 <twi_state>
      break;
    3cf2:	04 c0       	rjmp	.+8      	; 0x3cfc <__vector_24+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    3cf4:	10 92 e5 03 	sts	0x03E5, r1	; 0x8003e5 <twi_error>
      twi_stop();
    3cf8:	0e 94 52 1d 	call	0x3aa4	; 0x3aa4 <twi_stop>
      break;
  }
}
    3cfc:	ff 91       	pop	r31
    3cfe:	ef 91       	pop	r30
    3d00:	bf 91       	pop	r27
    3d02:	af 91       	pop	r26
    3d04:	9f 91       	pop	r25
    3d06:	8f 91       	pop	r24
    3d08:	7f 91       	pop	r23
    3d0a:	6f 91       	pop	r22
    3d0c:	5f 91       	pop	r21
    3d0e:	4f 91       	pop	r20
    3d10:	3f 91       	pop	r19
    3d12:	2f 91       	pop	r18
    3d14:	0f 90       	pop	r0
    3d16:	0f be       	out	0x3f, r0	; 63
    3d18:	0f 90       	pop	r0
    3d1a:	1f 90       	pop	r1
    3d1c:	18 95       	reti

00003d1e <__udivmodqi4>:
    3d1e:	99 1b       	sub	r25, r25
    3d20:	79 e0       	ldi	r23, 0x09	; 9
    3d22:	04 c0       	rjmp	.+8      	; 0x3d2c <__udivmodqi4_ep>

00003d24 <__udivmodqi4_loop>:
    3d24:	99 1f       	adc	r25, r25
    3d26:	96 17       	cp	r25, r22
    3d28:	08 f0       	brcs	.+2      	; 0x3d2c <__udivmodqi4_ep>
    3d2a:	96 1b       	sub	r25, r22

00003d2c <__udivmodqi4_ep>:
    3d2c:	88 1f       	adc	r24, r24
    3d2e:	7a 95       	dec	r23
    3d30:	c9 f7       	brne	.-14     	; 0x3d24 <__udivmodqi4_loop>
    3d32:	80 95       	com	r24
    3d34:	08 95       	ret

00003d36 <__udivmodsi4>:
    3d36:	a1 e2       	ldi	r26, 0x21	; 33
    3d38:	1a 2e       	mov	r1, r26
    3d3a:	aa 1b       	sub	r26, r26
    3d3c:	bb 1b       	sub	r27, r27
    3d3e:	fd 01       	movw	r30, r26
    3d40:	0d c0       	rjmp	.+26     	; 0x3d5c <__udivmodsi4_ep>

00003d42 <__udivmodsi4_loop>:
    3d42:	aa 1f       	adc	r26, r26
    3d44:	bb 1f       	adc	r27, r27
    3d46:	ee 1f       	adc	r30, r30
    3d48:	ff 1f       	adc	r31, r31
    3d4a:	a2 17       	cp	r26, r18
    3d4c:	b3 07       	cpc	r27, r19
    3d4e:	e4 07       	cpc	r30, r20
    3d50:	f5 07       	cpc	r31, r21
    3d52:	20 f0       	brcs	.+8      	; 0x3d5c <__udivmodsi4_ep>
    3d54:	a2 1b       	sub	r26, r18
    3d56:	b3 0b       	sbc	r27, r19
    3d58:	e4 0b       	sbc	r30, r20
    3d5a:	f5 0b       	sbc	r31, r21

00003d5c <__udivmodsi4_ep>:
    3d5c:	66 1f       	adc	r22, r22
    3d5e:	77 1f       	adc	r23, r23
    3d60:	88 1f       	adc	r24, r24
    3d62:	99 1f       	adc	r25, r25
    3d64:	1a 94       	dec	r1
    3d66:	69 f7       	brne	.-38     	; 0x3d42 <__udivmodsi4_loop>
    3d68:	60 95       	com	r22
    3d6a:	70 95       	com	r23
    3d6c:	80 95       	com	r24
    3d6e:	90 95       	com	r25
    3d70:	9b 01       	movw	r18, r22
    3d72:	ac 01       	movw	r20, r24
    3d74:	bd 01       	movw	r22, r26
    3d76:	cf 01       	movw	r24, r30
    3d78:	08 95       	ret

00003d7a <__divmodsi4>:
    3d7a:	05 2e       	mov	r0, r21
    3d7c:	97 fb       	bst	r25, 7
    3d7e:	1e f4       	brtc	.+6      	; 0x3d86 <__divmodsi4+0xc>
    3d80:	00 94       	com	r0
    3d82:	0e 94 d4 1e 	call	0x3da8	; 0x3da8 <__negsi2>
    3d86:	57 fd       	sbrc	r21, 7
    3d88:	07 d0       	rcall	.+14     	; 0x3d98 <__divmodsi4_neg2>
    3d8a:	0e 94 9b 1e 	call	0x3d36	; 0x3d36 <__udivmodsi4>
    3d8e:	07 fc       	sbrc	r0, 7
    3d90:	03 d0       	rcall	.+6      	; 0x3d98 <__divmodsi4_neg2>
    3d92:	4e f4       	brtc	.+18     	; 0x3da6 <__divmodsi4_exit>
    3d94:	0c 94 d4 1e 	jmp	0x3da8	; 0x3da8 <__negsi2>

00003d98 <__divmodsi4_neg2>:
    3d98:	50 95       	com	r21
    3d9a:	40 95       	com	r20
    3d9c:	30 95       	com	r19
    3d9e:	21 95       	neg	r18
    3da0:	3f 4f       	sbci	r19, 0xFF	; 255
    3da2:	4f 4f       	sbci	r20, 0xFF	; 255
    3da4:	5f 4f       	sbci	r21, 0xFF	; 255

00003da6 <__divmodsi4_exit>:
    3da6:	08 95       	ret

00003da8 <__negsi2>:
    3da8:	90 95       	com	r25
    3daa:	80 95       	com	r24
    3dac:	70 95       	com	r23
    3dae:	61 95       	neg	r22
    3db0:	7f 4f       	sbci	r23, 0xFF	; 255
    3db2:	8f 4f       	sbci	r24, 0xFF	; 255
    3db4:	9f 4f       	sbci	r25, 0xFF	; 255
    3db6:	08 95       	ret

00003db8 <__tablejump2__>:
    3db8:	ee 0f       	add	r30, r30
    3dba:	ff 1f       	adc	r31, r31
    3dbc:	05 90       	lpm	r0, Z+
    3dbe:	f4 91       	lpm	r31, Z
    3dc0:	e0 2d       	mov	r30, r0
    3dc2:	09 94       	ijmp

00003dc4 <__umulhisi3>:
    3dc4:	a2 9f       	mul	r26, r18
    3dc6:	b0 01       	movw	r22, r0
    3dc8:	b3 9f       	mul	r27, r19
    3dca:	c0 01       	movw	r24, r0
    3dcc:	a3 9f       	mul	r26, r19
    3dce:	70 0d       	add	r23, r0
    3dd0:	81 1d       	adc	r24, r1
    3dd2:	11 24       	eor	r1, r1
    3dd4:	91 1d       	adc	r25, r1
    3dd6:	b2 9f       	mul	r27, r18
    3dd8:	70 0d       	add	r23, r0
    3dda:	81 1d       	adc	r24, r1
    3ddc:	11 24       	eor	r1, r1
    3dde:	91 1d       	adc	r25, r1
    3de0:	08 95       	ret

00003de2 <__muluhisi3>:
    3de2:	0e 94 e2 1e 	call	0x3dc4	; 0x3dc4 <__umulhisi3>
    3de6:	a5 9f       	mul	r26, r21
    3de8:	90 0d       	add	r25, r0
    3dea:	b4 9f       	mul	r27, r20
    3dec:	90 0d       	add	r25, r0
    3dee:	a4 9f       	mul	r26, r20
    3df0:	80 0d       	add	r24, r0
    3df2:	91 1d       	adc	r25, r1
    3df4:	11 24       	eor	r1, r1
    3df6:	08 95       	ret

00003df8 <atoi>:
    3df8:	fc 01       	movw	r30, r24
    3dfa:	88 27       	eor	r24, r24
    3dfc:	99 27       	eor	r25, r25
    3dfe:	e8 94       	clt
    3e00:	21 91       	ld	r18, Z+
    3e02:	20 32       	cpi	r18, 0x20	; 32
    3e04:	e9 f3       	breq	.-6      	; 0x3e00 <atoi+0x8>
    3e06:	29 30       	cpi	r18, 0x09	; 9
    3e08:	10 f0       	brcs	.+4      	; 0x3e0e <atoi+0x16>
    3e0a:	2e 30       	cpi	r18, 0x0E	; 14
    3e0c:	c8 f3       	brcs	.-14     	; 0x3e00 <atoi+0x8>
    3e0e:	2b 32       	cpi	r18, 0x2B	; 43
    3e10:	41 f0       	breq	.+16     	; 0x3e22 <atoi+0x2a>
    3e12:	2d 32       	cpi	r18, 0x2D	; 45
    3e14:	39 f4       	brne	.+14     	; 0x3e24 <atoi+0x2c>
    3e16:	68 94       	set
    3e18:	04 c0       	rjmp	.+8      	; 0x3e22 <atoi+0x2a>
    3e1a:	0e 94 6a 1f 	call	0x3ed4	; 0x3ed4 <__mulhi_const_10>
    3e1e:	82 0f       	add	r24, r18
    3e20:	91 1d       	adc	r25, r1
    3e22:	21 91       	ld	r18, Z+
    3e24:	20 53       	subi	r18, 0x30	; 48
    3e26:	2a 30       	cpi	r18, 0x0A	; 10
    3e28:	c0 f3       	brcs	.-16     	; 0x3e1a <atoi+0x22>
    3e2a:	1e f4       	brtc	.+6      	; 0x3e32 <atoi+0x3a>
    3e2c:	90 95       	com	r25
    3e2e:	81 95       	neg	r24
    3e30:	9f 4f       	sbci	r25, 0xFF	; 255
    3e32:	08 95       	ret

00003e34 <memcpy_P>:
    3e34:	fb 01       	movw	r30, r22
    3e36:	dc 01       	movw	r26, r24
    3e38:	02 c0       	rjmp	.+4      	; 0x3e3e <memcpy_P+0xa>
    3e3a:	05 90       	lpm	r0, Z+
    3e3c:	0d 92       	st	X+, r0
    3e3e:	41 50       	subi	r20, 0x01	; 1
    3e40:	50 40       	sbci	r21, 0x00	; 0
    3e42:	d8 f7       	brcc	.-10     	; 0x3e3a <memcpy_P+0x6>
    3e44:	08 95       	ret

00003e46 <strtok>:
    3e46:	42 e9       	ldi	r20, 0x92	; 146
    3e48:	52 e0       	ldi	r21, 0x02	; 2
    3e4a:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <strtok_r>
    3e4e:	08 95       	ret

00003e50 <memcpy>:
    3e50:	fb 01       	movw	r30, r22
    3e52:	dc 01       	movw	r26, r24
    3e54:	02 c0       	rjmp	.+4      	; 0x3e5a <memcpy+0xa>
    3e56:	01 90       	ld	r0, Z+
    3e58:	0d 92       	st	X+, r0
    3e5a:	41 50       	subi	r20, 0x01	; 1
    3e5c:	50 40       	sbci	r21, 0x00	; 0
    3e5e:	d8 f7       	brcc	.-10     	; 0x3e56 <memcpy+0x6>
    3e60:	08 95       	ret

00003e62 <memset>:
    3e62:	dc 01       	movw	r26, r24
    3e64:	01 c0       	rjmp	.+2      	; 0x3e68 <memset+0x6>
    3e66:	6d 93       	st	X+, r22
    3e68:	41 50       	subi	r20, 0x01	; 1
    3e6a:	50 40       	sbci	r21, 0x00	; 0
    3e6c:	e0 f7       	brcc	.-8      	; 0x3e66 <memset+0x4>
    3e6e:	08 95       	ret

00003e70 <strcat>:
    3e70:	fb 01       	movw	r30, r22
    3e72:	dc 01       	movw	r26, r24
    3e74:	0d 90       	ld	r0, X+
    3e76:	00 20       	and	r0, r0
    3e78:	e9 f7       	brne	.-6      	; 0x3e74 <strcat+0x4>
    3e7a:	11 97       	sbiw	r26, 0x01	; 1
    3e7c:	01 90       	ld	r0, Z+
    3e7e:	0d 92       	st	X+, r0
    3e80:	00 20       	and	r0, r0
    3e82:	e1 f7       	brne	.-8      	; 0x3e7c <strcat+0xc>
    3e84:	08 95       	ret

00003e86 <strtok_r>:
    3e86:	fa 01       	movw	r30, r20
    3e88:	a1 91       	ld	r26, Z+
    3e8a:	b0 81       	ld	r27, Z
    3e8c:	00 97       	sbiw	r24, 0x00	; 0
    3e8e:	19 f4       	brne	.+6      	; 0x3e96 <strtok_r+0x10>
    3e90:	10 97       	sbiw	r26, 0x00	; 0
    3e92:	e1 f0       	breq	.+56     	; 0x3ecc <strtok_r+0x46>
    3e94:	cd 01       	movw	r24, r26
    3e96:	dc 01       	movw	r26, r24
    3e98:	cd 01       	movw	r24, r26
    3e9a:	0d 90       	ld	r0, X+
    3e9c:	00 20       	and	r0, r0
    3e9e:	11 f4       	brne	.+4      	; 0x3ea4 <strtok_r+0x1e>
    3ea0:	c0 01       	movw	r24, r0
    3ea2:	13 c0       	rjmp	.+38     	; 0x3eca <strtok_r+0x44>
    3ea4:	fb 01       	movw	r30, r22
    3ea6:	21 91       	ld	r18, Z+
    3ea8:	22 23       	and	r18, r18
    3eaa:	19 f0       	breq	.+6      	; 0x3eb2 <strtok_r+0x2c>
    3eac:	20 15       	cp	r18, r0
    3eae:	d9 f7       	brne	.-10     	; 0x3ea6 <strtok_r+0x20>
    3eb0:	f3 cf       	rjmp	.-26     	; 0x3e98 <strtok_r+0x12>
    3eb2:	fb 01       	movw	r30, r22
    3eb4:	21 91       	ld	r18, Z+
    3eb6:	20 15       	cp	r18, r0
    3eb8:	19 f4       	brne	.+6      	; 0x3ec0 <strtok_r+0x3a>
    3eba:	1e 92       	st	-X, r1
    3ebc:	11 96       	adiw	r26, 0x01	; 1
    3ebe:	06 c0       	rjmp	.+12     	; 0x3ecc <strtok_r+0x46>
    3ec0:	22 23       	and	r18, r18
    3ec2:	c1 f7       	brne	.-16     	; 0x3eb4 <strtok_r+0x2e>
    3ec4:	0d 90       	ld	r0, X+
    3ec6:	00 20       	and	r0, r0
    3ec8:	a1 f7       	brne	.-24     	; 0x3eb2 <strtok_r+0x2c>
    3eca:	d0 01       	movw	r26, r0
    3ecc:	fa 01       	movw	r30, r20
    3ece:	a1 93       	st	Z+, r26
    3ed0:	b0 83       	st	Z, r27
    3ed2:	08 95       	ret

00003ed4 <__mulhi_const_10>:
    3ed4:	7a e0       	ldi	r23, 0x0A	; 10
    3ed6:	97 9f       	mul	r25, r23
    3ed8:	90 2d       	mov	r25, r0
    3eda:	87 9f       	mul	r24, r23
    3edc:	80 2d       	mov	r24, r0
    3ede:	91 0d       	add	r25, r1
    3ee0:	11 24       	eor	r1, r1
    3ee2:	08 95       	ret

00003ee4 <sprintf>:
    3ee4:	ae e0       	ldi	r26, 0x0E	; 14
    3ee6:	b0 e0       	ldi	r27, 0x00	; 0
    3ee8:	e8 e7       	ldi	r30, 0x78	; 120
    3eea:	ff e1       	ldi	r31, 0x1F	; 31
    3eec:	0c 94 49 22 	jmp	0x4492	; 0x4492 <__prologue_saves__+0x1c>
    3ef0:	0d 89       	ldd	r16, Y+21	; 0x15
    3ef2:	1e 89       	ldd	r17, Y+22	; 0x16
    3ef4:	86 e0       	ldi	r24, 0x06	; 6
    3ef6:	8c 83       	std	Y+4, r24	; 0x04
    3ef8:	1a 83       	std	Y+2, r17	; 0x02
    3efa:	09 83       	std	Y+1, r16	; 0x01
    3efc:	8f ef       	ldi	r24, 0xFF	; 255
    3efe:	9f e7       	ldi	r25, 0x7F	; 127
    3f00:	9e 83       	std	Y+6, r25	; 0x06
    3f02:	8d 83       	std	Y+5, r24	; 0x05
    3f04:	ae 01       	movw	r20, r28
    3f06:	47 5e       	subi	r20, 0xE7	; 231
    3f08:	5f 4f       	sbci	r21, 0xFF	; 255
    3f0a:	6f 89       	ldd	r22, Y+23	; 0x17
    3f0c:	78 8d       	ldd	r23, Y+24	; 0x18
    3f0e:	ce 01       	movw	r24, r28
    3f10:	01 96       	adiw	r24, 0x01	; 1
    3f12:	0e 94 94 1f 	call	0x3f28	; 0x3f28 <vfprintf>
    3f16:	ef 81       	ldd	r30, Y+7	; 0x07
    3f18:	f8 85       	ldd	r31, Y+8	; 0x08
    3f1a:	e0 0f       	add	r30, r16
    3f1c:	f1 1f       	adc	r31, r17
    3f1e:	10 82       	st	Z, r1
    3f20:	2e 96       	adiw	r28, 0x0e	; 14
    3f22:	e4 e0       	ldi	r30, 0x04	; 4
    3f24:	0c 94 65 22 	jmp	0x44ca	; 0x44ca <__epilogue_restores__+0x1c>

00003f28 <vfprintf>:
    3f28:	ab e0       	ldi	r26, 0x0B	; 11
    3f2a:	b0 e0       	ldi	r27, 0x00	; 0
    3f2c:	ea e9       	ldi	r30, 0x9A	; 154
    3f2e:	ff e1       	ldi	r31, 0x1F	; 31
    3f30:	0c 94 3b 22 	jmp	0x4476	; 0x4476 <__prologue_saves__>
    3f34:	6c 01       	movw	r12, r24
    3f36:	7b 01       	movw	r14, r22
    3f38:	8a 01       	movw	r16, r20
    3f3a:	fc 01       	movw	r30, r24
    3f3c:	17 82       	std	Z+7, r1	; 0x07
    3f3e:	16 82       	std	Z+6, r1	; 0x06
    3f40:	83 81       	ldd	r24, Z+3	; 0x03
    3f42:	81 ff       	sbrs	r24, 1
    3f44:	cc c1       	rjmp	.+920    	; 0x42de <vfprintf+0x3b6>
    3f46:	ce 01       	movw	r24, r28
    3f48:	01 96       	adiw	r24, 0x01	; 1
    3f4a:	3c 01       	movw	r6, r24
    3f4c:	f6 01       	movw	r30, r12
    3f4e:	93 81       	ldd	r25, Z+3	; 0x03
    3f50:	f7 01       	movw	r30, r14
    3f52:	93 fd       	sbrc	r25, 3
    3f54:	85 91       	lpm	r24, Z+
    3f56:	93 ff       	sbrs	r25, 3
    3f58:	81 91       	ld	r24, Z+
    3f5a:	7f 01       	movw	r14, r30
    3f5c:	88 23       	and	r24, r24
    3f5e:	09 f4       	brne	.+2      	; 0x3f62 <vfprintf+0x3a>
    3f60:	ba c1       	rjmp	.+884    	; 0x42d6 <vfprintf+0x3ae>
    3f62:	85 32       	cpi	r24, 0x25	; 37
    3f64:	39 f4       	brne	.+14     	; 0x3f74 <vfprintf+0x4c>
    3f66:	93 fd       	sbrc	r25, 3
    3f68:	85 91       	lpm	r24, Z+
    3f6a:	93 ff       	sbrs	r25, 3
    3f6c:	81 91       	ld	r24, Z+
    3f6e:	7f 01       	movw	r14, r30
    3f70:	85 32       	cpi	r24, 0x25	; 37
    3f72:	29 f4       	brne	.+10     	; 0x3f7e <vfprintf+0x56>
    3f74:	b6 01       	movw	r22, r12
    3f76:	90 e0       	ldi	r25, 0x00	; 0
    3f78:	0e 94 8b 21 	call	0x4316	; 0x4316 <fputc>
    3f7c:	e7 cf       	rjmp	.-50     	; 0x3f4c <vfprintf+0x24>
    3f7e:	91 2c       	mov	r9, r1
    3f80:	21 2c       	mov	r2, r1
    3f82:	31 2c       	mov	r3, r1
    3f84:	ff e1       	ldi	r31, 0x1F	; 31
    3f86:	f3 15       	cp	r31, r3
    3f88:	d8 f0       	brcs	.+54     	; 0x3fc0 <vfprintf+0x98>
    3f8a:	8b 32       	cpi	r24, 0x2B	; 43
    3f8c:	79 f0       	breq	.+30     	; 0x3fac <vfprintf+0x84>
    3f8e:	38 f4       	brcc	.+14     	; 0x3f9e <vfprintf+0x76>
    3f90:	80 32       	cpi	r24, 0x20	; 32
    3f92:	79 f0       	breq	.+30     	; 0x3fb2 <vfprintf+0x8a>
    3f94:	83 32       	cpi	r24, 0x23	; 35
    3f96:	a1 f4       	brne	.+40     	; 0x3fc0 <vfprintf+0x98>
    3f98:	23 2d       	mov	r18, r3
    3f9a:	20 61       	ori	r18, 0x10	; 16
    3f9c:	1d c0       	rjmp	.+58     	; 0x3fd8 <vfprintf+0xb0>
    3f9e:	8d 32       	cpi	r24, 0x2D	; 45
    3fa0:	61 f0       	breq	.+24     	; 0x3fba <vfprintf+0x92>
    3fa2:	80 33       	cpi	r24, 0x30	; 48
    3fa4:	69 f4       	brne	.+26     	; 0x3fc0 <vfprintf+0x98>
    3fa6:	23 2d       	mov	r18, r3
    3fa8:	21 60       	ori	r18, 0x01	; 1
    3faa:	16 c0       	rjmp	.+44     	; 0x3fd8 <vfprintf+0xb0>
    3fac:	83 2d       	mov	r24, r3
    3fae:	82 60       	ori	r24, 0x02	; 2
    3fb0:	38 2e       	mov	r3, r24
    3fb2:	e3 2d       	mov	r30, r3
    3fb4:	e4 60       	ori	r30, 0x04	; 4
    3fb6:	3e 2e       	mov	r3, r30
    3fb8:	2a c0       	rjmp	.+84     	; 0x400e <vfprintf+0xe6>
    3fba:	f3 2d       	mov	r31, r3
    3fbc:	f8 60       	ori	r31, 0x08	; 8
    3fbe:	1d c0       	rjmp	.+58     	; 0x3ffa <vfprintf+0xd2>
    3fc0:	37 fc       	sbrc	r3, 7
    3fc2:	2d c0       	rjmp	.+90     	; 0x401e <vfprintf+0xf6>
    3fc4:	20 ed       	ldi	r18, 0xD0	; 208
    3fc6:	28 0f       	add	r18, r24
    3fc8:	2a 30       	cpi	r18, 0x0A	; 10
    3fca:	40 f0       	brcs	.+16     	; 0x3fdc <vfprintf+0xb4>
    3fcc:	8e 32       	cpi	r24, 0x2E	; 46
    3fce:	b9 f4       	brne	.+46     	; 0x3ffe <vfprintf+0xd6>
    3fd0:	36 fc       	sbrc	r3, 6
    3fd2:	81 c1       	rjmp	.+770    	; 0x42d6 <vfprintf+0x3ae>
    3fd4:	23 2d       	mov	r18, r3
    3fd6:	20 64       	ori	r18, 0x40	; 64
    3fd8:	32 2e       	mov	r3, r18
    3fda:	19 c0       	rjmp	.+50     	; 0x400e <vfprintf+0xe6>
    3fdc:	36 fe       	sbrs	r3, 6
    3fde:	06 c0       	rjmp	.+12     	; 0x3fec <vfprintf+0xc4>
    3fe0:	8a e0       	ldi	r24, 0x0A	; 10
    3fe2:	98 9e       	mul	r9, r24
    3fe4:	20 0d       	add	r18, r0
    3fe6:	11 24       	eor	r1, r1
    3fe8:	92 2e       	mov	r9, r18
    3fea:	11 c0       	rjmp	.+34     	; 0x400e <vfprintf+0xe6>
    3fec:	ea e0       	ldi	r30, 0x0A	; 10
    3fee:	2e 9e       	mul	r2, r30
    3ff0:	20 0d       	add	r18, r0
    3ff2:	11 24       	eor	r1, r1
    3ff4:	22 2e       	mov	r2, r18
    3ff6:	f3 2d       	mov	r31, r3
    3ff8:	f0 62       	ori	r31, 0x20	; 32
    3ffa:	3f 2e       	mov	r3, r31
    3ffc:	08 c0       	rjmp	.+16     	; 0x400e <vfprintf+0xe6>
    3ffe:	8c 36       	cpi	r24, 0x6C	; 108
    4000:	21 f4       	brne	.+8      	; 0x400a <vfprintf+0xe2>
    4002:	83 2d       	mov	r24, r3
    4004:	80 68       	ori	r24, 0x80	; 128
    4006:	38 2e       	mov	r3, r24
    4008:	02 c0       	rjmp	.+4      	; 0x400e <vfprintf+0xe6>
    400a:	88 36       	cpi	r24, 0x68	; 104
    400c:	41 f4       	brne	.+16     	; 0x401e <vfprintf+0xf6>
    400e:	f7 01       	movw	r30, r14
    4010:	93 fd       	sbrc	r25, 3
    4012:	85 91       	lpm	r24, Z+
    4014:	93 ff       	sbrs	r25, 3
    4016:	81 91       	ld	r24, Z+
    4018:	7f 01       	movw	r14, r30
    401a:	81 11       	cpse	r24, r1
    401c:	b3 cf       	rjmp	.-154    	; 0x3f84 <vfprintf+0x5c>
    401e:	98 2f       	mov	r25, r24
    4020:	9f 7d       	andi	r25, 0xDF	; 223
    4022:	95 54       	subi	r25, 0x45	; 69
    4024:	93 30       	cpi	r25, 0x03	; 3
    4026:	28 f4       	brcc	.+10     	; 0x4032 <vfprintf+0x10a>
    4028:	0c 5f       	subi	r16, 0xFC	; 252
    402a:	1f 4f       	sbci	r17, 0xFF	; 255
    402c:	9f e3       	ldi	r25, 0x3F	; 63
    402e:	99 83       	std	Y+1, r25	; 0x01
    4030:	0d c0       	rjmp	.+26     	; 0x404c <vfprintf+0x124>
    4032:	83 36       	cpi	r24, 0x63	; 99
    4034:	31 f0       	breq	.+12     	; 0x4042 <vfprintf+0x11a>
    4036:	83 37       	cpi	r24, 0x73	; 115
    4038:	71 f0       	breq	.+28     	; 0x4056 <vfprintf+0x12e>
    403a:	83 35       	cpi	r24, 0x53	; 83
    403c:	09 f0       	breq	.+2      	; 0x4040 <vfprintf+0x118>
    403e:	59 c0       	rjmp	.+178    	; 0x40f2 <vfprintf+0x1ca>
    4040:	21 c0       	rjmp	.+66     	; 0x4084 <vfprintf+0x15c>
    4042:	f8 01       	movw	r30, r16
    4044:	80 81       	ld	r24, Z
    4046:	89 83       	std	Y+1, r24	; 0x01
    4048:	0e 5f       	subi	r16, 0xFE	; 254
    404a:	1f 4f       	sbci	r17, 0xFF	; 255
    404c:	88 24       	eor	r8, r8
    404e:	83 94       	inc	r8
    4050:	91 2c       	mov	r9, r1
    4052:	53 01       	movw	r10, r6
    4054:	13 c0       	rjmp	.+38     	; 0x407c <vfprintf+0x154>
    4056:	28 01       	movw	r4, r16
    4058:	f2 e0       	ldi	r31, 0x02	; 2
    405a:	4f 0e       	add	r4, r31
    405c:	51 1c       	adc	r5, r1
    405e:	f8 01       	movw	r30, r16
    4060:	a0 80       	ld	r10, Z
    4062:	b1 80       	ldd	r11, Z+1	; 0x01
    4064:	36 fe       	sbrs	r3, 6
    4066:	03 c0       	rjmp	.+6      	; 0x406e <vfprintf+0x146>
    4068:	69 2d       	mov	r22, r9
    406a:	70 e0       	ldi	r23, 0x00	; 0
    406c:	02 c0       	rjmp	.+4      	; 0x4072 <vfprintf+0x14a>
    406e:	6f ef       	ldi	r22, 0xFF	; 255
    4070:	7f ef       	ldi	r23, 0xFF	; 255
    4072:	c5 01       	movw	r24, r10
    4074:	0e 94 80 21 	call	0x4300	; 0x4300 <strnlen>
    4078:	4c 01       	movw	r8, r24
    407a:	82 01       	movw	r16, r4
    407c:	f3 2d       	mov	r31, r3
    407e:	ff 77       	andi	r31, 0x7F	; 127
    4080:	3f 2e       	mov	r3, r31
    4082:	16 c0       	rjmp	.+44     	; 0x40b0 <vfprintf+0x188>
    4084:	28 01       	movw	r4, r16
    4086:	22 e0       	ldi	r18, 0x02	; 2
    4088:	42 0e       	add	r4, r18
    408a:	51 1c       	adc	r5, r1
    408c:	f8 01       	movw	r30, r16
    408e:	a0 80       	ld	r10, Z
    4090:	b1 80       	ldd	r11, Z+1	; 0x01
    4092:	36 fe       	sbrs	r3, 6
    4094:	03 c0       	rjmp	.+6      	; 0x409c <vfprintf+0x174>
    4096:	69 2d       	mov	r22, r9
    4098:	70 e0       	ldi	r23, 0x00	; 0
    409a:	02 c0       	rjmp	.+4      	; 0x40a0 <vfprintf+0x178>
    409c:	6f ef       	ldi	r22, 0xFF	; 255
    409e:	7f ef       	ldi	r23, 0xFF	; 255
    40a0:	c5 01       	movw	r24, r10
    40a2:	0e 94 75 21 	call	0x42ea	; 0x42ea <strnlen_P>
    40a6:	4c 01       	movw	r8, r24
    40a8:	f3 2d       	mov	r31, r3
    40aa:	f0 68       	ori	r31, 0x80	; 128
    40ac:	3f 2e       	mov	r3, r31
    40ae:	82 01       	movw	r16, r4
    40b0:	33 fc       	sbrc	r3, 3
    40b2:	1b c0       	rjmp	.+54     	; 0x40ea <vfprintf+0x1c2>
    40b4:	82 2d       	mov	r24, r2
    40b6:	90 e0       	ldi	r25, 0x00	; 0
    40b8:	88 16       	cp	r8, r24
    40ba:	99 06       	cpc	r9, r25
    40bc:	b0 f4       	brcc	.+44     	; 0x40ea <vfprintf+0x1c2>
    40be:	b6 01       	movw	r22, r12
    40c0:	80 e2       	ldi	r24, 0x20	; 32
    40c2:	90 e0       	ldi	r25, 0x00	; 0
    40c4:	0e 94 8b 21 	call	0x4316	; 0x4316 <fputc>
    40c8:	2a 94       	dec	r2
    40ca:	f4 cf       	rjmp	.-24     	; 0x40b4 <vfprintf+0x18c>
    40cc:	f5 01       	movw	r30, r10
    40ce:	37 fc       	sbrc	r3, 7
    40d0:	85 91       	lpm	r24, Z+
    40d2:	37 fe       	sbrs	r3, 7
    40d4:	81 91       	ld	r24, Z+
    40d6:	5f 01       	movw	r10, r30
    40d8:	b6 01       	movw	r22, r12
    40da:	90 e0       	ldi	r25, 0x00	; 0
    40dc:	0e 94 8b 21 	call	0x4316	; 0x4316 <fputc>
    40e0:	21 10       	cpse	r2, r1
    40e2:	2a 94       	dec	r2
    40e4:	21 e0       	ldi	r18, 0x01	; 1
    40e6:	82 1a       	sub	r8, r18
    40e8:	91 08       	sbc	r9, r1
    40ea:	81 14       	cp	r8, r1
    40ec:	91 04       	cpc	r9, r1
    40ee:	71 f7       	brne	.-36     	; 0x40cc <vfprintf+0x1a4>
    40f0:	e8 c0       	rjmp	.+464    	; 0x42c2 <vfprintf+0x39a>
    40f2:	84 36       	cpi	r24, 0x64	; 100
    40f4:	11 f0       	breq	.+4      	; 0x40fa <vfprintf+0x1d2>
    40f6:	89 36       	cpi	r24, 0x69	; 105
    40f8:	41 f5       	brne	.+80     	; 0x414a <vfprintf+0x222>
    40fa:	f8 01       	movw	r30, r16
    40fc:	37 fe       	sbrs	r3, 7
    40fe:	07 c0       	rjmp	.+14     	; 0x410e <vfprintf+0x1e6>
    4100:	60 81       	ld	r22, Z
    4102:	71 81       	ldd	r23, Z+1	; 0x01
    4104:	82 81       	ldd	r24, Z+2	; 0x02
    4106:	93 81       	ldd	r25, Z+3	; 0x03
    4108:	0c 5f       	subi	r16, 0xFC	; 252
    410a:	1f 4f       	sbci	r17, 0xFF	; 255
    410c:	08 c0       	rjmp	.+16     	; 0x411e <vfprintf+0x1f6>
    410e:	60 81       	ld	r22, Z
    4110:	71 81       	ldd	r23, Z+1	; 0x01
    4112:	07 2e       	mov	r0, r23
    4114:	00 0c       	add	r0, r0
    4116:	88 0b       	sbc	r24, r24
    4118:	99 0b       	sbc	r25, r25
    411a:	0e 5f       	subi	r16, 0xFE	; 254
    411c:	1f 4f       	sbci	r17, 0xFF	; 255
    411e:	f3 2d       	mov	r31, r3
    4120:	ff 76       	andi	r31, 0x6F	; 111
    4122:	3f 2e       	mov	r3, r31
    4124:	97 ff       	sbrs	r25, 7
    4126:	09 c0       	rjmp	.+18     	; 0x413a <vfprintf+0x212>
    4128:	90 95       	com	r25
    412a:	80 95       	com	r24
    412c:	70 95       	com	r23
    412e:	61 95       	neg	r22
    4130:	7f 4f       	sbci	r23, 0xFF	; 255
    4132:	8f 4f       	sbci	r24, 0xFF	; 255
    4134:	9f 4f       	sbci	r25, 0xFF	; 255
    4136:	f0 68       	ori	r31, 0x80	; 128
    4138:	3f 2e       	mov	r3, r31
    413a:	2a e0       	ldi	r18, 0x0A	; 10
    413c:	30 e0       	ldi	r19, 0x00	; 0
    413e:	a3 01       	movw	r20, r6
    4140:	0e 94 c7 21 	call	0x438e	; 0x438e <__ultoa_invert>
    4144:	88 2e       	mov	r8, r24
    4146:	86 18       	sub	r8, r6
    4148:	45 c0       	rjmp	.+138    	; 0x41d4 <vfprintf+0x2ac>
    414a:	85 37       	cpi	r24, 0x75	; 117
    414c:	31 f4       	brne	.+12     	; 0x415a <vfprintf+0x232>
    414e:	23 2d       	mov	r18, r3
    4150:	2f 7e       	andi	r18, 0xEF	; 239
    4152:	b2 2e       	mov	r11, r18
    4154:	2a e0       	ldi	r18, 0x0A	; 10
    4156:	30 e0       	ldi	r19, 0x00	; 0
    4158:	25 c0       	rjmp	.+74     	; 0x41a4 <vfprintf+0x27c>
    415a:	93 2d       	mov	r25, r3
    415c:	99 7f       	andi	r25, 0xF9	; 249
    415e:	b9 2e       	mov	r11, r25
    4160:	8f 36       	cpi	r24, 0x6F	; 111
    4162:	c1 f0       	breq	.+48     	; 0x4194 <vfprintf+0x26c>
    4164:	18 f4       	brcc	.+6      	; 0x416c <vfprintf+0x244>
    4166:	88 35       	cpi	r24, 0x58	; 88
    4168:	79 f0       	breq	.+30     	; 0x4188 <vfprintf+0x260>
    416a:	b5 c0       	rjmp	.+362    	; 0x42d6 <vfprintf+0x3ae>
    416c:	80 37       	cpi	r24, 0x70	; 112
    416e:	19 f0       	breq	.+6      	; 0x4176 <vfprintf+0x24e>
    4170:	88 37       	cpi	r24, 0x78	; 120
    4172:	21 f0       	breq	.+8      	; 0x417c <vfprintf+0x254>
    4174:	b0 c0       	rjmp	.+352    	; 0x42d6 <vfprintf+0x3ae>
    4176:	e9 2f       	mov	r30, r25
    4178:	e0 61       	ori	r30, 0x10	; 16
    417a:	be 2e       	mov	r11, r30
    417c:	b4 fe       	sbrs	r11, 4
    417e:	0d c0       	rjmp	.+26     	; 0x419a <vfprintf+0x272>
    4180:	fb 2d       	mov	r31, r11
    4182:	f4 60       	ori	r31, 0x04	; 4
    4184:	bf 2e       	mov	r11, r31
    4186:	09 c0       	rjmp	.+18     	; 0x419a <vfprintf+0x272>
    4188:	34 fe       	sbrs	r3, 4
    418a:	0a c0       	rjmp	.+20     	; 0x41a0 <vfprintf+0x278>
    418c:	29 2f       	mov	r18, r25
    418e:	26 60       	ori	r18, 0x06	; 6
    4190:	b2 2e       	mov	r11, r18
    4192:	06 c0       	rjmp	.+12     	; 0x41a0 <vfprintf+0x278>
    4194:	28 e0       	ldi	r18, 0x08	; 8
    4196:	30 e0       	ldi	r19, 0x00	; 0
    4198:	05 c0       	rjmp	.+10     	; 0x41a4 <vfprintf+0x27c>
    419a:	20 e1       	ldi	r18, 0x10	; 16
    419c:	30 e0       	ldi	r19, 0x00	; 0
    419e:	02 c0       	rjmp	.+4      	; 0x41a4 <vfprintf+0x27c>
    41a0:	20 e1       	ldi	r18, 0x10	; 16
    41a2:	32 e0       	ldi	r19, 0x02	; 2
    41a4:	f8 01       	movw	r30, r16
    41a6:	b7 fe       	sbrs	r11, 7
    41a8:	07 c0       	rjmp	.+14     	; 0x41b8 <vfprintf+0x290>
    41aa:	60 81       	ld	r22, Z
    41ac:	71 81       	ldd	r23, Z+1	; 0x01
    41ae:	82 81       	ldd	r24, Z+2	; 0x02
    41b0:	93 81       	ldd	r25, Z+3	; 0x03
    41b2:	0c 5f       	subi	r16, 0xFC	; 252
    41b4:	1f 4f       	sbci	r17, 0xFF	; 255
    41b6:	06 c0       	rjmp	.+12     	; 0x41c4 <vfprintf+0x29c>
    41b8:	60 81       	ld	r22, Z
    41ba:	71 81       	ldd	r23, Z+1	; 0x01
    41bc:	80 e0       	ldi	r24, 0x00	; 0
    41be:	90 e0       	ldi	r25, 0x00	; 0
    41c0:	0e 5f       	subi	r16, 0xFE	; 254
    41c2:	1f 4f       	sbci	r17, 0xFF	; 255
    41c4:	a3 01       	movw	r20, r6
    41c6:	0e 94 c7 21 	call	0x438e	; 0x438e <__ultoa_invert>
    41ca:	88 2e       	mov	r8, r24
    41cc:	86 18       	sub	r8, r6
    41ce:	fb 2d       	mov	r31, r11
    41d0:	ff 77       	andi	r31, 0x7F	; 127
    41d2:	3f 2e       	mov	r3, r31
    41d4:	36 fe       	sbrs	r3, 6
    41d6:	0d c0       	rjmp	.+26     	; 0x41f2 <vfprintf+0x2ca>
    41d8:	23 2d       	mov	r18, r3
    41da:	2e 7f       	andi	r18, 0xFE	; 254
    41dc:	a2 2e       	mov	r10, r18
    41de:	89 14       	cp	r8, r9
    41e0:	58 f4       	brcc	.+22     	; 0x41f8 <vfprintf+0x2d0>
    41e2:	34 fe       	sbrs	r3, 4
    41e4:	0b c0       	rjmp	.+22     	; 0x41fc <vfprintf+0x2d4>
    41e6:	32 fc       	sbrc	r3, 2
    41e8:	09 c0       	rjmp	.+18     	; 0x41fc <vfprintf+0x2d4>
    41ea:	83 2d       	mov	r24, r3
    41ec:	8e 7e       	andi	r24, 0xEE	; 238
    41ee:	a8 2e       	mov	r10, r24
    41f0:	05 c0       	rjmp	.+10     	; 0x41fc <vfprintf+0x2d4>
    41f2:	b8 2c       	mov	r11, r8
    41f4:	a3 2c       	mov	r10, r3
    41f6:	03 c0       	rjmp	.+6      	; 0x41fe <vfprintf+0x2d6>
    41f8:	b8 2c       	mov	r11, r8
    41fa:	01 c0       	rjmp	.+2      	; 0x41fe <vfprintf+0x2d6>
    41fc:	b9 2c       	mov	r11, r9
    41fe:	a4 fe       	sbrs	r10, 4
    4200:	0f c0       	rjmp	.+30     	; 0x4220 <vfprintf+0x2f8>
    4202:	fe 01       	movw	r30, r28
    4204:	e8 0d       	add	r30, r8
    4206:	f1 1d       	adc	r31, r1
    4208:	80 81       	ld	r24, Z
    420a:	80 33       	cpi	r24, 0x30	; 48
    420c:	21 f4       	brne	.+8      	; 0x4216 <vfprintf+0x2ee>
    420e:	9a 2d       	mov	r25, r10
    4210:	99 7e       	andi	r25, 0xE9	; 233
    4212:	a9 2e       	mov	r10, r25
    4214:	09 c0       	rjmp	.+18     	; 0x4228 <vfprintf+0x300>
    4216:	a2 fe       	sbrs	r10, 2
    4218:	06 c0       	rjmp	.+12     	; 0x4226 <vfprintf+0x2fe>
    421a:	b3 94       	inc	r11
    421c:	b3 94       	inc	r11
    421e:	04 c0       	rjmp	.+8      	; 0x4228 <vfprintf+0x300>
    4220:	8a 2d       	mov	r24, r10
    4222:	86 78       	andi	r24, 0x86	; 134
    4224:	09 f0       	breq	.+2      	; 0x4228 <vfprintf+0x300>
    4226:	b3 94       	inc	r11
    4228:	a3 fc       	sbrc	r10, 3
    422a:	11 c0       	rjmp	.+34     	; 0x424e <vfprintf+0x326>
    422c:	a0 fe       	sbrs	r10, 0
    422e:	06 c0       	rjmp	.+12     	; 0x423c <vfprintf+0x314>
    4230:	b2 14       	cp	r11, r2
    4232:	88 f4       	brcc	.+34     	; 0x4256 <vfprintf+0x32e>
    4234:	28 0c       	add	r2, r8
    4236:	92 2c       	mov	r9, r2
    4238:	9b 18       	sub	r9, r11
    423a:	0e c0       	rjmp	.+28     	; 0x4258 <vfprintf+0x330>
    423c:	b2 14       	cp	r11, r2
    423e:	60 f4       	brcc	.+24     	; 0x4258 <vfprintf+0x330>
    4240:	b6 01       	movw	r22, r12
    4242:	80 e2       	ldi	r24, 0x20	; 32
    4244:	90 e0       	ldi	r25, 0x00	; 0
    4246:	0e 94 8b 21 	call	0x4316	; 0x4316 <fputc>
    424a:	b3 94       	inc	r11
    424c:	f7 cf       	rjmp	.-18     	; 0x423c <vfprintf+0x314>
    424e:	b2 14       	cp	r11, r2
    4250:	18 f4       	brcc	.+6      	; 0x4258 <vfprintf+0x330>
    4252:	2b 18       	sub	r2, r11
    4254:	02 c0       	rjmp	.+4      	; 0x425a <vfprintf+0x332>
    4256:	98 2c       	mov	r9, r8
    4258:	21 2c       	mov	r2, r1
    425a:	a4 fe       	sbrs	r10, 4
    425c:	10 c0       	rjmp	.+32     	; 0x427e <vfprintf+0x356>
    425e:	b6 01       	movw	r22, r12
    4260:	80 e3       	ldi	r24, 0x30	; 48
    4262:	90 e0       	ldi	r25, 0x00	; 0
    4264:	0e 94 8b 21 	call	0x4316	; 0x4316 <fputc>
    4268:	a2 fe       	sbrs	r10, 2
    426a:	17 c0       	rjmp	.+46     	; 0x429a <vfprintf+0x372>
    426c:	a1 fc       	sbrc	r10, 1
    426e:	03 c0       	rjmp	.+6      	; 0x4276 <vfprintf+0x34e>
    4270:	88 e7       	ldi	r24, 0x78	; 120
    4272:	90 e0       	ldi	r25, 0x00	; 0
    4274:	02 c0       	rjmp	.+4      	; 0x427a <vfprintf+0x352>
    4276:	88 e5       	ldi	r24, 0x58	; 88
    4278:	90 e0       	ldi	r25, 0x00	; 0
    427a:	b6 01       	movw	r22, r12
    427c:	0c c0       	rjmp	.+24     	; 0x4296 <vfprintf+0x36e>
    427e:	8a 2d       	mov	r24, r10
    4280:	86 78       	andi	r24, 0x86	; 134
    4282:	59 f0       	breq	.+22     	; 0x429a <vfprintf+0x372>
    4284:	a1 fe       	sbrs	r10, 1
    4286:	02 c0       	rjmp	.+4      	; 0x428c <vfprintf+0x364>
    4288:	8b e2       	ldi	r24, 0x2B	; 43
    428a:	01 c0       	rjmp	.+2      	; 0x428e <vfprintf+0x366>
    428c:	80 e2       	ldi	r24, 0x20	; 32
    428e:	a7 fc       	sbrc	r10, 7
    4290:	8d e2       	ldi	r24, 0x2D	; 45
    4292:	b6 01       	movw	r22, r12
    4294:	90 e0       	ldi	r25, 0x00	; 0
    4296:	0e 94 8b 21 	call	0x4316	; 0x4316 <fputc>
    429a:	89 14       	cp	r8, r9
    429c:	38 f4       	brcc	.+14     	; 0x42ac <vfprintf+0x384>
    429e:	b6 01       	movw	r22, r12
    42a0:	80 e3       	ldi	r24, 0x30	; 48
    42a2:	90 e0       	ldi	r25, 0x00	; 0
    42a4:	0e 94 8b 21 	call	0x4316	; 0x4316 <fputc>
    42a8:	9a 94       	dec	r9
    42aa:	f7 cf       	rjmp	.-18     	; 0x429a <vfprintf+0x372>
    42ac:	8a 94       	dec	r8
    42ae:	f3 01       	movw	r30, r6
    42b0:	e8 0d       	add	r30, r8
    42b2:	f1 1d       	adc	r31, r1
    42b4:	80 81       	ld	r24, Z
    42b6:	b6 01       	movw	r22, r12
    42b8:	90 e0       	ldi	r25, 0x00	; 0
    42ba:	0e 94 8b 21 	call	0x4316	; 0x4316 <fputc>
    42be:	81 10       	cpse	r8, r1
    42c0:	f5 cf       	rjmp	.-22     	; 0x42ac <vfprintf+0x384>
    42c2:	22 20       	and	r2, r2
    42c4:	09 f4       	brne	.+2      	; 0x42c8 <vfprintf+0x3a0>
    42c6:	42 ce       	rjmp	.-892    	; 0x3f4c <vfprintf+0x24>
    42c8:	b6 01       	movw	r22, r12
    42ca:	80 e2       	ldi	r24, 0x20	; 32
    42cc:	90 e0       	ldi	r25, 0x00	; 0
    42ce:	0e 94 8b 21 	call	0x4316	; 0x4316 <fputc>
    42d2:	2a 94       	dec	r2
    42d4:	f6 cf       	rjmp	.-20     	; 0x42c2 <vfprintf+0x39a>
    42d6:	f6 01       	movw	r30, r12
    42d8:	86 81       	ldd	r24, Z+6	; 0x06
    42da:	97 81       	ldd	r25, Z+7	; 0x07
    42dc:	02 c0       	rjmp	.+4      	; 0x42e2 <vfprintf+0x3ba>
    42de:	8f ef       	ldi	r24, 0xFF	; 255
    42e0:	9f ef       	ldi	r25, 0xFF	; 255
    42e2:	2b 96       	adiw	r28, 0x0b	; 11
    42e4:	e2 e1       	ldi	r30, 0x12	; 18
    42e6:	0c 94 57 22 	jmp	0x44ae	; 0x44ae <__epilogue_restores__>

000042ea <strnlen_P>:
    42ea:	fc 01       	movw	r30, r24
    42ec:	05 90       	lpm	r0, Z+
    42ee:	61 50       	subi	r22, 0x01	; 1
    42f0:	70 40       	sbci	r23, 0x00	; 0
    42f2:	01 10       	cpse	r0, r1
    42f4:	d8 f7       	brcc	.-10     	; 0x42ec <strnlen_P+0x2>
    42f6:	80 95       	com	r24
    42f8:	90 95       	com	r25
    42fa:	8e 0f       	add	r24, r30
    42fc:	9f 1f       	adc	r25, r31
    42fe:	08 95       	ret

00004300 <strnlen>:
    4300:	fc 01       	movw	r30, r24
    4302:	61 50       	subi	r22, 0x01	; 1
    4304:	70 40       	sbci	r23, 0x00	; 0
    4306:	01 90       	ld	r0, Z+
    4308:	01 10       	cpse	r0, r1
    430a:	d8 f7       	brcc	.-10     	; 0x4302 <strnlen+0x2>
    430c:	80 95       	com	r24
    430e:	90 95       	com	r25
    4310:	8e 0f       	add	r24, r30
    4312:	9f 1f       	adc	r25, r31
    4314:	08 95       	ret

00004316 <fputc>:
    4316:	0f 93       	push	r16
    4318:	1f 93       	push	r17
    431a:	cf 93       	push	r28
    431c:	df 93       	push	r29
    431e:	fb 01       	movw	r30, r22
    4320:	23 81       	ldd	r18, Z+3	; 0x03
    4322:	21 fd       	sbrc	r18, 1
    4324:	03 c0       	rjmp	.+6      	; 0x432c <fputc+0x16>
    4326:	8f ef       	ldi	r24, 0xFF	; 255
    4328:	9f ef       	ldi	r25, 0xFF	; 255
    432a:	2c c0       	rjmp	.+88     	; 0x4384 <fputc+0x6e>
    432c:	22 ff       	sbrs	r18, 2
    432e:	16 c0       	rjmp	.+44     	; 0x435c <fputc+0x46>
    4330:	46 81       	ldd	r20, Z+6	; 0x06
    4332:	57 81       	ldd	r21, Z+7	; 0x07
    4334:	24 81       	ldd	r18, Z+4	; 0x04
    4336:	35 81       	ldd	r19, Z+5	; 0x05
    4338:	42 17       	cp	r20, r18
    433a:	53 07       	cpc	r21, r19
    433c:	44 f4       	brge	.+16     	; 0x434e <fputc+0x38>
    433e:	a0 81       	ld	r26, Z
    4340:	b1 81       	ldd	r27, Z+1	; 0x01
    4342:	9d 01       	movw	r18, r26
    4344:	2f 5f       	subi	r18, 0xFF	; 255
    4346:	3f 4f       	sbci	r19, 0xFF	; 255
    4348:	31 83       	std	Z+1, r19	; 0x01
    434a:	20 83       	st	Z, r18
    434c:	8c 93       	st	X, r24
    434e:	26 81       	ldd	r18, Z+6	; 0x06
    4350:	37 81       	ldd	r19, Z+7	; 0x07
    4352:	2f 5f       	subi	r18, 0xFF	; 255
    4354:	3f 4f       	sbci	r19, 0xFF	; 255
    4356:	37 83       	std	Z+7, r19	; 0x07
    4358:	26 83       	std	Z+6, r18	; 0x06
    435a:	14 c0       	rjmp	.+40     	; 0x4384 <fputc+0x6e>
    435c:	8b 01       	movw	r16, r22
    435e:	ec 01       	movw	r28, r24
    4360:	fb 01       	movw	r30, r22
    4362:	00 84       	ldd	r0, Z+8	; 0x08
    4364:	f1 85       	ldd	r31, Z+9	; 0x09
    4366:	e0 2d       	mov	r30, r0
    4368:	09 95       	icall
    436a:	89 2b       	or	r24, r25
    436c:	e1 f6       	brne	.-72     	; 0x4326 <fputc+0x10>
    436e:	d8 01       	movw	r26, r16
    4370:	16 96       	adiw	r26, 0x06	; 6
    4372:	8d 91       	ld	r24, X+
    4374:	9c 91       	ld	r25, X
    4376:	17 97       	sbiw	r26, 0x07	; 7
    4378:	01 96       	adiw	r24, 0x01	; 1
    437a:	17 96       	adiw	r26, 0x07	; 7
    437c:	9c 93       	st	X, r25
    437e:	8e 93       	st	-X, r24
    4380:	16 97       	sbiw	r26, 0x06	; 6
    4382:	ce 01       	movw	r24, r28
    4384:	df 91       	pop	r29
    4386:	cf 91       	pop	r28
    4388:	1f 91       	pop	r17
    438a:	0f 91       	pop	r16
    438c:	08 95       	ret

0000438e <__ultoa_invert>:
    438e:	fa 01       	movw	r30, r20
    4390:	aa 27       	eor	r26, r26
    4392:	28 30       	cpi	r18, 0x08	; 8
    4394:	51 f1       	breq	.+84     	; 0x43ea <__ultoa_invert+0x5c>
    4396:	20 31       	cpi	r18, 0x10	; 16
    4398:	81 f1       	breq	.+96     	; 0x43fa <__ultoa_invert+0x6c>
    439a:	e8 94       	clt
    439c:	6f 93       	push	r22
    439e:	6e 7f       	andi	r22, 0xFE	; 254
    43a0:	6e 5f       	subi	r22, 0xFE	; 254
    43a2:	7f 4f       	sbci	r23, 0xFF	; 255
    43a4:	8f 4f       	sbci	r24, 0xFF	; 255
    43a6:	9f 4f       	sbci	r25, 0xFF	; 255
    43a8:	af 4f       	sbci	r26, 0xFF	; 255
    43aa:	b1 e0       	ldi	r27, 0x01	; 1
    43ac:	3e d0       	rcall	.+124    	; 0x442a <__ultoa_invert+0x9c>
    43ae:	b4 e0       	ldi	r27, 0x04	; 4
    43b0:	3c d0       	rcall	.+120    	; 0x442a <__ultoa_invert+0x9c>
    43b2:	67 0f       	add	r22, r23
    43b4:	78 1f       	adc	r23, r24
    43b6:	89 1f       	adc	r24, r25
    43b8:	9a 1f       	adc	r25, r26
    43ba:	a1 1d       	adc	r26, r1
    43bc:	68 0f       	add	r22, r24
    43be:	79 1f       	adc	r23, r25
    43c0:	8a 1f       	adc	r24, r26
    43c2:	91 1d       	adc	r25, r1
    43c4:	a1 1d       	adc	r26, r1
    43c6:	6a 0f       	add	r22, r26
    43c8:	71 1d       	adc	r23, r1
    43ca:	81 1d       	adc	r24, r1
    43cc:	91 1d       	adc	r25, r1
    43ce:	a1 1d       	adc	r26, r1
    43d0:	20 d0       	rcall	.+64     	; 0x4412 <__ultoa_invert+0x84>
    43d2:	09 f4       	brne	.+2      	; 0x43d6 <__ultoa_invert+0x48>
    43d4:	68 94       	set
    43d6:	3f 91       	pop	r19
    43d8:	2a e0       	ldi	r18, 0x0A	; 10
    43da:	26 9f       	mul	r18, r22
    43dc:	11 24       	eor	r1, r1
    43de:	30 19       	sub	r19, r0
    43e0:	30 5d       	subi	r19, 0xD0	; 208
    43e2:	31 93       	st	Z+, r19
    43e4:	de f6       	brtc	.-74     	; 0x439c <__ultoa_invert+0xe>
    43e6:	cf 01       	movw	r24, r30
    43e8:	08 95       	ret
    43ea:	46 2f       	mov	r20, r22
    43ec:	47 70       	andi	r20, 0x07	; 7
    43ee:	40 5d       	subi	r20, 0xD0	; 208
    43f0:	41 93       	st	Z+, r20
    43f2:	b3 e0       	ldi	r27, 0x03	; 3
    43f4:	0f d0       	rcall	.+30     	; 0x4414 <__ultoa_invert+0x86>
    43f6:	c9 f7       	brne	.-14     	; 0x43ea <__ultoa_invert+0x5c>
    43f8:	f6 cf       	rjmp	.-20     	; 0x43e6 <__ultoa_invert+0x58>
    43fa:	46 2f       	mov	r20, r22
    43fc:	4f 70       	andi	r20, 0x0F	; 15
    43fe:	40 5d       	subi	r20, 0xD0	; 208
    4400:	4a 33       	cpi	r20, 0x3A	; 58
    4402:	18 f0       	brcs	.+6      	; 0x440a <__ultoa_invert+0x7c>
    4404:	49 5d       	subi	r20, 0xD9	; 217
    4406:	31 fd       	sbrc	r19, 1
    4408:	40 52       	subi	r20, 0x20	; 32
    440a:	41 93       	st	Z+, r20
    440c:	02 d0       	rcall	.+4      	; 0x4412 <__ultoa_invert+0x84>
    440e:	a9 f7       	brne	.-22     	; 0x43fa <__ultoa_invert+0x6c>
    4410:	ea cf       	rjmp	.-44     	; 0x43e6 <__ultoa_invert+0x58>
    4412:	b4 e0       	ldi	r27, 0x04	; 4
    4414:	a6 95       	lsr	r26
    4416:	97 95       	ror	r25
    4418:	87 95       	ror	r24
    441a:	77 95       	ror	r23
    441c:	67 95       	ror	r22
    441e:	ba 95       	dec	r27
    4420:	c9 f7       	brne	.-14     	; 0x4414 <__ultoa_invert+0x86>
    4422:	00 97       	sbiw	r24, 0x00	; 0
    4424:	61 05       	cpc	r22, r1
    4426:	71 05       	cpc	r23, r1
    4428:	08 95       	ret
    442a:	9b 01       	movw	r18, r22
    442c:	ac 01       	movw	r20, r24
    442e:	0a 2e       	mov	r0, r26
    4430:	06 94       	lsr	r0
    4432:	57 95       	ror	r21
    4434:	47 95       	ror	r20
    4436:	37 95       	ror	r19
    4438:	27 95       	ror	r18
    443a:	ba 95       	dec	r27
    443c:	c9 f7       	brne	.-14     	; 0x4430 <__ultoa_invert+0xa2>
    443e:	62 0f       	add	r22, r18
    4440:	73 1f       	adc	r23, r19
    4442:	84 1f       	adc	r24, r20
    4444:	95 1f       	adc	r25, r21
    4446:	a0 1d       	adc	r26, r0
    4448:	08 95       	ret

0000444a <eeprom_read_byte>:
    444a:	f9 99       	sbic	0x1f, 1	; 31
    444c:	fe cf       	rjmp	.-4      	; 0x444a <eeprom_read_byte>
    444e:	92 bd       	out	0x22, r25	; 34
    4450:	81 bd       	out	0x21, r24	; 33
    4452:	f8 9a       	sbi	0x1f, 0	; 31
    4454:	99 27       	eor	r25, r25
    4456:	80 b5       	in	r24, 0x20	; 32
    4458:	08 95       	ret

0000445a <eeprom_write_byte>:
    445a:	26 2f       	mov	r18, r22

0000445c <eeprom_write_r18>:
    445c:	f9 99       	sbic	0x1f, 1	; 31
    445e:	fe cf       	rjmp	.-4      	; 0x445c <eeprom_write_r18>
    4460:	1f ba       	out	0x1f, r1	; 31
    4462:	92 bd       	out	0x22, r25	; 34
    4464:	81 bd       	out	0x21, r24	; 33
    4466:	20 bd       	out	0x20, r18	; 32
    4468:	0f b6       	in	r0, 0x3f	; 63
    446a:	f8 94       	cli
    446c:	fa 9a       	sbi	0x1f, 2	; 31
    446e:	f9 9a       	sbi	0x1f, 1	; 31
    4470:	0f be       	out	0x3f, r0	; 63
    4472:	01 96       	adiw	r24, 0x01	; 1
    4474:	08 95       	ret

00004476 <__prologue_saves__>:
    4476:	2f 92       	push	r2
    4478:	3f 92       	push	r3
    447a:	4f 92       	push	r4
    447c:	5f 92       	push	r5
    447e:	6f 92       	push	r6
    4480:	7f 92       	push	r7
    4482:	8f 92       	push	r8
    4484:	9f 92       	push	r9
    4486:	af 92       	push	r10
    4488:	bf 92       	push	r11
    448a:	cf 92       	push	r12
    448c:	df 92       	push	r13
    448e:	ef 92       	push	r14
    4490:	ff 92       	push	r15
    4492:	0f 93       	push	r16
    4494:	1f 93       	push	r17
    4496:	cf 93       	push	r28
    4498:	df 93       	push	r29
    449a:	cd b7       	in	r28, 0x3d	; 61
    449c:	de b7       	in	r29, 0x3e	; 62
    449e:	ca 1b       	sub	r28, r26
    44a0:	db 0b       	sbc	r29, r27
    44a2:	0f b6       	in	r0, 0x3f	; 63
    44a4:	f8 94       	cli
    44a6:	de bf       	out	0x3e, r29	; 62
    44a8:	0f be       	out	0x3f, r0	; 63
    44aa:	cd bf       	out	0x3d, r28	; 61
    44ac:	09 94       	ijmp

000044ae <__epilogue_restores__>:
    44ae:	2a 88       	ldd	r2, Y+18	; 0x12
    44b0:	39 88       	ldd	r3, Y+17	; 0x11
    44b2:	48 88       	ldd	r4, Y+16	; 0x10
    44b4:	5f 84       	ldd	r5, Y+15	; 0x0f
    44b6:	6e 84       	ldd	r6, Y+14	; 0x0e
    44b8:	7d 84       	ldd	r7, Y+13	; 0x0d
    44ba:	8c 84       	ldd	r8, Y+12	; 0x0c
    44bc:	9b 84       	ldd	r9, Y+11	; 0x0b
    44be:	aa 84       	ldd	r10, Y+10	; 0x0a
    44c0:	b9 84       	ldd	r11, Y+9	; 0x09
    44c2:	c8 84       	ldd	r12, Y+8	; 0x08
    44c4:	df 80       	ldd	r13, Y+7	; 0x07
    44c6:	ee 80       	ldd	r14, Y+6	; 0x06
    44c8:	fd 80       	ldd	r15, Y+5	; 0x05
    44ca:	0c 81       	ldd	r16, Y+4	; 0x04
    44cc:	1b 81       	ldd	r17, Y+3	; 0x03
    44ce:	aa 81       	ldd	r26, Y+2	; 0x02
    44d0:	b9 81       	ldd	r27, Y+1	; 0x01
    44d2:	ce 0f       	add	r28, r30
    44d4:	d1 1d       	adc	r29, r1
    44d6:	0f b6       	in	r0, 0x3f	; 63
    44d8:	f8 94       	cli
    44da:	de bf       	out	0x3e, r29	; 62
    44dc:	0f be       	out	0x3f, r0	; 63
    44de:	cd bf       	out	0x3d, r28	; 61
    44e0:	ed 01       	movw	r28, r26
    44e2:	08 95       	ret

000044e4 <_exit>:
    44e4:	f8 94       	cli

000044e6 <__stop_program>:
    44e6:	ff cf       	rjmp	.-2      	; 0x44e6 <__stop_program>
